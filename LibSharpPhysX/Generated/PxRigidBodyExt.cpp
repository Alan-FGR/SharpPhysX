// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
ES PxRigidBodyExtPtr Newer_physx_PxRigidBodyExtPtr(){
    return new std::remove_pointer<PxRigidBodyExtPtr>::type();
}

ES void Freer_physx_PxRigidBodyExtPtr(PxRigidBodyExtPtr ptr){
    delete ptr;
}

ES bool bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_uint_physx_PxVec3Ptr_bool_(PxRigidBodyPtr wrp_body, float* wrp_shapeDensities, unsigned int wrp_shapeDensityCount, PxVec3Ptr wrp_massLocalPose, bool wrp_includeNonSimShapes){
    return (bool) physx::PxRigidBodyExt::updateMassAndInertia(*wrp_body, wrp_shapeDensities, wrp_shapeDensityCount, wrp_massLocalPose, wrp_includeNonSimShapes);
}

ES bool bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_uint_physx_PxVec3Ptr_(PxRigidBodyPtr wrp_body, float* wrp_shapeDensities, unsigned int wrp_shapeDensityCount, PxVec3Ptr wrp_massLocalPose){
    return (bool) physx::PxRigidBodyExt::updateMassAndInertia(*wrp_body, wrp_shapeDensities, wrp_shapeDensityCount, wrp_massLocalPose);
}

ES bool bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_uint_(PxRigidBodyPtr wrp_body, float* wrp_shapeDensities, unsigned int wrp_shapeDensityCount){
    return (bool) physx::PxRigidBodyExt::updateMassAndInertia(*wrp_body, wrp_shapeDensities, wrp_shapeDensityCount);
}

ES bool bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_physx_PxVec3Ptr_bool_(PxRigidBodyPtr wrp_body, float wrp_density, PxVec3Ptr wrp_massLocalPose, bool wrp_includeNonSimShapes){
    return (bool) physx::PxRigidBodyExt::updateMassAndInertia(*wrp_body, wrp_density, wrp_massLocalPose, wrp_includeNonSimShapes);
}

ES bool bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_physx_PxVec3Ptr_(PxRigidBodyPtr wrp_body, float wrp_density, PxVec3Ptr wrp_massLocalPose){
    return (bool) physx::PxRigidBodyExt::updateMassAndInertia(*wrp_body, wrp_density, wrp_massLocalPose);
}

ES bool bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_(PxRigidBodyPtr wrp_body, float wrp_density){
    return (bool) physx::PxRigidBodyExt::updateMassAndInertia(*wrp_body, wrp_density);
}

ES bool bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_uint_physx_PxVec3Ptr_bool_(PxRigidBodyPtr wrp_body, float* wrp_shapeMasses, unsigned int wrp_shapeMassCount, PxVec3Ptr wrp_massLocalPose, bool wrp_includeNonSimShapes){
    return (bool) physx::PxRigidBodyExt::setMassAndUpdateInertia(*wrp_body, wrp_shapeMasses, wrp_shapeMassCount, wrp_massLocalPose, wrp_includeNonSimShapes);
}

ES bool bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_uint_physx_PxVec3Ptr_(PxRigidBodyPtr wrp_body, float* wrp_shapeMasses, unsigned int wrp_shapeMassCount, PxVec3Ptr wrp_massLocalPose){
    return (bool) physx::PxRigidBodyExt::setMassAndUpdateInertia(*wrp_body, wrp_shapeMasses, wrp_shapeMassCount, wrp_massLocalPose);
}

ES bool bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_uint_(PxRigidBodyPtr wrp_body, float* wrp_shapeMasses, unsigned int wrp_shapeMassCount){
    return (bool) physx::PxRigidBodyExt::setMassAndUpdateInertia(*wrp_body, wrp_shapeMasses, wrp_shapeMassCount);
}

ES bool bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_physx_PxVec3Ptr_bool_(PxRigidBodyPtr wrp_body, float wrp_mass, PxVec3Ptr wrp_massLocalPose, bool wrp_includeNonSimShapes){
    return (bool) physx::PxRigidBodyExt::setMassAndUpdateInertia(*wrp_body, wrp_mass, wrp_massLocalPose, wrp_includeNonSimShapes);
}

ES bool bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_physx_PxVec3Ptr_(PxRigidBodyPtr wrp_body, float wrp_mass, PxVec3Ptr wrp_massLocalPose){
    return (bool) physx::PxRigidBodyExt::setMassAndUpdateInertia(*wrp_body, wrp_mass, wrp_massLocalPose);
}

ES bool bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_(PxRigidBodyPtr wrp_body, float wrp_mass){
    return (bool) physx::PxRigidBodyExt::setMassAndUpdateInertia(*wrp_body, wrp_mass);
}

ES PxMassPropertiesPtr physx_PxMassPropertiesPtr_physx_PxRigidBodyExt_computeMassPropertiesFromShapes_physx_PxShapePtr_uint_(const PxShapePtr* wrp_shapes, unsigned int wrp_shapeCount){
    auto ret = physx::PxRigidBodyExt::computeMassPropertiesFromShapes(wrp_shapes, wrp_shapeCount);
    auto heap = new char[sizeof PxMassProperties];
    std::memcpy(heap, &ret, sizeof PxMassProperties);
    return (PxMassPropertiesPtr) heap;
}

ES void void_physx_PxRigidBodyExt_addForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxForceModeEnum_bool_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_force, PxVec3Ptr wrp_pos, physx::PxForceMode::Enum wrp_mode, bool wrp_wakeup){
    physx::PxRigidBodyExt::addForceAtPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode, wrp_wakeup);
}

ES void void_physx_PxRigidBodyExt_addForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxForceModeEnum_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_force, PxVec3Ptr wrp_pos, physx::PxForceMode::Enum wrp_mode){
    physx::PxRigidBodyExt::addForceAtPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode);
}

ES void void_physx_PxRigidBodyExt_addForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_force, PxVec3Ptr wrp_pos){
    physx::PxRigidBodyExt::addForceAtPos(*wrp_body, *wrp_force, *wrp_pos);
}

ES void void_physx_PxRigidBodyExt_addForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxForceModeEnum_bool_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_force, PxVec3Ptr wrp_pos, physx::PxForceMode::Enum wrp_mode, bool wrp_wakeup){
    physx::PxRigidBodyExt::addForceAtLocalPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode, wrp_wakeup);
}

ES void void_physx_PxRigidBodyExt_addForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxForceModeEnum_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_force, PxVec3Ptr wrp_pos, physx::PxForceMode::Enum wrp_mode){
    physx::PxRigidBodyExt::addForceAtLocalPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode);
}

ES void void_physx_PxRigidBodyExt_addForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_force, PxVec3Ptr wrp_pos){
    physx::PxRigidBodyExt::addForceAtLocalPos(*wrp_body, *wrp_force, *wrp_pos);
}

ES void void_physx_PxRigidBodyExt_addLocalForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxForceModeEnum_bool_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_force, PxVec3Ptr wrp_pos, physx::PxForceMode::Enum wrp_mode, bool wrp_wakeup){
    physx::PxRigidBodyExt::addLocalForceAtPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode, wrp_wakeup);
}

ES void void_physx_PxRigidBodyExt_addLocalForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxForceModeEnum_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_force, PxVec3Ptr wrp_pos, physx::PxForceMode::Enum wrp_mode){
    physx::PxRigidBodyExt::addLocalForceAtPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode);
}

ES void void_physx_PxRigidBodyExt_addLocalForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_force, PxVec3Ptr wrp_pos){
    physx::PxRigidBodyExt::addLocalForceAtPos(*wrp_body, *wrp_force, *wrp_pos);
}

ES void void_physx_PxRigidBodyExt_addLocalForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxForceModeEnum_bool_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_force, PxVec3Ptr wrp_pos, physx::PxForceMode::Enum wrp_mode, bool wrp_wakeup){
    physx::PxRigidBodyExt::addLocalForceAtLocalPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode, wrp_wakeup);
}

ES void void_physx_PxRigidBodyExt_addLocalForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxForceModeEnum_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_force, PxVec3Ptr wrp_pos, physx::PxForceMode::Enum wrp_mode){
    physx::PxRigidBodyExt::addLocalForceAtLocalPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode);
}

ES void void_physx_PxRigidBodyExt_addLocalForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_force, PxVec3Ptr wrp_pos){
    physx::PxRigidBodyExt::addLocalForceAtLocalPos(*wrp_body, *wrp_force, *wrp_pos);
}

ES PxVec3Ptr physx_PxVec3Ptr_physx_PxRigidBodyExt_getVelocityAtPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_pos){
    auto ret = physx::PxRigidBodyExt::getVelocityAtPos(*wrp_body, *wrp_pos);
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_physx_PxRigidBodyExt_getLocalVelocityAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3Ptr_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_pos){
    auto ret = physx::PxRigidBodyExt::getLocalVelocityAtLocalPos(*wrp_body, *wrp_pos);
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_physx_PxRigidBodyExt_getVelocityAtOffset_physx_PxRigidBodyPtr_physx_PxVec3Ptr_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_pos){
    auto ret = physx::PxRigidBodyExt::getVelocityAtOffset(*wrp_body, *wrp_pos);
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES bool bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3Ptr_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_float_C_C(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, PxVec3Ptr wrp_unitDir, float wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_closestHit, unsigned int* wrp_shapeIndex, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache, float wrp_inflation){
    return (bool) physx::PxRigidBodyExt::linearSweepSingle(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, *wrp_closestHit, *wrp_shapeIndex, *wrp_filterData, wrp_filterCall, wrp_cache, wrp_inflation);
}

ES bool bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3Ptr_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, PxVec3Ptr wrp_unitDir, float wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_closestHit, unsigned int* wrp_shapeIndex, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache){
    return (bool) physx::PxRigidBodyExt::linearSweepSingle(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, *wrp_closestHit, *wrp_shapeIndex, *wrp_filterData, wrp_filterCall, wrp_cache);
}

ES bool bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3Ptr_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, PxVec3Ptr wrp_unitDir, float wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_closestHit, unsigned int* wrp_shapeIndex, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall){
    return (bool) physx::PxRigidBodyExt::linearSweepSingle(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, *wrp_closestHit, *wrp_shapeIndex, *wrp_filterData, wrp_filterCall);
}

ES bool bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3Ptr_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_physx_PxQueryFilterDataPtr_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, PxVec3Ptr wrp_unitDir, float wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_closestHit, unsigned int* wrp_shapeIndex, PxQueryFilterDataPtr wrp_filterData){
    return (bool) physx::PxRigidBodyExt::linearSweepSingle(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, *wrp_closestHit, *wrp_shapeIndex, *wrp_filterData);
}

ES bool bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3Ptr_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, PxVec3Ptr wrp_unitDir, float wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_closestHit, unsigned int* wrp_shapeIndex){
    return (bool) physx::PxRigidBodyExt::linearSweepSingle(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, *wrp_closestHit, *wrp_shapeIndex);
}

ES unsigned int uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3Ptr_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_float_C_C(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, PxVec3Ptr wrp_unitDir, float wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_touchHitBuffer, unsigned int* wrp_touchHitShapeIndices, unsigned int wrp_touchHitBufferSize, PxSweepHitPtr wrp_block, int* wrp_blockingShapeIndex, bool* wrp_overflow, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache, float wrp_inflation){
    return (unsigned int) physx::PxRigidBodyExt::linearSweepMultiple(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, wrp_touchHitBuffer, wrp_touchHitShapeIndices, wrp_touchHitBufferSize, *wrp_block, *wrp_blockingShapeIndex, *wrp_overflow, *wrp_filterData, wrp_filterCall, wrp_cache, wrp_inflation);
}

ES unsigned int uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3Ptr_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, PxVec3Ptr wrp_unitDir, float wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_touchHitBuffer, unsigned int* wrp_touchHitShapeIndices, unsigned int wrp_touchHitBufferSize, PxSweepHitPtr wrp_block, int* wrp_blockingShapeIndex, bool* wrp_overflow, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache){
    return (unsigned int) physx::PxRigidBodyExt::linearSweepMultiple(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, wrp_touchHitBuffer, wrp_touchHitShapeIndices, wrp_touchHitBufferSize, *wrp_block, *wrp_blockingShapeIndex, *wrp_overflow, *wrp_filterData, wrp_filterCall, wrp_cache);
}

ES unsigned int uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3Ptr_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, PxVec3Ptr wrp_unitDir, float wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_touchHitBuffer, unsigned int* wrp_touchHitShapeIndices, unsigned int wrp_touchHitBufferSize, PxSweepHitPtr wrp_block, int* wrp_blockingShapeIndex, bool* wrp_overflow, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall){
    return (unsigned int) physx::PxRigidBodyExt::linearSweepMultiple(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, wrp_touchHitBuffer, wrp_touchHitShapeIndices, wrp_touchHitBufferSize, *wrp_block, *wrp_blockingShapeIndex, *wrp_overflow, *wrp_filterData, wrp_filterCall);
}

ES unsigned int uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3Ptr_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_physx_PxQueryFilterDataPtr_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, PxVec3Ptr wrp_unitDir, float wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_touchHitBuffer, unsigned int* wrp_touchHitShapeIndices, unsigned int wrp_touchHitBufferSize, PxSweepHitPtr wrp_block, int* wrp_blockingShapeIndex, bool* wrp_overflow, PxQueryFilterDataPtr wrp_filterData){
    return (unsigned int) physx::PxRigidBodyExt::linearSweepMultiple(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, wrp_touchHitBuffer, wrp_touchHitShapeIndices, wrp_touchHitBufferSize, *wrp_block, *wrp_blockingShapeIndex, *wrp_overflow, *wrp_filterData);
}

ES unsigned int uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3Ptr_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, PxVec3Ptr wrp_unitDir, float wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_touchHitBuffer, unsigned int* wrp_touchHitShapeIndices, unsigned int wrp_touchHitBufferSize, PxSweepHitPtr wrp_block, int* wrp_blockingShapeIndex, bool* wrp_overflow){
    return (unsigned int) physx::PxRigidBodyExt::linearSweepMultiple(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, wrp_touchHitBuffer, wrp_touchHitShapeIndices, wrp_touchHitBufferSize, *wrp_block, *wrp_blockingShapeIndex, *wrp_overflow);
}

ES void void_physx_PxRigidBodyExt_computeVelocityDeltaFromImpulse_physx_PxRigidBodyPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxVec3Ptr_(PxRigidBodyPtr wrp_body, PxVec3Ptr wrp_impulsiveForce, PxVec3Ptr wrp_impulsiveTorque, PxVec3Ptr wrp_deltaLinearVelocity, PxVec3Ptr wrp_deltaAngularVelocity){
    physx::PxRigidBodyExt::computeVelocityDeltaFromImpulse(*wrp_body, *wrp_impulsiveForce, *wrp_impulsiveTorque, *wrp_deltaLinearVelocity, *wrp_deltaAngularVelocity);
}

ES void void_physx_PxRigidBodyExt_computeVelocityDeltaFromImpulse_physx_PxRigidBodyPtr_physx_PxTransformPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_float_float_physx_PxVec3Ptr_physx_PxVec3Ptr_CC_(PxRigidBodyPtr wrp_body, PxTransformPtr wrp_globalPose, PxVec3Ptr wrp_point, PxVec3Ptr wrp_impulse, float wrp_invMassScale, float wrp_invInertiaScale, PxVec3Ptr wrp_deltaLinearVelocity, PxVec3Ptr wrp_deltaAngularVelocity){
    physx::PxRigidBodyExt::computeVelocityDeltaFromImpulse(*wrp_body, *wrp_globalPose, *wrp_point, *wrp_impulse, wrp_invMassScale, wrp_invInertiaScale, *wrp_deltaLinearVelocity, *wrp_deltaAngularVelocity);
}

ES void void_physx_PxRigidBodyExt_computeLinearAngularImpulse_physx_PxRigidBodyPtr_physx_PxTransformPtr_physx_PxVec3Ptr_physx_PxVec3Ptr_float_float_physx_PxVec3Ptr_physx_PxVec3Ptr_CC_(PxRigidBodyPtr wrp_body, PxTransformPtr wrp_globalPose, PxVec3Ptr wrp_point, PxVec3Ptr wrp_impulse, float wrp_invMassScale, float wrp_invInertiaScale, PxVec3Ptr wrp_linearImpulse, PxVec3Ptr wrp_angularImpulse){
    physx::PxRigidBodyExt::computeLinearAngularImpulse(*wrp_body, *wrp_globalPose, *wrp_point, *wrp_impulse, wrp_invMassScale, wrp_invInertiaScale, *wrp_linearImpulse, *wrp_angularImpulse);
}
