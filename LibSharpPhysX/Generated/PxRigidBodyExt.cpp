// Generated by minBND 5.1.91.17 - Â© github.com/Alan-FGR

ES bool bool_PxRigidBodyExtPtr_updateMassAndInertiaPtr_PxRigidBodyPtr_float_uint_PxVec3_bool_(PxRigidBodyPtr wrp_body, PxReal* wrp_shapeDensities, PxU32 wrp_shapeDensityCount, physx::PxVec3* wrp_massLocalPose, bool wrp_includeNonSimShapes){
    return (bool) ::physx::PxRigidBodyExt::updateMassAndInertia(*wrp_body, wrp_shapeDensities, wrp_shapeDensityCount, wrp_massLocalPose, wrp_includeNonSimShapes);
}

ES bool bool_PxRigidBodyExtPtr_updateMassAndInertiaPtr_PxRigidBodyPtr_float_PxVec3_bool_(PxRigidBodyPtr wrp_body, PxReal wrp_density, physx::PxVec3* wrp_massLocalPose, bool wrp_includeNonSimShapes){
    return (bool) ::physx::PxRigidBodyExt::updateMassAndInertia(*wrp_body, wrp_density, wrp_massLocalPose, wrp_includeNonSimShapes);
}

ES bool bool_PxRigidBodyExtPtr_setMassAndUpdateInertiaPtr_PxRigidBodyPtr_float_uint_PxVec3_bool_(PxRigidBodyPtr wrp_body, PxReal* wrp_shapeMasses, PxU32 wrp_shapeMassCount, physx::PxVec3* wrp_massLocalPose, bool wrp_includeNonSimShapes){
    return (bool) ::physx::PxRigidBodyExt::setMassAndUpdateInertia(*wrp_body, wrp_shapeMasses, wrp_shapeMassCount, wrp_massLocalPose, wrp_includeNonSimShapes);
}

ES bool bool_PxRigidBodyExtPtr_setMassAndUpdateInertiaPtr_PxRigidBodyPtr_float_PxVec3_bool_(PxRigidBodyPtr wrp_body, PxReal wrp_mass, physx::PxVec3* wrp_massLocalPose, bool wrp_includeNonSimShapes){
    return (bool) ::physx::PxRigidBodyExt::setMassAndUpdateInertia(*wrp_body, wrp_mass, wrp_massLocalPose, wrp_includeNonSimShapes);
}

ES PxMassPropertiesPtr PxMassPropertiesPtr_PxRigidBodyExtPtr_computeMassPropertiesFromShapesPtr_PxShapePtr_uint_(const PxShapePtr* wrp_shapes, PxU32 wrp_shapeCount){
    auto ret = ::physx::PxRigidBodyExt::computeMassPropertiesFromShapes(wrp_shapes, wrp_shapeCount);
    auto heap = new char[sizeof PxMassProperties];
    std::memcpy(heap, &ret, sizeof PxMassProperties);
    return (PxMassPropertiesPtr) heap;
}

ES void void_PxRigidBodyExtPtr_addForceAtPosPtr_PxRigidBodyPtr_PxVec3_PxVec3_PxForceModeEnum_bool_(PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_force, physx::PxVec3* wrp_pos, physx::PxForceMode::Enum wrp_mode, bool wrp_wakeup){
    ::physx::PxRigidBodyExt::addForceAtPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode, wrp_wakeup);
}

ES void void_PxRigidBodyExtPtr_addForceAtLocalPosPtr_PxRigidBodyPtr_PxVec3_PxVec3_PxForceModeEnum_bool_(PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_force, physx::PxVec3* wrp_pos, physx::PxForceMode::Enum wrp_mode, bool wrp_wakeup){
    ::physx::PxRigidBodyExt::addForceAtLocalPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode, wrp_wakeup);
}

ES void void_PxRigidBodyExtPtr_addLocalForceAtPosPtr_PxRigidBodyPtr_PxVec3_PxVec3_PxForceModeEnum_bool_(PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_force, physx::PxVec3* wrp_pos, physx::PxForceMode::Enum wrp_mode, bool wrp_wakeup){
    ::physx::PxRigidBodyExt::addLocalForceAtPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode, wrp_wakeup);
}

ES void void_PxRigidBodyExtPtr_addLocalForceAtLocalPosPtr_PxRigidBodyPtr_PxVec3_PxVec3_PxForceModeEnum_bool_(PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_force, physx::PxVec3* wrp_pos, physx::PxForceMode::Enum wrp_mode, bool wrp_wakeup){
    ::physx::PxRigidBodyExt::addLocalForceAtLocalPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode, wrp_wakeup);
}

ES void PxVec3_PxRigidBodyExtPtr_getVelocityAtPosPtr_PxRigidBodyPtr_PxVec3_(physx::PxVec3* nRetRef, PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_pos){
    *nRetRef = ::physx::PxRigidBodyExt::getVelocityAtPos(*wrp_body, *wrp_pos);
}

ES void PxVec3_PxRigidBodyExtPtr_getLocalVelocityAtLocalPosPtr_PxRigidBodyPtr_PxVec3_(physx::PxVec3* nRetRef, PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_pos){
    *nRetRef = ::physx::PxRigidBodyExt::getLocalVelocityAtLocalPos(*wrp_body, *wrp_pos);
}

ES void PxVec3_PxRigidBodyExtPtr_getVelocityAtOffsetPtr_PxRigidBodyPtr_PxVec3_(physx::PxVec3* nRetRef, PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_pos){
    *nRetRef = ::physx::PxRigidBodyExt::getVelocityAtOffset(*wrp_body, *wrp_pos);
}

ES bool bool_PxRigidBodyExtPtr_linearSweepSinglePtr_PxRigidBodyPtr_PxScenePtr_PxVec3_float_PxHitFlagsPtr_PxSweepHitPtr_uint_PxQueryFilterDataPtr_PxQueryFilterCallbackPtr_PxQueryCachePtr_float_C_C(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_closestHit, PxU32* wrp_shapeIndex, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache, PxReal wrp_inflation){
    return (bool) ::physx::PxRigidBodyExt::linearSweepSingle(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, *wrp_closestHit, *wrp_shapeIndex, *wrp_filterData, wrp_filterCall, wrp_cache, wrp_inflation);
}

ES PxU32 uint_PxRigidBodyExtPtr_linearSweepMultiplePtr_PxRigidBodyPtr_PxScenePtr_PxVec3_float_PxHitFlagsPtr_PxSweepHitPtr_uint_uint_PxSweepHitPtr_int_bool_PxQueryFilterDataPtr_PxQueryFilterCallbackPtr_PxQueryCachePtr_float_C_C(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_touchHitBuffer, PxU32* wrp_touchHitShapeIndices, PxU32 wrp_touchHitBufferSize, PxSweepHitPtr wrp_block, PxI32* wrp_blockingShapeIndex, bool* wrp_overflow, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache, PxReal wrp_inflation){
    return (PxU32) ::physx::PxRigidBodyExt::linearSweepMultiple(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, wrp_touchHitBuffer, wrp_touchHitShapeIndices, wrp_touchHitBufferSize, *wrp_block, *wrp_blockingShapeIndex, *wrp_overflow, *wrp_filterData, wrp_filterCall, wrp_cache, wrp_inflation);
}

ES void void_PxRigidBodyExtPtr_computeVelocityDeltaFromImpulsePtr_PxRigidBodyPtr_PxVec3_PxVec3_PxVec3_PxVec3_(PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_impulsiveForce, physx::PxVec3* wrp_impulsiveTorque, physx::PxVec3* wrp_deltaLinearVelocity, physx::PxVec3* wrp_deltaAngularVelocity){
    ::physx::PxRigidBodyExt::computeVelocityDeltaFromImpulse(*wrp_body, *wrp_impulsiveForce, *wrp_impulsiveTorque, *wrp_deltaLinearVelocity, *wrp_deltaAngularVelocity);
}

ES void void_PxRigidBodyExtPtr_computeVelocityDeltaFromImpulsePtr_PxRigidBodyPtr_PxTransform_PxVec3_PxVec3_float_float_PxVec3_PxVec3_CC_(PxRigidBodyPtr wrp_body, physx::PxTransform* wrp_globalPose, physx::PxVec3* wrp_point, physx::PxVec3* wrp_impulse, PxReal wrp_invMassScale, PxReal wrp_invInertiaScale, physx::PxVec3* wrp_deltaLinearVelocity, physx::PxVec3* wrp_deltaAngularVelocity){
    ::physx::PxRigidBodyExt::computeVelocityDeltaFromImpulse(*wrp_body, *wrp_globalPose, *wrp_point, *wrp_impulse, wrp_invMassScale, wrp_invInertiaScale, *wrp_deltaLinearVelocity, *wrp_deltaAngularVelocity);
}

ES void void_PxRigidBodyExtPtr_computeLinearAngularImpulsePtr_PxRigidBodyPtr_PxTransform_PxVec3_PxVec3_float_float_PxVec3_PxVec3_CC_(PxRigidBodyPtr wrp_body, physx::PxTransform* wrp_globalPose, physx::PxVec3* wrp_point, physx::PxVec3* wrp_impulse, PxReal wrp_invMassScale, PxReal wrp_invInertiaScale, physx::PxVec3* wrp_linearImpulse, physx::PxVec3* wrp_angularImpulse){
    ::physx::PxRigidBodyExt::computeLinearAngularImpulse(*wrp_body, *wrp_globalPose, *wrp_point, *wrp_impulse, wrp_invMassScale, wrp_invInertiaScale, *wrp_linearImpulse, *wrp_angularImpulse);
}

ES bool bool_PxRigidBodyExtPtr_updateMassAndInertiaPtr_PxRigidBodyPtr_float_uint_(PxRigidBodyPtr wrp_body, PxReal* wrp_shapeDensities, PxU32 wrp_shapeDensityCount){
    return (bool) ::physx::PxRigidBodyExt::updateMassAndInertia(*wrp_body, wrp_shapeDensities, wrp_shapeDensityCount);
}

ES bool bool_PxRigidBodyExtPtr_updateMassAndInertiaPtr_PxRigidBodyPtr_float_uint_PxVec3_(PxRigidBodyPtr wrp_body, PxReal* wrp_shapeDensities, PxU32 wrp_shapeDensityCount, physx::PxVec3* wrp_massLocalPose){
    return (bool) ::physx::PxRigidBodyExt::updateMassAndInertia(*wrp_body, wrp_shapeDensities, wrp_shapeDensityCount, wrp_massLocalPose);
}

ES bool bool_PxRigidBodyExtPtr_updateMassAndInertiaPtr_PxRigidBodyPtr_float_(PxRigidBodyPtr wrp_body, PxReal wrp_density){
    return (bool) ::physx::PxRigidBodyExt::updateMassAndInertia(*wrp_body, wrp_density);
}

ES bool bool_PxRigidBodyExtPtr_updateMassAndInertiaPtr_PxRigidBodyPtr_float_PxVec3_(PxRigidBodyPtr wrp_body, PxReal wrp_density, physx::PxVec3* wrp_massLocalPose){
    return (bool) ::physx::PxRigidBodyExt::updateMassAndInertia(*wrp_body, wrp_density, wrp_massLocalPose);
}

ES bool bool_PxRigidBodyExtPtr_setMassAndUpdateInertiaPtr_PxRigidBodyPtr_float_uint_(PxRigidBodyPtr wrp_body, PxReal* wrp_shapeMasses, PxU32 wrp_shapeMassCount){
    return (bool) ::physx::PxRigidBodyExt::setMassAndUpdateInertia(*wrp_body, wrp_shapeMasses, wrp_shapeMassCount);
}

ES bool bool_PxRigidBodyExtPtr_setMassAndUpdateInertiaPtr_PxRigidBodyPtr_float_uint_PxVec3_(PxRigidBodyPtr wrp_body, PxReal* wrp_shapeMasses, PxU32 wrp_shapeMassCount, physx::PxVec3* wrp_massLocalPose){
    return (bool) ::physx::PxRigidBodyExt::setMassAndUpdateInertia(*wrp_body, wrp_shapeMasses, wrp_shapeMassCount, wrp_massLocalPose);
}

ES bool bool_PxRigidBodyExtPtr_setMassAndUpdateInertiaPtr_PxRigidBodyPtr_float_(PxRigidBodyPtr wrp_body, PxReal wrp_mass){
    return (bool) ::physx::PxRigidBodyExt::setMassAndUpdateInertia(*wrp_body, wrp_mass);
}

ES bool bool_PxRigidBodyExtPtr_setMassAndUpdateInertiaPtr_PxRigidBodyPtr_float_PxVec3_(PxRigidBodyPtr wrp_body, PxReal wrp_mass, physx::PxVec3* wrp_massLocalPose){
    return (bool) ::physx::PxRigidBodyExt::setMassAndUpdateInertia(*wrp_body, wrp_mass, wrp_massLocalPose);
}

ES void void_PxRigidBodyExtPtr_addForceAtPosPtr_PxRigidBodyPtr_PxVec3_PxVec3_(PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_force, physx::PxVec3* wrp_pos){
    ::physx::PxRigidBodyExt::addForceAtPos(*wrp_body, *wrp_force, *wrp_pos);
}

ES void void_PxRigidBodyExtPtr_addForceAtPosPtr_PxRigidBodyPtr_PxVec3_PxVec3_PxForceModeEnum_(PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_force, physx::PxVec3* wrp_pos, physx::PxForceMode::Enum wrp_mode){
    ::physx::PxRigidBodyExt::addForceAtPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode);
}

ES void void_PxRigidBodyExtPtr_addForceAtLocalPosPtr_PxRigidBodyPtr_PxVec3_PxVec3_(PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_force, physx::PxVec3* wrp_pos){
    ::physx::PxRigidBodyExt::addForceAtLocalPos(*wrp_body, *wrp_force, *wrp_pos);
}

ES void void_PxRigidBodyExtPtr_addForceAtLocalPosPtr_PxRigidBodyPtr_PxVec3_PxVec3_PxForceModeEnum_(PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_force, physx::PxVec3* wrp_pos, physx::PxForceMode::Enum wrp_mode){
    ::physx::PxRigidBodyExt::addForceAtLocalPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode);
}

ES void void_PxRigidBodyExtPtr_addLocalForceAtPosPtr_PxRigidBodyPtr_PxVec3_PxVec3_(PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_force, physx::PxVec3* wrp_pos){
    ::physx::PxRigidBodyExt::addLocalForceAtPos(*wrp_body, *wrp_force, *wrp_pos);
}

ES void void_PxRigidBodyExtPtr_addLocalForceAtPosPtr_PxRigidBodyPtr_PxVec3_PxVec3_PxForceModeEnum_(PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_force, physx::PxVec3* wrp_pos, physx::PxForceMode::Enum wrp_mode){
    ::physx::PxRigidBodyExt::addLocalForceAtPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode);
}

ES void void_PxRigidBodyExtPtr_addLocalForceAtLocalPosPtr_PxRigidBodyPtr_PxVec3_PxVec3_(PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_force, physx::PxVec3* wrp_pos){
    ::physx::PxRigidBodyExt::addLocalForceAtLocalPos(*wrp_body, *wrp_force, *wrp_pos);
}

ES void void_PxRigidBodyExtPtr_addLocalForceAtLocalPosPtr_PxRigidBodyPtr_PxVec3_PxVec3_PxForceModeEnum_(PxRigidBodyPtr wrp_body, physx::PxVec3* wrp_force, physx::PxVec3* wrp_pos, physx::PxForceMode::Enum wrp_mode){
    ::physx::PxRigidBodyExt::addLocalForceAtLocalPos(*wrp_body, *wrp_force, *wrp_pos, wrp_mode);
}

ES bool bool_PxRigidBodyExtPtr_linearSweepSinglePtr_PxRigidBodyPtr_PxScenePtr_PxVec3_float_PxHitFlagsPtr_PxSweepHitPtr_uint_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_closestHit, PxU32* wrp_shapeIndex){
    return (bool) ::physx::PxRigidBodyExt::linearSweepSingle(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, *wrp_closestHit, *wrp_shapeIndex);
}

ES bool bool_PxRigidBodyExtPtr_linearSweepSinglePtr_PxRigidBodyPtr_PxScenePtr_PxVec3_float_PxHitFlagsPtr_PxSweepHitPtr_uint_PxQueryFilterDataPtr_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_closestHit, PxU32* wrp_shapeIndex, PxQueryFilterDataPtr wrp_filterData){
    return (bool) ::physx::PxRigidBodyExt::linearSweepSingle(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, *wrp_closestHit, *wrp_shapeIndex, *wrp_filterData);
}

ES bool bool_PxRigidBodyExtPtr_linearSweepSinglePtr_PxRigidBodyPtr_PxScenePtr_PxVec3_float_PxHitFlagsPtr_PxSweepHitPtr_uint_PxQueryFilterDataPtr_PxQueryFilterCallbackPtr_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_closestHit, PxU32* wrp_shapeIndex, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall){
    return (bool) ::physx::PxRigidBodyExt::linearSweepSingle(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, *wrp_closestHit, *wrp_shapeIndex, *wrp_filterData, wrp_filterCall);
}

ES bool bool_PxRigidBodyExtPtr_linearSweepSinglePtr_PxRigidBodyPtr_PxScenePtr_PxVec3_float_PxHitFlagsPtr_PxSweepHitPtr_uint_PxQueryFilterDataPtr_PxQueryFilterCallbackPtr_PxQueryCachePtr_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_closestHit, PxU32* wrp_shapeIndex, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache){
    return (bool) ::physx::PxRigidBodyExt::linearSweepSingle(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, *wrp_closestHit, *wrp_shapeIndex, *wrp_filterData, wrp_filterCall, wrp_cache);
}

ES PxU32 uint_PxRigidBodyExtPtr_linearSweepMultiplePtr_PxRigidBodyPtr_PxScenePtr_PxVec3_float_PxHitFlagsPtr_PxSweepHitPtr_uint_uint_PxSweepHitPtr_int_bool_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_touchHitBuffer, PxU32* wrp_touchHitShapeIndices, PxU32 wrp_touchHitBufferSize, PxSweepHitPtr wrp_block, PxI32* wrp_blockingShapeIndex, bool* wrp_overflow){
    return (PxU32) ::physx::PxRigidBodyExt::linearSweepMultiple(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, wrp_touchHitBuffer, wrp_touchHitShapeIndices, wrp_touchHitBufferSize, *wrp_block, *wrp_blockingShapeIndex, *wrp_overflow);
}

ES PxU32 uint_PxRigidBodyExtPtr_linearSweepMultiplePtr_PxRigidBodyPtr_PxScenePtr_PxVec3_float_PxHitFlagsPtr_PxSweepHitPtr_uint_uint_PxSweepHitPtr_int_bool_PxQueryFilterDataPtr_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_touchHitBuffer, PxU32* wrp_touchHitShapeIndices, PxU32 wrp_touchHitBufferSize, PxSweepHitPtr wrp_block, PxI32* wrp_blockingShapeIndex, bool* wrp_overflow, PxQueryFilterDataPtr wrp_filterData){
    return (PxU32) ::physx::PxRigidBodyExt::linearSweepMultiple(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, wrp_touchHitBuffer, wrp_touchHitShapeIndices, wrp_touchHitBufferSize, *wrp_block, *wrp_blockingShapeIndex, *wrp_overflow, *wrp_filterData);
}

ES PxU32 uint_PxRigidBodyExtPtr_linearSweepMultiplePtr_PxRigidBodyPtr_PxScenePtr_PxVec3_float_PxHitFlagsPtr_PxSweepHitPtr_uint_uint_PxSweepHitPtr_int_bool_PxQueryFilterDataPtr_PxQueryFilterCallbackPtr_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_touchHitBuffer, PxU32* wrp_touchHitShapeIndices, PxU32 wrp_touchHitBufferSize, PxSweepHitPtr wrp_block, PxI32* wrp_blockingShapeIndex, bool* wrp_overflow, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall){
    return (PxU32) ::physx::PxRigidBodyExt::linearSweepMultiple(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, wrp_touchHitBuffer, wrp_touchHitShapeIndices, wrp_touchHitBufferSize, *wrp_block, *wrp_blockingShapeIndex, *wrp_overflow, *wrp_filterData, wrp_filterCall);
}

ES PxU32 uint_PxRigidBodyExtPtr_linearSweepMultiplePtr_PxRigidBodyPtr_PxScenePtr_PxVec3_float_PxHitFlagsPtr_PxSweepHitPtr_uint_uint_PxSweepHitPtr_int_bool_PxQueryFilterDataPtr_PxQueryFilterCallbackPtr_PxQueryCachePtr_C_(PxRigidBodyPtr wrp_body, PxScenePtr wrp_scene, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxHitFlagsPtr wrp_outputFlags, PxSweepHitPtr wrp_touchHitBuffer, PxU32* wrp_touchHitShapeIndices, PxU32 wrp_touchHitBufferSize, PxSweepHitPtr wrp_block, PxI32* wrp_blockingShapeIndex, bool* wrp_overflow, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache){
    return (PxU32) ::physx::PxRigidBodyExt::linearSweepMultiple(*wrp_body, *wrp_scene, *wrp_unitDir, wrp_distance, *wrp_outputFlags, wrp_touchHitBuffer, wrp_touchHitShapeIndices, wrp_touchHitBufferSize, *wrp_block, *wrp_blockingShapeIndex, *wrp_overflow, *wrp_filterData, wrp_filterCall, wrp_cache);
}

