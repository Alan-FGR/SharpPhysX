// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
ES void Freer_physx_PxPlanePtr(PxPlanePtr ptr){
    delete ptr;
}

ES PxPlanePtr Ctor_physx_PxPlanePtr_(){
    return (PxPlanePtr) new std::remove_pointer<PxPlanePtr>::type();
}

ES PxPlanePtr Ctor_physx_PxPlanePtr_float_float_float_float(float wrp_nx, float wrp_ny, float wrp_nz, float wrp_distance){
    return (PxPlanePtr) new std::remove_pointer<PxPlanePtr>::type(wrp_nx, wrp_ny, wrp_nz, wrp_distance);
}

ES PxPlanePtr Ctor_physx_PxPlanePtr_physx_PxVec3Ptr_float(PxVec3Ptr wrp_normal, float wrp_distance){
    return (PxPlanePtr) new std::remove_pointer<PxPlanePtr>::type(*wrp_normal, wrp_distance);
}

ES PxPlanePtr Ctor_physx_PxPlanePtr_physx_PxVec3Ptr_physx_PxVec3Ptr(PxVec3Ptr wrp_point, PxVec3Ptr wrp_normal){
    return (PxPlanePtr) new std::remove_pointer<PxPlanePtr>::type(*wrp_point, *wrp_normal);
}

ES PxPlanePtr Ctor_physx_PxPlanePtr_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxVec3Ptr(PxVec3Ptr wrp_p0, PxVec3Ptr wrp_p1, PxVec3Ptr wrp_p2){
    return (PxPlanePtr) new std::remove_pointer<PxPlanePtr>::type(*wrp_p0, *wrp_p1, *wrp_p2);
}

ES PxVec3Ptr PxPlane_GET_n(PxPlanePtr cls) {return (PxVec3Ptr)&cls->n;}
ES void PxPlane_SET_n(PxPlanePtr cls, PxVec3Ptr value) {cls->n = *value;}

ES float PxPlane_GET_d(PxPlanePtr cls) {return (float)cls->d;}
ES void PxPlane_SET_d(PxPlanePtr cls, float value) {cls->d = value;}

ES bool bool_const_physx_PxPlane_operator_EqualEqual_physx_PxPlanePtr_(PxPlanePtr wrp_lhs, PxPlanePtr wrp_p){
    return (bool) wrp_lhs->operator==(*wrp_p);
}

ES float float_const_physx_PxPlane_distance_physx_PxVec3Ptr_(PxPlanePtr wrp_this, PxVec3Ptr wrp_p){
    return (float) wrp_this->distance(*wrp_p);
}

ES bool bool_const_physx_PxPlane_contains_physx_PxVec3Ptr_(PxPlanePtr wrp_this, PxVec3Ptr wrp_p){
    return (bool) wrp_this->contains(*wrp_p);
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxPlane_project_physx_PxVec3Ptr_(PxPlanePtr wrp_this, PxVec3Ptr wrp_p){
    auto ret = wrp_this->project(*wrp_p);
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxPlane_pointInPlane(PxPlanePtr wrp_this){
    auto ret = wrp_this->pointInPlane();
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES void void_physx_PxPlane_normalize(PxPlanePtr wrp_this){
    wrp_this->normalize();
}
