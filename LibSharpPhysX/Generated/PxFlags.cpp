// Generated by minBND 5.1.93.2 - Â© github.com/Alan-FGR

ES PxBaseFlagsPtr PxBaseFlagsPtr_operator_Ptr_Amp_PxBaseFlagEnum_PxBaseFlagsPtr_(physx::PxBaseFlag::Enum wrp_a, PxBaseFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_operator_Ptr_Amp_PxHeightFieldFlagEnum_PxHeightFieldFlagsPtr_(physx::PxHeightFieldFlag::Enum wrp_a, PxHeightFieldFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxHeightFieldFlags];
    std::memcpy(heap, &ret, sizeof PxHeightFieldFlags);
    return (PxHeightFieldFlagsPtr) heap;
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_operator_Ptr_Amp_PxTriangleMeshFlagEnum_PxTriangleMeshFlagsPtr_(physx::PxTriangleMeshFlag::Enum wrp_a, PxTriangleMeshFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxTriangleMeshFlags];
    std::memcpy(heap, &ret, sizeof PxTriangleMeshFlags);
    return (PxTriangleMeshFlagsPtr) heap;
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_operator_Ptr_Amp_PxSceneFlagEnum_PxSceneFlagsPtr_(physx::PxSceneFlag::Enum wrp_a, PxSceneFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_operator_Ptr_Amp_PxConvexMeshGeometryFlagEnum_PxConvexMeshGeometryFlagsPtr_(physx::PxConvexMeshGeometryFlag::Enum wrp_a, PxConvexMeshGeometryFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxConvexMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxConvexMeshGeometryFlags);
    return (PxConvexMeshGeometryFlagsPtr) heap;
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_operator_Ptr_Amp_PxMeshGeometryFlagEnum_PxMeshGeometryFlagsPtr_(physx::PxMeshGeometryFlag::Enum wrp_a, PxMeshGeometryFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxMeshGeometryFlags);
    return (PxMeshGeometryFlagsPtr) heap;
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_operator_Ptr_Amp_PxMaterialFlagEnum_PxMaterialFlagsPtr_(physx::PxMaterialFlag::Enum wrp_a, PxMaterialFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_operator_Ptr_Amp_PxShapeFlagEnum_PxShapeFlagsPtr_(physx::PxShapeFlag::Enum wrp_a, PxShapeFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_operator_Ptr_Amp_PxConstraintFlagEnum_PxConstraintFlagsPtr_(physx::PxConstraintFlag::Enum wrp_a, PxConstraintFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxConstraintFlags];
    std::memcpy(heap, &ret, sizeof PxConstraintFlags);
    return (PxConstraintFlagsPtr) heap;
}

ES PxActorFlagsPtr PxActorFlagsPtr_operator_Ptr_Amp_PxActorFlagEnum_PxActorFlagsPtr_(physx::PxActorFlag::Enum wrp_a, PxActorFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_operator_Ptr_Amp_PxRigidBodyFlagEnum_PxRigidBodyFlagsPtr_(physx::PxRigidBodyFlag::Enum wrp_a, PxRigidBodyFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_operator_Ptr_Amp_PxActorTypeFlagEnum_PxActorTypeFlagsPtr_(physx::PxActorTypeFlag::Enum wrp_a, PxActorTypeFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_operator_Ptr_Amp_PxFilterFlagEnum_PxFilterFlagsPtr_(physx::PxFilterFlag::Enum wrp_a, PxFilterFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES PxPairFlagsPtr PxPairFlagsPtr_operator_Ptr_Amp_PxPairFlagEnum_PxPairFlagsPtr_(physx::PxPairFlag::Enum wrp_a, PxPairFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

ES void PxHitFlags_operator_Ptr_Amp_PxHitFlagEnum_PxHitFlags_(PxHitFlags* nRetRef, physx::PxHitFlag::Enum wrp_a, PxHitFlags* wrp_b){
    *nRetRef = operator&(wrp_a, *wrp_b);
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_operator_Ptr_Amp_PxQueryFlagEnum_PxQueryFlagsPtr_(physx::PxQueryFlag::Enum wrp_a, PxQueryFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxQueryFlags];
    std::memcpy(heap, &ret, sizeof PxQueryFlags);
    return (PxQueryFlagsPtr) heap;
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_operator_Ptr_Amp_PxPvdSceneFlagEnum_PxPvdSceneFlagsPtr_(physx::PxPvdSceneFlag::Enum wrp_a, PxPvdSceneFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxPvdSceneFlags];
    std::memcpy(heap, &ret, sizeof PxPvdSceneFlags);
    return (PxPvdSceneFlagsPtr) heap;
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_operator_Ptr_Amp_PxRigidDynamicLockFlagEnum_PxRigidDynamicLockFlagsPtr_(physx::PxRigidDynamicLockFlag::Enum wrp_a, PxRigidDynamicLockFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_operator_Ptr_Amp_PxArticulationFlagEnum_PxArticulationFlagsPtr_(physx::PxArticulationFlag::Enum wrp_a, PxArticulationFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_operator_Ptr_Amp_PxArticulationCachePtr_Enum_PxArticulationCacheFlagsPtr_(physx::PxArticulationCache::Enum wrp_a, PxArticulationCacheFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxArticulationCacheFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationCacheFlags);
    return (PxArticulationCacheFlagsPtr) heap;
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_operator_Ptr_Amp_PxDeletionEventFlagEnum_PxDeletionEventFlagsPtr_(physx::PxDeletionEventFlag::Enum wrp_a, PxDeletionEventFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxDeletionEventFlags];
    std::memcpy(heap, &ret, sizeof PxDeletionEventFlags);
    return (PxDeletionEventFlagsPtr) heap;
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_operator_Ptr_Amp_Px1DConstraintFlagPtr_Type_Px1DConstraintFlagsPtr_(physx::Px1DConstraintFlag::Type wrp_a, Px1DConstraintFlagsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof Px1DConstraintFlags];
    std::memcpy(heap, &ret, sizeof Px1DConstraintFlags);
    return (Px1DConstraintFlagsPtr) heap;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Amp_PxArticulationAxisEnum_PxFlags_PxArticulationAxisEnum_bytePtr_(physx::PxArticulationAxis::Enum wrp_a, PxFlags_PxArticulationAxisEnum_bytePtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_operator_Ptr_Amp_PxArticulationMotionEnum_PxArticulationMotionsPtr_(physx::PxArticulationMotion::Enum wrp_a, PxArticulationMotionsPtr wrp_b){
    auto ret = operator&(wrp_a, *wrp_b);
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES void Freer_physx_PxBaseFlagsPtr(PxBaseFlagsPtr ptr){
    delete ptr;
}

ES PxBaseFlagsPtr Ctor_PxBaseFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxBaseFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES PxBaseFlagsPtr Ctor_PxBaseFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxBaseFlagsPtr>::type());
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES PxBaseFlagsPtr Ctor_PxBaseFlagsPtr_PxBaseFlagEnum(physx::PxBaseFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxBaseFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES PxBaseFlagsPtr Ctor_PxBaseFlagsPtr_PxBaseFlagsPtr(PxBaseFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxBaseFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES PxBaseFlagsPtr Ctor_PxBaseFlagsPtr_ushort(unsigned short wrp_b){
    auto ret = *(new std::remove_pointer<PxBaseFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES bool bool_const_PxBaseFlagsPtr_isSetPtr_PxBaseFlagEnum_(PxBaseFlagsPtr wrp_this, physx::PxBaseFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_PxBaseFlagsPtr_setPtr_PxBaseFlagEnum_(PxBaseFlagsPtr wrp_this, physx::PxBaseFlag::Enum wrp_e){
    return (PxBaseFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxBaseFlagsPtr_operator_Ptr_EqualEqual_PxBaseFlagEnum_(PxBaseFlagsPtr wrp_lhs, physx::PxBaseFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator==(wrp_e);
}

ES bool bool_const_PxBaseFlagsPtr_operator_Ptr_EqualEqual_PxBaseFlagsPtr_(PxBaseFlagsPtr wrp_lhs, PxBaseFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator==(*wrp_f);
}

ES bool bool_const_PxBaseFlagsPtr_operator_Ptr_EqualEqual_bool_(PxBaseFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator==(wrp_b);
}

ES bool bool_const_PxBaseFlagsPtr_operator_Ptr_ExclaimEqual_PxBaseFlagEnum_(PxBaseFlagsPtr wrp_lhs, physx::PxBaseFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator!=(wrp_e);
}

ES bool bool_const_PxBaseFlagsPtr_operator_Ptr_ExclaimEqual_PxBaseFlagsPtr_(PxBaseFlagsPtr wrp_lhs, PxBaseFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator!=(*wrp_f);
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_PxBaseFlagsPtr_operator_Ptr_Equal_PxBaseFlagsPtr_(PxBaseFlagsPtr wrp_lhs, PxBaseFlagsPtr wrp_f){
    return (PxBaseFlagsPtr) &wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator=(*wrp_f);
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_PxBaseFlagsPtr_operator_Ptr_Equal_PxBaseFlagEnum_(PxBaseFlagsPtr wrp_lhs, physx::PxBaseFlag::Enum wrp_e){
    return (PxBaseFlagsPtr) &wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator=(wrp_e);
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_PxBaseFlagsPtr_operator_Ptr_PipeEqual_PxBaseFlagEnum_(PxBaseFlagsPtr wrp_lhs, physx::PxBaseFlag::Enum wrp_e){
    return (PxBaseFlagsPtr) &wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator|=(wrp_e);
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_PxBaseFlagsPtr_operator_Ptr_PipeEqual_PxBaseFlagsPtr_(PxBaseFlagsPtr wrp_lhs, PxBaseFlagsPtr wrp_f){
    return (PxBaseFlagsPtr) &wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator|=(*wrp_f);
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_const_PxBaseFlagsPtr_operator_Ptr_Pipe_PxBaseFlagEnum_(PxBaseFlagsPtr wrp_lhs, physx::PxBaseFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator|(wrp_e);
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_const_PxBaseFlagsPtr_operator_Ptr_Pipe_PxBaseFlagsPtr_(PxBaseFlagsPtr wrp_lhs, PxBaseFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator|(*wrp_f);
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_PxBaseFlagsPtr_operator_Ptr_AmpEqual_PxBaseFlagEnum_(PxBaseFlagsPtr wrp_lhs, physx::PxBaseFlag::Enum wrp_e){
    return (PxBaseFlagsPtr) &wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator&=(wrp_e);
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_PxBaseFlagsPtr_operator_Ptr_AmpEqual_PxBaseFlagsPtr_(PxBaseFlagsPtr wrp_lhs, PxBaseFlagsPtr wrp_f){
    return (PxBaseFlagsPtr) &wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator&=(*wrp_f);
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_const_PxBaseFlagsPtr_operator_Ptr_Amp_PxBaseFlagEnum_(PxBaseFlagsPtr wrp_lhs, physx::PxBaseFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator&(wrp_e);
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_const_PxBaseFlagsPtr_operator_Ptr_Amp_PxBaseFlagsPtr_(PxBaseFlagsPtr wrp_lhs, PxBaseFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator&(*wrp_f);
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_PxBaseFlagsPtr_operator_Ptr_CaretEqual_PxBaseFlagEnum_(PxBaseFlagsPtr wrp_lhs, physx::PxBaseFlag::Enum wrp_e){
    return (PxBaseFlagsPtr) &wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator^=(wrp_e);
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_PxBaseFlagsPtr_operator_Ptr_CaretEqual_PxBaseFlagsPtr_(PxBaseFlagsPtr wrp_lhs, PxBaseFlagsPtr wrp_f){
    return (PxBaseFlagsPtr) &wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator^=(*wrp_f);
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_const_PxBaseFlagsPtr_operator_Ptr_Caret_PxBaseFlagEnum_(PxBaseFlagsPtr wrp_lhs, physx::PxBaseFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator^(wrp_e);
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_const_PxBaseFlagsPtr_operator_Ptr_Caret_PxBaseFlagsPtr_(PxBaseFlagsPtr wrp_lhs, PxBaseFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator^(*wrp_f);
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_const_PxBaseFlagsPtr_operator_Ptr_Tilde(PxBaseFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator~();
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES bool bool_const_PxBaseFlagsPtr_operator_boolPtr_Conversion(PxBaseFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator bool();
}

ES uint8_t byte_const_PxBaseFlagsPtr_operator_unsigned_charPtr_Conversion(PxBaseFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator unsigned char();
}

ES uint16_t ushort_const_PxBaseFlagsPtr_operator_unsigned_shortPtr_Conversion(PxBaseFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator unsigned short();
}

ES uint32_t uint_const_PxBaseFlagsPtr_operator_unsigned_intPtr_Conversion(PxBaseFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxBaseFlag::Enum, unsigned short>::operator unsigned int();
}

ES void void_PxBaseFlagsPtr_clearPtr_PxBaseFlagEnum_(PxBaseFlagsPtr wrp_this, physx::PxBaseFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxHeightFieldFlagsPtr(PxHeightFieldFlagsPtr ptr){
    delete ptr;
}

ES PxHeightFieldFlagsPtr Ctor_PxHeightFieldFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxHeightFieldFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxHeightFieldFlags];
    std::memcpy(heap, &ret, sizeof PxHeightFieldFlags);
    return (PxHeightFieldFlagsPtr) heap;
}

ES PxHeightFieldFlagsPtr Ctor_PxHeightFieldFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxHeightFieldFlagsPtr>::type());
    auto heap = new char[sizeof PxHeightFieldFlags];
    std::memcpy(heap, &ret, sizeof PxHeightFieldFlags);
    return (PxHeightFieldFlagsPtr) heap;
}

ES PxHeightFieldFlagsPtr Ctor_PxHeightFieldFlagsPtr_PxHeightFieldFlagEnum(physx::PxHeightFieldFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxHeightFieldFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxHeightFieldFlags];
    std::memcpy(heap, &ret, sizeof PxHeightFieldFlags);
    return (PxHeightFieldFlagsPtr) heap;
}

ES PxHeightFieldFlagsPtr Ctor_PxHeightFieldFlagsPtr_PxHeightFieldFlagsPtr(PxHeightFieldFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxHeightFieldFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxHeightFieldFlags];
    std::memcpy(heap, &ret, sizeof PxHeightFieldFlags);
    return (PxHeightFieldFlagsPtr) heap;
}

ES PxHeightFieldFlagsPtr Ctor_PxHeightFieldFlagsPtr_ushort(unsigned short wrp_b){
    auto ret = *(new std::remove_pointer<PxHeightFieldFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxHeightFieldFlags];
    std::memcpy(heap, &ret, sizeof PxHeightFieldFlags);
    return (PxHeightFieldFlagsPtr) heap;
}

ES bool bool_const_PxHeightFieldFlagsPtr_isSetPtr_PxHeightFieldFlagEnum_(PxHeightFieldFlagsPtr wrp_this, physx::PxHeightFieldFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_PxHeightFieldFlagsPtr_setPtr_PxHeightFieldFlagEnum_(PxHeightFieldFlagsPtr wrp_this, physx::PxHeightFieldFlag::Enum wrp_e){
    return (PxHeightFieldFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxHeightFieldFlagsPtr_operator_Ptr_EqualEqual_PxHeightFieldFlagEnum_(PxHeightFieldFlagsPtr wrp_lhs, physx::PxHeightFieldFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator==(wrp_e);
}

ES bool bool_const_PxHeightFieldFlagsPtr_operator_Ptr_EqualEqual_PxHeightFieldFlagsPtr_(PxHeightFieldFlagsPtr wrp_lhs, PxHeightFieldFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator==(*wrp_f);
}

ES bool bool_const_PxHeightFieldFlagsPtr_operator_Ptr_EqualEqual_bool_(PxHeightFieldFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator==(wrp_b);
}

ES bool bool_const_PxHeightFieldFlagsPtr_operator_Ptr_ExclaimEqual_PxHeightFieldFlagEnum_(PxHeightFieldFlagsPtr wrp_lhs, physx::PxHeightFieldFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator!=(wrp_e);
}

ES bool bool_const_PxHeightFieldFlagsPtr_operator_Ptr_ExclaimEqual_PxHeightFieldFlagsPtr_(PxHeightFieldFlagsPtr wrp_lhs, PxHeightFieldFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator!=(*wrp_f);
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_PxHeightFieldFlagsPtr_operator_Ptr_Equal_PxHeightFieldFlagsPtr_(PxHeightFieldFlagsPtr wrp_lhs, PxHeightFieldFlagsPtr wrp_f){
    return (PxHeightFieldFlagsPtr) &wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator=(*wrp_f);
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_PxHeightFieldFlagsPtr_operator_Ptr_Equal_PxHeightFieldFlagEnum_(PxHeightFieldFlagsPtr wrp_lhs, physx::PxHeightFieldFlag::Enum wrp_e){
    return (PxHeightFieldFlagsPtr) &wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator=(wrp_e);
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_PxHeightFieldFlagsPtr_operator_Ptr_PipeEqual_PxHeightFieldFlagEnum_(PxHeightFieldFlagsPtr wrp_lhs, physx::PxHeightFieldFlag::Enum wrp_e){
    return (PxHeightFieldFlagsPtr) &wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator|=(wrp_e);
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_PxHeightFieldFlagsPtr_operator_Ptr_PipeEqual_PxHeightFieldFlagsPtr_(PxHeightFieldFlagsPtr wrp_lhs, PxHeightFieldFlagsPtr wrp_f){
    return (PxHeightFieldFlagsPtr) &wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator|=(*wrp_f);
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_const_PxHeightFieldFlagsPtr_operator_Ptr_Pipe_PxHeightFieldFlagEnum_(PxHeightFieldFlagsPtr wrp_lhs, physx::PxHeightFieldFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator|(wrp_e);
    auto heap = new char[sizeof PxHeightFieldFlags];
    std::memcpy(heap, &ret, sizeof PxHeightFieldFlags);
    return (PxHeightFieldFlagsPtr) heap;
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_const_PxHeightFieldFlagsPtr_operator_Ptr_Pipe_PxHeightFieldFlagsPtr_(PxHeightFieldFlagsPtr wrp_lhs, PxHeightFieldFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator|(*wrp_f);
    auto heap = new char[sizeof PxHeightFieldFlags];
    std::memcpy(heap, &ret, sizeof PxHeightFieldFlags);
    return (PxHeightFieldFlagsPtr) heap;
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_PxHeightFieldFlagsPtr_operator_Ptr_AmpEqual_PxHeightFieldFlagEnum_(PxHeightFieldFlagsPtr wrp_lhs, physx::PxHeightFieldFlag::Enum wrp_e){
    return (PxHeightFieldFlagsPtr) &wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator&=(wrp_e);
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_PxHeightFieldFlagsPtr_operator_Ptr_AmpEqual_PxHeightFieldFlagsPtr_(PxHeightFieldFlagsPtr wrp_lhs, PxHeightFieldFlagsPtr wrp_f){
    return (PxHeightFieldFlagsPtr) &wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator&=(*wrp_f);
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_const_PxHeightFieldFlagsPtr_operator_Ptr_Amp_PxHeightFieldFlagEnum_(PxHeightFieldFlagsPtr wrp_lhs, physx::PxHeightFieldFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator&(wrp_e);
    auto heap = new char[sizeof PxHeightFieldFlags];
    std::memcpy(heap, &ret, sizeof PxHeightFieldFlags);
    return (PxHeightFieldFlagsPtr) heap;
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_const_PxHeightFieldFlagsPtr_operator_Ptr_Amp_PxHeightFieldFlagsPtr_(PxHeightFieldFlagsPtr wrp_lhs, PxHeightFieldFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator&(*wrp_f);
    auto heap = new char[sizeof PxHeightFieldFlags];
    std::memcpy(heap, &ret, sizeof PxHeightFieldFlags);
    return (PxHeightFieldFlagsPtr) heap;
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_PxHeightFieldFlagsPtr_operator_Ptr_CaretEqual_PxHeightFieldFlagEnum_(PxHeightFieldFlagsPtr wrp_lhs, physx::PxHeightFieldFlag::Enum wrp_e){
    return (PxHeightFieldFlagsPtr) &wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator^=(wrp_e);
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_PxHeightFieldFlagsPtr_operator_Ptr_CaretEqual_PxHeightFieldFlagsPtr_(PxHeightFieldFlagsPtr wrp_lhs, PxHeightFieldFlagsPtr wrp_f){
    return (PxHeightFieldFlagsPtr) &wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator^=(*wrp_f);
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_const_PxHeightFieldFlagsPtr_operator_Ptr_Caret_PxHeightFieldFlagEnum_(PxHeightFieldFlagsPtr wrp_lhs, physx::PxHeightFieldFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator^(wrp_e);
    auto heap = new char[sizeof PxHeightFieldFlags];
    std::memcpy(heap, &ret, sizeof PxHeightFieldFlags);
    return (PxHeightFieldFlagsPtr) heap;
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_const_PxHeightFieldFlagsPtr_operator_Ptr_Caret_PxHeightFieldFlagsPtr_(PxHeightFieldFlagsPtr wrp_lhs, PxHeightFieldFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator^(*wrp_f);
    auto heap = new char[sizeof PxHeightFieldFlags];
    std::memcpy(heap, &ret, sizeof PxHeightFieldFlags);
    return (PxHeightFieldFlagsPtr) heap;
}

ES PxHeightFieldFlagsPtr PxHeightFieldFlagsPtr_const_PxHeightFieldFlagsPtr_operator_Ptr_Tilde(PxHeightFieldFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator~();
    auto heap = new char[sizeof PxHeightFieldFlags];
    std::memcpy(heap, &ret, sizeof PxHeightFieldFlags);
    return (PxHeightFieldFlagsPtr) heap;
}

ES bool bool_const_PxHeightFieldFlagsPtr_operator_boolPtr_Conversion(PxHeightFieldFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator bool();
}

ES uint8_t byte_const_PxHeightFieldFlagsPtr_operator_unsigned_charPtr_Conversion(PxHeightFieldFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator unsigned char();
}

ES uint16_t ushort_const_PxHeightFieldFlagsPtr_operator_unsigned_shortPtr_Conversion(PxHeightFieldFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator unsigned short();
}

ES uint32_t uint_const_PxHeightFieldFlagsPtr_operator_unsigned_intPtr_Conversion(PxHeightFieldFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxHeightFieldFlag::Enum, unsigned short>::operator unsigned int();
}

ES void void_PxHeightFieldFlagsPtr_clearPtr_PxHeightFieldFlagEnum_(PxHeightFieldFlagsPtr wrp_this, physx::PxHeightFieldFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxTriangleMeshFlagsPtr(PxTriangleMeshFlagsPtr ptr){
    delete ptr;
}

ES PxTriangleMeshFlagsPtr Ctor_PxTriangleMeshFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxTriangleMeshFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxTriangleMeshFlags];
    std::memcpy(heap, &ret, sizeof PxTriangleMeshFlags);
    return (PxTriangleMeshFlagsPtr) heap;
}

ES PxTriangleMeshFlagsPtr Ctor_PxTriangleMeshFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxTriangleMeshFlagsPtr>::type());
    auto heap = new char[sizeof PxTriangleMeshFlags];
    std::memcpy(heap, &ret, sizeof PxTriangleMeshFlags);
    return (PxTriangleMeshFlagsPtr) heap;
}

ES PxTriangleMeshFlagsPtr Ctor_PxTriangleMeshFlagsPtr_PxTriangleMeshFlagEnum(physx::PxTriangleMeshFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxTriangleMeshFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxTriangleMeshFlags];
    std::memcpy(heap, &ret, sizeof PxTriangleMeshFlags);
    return (PxTriangleMeshFlagsPtr) heap;
}

ES PxTriangleMeshFlagsPtr Ctor_PxTriangleMeshFlagsPtr_PxTriangleMeshFlagsPtr(PxTriangleMeshFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxTriangleMeshFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxTriangleMeshFlags];
    std::memcpy(heap, &ret, sizeof PxTriangleMeshFlags);
    return (PxTriangleMeshFlagsPtr) heap;
}

ES PxTriangleMeshFlagsPtr Ctor_PxTriangleMeshFlagsPtr_byte(unsigned char wrp_b){
    auto ret = *(new std::remove_pointer<PxTriangleMeshFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxTriangleMeshFlags];
    std::memcpy(heap, &ret, sizeof PxTriangleMeshFlags);
    return (PxTriangleMeshFlagsPtr) heap;
}

ES bool bool_const_PxTriangleMeshFlagsPtr_isSetPtr_PxTriangleMeshFlagEnum_(PxTriangleMeshFlagsPtr wrp_this, physx::PxTriangleMeshFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_PxTriangleMeshFlagsPtr_setPtr_PxTriangleMeshFlagEnum_(PxTriangleMeshFlagsPtr wrp_this, physx::PxTriangleMeshFlag::Enum wrp_e){
    return (PxTriangleMeshFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxTriangleMeshFlagsPtr_operator_Ptr_EqualEqual_PxTriangleMeshFlagEnum_(PxTriangleMeshFlagsPtr wrp_lhs, physx::PxTriangleMeshFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator==(wrp_e);
}

ES bool bool_const_PxTriangleMeshFlagsPtr_operator_Ptr_EqualEqual_PxTriangleMeshFlagsPtr_(PxTriangleMeshFlagsPtr wrp_lhs, PxTriangleMeshFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator==(*wrp_f);
}

ES bool bool_const_PxTriangleMeshFlagsPtr_operator_Ptr_EqualEqual_bool_(PxTriangleMeshFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator==(wrp_b);
}

ES bool bool_const_PxTriangleMeshFlagsPtr_operator_Ptr_ExclaimEqual_PxTriangleMeshFlagEnum_(PxTriangleMeshFlagsPtr wrp_lhs, physx::PxTriangleMeshFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator!=(wrp_e);
}

ES bool bool_const_PxTriangleMeshFlagsPtr_operator_Ptr_ExclaimEqual_PxTriangleMeshFlagsPtr_(PxTriangleMeshFlagsPtr wrp_lhs, PxTriangleMeshFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator!=(*wrp_f);
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_PxTriangleMeshFlagsPtr_operator_Ptr_Equal_PxTriangleMeshFlagsPtr_(PxTriangleMeshFlagsPtr wrp_lhs, PxTriangleMeshFlagsPtr wrp_f){
    return (PxTriangleMeshFlagsPtr) &wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator=(*wrp_f);
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_PxTriangleMeshFlagsPtr_operator_Ptr_Equal_PxTriangleMeshFlagEnum_(PxTriangleMeshFlagsPtr wrp_lhs, physx::PxTriangleMeshFlag::Enum wrp_e){
    return (PxTriangleMeshFlagsPtr) &wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator=(wrp_e);
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_PxTriangleMeshFlagsPtr_operator_Ptr_PipeEqual_PxTriangleMeshFlagEnum_(PxTriangleMeshFlagsPtr wrp_lhs, physx::PxTriangleMeshFlag::Enum wrp_e){
    return (PxTriangleMeshFlagsPtr) &wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator|=(wrp_e);
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_PxTriangleMeshFlagsPtr_operator_Ptr_PipeEqual_PxTriangleMeshFlagsPtr_(PxTriangleMeshFlagsPtr wrp_lhs, PxTriangleMeshFlagsPtr wrp_f){
    return (PxTriangleMeshFlagsPtr) &wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator|=(*wrp_f);
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_const_PxTriangleMeshFlagsPtr_operator_Ptr_Pipe_PxTriangleMeshFlagEnum_(PxTriangleMeshFlagsPtr wrp_lhs, physx::PxTriangleMeshFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator|(wrp_e);
    auto heap = new char[sizeof PxTriangleMeshFlags];
    std::memcpy(heap, &ret, sizeof PxTriangleMeshFlags);
    return (PxTriangleMeshFlagsPtr) heap;
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_const_PxTriangleMeshFlagsPtr_operator_Ptr_Pipe_PxTriangleMeshFlagsPtr_(PxTriangleMeshFlagsPtr wrp_lhs, PxTriangleMeshFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator|(*wrp_f);
    auto heap = new char[sizeof PxTriangleMeshFlags];
    std::memcpy(heap, &ret, sizeof PxTriangleMeshFlags);
    return (PxTriangleMeshFlagsPtr) heap;
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_PxTriangleMeshFlagsPtr_operator_Ptr_AmpEqual_PxTriangleMeshFlagEnum_(PxTriangleMeshFlagsPtr wrp_lhs, physx::PxTriangleMeshFlag::Enum wrp_e){
    return (PxTriangleMeshFlagsPtr) &wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator&=(wrp_e);
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_PxTriangleMeshFlagsPtr_operator_Ptr_AmpEqual_PxTriangleMeshFlagsPtr_(PxTriangleMeshFlagsPtr wrp_lhs, PxTriangleMeshFlagsPtr wrp_f){
    return (PxTriangleMeshFlagsPtr) &wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator&=(*wrp_f);
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_const_PxTriangleMeshFlagsPtr_operator_Ptr_Amp_PxTriangleMeshFlagEnum_(PxTriangleMeshFlagsPtr wrp_lhs, physx::PxTriangleMeshFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator&(wrp_e);
    auto heap = new char[sizeof PxTriangleMeshFlags];
    std::memcpy(heap, &ret, sizeof PxTriangleMeshFlags);
    return (PxTriangleMeshFlagsPtr) heap;
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_const_PxTriangleMeshFlagsPtr_operator_Ptr_Amp_PxTriangleMeshFlagsPtr_(PxTriangleMeshFlagsPtr wrp_lhs, PxTriangleMeshFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator&(*wrp_f);
    auto heap = new char[sizeof PxTriangleMeshFlags];
    std::memcpy(heap, &ret, sizeof PxTriangleMeshFlags);
    return (PxTriangleMeshFlagsPtr) heap;
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_PxTriangleMeshFlagsPtr_operator_Ptr_CaretEqual_PxTriangleMeshFlagEnum_(PxTriangleMeshFlagsPtr wrp_lhs, physx::PxTriangleMeshFlag::Enum wrp_e){
    return (PxTriangleMeshFlagsPtr) &wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator^=(wrp_e);
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_PxTriangleMeshFlagsPtr_operator_Ptr_CaretEqual_PxTriangleMeshFlagsPtr_(PxTriangleMeshFlagsPtr wrp_lhs, PxTriangleMeshFlagsPtr wrp_f){
    return (PxTriangleMeshFlagsPtr) &wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator^=(*wrp_f);
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_const_PxTriangleMeshFlagsPtr_operator_Ptr_Caret_PxTriangleMeshFlagEnum_(PxTriangleMeshFlagsPtr wrp_lhs, physx::PxTriangleMeshFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator^(wrp_e);
    auto heap = new char[sizeof PxTriangleMeshFlags];
    std::memcpy(heap, &ret, sizeof PxTriangleMeshFlags);
    return (PxTriangleMeshFlagsPtr) heap;
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_const_PxTriangleMeshFlagsPtr_operator_Ptr_Caret_PxTriangleMeshFlagsPtr_(PxTriangleMeshFlagsPtr wrp_lhs, PxTriangleMeshFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator^(*wrp_f);
    auto heap = new char[sizeof PxTriangleMeshFlags];
    std::memcpy(heap, &ret, sizeof PxTriangleMeshFlags);
    return (PxTriangleMeshFlagsPtr) heap;
}

ES PxTriangleMeshFlagsPtr PxTriangleMeshFlagsPtr_const_PxTriangleMeshFlagsPtr_operator_Ptr_Tilde(PxTriangleMeshFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator~();
    auto heap = new char[sizeof PxTriangleMeshFlags];
    std::memcpy(heap, &ret, sizeof PxTriangleMeshFlags);
    return (PxTriangleMeshFlagsPtr) heap;
}

ES bool bool_const_PxTriangleMeshFlagsPtr_operator_boolPtr_Conversion(PxTriangleMeshFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator bool();
}

ES uint8_t byte_const_PxTriangleMeshFlagsPtr_operator_unsigned_charPtr_Conversion(PxTriangleMeshFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator unsigned char();
}

ES uint16_t ushort_const_PxTriangleMeshFlagsPtr_operator_unsigned_shortPtr_Conversion(PxTriangleMeshFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator unsigned short();
}

ES uint32_t uint_const_PxTriangleMeshFlagsPtr_operator_unsigned_intPtr_Conversion(PxTriangleMeshFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxTriangleMeshFlag::Enum, unsigned char>::operator unsigned int();
}

ES void void_PxTriangleMeshFlagsPtr_clearPtr_PxTriangleMeshFlagEnum_(PxTriangleMeshFlagsPtr wrp_this, physx::PxTriangleMeshFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxSceneFlagsPtr(PxSceneFlagsPtr ptr){
    delete ptr;
}

ES PxSceneFlagsPtr Ctor_PxSceneFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxSceneFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES PxSceneFlagsPtr Ctor_PxSceneFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxSceneFlagsPtr>::type());
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES PxSceneFlagsPtr Ctor_PxSceneFlagsPtr_PxSceneFlagEnum(physx::PxSceneFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxSceneFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES PxSceneFlagsPtr Ctor_PxSceneFlagsPtr_PxSceneFlagsPtr(PxSceneFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxSceneFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES PxSceneFlagsPtr Ctor_PxSceneFlagsPtr_uint(unsigned int wrp_b){
    auto ret = *(new std::remove_pointer<PxSceneFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES bool bool_const_PxSceneFlagsPtr_isSetPtr_PxSceneFlagEnum_(PxSceneFlagsPtr wrp_this, physx::PxSceneFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_PxSceneFlagsPtr_setPtr_PxSceneFlagEnum_(PxSceneFlagsPtr wrp_this, physx::PxSceneFlag::Enum wrp_e){
    return (PxSceneFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxSceneFlagsPtr_operator_Ptr_EqualEqual_PxSceneFlagEnum_(PxSceneFlagsPtr wrp_lhs, physx::PxSceneFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator==(wrp_e);
}

ES bool bool_const_PxSceneFlagsPtr_operator_Ptr_EqualEqual_PxSceneFlagsPtr_(PxSceneFlagsPtr wrp_lhs, PxSceneFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator==(*wrp_f);
}

ES bool bool_const_PxSceneFlagsPtr_operator_Ptr_EqualEqual_bool_(PxSceneFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator==(wrp_b);
}

ES bool bool_const_PxSceneFlagsPtr_operator_Ptr_ExclaimEqual_PxSceneFlagEnum_(PxSceneFlagsPtr wrp_lhs, physx::PxSceneFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator!=(wrp_e);
}

ES bool bool_const_PxSceneFlagsPtr_operator_Ptr_ExclaimEqual_PxSceneFlagsPtr_(PxSceneFlagsPtr wrp_lhs, PxSceneFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator!=(*wrp_f);
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_PxSceneFlagsPtr_operator_Ptr_Equal_PxSceneFlagsPtr_(PxSceneFlagsPtr wrp_lhs, PxSceneFlagsPtr wrp_f){
    return (PxSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator=(*wrp_f);
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_PxSceneFlagsPtr_operator_Ptr_Equal_PxSceneFlagEnum_(PxSceneFlagsPtr wrp_lhs, physx::PxSceneFlag::Enum wrp_e){
    return (PxSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator=(wrp_e);
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_PxSceneFlagsPtr_operator_Ptr_PipeEqual_PxSceneFlagEnum_(PxSceneFlagsPtr wrp_lhs, physx::PxSceneFlag::Enum wrp_e){
    return (PxSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator|=(wrp_e);
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_PxSceneFlagsPtr_operator_Ptr_PipeEqual_PxSceneFlagsPtr_(PxSceneFlagsPtr wrp_lhs, PxSceneFlagsPtr wrp_f){
    return (PxSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator|=(*wrp_f);
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_const_PxSceneFlagsPtr_operator_Ptr_Pipe_PxSceneFlagEnum_(PxSceneFlagsPtr wrp_lhs, physx::PxSceneFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator|(wrp_e);
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_const_PxSceneFlagsPtr_operator_Ptr_Pipe_PxSceneFlagsPtr_(PxSceneFlagsPtr wrp_lhs, PxSceneFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator|(*wrp_f);
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_PxSceneFlagsPtr_operator_Ptr_AmpEqual_PxSceneFlagEnum_(PxSceneFlagsPtr wrp_lhs, physx::PxSceneFlag::Enum wrp_e){
    return (PxSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator&=(wrp_e);
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_PxSceneFlagsPtr_operator_Ptr_AmpEqual_PxSceneFlagsPtr_(PxSceneFlagsPtr wrp_lhs, PxSceneFlagsPtr wrp_f){
    return (PxSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator&=(*wrp_f);
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_const_PxSceneFlagsPtr_operator_Ptr_Amp_PxSceneFlagEnum_(PxSceneFlagsPtr wrp_lhs, physx::PxSceneFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator&(wrp_e);
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_const_PxSceneFlagsPtr_operator_Ptr_Amp_PxSceneFlagsPtr_(PxSceneFlagsPtr wrp_lhs, PxSceneFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator&(*wrp_f);
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_PxSceneFlagsPtr_operator_Ptr_CaretEqual_PxSceneFlagEnum_(PxSceneFlagsPtr wrp_lhs, physx::PxSceneFlag::Enum wrp_e){
    return (PxSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator^=(wrp_e);
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_PxSceneFlagsPtr_operator_Ptr_CaretEqual_PxSceneFlagsPtr_(PxSceneFlagsPtr wrp_lhs, PxSceneFlagsPtr wrp_f){
    return (PxSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator^=(*wrp_f);
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_const_PxSceneFlagsPtr_operator_Ptr_Caret_PxSceneFlagEnum_(PxSceneFlagsPtr wrp_lhs, physx::PxSceneFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator^(wrp_e);
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_const_PxSceneFlagsPtr_operator_Ptr_Caret_PxSceneFlagsPtr_(PxSceneFlagsPtr wrp_lhs, PxSceneFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator^(*wrp_f);
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_const_PxSceneFlagsPtr_operator_Ptr_Tilde(PxSceneFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator~();
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES bool bool_const_PxSceneFlagsPtr_operator_boolPtr_Conversion(PxSceneFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator bool();
}

ES uint8_t byte_const_PxSceneFlagsPtr_operator_unsigned_charPtr_Conversion(PxSceneFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator unsigned char();
}

ES uint16_t ushort_const_PxSceneFlagsPtr_operator_unsigned_shortPtr_Conversion(PxSceneFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator unsigned short();
}

ES uint32_t uint_const_PxSceneFlagsPtr_operator_unsigned_intPtr_Conversion(PxSceneFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxSceneFlag::Enum, unsigned int>::operator unsigned int();
}

ES void void_PxSceneFlagsPtr_clearPtr_PxSceneFlagEnum_(PxSceneFlagsPtr wrp_this, physx::PxSceneFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxConvexMeshGeometryFlagsPtr(PxConvexMeshGeometryFlagsPtr ptr){
    delete ptr;
}

ES PxConvexMeshGeometryFlagsPtr Ctor_PxConvexMeshGeometryFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxConvexMeshGeometryFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxConvexMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxConvexMeshGeometryFlags);
    return (PxConvexMeshGeometryFlagsPtr) heap;
}

ES PxConvexMeshGeometryFlagsPtr Ctor_PxConvexMeshGeometryFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxConvexMeshGeometryFlagsPtr>::type());
    auto heap = new char[sizeof PxConvexMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxConvexMeshGeometryFlags);
    return (PxConvexMeshGeometryFlagsPtr) heap;
}

ES PxConvexMeshGeometryFlagsPtr Ctor_PxConvexMeshGeometryFlagsPtr_PxConvexMeshGeometryFlagEnum(physx::PxConvexMeshGeometryFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxConvexMeshGeometryFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxConvexMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxConvexMeshGeometryFlags);
    return (PxConvexMeshGeometryFlagsPtr) heap;
}

ES PxConvexMeshGeometryFlagsPtr Ctor_PxConvexMeshGeometryFlagsPtr_PxConvexMeshGeometryFlagsPtr(PxConvexMeshGeometryFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxConvexMeshGeometryFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxConvexMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxConvexMeshGeometryFlags);
    return (PxConvexMeshGeometryFlagsPtr) heap;
}

ES PxConvexMeshGeometryFlagsPtr Ctor_PxConvexMeshGeometryFlagsPtr_byte(unsigned char wrp_b){
    auto ret = *(new std::remove_pointer<PxConvexMeshGeometryFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxConvexMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxConvexMeshGeometryFlags);
    return (PxConvexMeshGeometryFlagsPtr) heap;
}

ES bool bool_const_PxConvexMeshGeometryFlagsPtr_isSetPtr_PxConvexMeshGeometryFlagEnum_(PxConvexMeshGeometryFlagsPtr wrp_this, physx::PxConvexMeshGeometryFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_PxConvexMeshGeometryFlagsPtr_setPtr_PxConvexMeshGeometryFlagEnum_(PxConvexMeshGeometryFlagsPtr wrp_this, physx::PxConvexMeshGeometryFlag::Enum wrp_e){
    return (PxConvexMeshGeometryFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxConvexMeshGeometryFlagsPtr_operator_Ptr_EqualEqual_PxConvexMeshGeometryFlagEnum_(PxConvexMeshGeometryFlagsPtr wrp_lhs, physx::PxConvexMeshGeometryFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator==(wrp_e);
}

ES bool bool_const_PxConvexMeshGeometryFlagsPtr_operator_Ptr_EqualEqual_PxConvexMeshGeometryFlagsPtr_(PxConvexMeshGeometryFlagsPtr wrp_lhs, PxConvexMeshGeometryFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator==(*wrp_f);
}

ES bool bool_const_PxConvexMeshGeometryFlagsPtr_operator_Ptr_EqualEqual_bool_(PxConvexMeshGeometryFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator==(wrp_b);
}

ES bool bool_const_PxConvexMeshGeometryFlagsPtr_operator_Ptr_ExclaimEqual_PxConvexMeshGeometryFlagEnum_(PxConvexMeshGeometryFlagsPtr wrp_lhs, physx::PxConvexMeshGeometryFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator!=(wrp_e);
}

ES bool bool_const_PxConvexMeshGeometryFlagsPtr_operator_Ptr_ExclaimEqual_PxConvexMeshGeometryFlagsPtr_(PxConvexMeshGeometryFlagsPtr wrp_lhs, PxConvexMeshGeometryFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator!=(*wrp_f);
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_PxConvexMeshGeometryFlagsPtr_operator_Ptr_Equal_PxConvexMeshGeometryFlagsPtr_(PxConvexMeshGeometryFlagsPtr wrp_lhs, PxConvexMeshGeometryFlagsPtr wrp_f){
    return (PxConvexMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator=(*wrp_f);
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_PxConvexMeshGeometryFlagsPtr_operator_Ptr_Equal_PxConvexMeshGeometryFlagEnum_(PxConvexMeshGeometryFlagsPtr wrp_lhs, physx::PxConvexMeshGeometryFlag::Enum wrp_e){
    return (PxConvexMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator=(wrp_e);
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_PxConvexMeshGeometryFlagsPtr_operator_Ptr_PipeEqual_PxConvexMeshGeometryFlagEnum_(PxConvexMeshGeometryFlagsPtr wrp_lhs, physx::PxConvexMeshGeometryFlag::Enum wrp_e){
    return (PxConvexMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator|=(wrp_e);
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_PxConvexMeshGeometryFlagsPtr_operator_Ptr_PipeEqual_PxConvexMeshGeometryFlagsPtr_(PxConvexMeshGeometryFlagsPtr wrp_lhs, PxConvexMeshGeometryFlagsPtr wrp_f){
    return (PxConvexMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator|=(*wrp_f);
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_const_PxConvexMeshGeometryFlagsPtr_operator_Ptr_Pipe_PxConvexMeshGeometryFlagEnum_(PxConvexMeshGeometryFlagsPtr wrp_lhs, physx::PxConvexMeshGeometryFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator|(wrp_e);
    auto heap = new char[sizeof PxConvexMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxConvexMeshGeometryFlags);
    return (PxConvexMeshGeometryFlagsPtr) heap;
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_const_PxConvexMeshGeometryFlagsPtr_operator_Ptr_Pipe_PxConvexMeshGeometryFlagsPtr_(PxConvexMeshGeometryFlagsPtr wrp_lhs, PxConvexMeshGeometryFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator|(*wrp_f);
    auto heap = new char[sizeof PxConvexMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxConvexMeshGeometryFlags);
    return (PxConvexMeshGeometryFlagsPtr) heap;
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_PxConvexMeshGeometryFlagsPtr_operator_Ptr_AmpEqual_PxConvexMeshGeometryFlagEnum_(PxConvexMeshGeometryFlagsPtr wrp_lhs, physx::PxConvexMeshGeometryFlag::Enum wrp_e){
    return (PxConvexMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator&=(wrp_e);
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_PxConvexMeshGeometryFlagsPtr_operator_Ptr_AmpEqual_PxConvexMeshGeometryFlagsPtr_(PxConvexMeshGeometryFlagsPtr wrp_lhs, PxConvexMeshGeometryFlagsPtr wrp_f){
    return (PxConvexMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator&=(*wrp_f);
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_const_PxConvexMeshGeometryFlagsPtr_operator_Ptr_Amp_PxConvexMeshGeometryFlagEnum_(PxConvexMeshGeometryFlagsPtr wrp_lhs, physx::PxConvexMeshGeometryFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator&(wrp_e);
    auto heap = new char[sizeof PxConvexMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxConvexMeshGeometryFlags);
    return (PxConvexMeshGeometryFlagsPtr) heap;
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_const_PxConvexMeshGeometryFlagsPtr_operator_Ptr_Amp_PxConvexMeshGeometryFlagsPtr_(PxConvexMeshGeometryFlagsPtr wrp_lhs, PxConvexMeshGeometryFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator&(*wrp_f);
    auto heap = new char[sizeof PxConvexMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxConvexMeshGeometryFlags);
    return (PxConvexMeshGeometryFlagsPtr) heap;
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_PxConvexMeshGeometryFlagsPtr_operator_Ptr_CaretEqual_PxConvexMeshGeometryFlagEnum_(PxConvexMeshGeometryFlagsPtr wrp_lhs, physx::PxConvexMeshGeometryFlag::Enum wrp_e){
    return (PxConvexMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator^=(wrp_e);
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_PxConvexMeshGeometryFlagsPtr_operator_Ptr_CaretEqual_PxConvexMeshGeometryFlagsPtr_(PxConvexMeshGeometryFlagsPtr wrp_lhs, PxConvexMeshGeometryFlagsPtr wrp_f){
    return (PxConvexMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator^=(*wrp_f);
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_const_PxConvexMeshGeometryFlagsPtr_operator_Ptr_Caret_PxConvexMeshGeometryFlagEnum_(PxConvexMeshGeometryFlagsPtr wrp_lhs, physx::PxConvexMeshGeometryFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator^(wrp_e);
    auto heap = new char[sizeof PxConvexMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxConvexMeshGeometryFlags);
    return (PxConvexMeshGeometryFlagsPtr) heap;
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_const_PxConvexMeshGeometryFlagsPtr_operator_Ptr_Caret_PxConvexMeshGeometryFlagsPtr_(PxConvexMeshGeometryFlagsPtr wrp_lhs, PxConvexMeshGeometryFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator^(*wrp_f);
    auto heap = new char[sizeof PxConvexMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxConvexMeshGeometryFlags);
    return (PxConvexMeshGeometryFlagsPtr) heap;
}

ES PxConvexMeshGeometryFlagsPtr PxConvexMeshGeometryFlagsPtr_const_PxConvexMeshGeometryFlagsPtr_operator_Ptr_Tilde(PxConvexMeshGeometryFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator~();
    auto heap = new char[sizeof PxConvexMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxConvexMeshGeometryFlags);
    return (PxConvexMeshGeometryFlagsPtr) heap;
}

ES bool bool_const_PxConvexMeshGeometryFlagsPtr_operator_boolPtr_Conversion(PxConvexMeshGeometryFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator bool();
}

ES uint8_t byte_const_PxConvexMeshGeometryFlagsPtr_operator_unsigned_charPtr_Conversion(PxConvexMeshGeometryFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator unsigned char();
}

ES uint16_t ushort_const_PxConvexMeshGeometryFlagsPtr_operator_unsigned_shortPtr_Conversion(PxConvexMeshGeometryFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator unsigned short();
}

ES uint32_t uint_const_PxConvexMeshGeometryFlagsPtr_operator_unsigned_intPtr_Conversion(PxConvexMeshGeometryFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxConvexMeshGeometryFlag::Enum, unsigned char>::operator unsigned int();
}

ES void void_PxConvexMeshGeometryFlagsPtr_clearPtr_PxConvexMeshGeometryFlagEnum_(PxConvexMeshGeometryFlagsPtr wrp_this, physx::PxConvexMeshGeometryFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxMeshGeometryFlagsPtr(PxMeshGeometryFlagsPtr ptr){
    delete ptr;
}

ES PxMeshGeometryFlagsPtr Ctor_PxMeshGeometryFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxMeshGeometryFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxMeshGeometryFlags);
    return (PxMeshGeometryFlagsPtr) heap;
}

ES PxMeshGeometryFlagsPtr Ctor_PxMeshGeometryFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxMeshGeometryFlagsPtr>::type());
    auto heap = new char[sizeof PxMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxMeshGeometryFlags);
    return (PxMeshGeometryFlagsPtr) heap;
}

ES PxMeshGeometryFlagsPtr Ctor_PxMeshGeometryFlagsPtr_PxMeshGeometryFlagEnum(physx::PxMeshGeometryFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxMeshGeometryFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxMeshGeometryFlags);
    return (PxMeshGeometryFlagsPtr) heap;
}

ES PxMeshGeometryFlagsPtr Ctor_PxMeshGeometryFlagsPtr_PxMeshGeometryFlagsPtr(PxMeshGeometryFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxMeshGeometryFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxMeshGeometryFlags);
    return (PxMeshGeometryFlagsPtr) heap;
}

ES PxMeshGeometryFlagsPtr Ctor_PxMeshGeometryFlagsPtr_byte(unsigned char wrp_b){
    auto ret = *(new std::remove_pointer<PxMeshGeometryFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxMeshGeometryFlags);
    return (PxMeshGeometryFlagsPtr) heap;
}

ES bool bool_const_PxMeshGeometryFlagsPtr_isSetPtr_PxMeshGeometryFlagEnum_(PxMeshGeometryFlagsPtr wrp_this, physx::PxMeshGeometryFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_PxMeshGeometryFlagsPtr_setPtr_PxMeshGeometryFlagEnum_(PxMeshGeometryFlagsPtr wrp_this, physx::PxMeshGeometryFlag::Enum wrp_e){
    return (PxMeshGeometryFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxMeshGeometryFlagsPtr_operator_Ptr_EqualEqual_PxMeshGeometryFlagEnum_(PxMeshGeometryFlagsPtr wrp_lhs, physx::PxMeshGeometryFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator==(wrp_e);
}

ES bool bool_const_PxMeshGeometryFlagsPtr_operator_Ptr_EqualEqual_PxMeshGeometryFlagsPtr_(PxMeshGeometryFlagsPtr wrp_lhs, PxMeshGeometryFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator==(*wrp_f);
}

ES bool bool_const_PxMeshGeometryFlagsPtr_operator_Ptr_EqualEqual_bool_(PxMeshGeometryFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator==(wrp_b);
}

ES bool bool_const_PxMeshGeometryFlagsPtr_operator_Ptr_ExclaimEqual_PxMeshGeometryFlagEnum_(PxMeshGeometryFlagsPtr wrp_lhs, physx::PxMeshGeometryFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator!=(wrp_e);
}

ES bool bool_const_PxMeshGeometryFlagsPtr_operator_Ptr_ExclaimEqual_PxMeshGeometryFlagsPtr_(PxMeshGeometryFlagsPtr wrp_lhs, PxMeshGeometryFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator!=(*wrp_f);
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_PxMeshGeometryFlagsPtr_operator_Ptr_Equal_PxMeshGeometryFlagsPtr_(PxMeshGeometryFlagsPtr wrp_lhs, PxMeshGeometryFlagsPtr wrp_f){
    return (PxMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator=(*wrp_f);
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_PxMeshGeometryFlagsPtr_operator_Ptr_Equal_PxMeshGeometryFlagEnum_(PxMeshGeometryFlagsPtr wrp_lhs, physx::PxMeshGeometryFlag::Enum wrp_e){
    return (PxMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator=(wrp_e);
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_PxMeshGeometryFlagsPtr_operator_Ptr_PipeEqual_PxMeshGeometryFlagEnum_(PxMeshGeometryFlagsPtr wrp_lhs, physx::PxMeshGeometryFlag::Enum wrp_e){
    return (PxMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator|=(wrp_e);
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_PxMeshGeometryFlagsPtr_operator_Ptr_PipeEqual_PxMeshGeometryFlagsPtr_(PxMeshGeometryFlagsPtr wrp_lhs, PxMeshGeometryFlagsPtr wrp_f){
    return (PxMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator|=(*wrp_f);
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_const_PxMeshGeometryFlagsPtr_operator_Ptr_Pipe_PxMeshGeometryFlagEnum_(PxMeshGeometryFlagsPtr wrp_lhs, physx::PxMeshGeometryFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator|(wrp_e);
    auto heap = new char[sizeof PxMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxMeshGeometryFlags);
    return (PxMeshGeometryFlagsPtr) heap;
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_const_PxMeshGeometryFlagsPtr_operator_Ptr_Pipe_PxMeshGeometryFlagsPtr_(PxMeshGeometryFlagsPtr wrp_lhs, PxMeshGeometryFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator|(*wrp_f);
    auto heap = new char[sizeof PxMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxMeshGeometryFlags);
    return (PxMeshGeometryFlagsPtr) heap;
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_PxMeshGeometryFlagsPtr_operator_Ptr_AmpEqual_PxMeshGeometryFlagEnum_(PxMeshGeometryFlagsPtr wrp_lhs, physx::PxMeshGeometryFlag::Enum wrp_e){
    return (PxMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator&=(wrp_e);
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_PxMeshGeometryFlagsPtr_operator_Ptr_AmpEqual_PxMeshGeometryFlagsPtr_(PxMeshGeometryFlagsPtr wrp_lhs, PxMeshGeometryFlagsPtr wrp_f){
    return (PxMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator&=(*wrp_f);
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_const_PxMeshGeometryFlagsPtr_operator_Ptr_Amp_PxMeshGeometryFlagEnum_(PxMeshGeometryFlagsPtr wrp_lhs, physx::PxMeshGeometryFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator&(wrp_e);
    auto heap = new char[sizeof PxMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxMeshGeometryFlags);
    return (PxMeshGeometryFlagsPtr) heap;
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_const_PxMeshGeometryFlagsPtr_operator_Ptr_Amp_PxMeshGeometryFlagsPtr_(PxMeshGeometryFlagsPtr wrp_lhs, PxMeshGeometryFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator&(*wrp_f);
    auto heap = new char[sizeof PxMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxMeshGeometryFlags);
    return (PxMeshGeometryFlagsPtr) heap;
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_PxMeshGeometryFlagsPtr_operator_Ptr_CaretEqual_PxMeshGeometryFlagEnum_(PxMeshGeometryFlagsPtr wrp_lhs, physx::PxMeshGeometryFlag::Enum wrp_e){
    return (PxMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator^=(wrp_e);
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_PxMeshGeometryFlagsPtr_operator_Ptr_CaretEqual_PxMeshGeometryFlagsPtr_(PxMeshGeometryFlagsPtr wrp_lhs, PxMeshGeometryFlagsPtr wrp_f){
    return (PxMeshGeometryFlagsPtr) &wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator^=(*wrp_f);
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_const_PxMeshGeometryFlagsPtr_operator_Ptr_Caret_PxMeshGeometryFlagEnum_(PxMeshGeometryFlagsPtr wrp_lhs, physx::PxMeshGeometryFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator^(wrp_e);
    auto heap = new char[sizeof PxMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxMeshGeometryFlags);
    return (PxMeshGeometryFlagsPtr) heap;
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_const_PxMeshGeometryFlagsPtr_operator_Ptr_Caret_PxMeshGeometryFlagsPtr_(PxMeshGeometryFlagsPtr wrp_lhs, PxMeshGeometryFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator^(*wrp_f);
    auto heap = new char[sizeof PxMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxMeshGeometryFlags);
    return (PxMeshGeometryFlagsPtr) heap;
}

ES PxMeshGeometryFlagsPtr PxMeshGeometryFlagsPtr_const_PxMeshGeometryFlagsPtr_operator_Ptr_Tilde(PxMeshGeometryFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator~();
    auto heap = new char[sizeof PxMeshGeometryFlags];
    std::memcpy(heap, &ret, sizeof PxMeshGeometryFlags);
    return (PxMeshGeometryFlagsPtr) heap;
}

ES bool bool_const_PxMeshGeometryFlagsPtr_operator_boolPtr_Conversion(PxMeshGeometryFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator bool();
}

ES uint8_t byte_const_PxMeshGeometryFlagsPtr_operator_unsigned_charPtr_Conversion(PxMeshGeometryFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator unsigned char();
}

ES uint16_t ushort_const_PxMeshGeometryFlagsPtr_operator_unsigned_shortPtr_Conversion(PxMeshGeometryFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator unsigned short();
}

ES uint32_t uint_const_PxMeshGeometryFlagsPtr_operator_unsigned_intPtr_Conversion(PxMeshGeometryFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxMeshGeometryFlag::Enum, unsigned char>::operator unsigned int();
}

ES void void_PxMeshGeometryFlagsPtr_clearPtr_PxMeshGeometryFlagEnum_(PxMeshGeometryFlagsPtr wrp_this, physx::PxMeshGeometryFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxMaterialFlagsPtr(PxMaterialFlagsPtr ptr){
    delete ptr;
}

ES PxMaterialFlagsPtr Ctor_PxMaterialFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxMaterialFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES PxMaterialFlagsPtr Ctor_PxMaterialFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxMaterialFlagsPtr>::type());
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES PxMaterialFlagsPtr Ctor_PxMaterialFlagsPtr_PxMaterialFlagEnum(physx::PxMaterialFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxMaterialFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES PxMaterialFlagsPtr Ctor_PxMaterialFlagsPtr_PxMaterialFlagsPtr(PxMaterialFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxMaterialFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES PxMaterialFlagsPtr Ctor_PxMaterialFlagsPtr_ushort(unsigned short wrp_b){
    auto ret = *(new std::remove_pointer<PxMaterialFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES bool bool_const_PxMaterialFlagsPtr_isSetPtr_PxMaterialFlagEnum_(PxMaterialFlagsPtr wrp_this, physx::PxMaterialFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_PxMaterialFlagsPtr_setPtr_PxMaterialFlagEnum_(PxMaterialFlagsPtr wrp_this, physx::PxMaterialFlag::Enum wrp_e){
    return (PxMaterialFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxMaterialFlagsPtr_operator_Ptr_EqualEqual_PxMaterialFlagEnum_(PxMaterialFlagsPtr wrp_lhs, physx::PxMaterialFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator==(wrp_e);
}

ES bool bool_const_PxMaterialFlagsPtr_operator_Ptr_EqualEqual_PxMaterialFlagsPtr_(PxMaterialFlagsPtr wrp_lhs, PxMaterialFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator==(*wrp_f);
}

ES bool bool_const_PxMaterialFlagsPtr_operator_Ptr_EqualEqual_bool_(PxMaterialFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator==(wrp_b);
}

ES bool bool_const_PxMaterialFlagsPtr_operator_Ptr_ExclaimEqual_PxMaterialFlagEnum_(PxMaterialFlagsPtr wrp_lhs, physx::PxMaterialFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator!=(wrp_e);
}

ES bool bool_const_PxMaterialFlagsPtr_operator_Ptr_ExclaimEqual_PxMaterialFlagsPtr_(PxMaterialFlagsPtr wrp_lhs, PxMaterialFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator!=(*wrp_f);
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_PxMaterialFlagsPtr_operator_Ptr_Equal_PxMaterialFlagsPtr_(PxMaterialFlagsPtr wrp_lhs, PxMaterialFlagsPtr wrp_f){
    return (PxMaterialFlagsPtr) &wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator=(*wrp_f);
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_PxMaterialFlagsPtr_operator_Ptr_Equal_PxMaterialFlagEnum_(PxMaterialFlagsPtr wrp_lhs, physx::PxMaterialFlag::Enum wrp_e){
    return (PxMaterialFlagsPtr) &wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator=(wrp_e);
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_PxMaterialFlagsPtr_operator_Ptr_PipeEqual_PxMaterialFlagEnum_(PxMaterialFlagsPtr wrp_lhs, physx::PxMaterialFlag::Enum wrp_e){
    return (PxMaterialFlagsPtr) &wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator|=(wrp_e);
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_PxMaterialFlagsPtr_operator_Ptr_PipeEqual_PxMaterialFlagsPtr_(PxMaterialFlagsPtr wrp_lhs, PxMaterialFlagsPtr wrp_f){
    return (PxMaterialFlagsPtr) &wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator|=(*wrp_f);
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_const_PxMaterialFlagsPtr_operator_Ptr_Pipe_PxMaterialFlagEnum_(PxMaterialFlagsPtr wrp_lhs, physx::PxMaterialFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator|(wrp_e);
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_const_PxMaterialFlagsPtr_operator_Ptr_Pipe_PxMaterialFlagsPtr_(PxMaterialFlagsPtr wrp_lhs, PxMaterialFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator|(*wrp_f);
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_PxMaterialFlagsPtr_operator_Ptr_AmpEqual_PxMaterialFlagEnum_(PxMaterialFlagsPtr wrp_lhs, physx::PxMaterialFlag::Enum wrp_e){
    return (PxMaterialFlagsPtr) &wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator&=(wrp_e);
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_PxMaterialFlagsPtr_operator_Ptr_AmpEqual_PxMaterialFlagsPtr_(PxMaterialFlagsPtr wrp_lhs, PxMaterialFlagsPtr wrp_f){
    return (PxMaterialFlagsPtr) &wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator&=(*wrp_f);
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_const_PxMaterialFlagsPtr_operator_Ptr_Amp_PxMaterialFlagEnum_(PxMaterialFlagsPtr wrp_lhs, physx::PxMaterialFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator&(wrp_e);
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_const_PxMaterialFlagsPtr_operator_Ptr_Amp_PxMaterialFlagsPtr_(PxMaterialFlagsPtr wrp_lhs, PxMaterialFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator&(*wrp_f);
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_PxMaterialFlagsPtr_operator_Ptr_CaretEqual_PxMaterialFlagEnum_(PxMaterialFlagsPtr wrp_lhs, physx::PxMaterialFlag::Enum wrp_e){
    return (PxMaterialFlagsPtr) &wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator^=(wrp_e);
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_PxMaterialFlagsPtr_operator_Ptr_CaretEqual_PxMaterialFlagsPtr_(PxMaterialFlagsPtr wrp_lhs, PxMaterialFlagsPtr wrp_f){
    return (PxMaterialFlagsPtr) &wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator^=(*wrp_f);
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_const_PxMaterialFlagsPtr_operator_Ptr_Caret_PxMaterialFlagEnum_(PxMaterialFlagsPtr wrp_lhs, physx::PxMaterialFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator^(wrp_e);
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_const_PxMaterialFlagsPtr_operator_Ptr_Caret_PxMaterialFlagsPtr_(PxMaterialFlagsPtr wrp_lhs, PxMaterialFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator^(*wrp_f);
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_const_PxMaterialFlagsPtr_operator_Ptr_Tilde(PxMaterialFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator~();
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES bool bool_const_PxMaterialFlagsPtr_operator_boolPtr_Conversion(PxMaterialFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator bool();
}

ES uint8_t byte_const_PxMaterialFlagsPtr_operator_unsigned_charPtr_Conversion(PxMaterialFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator unsigned char();
}

ES uint16_t ushort_const_PxMaterialFlagsPtr_operator_unsigned_shortPtr_Conversion(PxMaterialFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator unsigned short();
}

ES uint32_t uint_const_PxMaterialFlagsPtr_operator_unsigned_intPtr_Conversion(PxMaterialFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxMaterialFlag::Enum, unsigned short>::operator unsigned int();
}

ES void void_PxMaterialFlagsPtr_clearPtr_PxMaterialFlagEnum_(PxMaterialFlagsPtr wrp_this, physx::PxMaterialFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxShapeFlagsPtr(PxShapeFlagsPtr ptr){
    delete ptr;
}

ES PxShapeFlagsPtr Ctor_PxShapeFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxShapeFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES PxShapeFlagsPtr Ctor_PxShapeFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxShapeFlagsPtr>::type());
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES PxShapeFlagsPtr Ctor_PxShapeFlagsPtr_PxShapeFlagEnum(physx::PxShapeFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxShapeFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES PxShapeFlagsPtr Ctor_PxShapeFlagsPtr_PxShapeFlagsPtr(PxShapeFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxShapeFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES PxShapeFlagsPtr Ctor_PxShapeFlagsPtr_byte(unsigned char wrp_b){
    auto ret = *(new std::remove_pointer<PxShapeFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES bool bool_const_PxShapeFlagsPtr_isSetPtr_PxShapeFlagEnum_(PxShapeFlagsPtr wrp_this, physx::PxShapeFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_PxShapeFlagsPtr_setPtr_PxShapeFlagEnum_(PxShapeFlagsPtr wrp_this, physx::PxShapeFlag::Enum wrp_e){
    return (PxShapeFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxShapeFlagsPtr_operator_Ptr_EqualEqual_PxShapeFlagEnum_(PxShapeFlagsPtr wrp_lhs, physx::PxShapeFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator==(wrp_e);
}

ES bool bool_const_PxShapeFlagsPtr_operator_Ptr_EqualEqual_PxShapeFlagsPtr_(PxShapeFlagsPtr wrp_lhs, PxShapeFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator==(*wrp_f);
}

ES bool bool_const_PxShapeFlagsPtr_operator_Ptr_EqualEqual_bool_(PxShapeFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator==(wrp_b);
}

ES bool bool_const_PxShapeFlagsPtr_operator_Ptr_ExclaimEqual_PxShapeFlagEnum_(PxShapeFlagsPtr wrp_lhs, physx::PxShapeFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator!=(wrp_e);
}

ES bool bool_const_PxShapeFlagsPtr_operator_Ptr_ExclaimEqual_PxShapeFlagsPtr_(PxShapeFlagsPtr wrp_lhs, PxShapeFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator!=(*wrp_f);
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_PxShapeFlagsPtr_operator_Ptr_Equal_PxShapeFlagsPtr_(PxShapeFlagsPtr wrp_lhs, PxShapeFlagsPtr wrp_f){
    return (PxShapeFlagsPtr) &wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator=(*wrp_f);
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_PxShapeFlagsPtr_operator_Ptr_Equal_PxShapeFlagEnum_(PxShapeFlagsPtr wrp_lhs, physx::PxShapeFlag::Enum wrp_e){
    return (PxShapeFlagsPtr) &wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator=(wrp_e);
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_PxShapeFlagsPtr_operator_Ptr_PipeEqual_PxShapeFlagEnum_(PxShapeFlagsPtr wrp_lhs, physx::PxShapeFlag::Enum wrp_e){
    return (PxShapeFlagsPtr) &wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator|=(wrp_e);
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_PxShapeFlagsPtr_operator_Ptr_PipeEqual_PxShapeFlagsPtr_(PxShapeFlagsPtr wrp_lhs, PxShapeFlagsPtr wrp_f){
    return (PxShapeFlagsPtr) &wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator|=(*wrp_f);
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_const_PxShapeFlagsPtr_operator_Ptr_Pipe_PxShapeFlagEnum_(PxShapeFlagsPtr wrp_lhs, physx::PxShapeFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator|(wrp_e);
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_const_PxShapeFlagsPtr_operator_Ptr_Pipe_PxShapeFlagsPtr_(PxShapeFlagsPtr wrp_lhs, PxShapeFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator|(*wrp_f);
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_PxShapeFlagsPtr_operator_Ptr_AmpEqual_PxShapeFlagEnum_(PxShapeFlagsPtr wrp_lhs, physx::PxShapeFlag::Enum wrp_e){
    return (PxShapeFlagsPtr) &wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator&=(wrp_e);
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_PxShapeFlagsPtr_operator_Ptr_AmpEqual_PxShapeFlagsPtr_(PxShapeFlagsPtr wrp_lhs, PxShapeFlagsPtr wrp_f){
    return (PxShapeFlagsPtr) &wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator&=(*wrp_f);
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_const_PxShapeFlagsPtr_operator_Ptr_Amp_PxShapeFlagEnum_(PxShapeFlagsPtr wrp_lhs, physx::PxShapeFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator&(wrp_e);
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_const_PxShapeFlagsPtr_operator_Ptr_Amp_PxShapeFlagsPtr_(PxShapeFlagsPtr wrp_lhs, PxShapeFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator&(*wrp_f);
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_PxShapeFlagsPtr_operator_Ptr_CaretEqual_PxShapeFlagEnum_(PxShapeFlagsPtr wrp_lhs, physx::PxShapeFlag::Enum wrp_e){
    return (PxShapeFlagsPtr) &wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator^=(wrp_e);
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_PxShapeFlagsPtr_operator_Ptr_CaretEqual_PxShapeFlagsPtr_(PxShapeFlagsPtr wrp_lhs, PxShapeFlagsPtr wrp_f){
    return (PxShapeFlagsPtr) &wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator^=(*wrp_f);
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_const_PxShapeFlagsPtr_operator_Ptr_Caret_PxShapeFlagEnum_(PxShapeFlagsPtr wrp_lhs, physx::PxShapeFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator^(wrp_e);
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_const_PxShapeFlagsPtr_operator_Ptr_Caret_PxShapeFlagsPtr_(PxShapeFlagsPtr wrp_lhs, PxShapeFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator^(*wrp_f);
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_const_PxShapeFlagsPtr_operator_Ptr_Tilde(PxShapeFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator~();
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES bool bool_const_PxShapeFlagsPtr_operator_boolPtr_Conversion(PxShapeFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator bool();
}

ES uint8_t byte_const_PxShapeFlagsPtr_operator_unsigned_charPtr_Conversion(PxShapeFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator unsigned char();
}

ES uint16_t ushort_const_PxShapeFlagsPtr_operator_unsigned_shortPtr_Conversion(PxShapeFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator unsigned short();
}

ES uint32_t uint_const_PxShapeFlagsPtr_operator_unsigned_intPtr_Conversion(PxShapeFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxShapeFlag::Enum, unsigned char>::operator unsigned int();
}

ES void void_PxShapeFlagsPtr_clearPtr_PxShapeFlagEnum_(PxShapeFlagsPtr wrp_this, physx::PxShapeFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxConstraintFlagsPtr(PxConstraintFlagsPtr ptr){
    delete ptr;
}

ES PxConstraintFlagsPtr Ctor_PxConstraintFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxConstraintFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxConstraintFlags];
    std::memcpy(heap, &ret, sizeof PxConstraintFlags);
    return (PxConstraintFlagsPtr) heap;
}

ES PxConstraintFlagsPtr Ctor_PxConstraintFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxConstraintFlagsPtr>::type());
    auto heap = new char[sizeof PxConstraintFlags];
    std::memcpy(heap, &ret, sizeof PxConstraintFlags);
    return (PxConstraintFlagsPtr) heap;
}

ES PxConstraintFlagsPtr Ctor_PxConstraintFlagsPtr_PxConstraintFlagEnum(physx::PxConstraintFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxConstraintFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxConstraintFlags];
    std::memcpy(heap, &ret, sizeof PxConstraintFlags);
    return (PxConstraintFlagsPtr) heap;
}

ES PxConstraintFlagsPtr Ctor_PxConstraintFlagsPtr_PxConstraintFlagsPtr(PxConstraintFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxConstraintFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxConstraintFlags];
    std::memcpy(heap, &ret, sizeof PxConstraintFlags);
    return (PxConstraintFlagsPtr) heap;
}

ES PxConstraintFlagsPtr Ctor_PxConstraintFlagsPtr_ushort(unsigned short wrp_b){
    auto ret = *(new std::remove_pointer<PxConstraintFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxConstraintFlags];
    std::memcpy(heap, &ret, sizeof PxConstraintFlags);
    return (PxConstraintFlagsPtr) heap;
}

ES bool bool_const_PxConstraintFlagsPtr_isSetPtr_PxConstraintFlagEnum_(PxConstraintFlagsPtr wrp_this, physx::PxConstraintFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_PxConstraintFlagsPtr_setPtr_PxConstraintFlagEnum_(PxConstraintFlagsPtr wrp_this, physx::PxConstraintFlag::Enum wrp_e){
    return (PxConstraintFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxConstraintFlagsPtr_operator_Ptr_EqualEqual_PxConstraintFlagEnum_(PxConstraintFlagsPtr wrp_lhs, physx::PxConstraintFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator==(wrp_e);
}

ES bool bool_const_PxConstraintFlagsPtr_operator_Ptr_EqualEqual_PxConstraintFlagsPtr_(PxConstraintFlagsPtr wrp_lhs, PxConstraintFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator==(*wrp_f);
}

ES bool bool_const_PxConstraintFlagsPtr_operator_Ptr_EqualEqual_bool_(PxConstraintFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator==(wrp_b);
}

ES bool bool_const_PxConstraintFlagsPtr_operator_Ptr_ExclaimEqual_PxConstraintFlagEnum_(PxConstraintFlagsPtr wrp_lhs, physx::PxConstraintFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator!=(wrp_e);
}

ES bool bool_const_PxConstraintFlagsPtr_operator_Ptr_ExclaimEqual_PxConstraintFlagsPtr_(PxConstraintFlagsPtr wrp_lhs, PxConstraintFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator!=(*wrp_f);
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_PxConstraintFlagsPtr_operator_Ptr_Equal_PxConstraintFlagsPtr_(PxConstraintFlagsPtr wrp_lhs, PxConstraintFlagsPtr wrp_f){
    return (PxConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator=(*wrp_f);
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_PxConstraintFlagsPtr_operator_Ptr_Equal_PxConstraintFlagEnum_(PxConstraintFlagsPtr wrp_lhs, physx::PxConstraintFlag::Enum wrp_e){
    return (PxConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator=(wrp_e);
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_PxConstraintFlagsPtr_operator_Ptr_PipeEqual_PxConstraintFlagEnum_(PxConstraintFlagsPtr wrp_lhs, physx::PxConstraintFlag::Enum wrp_e){
    return (PxConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator|=(wrp_e);
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_PxConstraintFlagsPtr_operator_Ptr_PipeEqual_PxConstraintFlagsPtr_(PxConstraintFlagsPtr wrp_lhs, PxConstraintFlagsPtr wrp_f){
    return (PxConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator|=(*wrp_f);
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_const_PxConstraintFlagsPtr_operator_Ptr_Pipe_PxConstraintFlagEnum_(PxConstraintFlagsPtr wrp_lhs, physx::PxConstraintFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator|(wrp_e);
    auto heap = new char[sizeof PxConstraintFlags];
    std::memcpy(heap, &ret, sizeof PxConstraintFlags);
    return (PxConstraintFlagsPtr) heap;
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_const_PxConstraintFlagsPtr_operator_Ptr_Pipe_PxConstraintFlagsPtr_(PxConstraintFlagsPtr wrp_lhs, PxConstraintFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator|(*wrp_f);
    auto heap = new char[sizeof PxConstraintFlags];
    std::memcpy(heap, &ret, sizeof PxConstraintFlags);
    return (PxConstraintFlagsPtr) heap;
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_PxConstraintFlagsPtr_operator_Ptr_AmpEqual_PxConstraintFlagEnum_(PxConstraintFlagsPtr wrp_lhs, physx::PxConstraintFlag::Enum wrp_e){
    return (PxConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator&=(wrp_e);
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_PxConstraintFlagsPtr_operator_Ptr_AmpEqual_PxConstraintFlagsPtr_(PxConstraintFlagsPtr wrp_lhs, PxConstraintFlagsPtr wrp_f){
    return (PxConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator&=(*wrp_f);
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_const_PxConstraintFlagsPtr_operator_Ptr_Amp_PxConstraintFlagEnum_(PxConstraintFlagsPtr wrp_lhs, physx::PxConstraintFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator&(wrp_e);
    auto heap = new char[sizeof PxConstraintFlags];
    std::memcpy(heap, &ret, sizeof PxConstraintFlags);
    return (PxConstraintFlagsPtr) heap;
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_const_PxConstraintFlagsPtr_operator_Ptr_Amp_PxConstraintFlagsPtr_(PxConstraintFlagsPtr wrp_lhs, PxConstraintFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator&(*wrp_f);
    auto heap = new char[sizeof PxConstraintFlags];
    std::memcpy(heap, &ret, sizeof PxConstraintFlags);
    return (PxConstraintFlagsPtr) heap;
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_PxConstraintFlagsPtr_operator_Ptr_CaretEqual_PxConstraintFlagEnum_(PxConstraintFlagsPtr wrp_lhs, physx::PxConstraintFlag::Enum wrp_e){
    return (PxConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator^=(wrp_e);
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_PxConstraintFlagsPtr_operator_Ptr_CaretEqual_PxConstraintFlagsPtr_(PxConstraintFlagsPtr wrp_lhs, PxConstraintFlagsPtr wrp_f){
    return (PxConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator^=(*wrp_f);
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_const_PxConstraintFlagsPtr_operator_Ptr_Caret_PxConstraintFlagEnum_(PxConstraintFlagsPtr wrp_lhs, physx::PxConstraintFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator^(wrp_e);
    auto heap = new char[sizeof PxConstraintFlags];
    std::memcpy(heap, &ret, sizeof PxConstraintFlags);
    return (PxConstraintFlagsPtr) heap;
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_const_PxConstraintFlagsPtr_operator_Ptr_Caret_PxConstraintFlagsPtr_(PxConstraintFlagsPtr wrp_lhs, PxConstraintFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator^(*wrp_f);
    auto heap = new char[sizeof PxConstraintFlags];
    std::memcpy(heap, &ret, sizeof PxConstraintFlags);
    return (PxConstraintFlagsPtr) heap;
}

ES PxConstraintFlagsPtr PxConstraintFlagsPtr_const_PxConstraintFlagsPtr_operator_Ptr_Tilde(PxConstraintFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator~();
    auto heap = new char[sizeof PxConstraintFlags];
    std::memcpy(heap, &ret, sizeof PxConstraintFlags);
    return (PxConstraintFlagsPtr) heap;
}

ES bool bool_const_PxConstraintFlagsPtr_operator_boolPtr_Conversion(PxConstraintFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator bool();
}

ES uint8_t byte_const_PxConstraintFlagsPtr_operator_unsigned_charPtr_Conversion(PxConstraintFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator unsigned char();
}

ES uint16_t ushort_const_PxConstraintFlagsPtr_operator_unsigned_shortPtr_Conversion(PxConstraintFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator unsigned short();
}

ES uint32_t uint_const_PxConstraintFlagsPtr_operator_unsigned_intPtr_Conversion(PxConstraintFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxConstraintFlag::Enum, unsigned short>::operator unsigned int();
}

ES void void_PxConstraintFlagsPtr_clearPtr_PxConstraintFlagEnum_(PxConstraintFlagsPtr wrp_this, physx::PxConstraintFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxActorFlagsPtr(PxActorFlagsPtr ptr){
    delete ptr;
}

ES PxActorFlagsPtr Ctor_PxActorFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxActorFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES PxActorFlagsPtr Ctor_PxActorFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxActorFlagsPtr>::type());
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES PxActorFlagsPtr Ctor_PxActorFlagsPtr_PxActorFlagEnum(physx::PxActorFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxActorFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES PxActorFlagsPtr Ctor_PxActorFlagsPtr_PxActorFlagsPtr(PxActorFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxActorFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES PxActorFlagsPtr Ctor_PxActorFlagsPtr_byte(unsigned char wrp_b){
    auto ret = *(new std::remove_pointer<PxActorFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES bool bool_const_PxActorFlagsPtr_isSetPtr_PxActorFlagEnum_(PxActorFlagsPtr wrp_this, physx::PxActorFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxActorFlagsPtr PxActorFlagsPtr_PxActorFlagsPtr_setPtr_PxActorFlagEnum_(PxActorFlagsPtr wrp_this, physx::PxActorFlag::Enum wrp_e){
    return (PxActorFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxActorFlagsPtr_operator_Ptr_EqualEqual_PxActorFlagEnum_(PxActorFlagsPtr wrp_lhs, physx::PxActorFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator==(wrp_e);
}

ES bool bool_const_PxActorFlagsPtr_operator_Ptr_EqualEqual_PxActorFlagsPtr_(PxActorFlagsPtr wrp_lhs, PxActorFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator==(*wrp_f);
}

ES bool bool_const_PxActorFlagsPtr_operator_Ptr_EqualEqual_bool_(PxActorFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator==(wrp_b);
}

ES bool bool_const_PxActorFlagsPtr_operator_Ptr_ExclaimEqual_PxActorFlagEnum_(PxActorFlagsPtr wrp_lhs, physx::PxActorFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator!=(wrp_e);
}

ES bool bool_const_PxActorFlagsPtr_operator_Ptr_ExclaimEqual_PxActorFlagsPtr_(PxActorFlagsPtr wrp_lhs, PxActorFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator!=(*wrp_f);
}

ES PxActorFlagsPtr PxActorFlagsPtr_PxActorFlagsPtr_operator_Ptr_Equal_PxActorFlagsPtr_(PxActorFlagsPtr wrp_lhs, PxActorFlagsPtr wrp_f){
    return (PxActorFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator=(*wrp_f);
}

ES PxActorFlagsPtr PxActorFlagsPtr_PxActorFlagsPtr_operator_Ptr_Equal_PxActorFlagEnum_(PxActorFlagsPtr wrp_lhs, physx::PxActorFlag::Enum wrp_e){
    return (PxActorFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator=(wrp_e);
}

ES PxActorFlagsPtr PxActorFlagsPtr_PxActorFlagsPtr_operator_Ptr_PipeEqual_PxActorFlagEnum_(PxActorFlagsPtr wrp_lhs, physx::PxActorFlag::Enum wrp_e){
    return (PxActorFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator|=(wrp_e);
}

ES PxActorFlagsPtr PxActorFlagsPtr_PxActorFlagsPtr_operator_Ptr_PipeEqual_PxActorFlagsPtr_(PxActorFlagsPtr wrp_lhs, PxActorFlagsPtr wrp_f){
    return (PxActorFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator|=(*wrp_f);
}

ES PxActorFlagsPtr PxActorFlagsPtr_const_PxActorFlagsPtr_operator_Ptr_Pipe_PxActorFlagEnum_(PxActorFlagsPtr wrp_lhs, physx::PxActorFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator|(wrp_e);
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES PxActorFlagsPtr PxActorFlagsPtr_const_PxActorFlagsPtr_operator_Ptr_Pipe_PxActorFlagsPtr_(PxActorFlagsPtr wrp_lhs, PxActorFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator|(*wrp_f);
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES PxActorFlagsPtr PxActorFlagsPtr_PxActorFlagsPtr_operator_Ptr_AmpEqual_PxActorFlagEnum_(PxActorFlagsPtr wrp_lhs, physx::PxActorFlag::Enum wrp_e){
    return (PxActorFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator&=(wrp_e);
}

ES PxActorFlagsPtr PxActorFlagsPtr_PxActorFlagsPtr_operator_Ptr_AmpEqual_PxActorFlagsPtr_(PxActorFlagsPtr wrp_lhs, PxActorFlagsPtr wrp_f){
    return (PxActorFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator&=(*wrp_f);
}

ES PxActorFlagsPtr PxActorFlagsPtr_const_PxActorFlagsPtr_operator_Ptr_Amp_PxActorFlagEnum_(PxActorFlagsPtr wrp_lhs, physx::PxActorFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator&(wrp_e);
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES PxActorFlagsPtr PxActorFlagsPtr_const_PxActorFlagsPtr_operator_Ptr_Amp_PxActorFlagsPtr_(PxActorFlagsPtr wrp_lhs, PxActorFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator&(*wrp_f);
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES PxActorFlagsPtr PxActorFlagsPtr_PxActorFlagsPtr_operator_Ptr_CaretEqual_PxActorFlagEnum_(PxActorFlagsPtr wrp_lhs, physx::PxActorFlag::Enum wrp_e){
    return (PxActorFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator^=(wrp_e);
}

ES PxActorFlagsPtr PxActorFlagsPtr_PxActorFlagsPtr_operator_Ptr_CaretEqual_PxActorFlagsPtr_(PxActorFlagsPtr wrp_lhs, PxActorFlagsPtr wrp_f){
    return (PxActorFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator^=(*wrp_f);
}

ES PxActorFlagsPtr PxActorFlagsPtr_const_PxActorFlagsPtr_operator_Ptr_Caret_PxActorFlagEnum_(PxActorFlagsPtr wrp_lhs, physx::PxActorFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator^(wrp_e);
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES PxActorFlagsPtr PxActorFlagsPtr_const_PxActorFlagsPtr_operator_Ptr_Caret_PxActorFlagsPtr_(PxActorFlagsPtr wrp_lhs, PxActorFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator^(*wrp_f);
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES PxActorFlagsPtr PxActorFlagsPtr_const_PxActorFlagsPtr_operator_Ptr_Tilde(PxActorFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator~();
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES bool bool_const_PxActorFlagsPtr_operator_boolPtr_Conversion(PxActorFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator bool();
}

ES uint8_t byte_const_PxActorFlagsPtr_operator_unsigned_charPtr_Conversion(PxActorFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator unsigned char();
}

ES uint16_t ushort_const_PxActorFlagsPtr_operator_unsigned_shortPtr_Conversion(PxActorFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator unsigned short();
}

ES uint32_t uint_const_PxActorFlagsPtr_operator_unsigned_intPtr_Conversion(PxActorFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxActorFlag::Enum, unsigned char>::operator unsigned int();
}

ES void void_PxActorFlagsPtr_clearPtr_PxActorFlagEnum_(PxActorFlagsPtr wrp_this, physx::PxActorFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxRigidBodyFlagsPtr(PxRigidBodyFlagsPtr ptr){
    delete ptr;
}

ES PxRigidBodyFlagsPtr Ctor_PxRigidBodyFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxRigidBodyFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES PxRigidBodyFlagsPtr Ctor_PxRigidBodyFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxRigidBodyFlagsPtr>::type());
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES PxRigidBodyFlagsPtr Ctor_PxRigidBodyFlagsPtr_PxRigidBodyFlagEnum(physx::PxRigidBodyFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxRigidBodyFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES PxRigidBodyFlagsPtr Ctor_PxRigidBodyFlagsPtr_PxRigidBodyFlagsPtr(PxRigidBodyFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxRigidBodyFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES PxRigidBodyFlagsPtr Ctor_PxRigidBodyFlagsPtr_byte(unsigned char wrp_b){
    auto ret = *(new std::remove_pointer<PxRigidBodyFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES bool bool_const_PxRigidBodyFlagsPtr_isSetPtr_PxRigidBodyFlagEnum_(PxRigidBodyFlagsPtr wrp_this, physx::PxRigidBodyFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_PxRigidBodyFlagsPtr_setPtr_PxRigidBodyFlagEnum_(PxRigidBodyFlagsPtr wrp_this, physx::PxRigidBodyFlag::Enum wrp_e){
    return (PxRigidBodyFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxRigidBodyFlagsPtr_operator_Ptr_EqualEqual_PxRigidBodyFlagEnum_(PxRigidBodyFlagsPtr wrp_lhs, physx::PxRigidBodyFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator==(wrp_e);
}

ES bool bool_const_PxRigidBodyFlagsPtr_operator_Ptr_EqualEqual_PxRigidBodyFlagsPtr_(PxRigidBodyFlagsPtr wrp_lhs, PxRigidBodyFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator==(*wrp_f);
}

ES bool bool_const_PxRigidBodyFlagsPtr_operator_Ptr_EqualEqual_bool_(PxRigidBodyFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator==(wrp_b);
}

ES bool bool_const_PxRigidBodyFlagsPtr_operator_Ptr_ExclaimEqual_PxRigidBodyFlagEnum_(PxRigidBodyFlagsPtr wrp_lhs, physx::PxRigidBodyFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator!=(wrp_e);
}

ES bool bool_const_PxRigidBodyFlagsPtr_operator_Ptr_ExclaimEqual_PxRigidBodyFlagsPtr_(PxRigidBodyFlagsPtr wrp_lhs, PxRigidBodyFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator!=(*wrp_f);
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_PxRigidBodyFlagsPtr_operator_Ptr_Equal_PxRigidBodyFlagsPtr_(PxRigidBodyFlagsPtr wrp_lhs, PxRigidBodyFlagsPtr wrp_f){
    return (PxRigidBodyFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator=(*wrp_f);
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_PxRigidBodyFlagsPtr_operator_Ptr_Equal_PxRigidBodyFlagEnum_(PxRigidBodyFlagsPtr wrp_lhs, physx::PxRigidBodyFlag::Enum wrp_e){
    return (PxRigidBodyFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator=(wrp_e);
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_PxRigidBodyFlagsPtr_operator_Ptr_PipeEqual_PxRigidBodyFlagEnum_(PxRigidBodyFlagsPtr wrp_lhs, physx::PxRigidBodyFlag::Enum wrp_e){
    return (PxRigidBodyFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator|=(wrp_e);
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_PxRigidBodyFlagsPtr_operator_Ptr_PipeEqual_PxRigidBodyFlagsPtr_(PxRigidBodyFlagsPtr wrp_lhs, PxRigidBodyFlagsPtr wrp_f){
    return (PxRigidBodyFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator|=(*wrp_f);
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_const_PxRigidBodyFlagsPtr_operator_Ptr_Pipe_PxRigidBodyFlagEnum_(PxRigidBodyFlagsPtr wrp_lhs, physx::PxRigidBodyFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator|(wrp_e);
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_const_PxRigidBodyFlagsPtr_operator_Ptr_Pipe_PxRigidBodyFlagsPtr_(PxRigidBodyFlagsPtr wrp_lhs, PxRigidBodyFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator|(*wrp_f);
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_PxRigidBodyFlagsPtr_operator_Ptr_AmpEqual_PxRigidBodyFlagEnum_(PxRigidBodyFlagsPtr wrp_lhs, physx::PxRigidBodyFlag::Enum wrp_e){
    return (PxRigidBodyFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator&=(wrp_e);
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_PxRigidBodyFlagsPtr_operator_Ptr_AmpEqual_PxRigidBodyFlagsPtr_(PxRigidBodyFlagsPtr wrp_lhs, PxRigidBodyFlagsPtr wrp_f){
    return (PxRigidBodyFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator&=(*wrp_f);
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_const_PxRigidBodyFlagsPtr_operator_Ptr_Amp_PxRigidBodyFlagEnum_(PxRigidBodyFlagsPtr wrp_lhs, physx::PxRigidBodyFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator&(wrp_e);
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_const_PxRigidBodyFlagsPtr_operator_Ptr_Amp_PxRigidBodyFlagsPtr_(PxRigidBodyFlagsPtr wrp_lhs, PxRigidBodyFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator&(*wrp_f);
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_PxRigidBodyFlagsPtr_operator_Ptr_CaretEqual_PxRigidBodyFlagEnum_(PxRigidBodyFlagsPtr wrp_lhs, physx::PxRigidBodyFlag::Enum wrp_e){
    return (PxRigidBodyFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator^=(wrp_e);
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_PxRigidBodyFlagsPtr_operator_Ptr_CaretEqual_PxRigidBodyFlagsPtr_(PxRigidBodyFlagsPtr wrp_lhs, PxRigidBodyFlagsPtr wrp_f){
    return (PxRigidBodyFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator^=(*wrp_f);
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_const_PxRigidBodyFlagsPtr_operator_Ptr_Caret_PxRigidBodyFlagEnum_(PxRigidBodyFlagsPtr wrp_lhs, physx::PxRigidBodyFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator^(wrp_e);
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_const_PxRigidBodyFlagsPtr_operator_Ptr_Caret_PxRigidBodyFlagsPtr_(PxRigidBodyFlagsPtr wrp_lhs, PxRigidBodyFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator^(*wrp_f);
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_const_PxRigidBodyFlagsPtr_operator_Ptr_Tilde(PxRigidBodyFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator~();
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES bool bool_const_PxRigidBodyFlagsPtr_operator_boolPtr_Conversion(PxRigidBodyFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator bool();
}

ES uint8_t byte_const_PxRigidBodyFlagsPtr_operator_unsigned_charPtr_Conversion(PxRigidBodyFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator unsigned char();
}

ES uint16_t ushort_const_PxRigidBodyFlagsPtr_operator_unsigned_shortPtr_Conversion(PxRigidBodyFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator unsigned short();
}

ES uint32_t uint_const_PxRigidBodyFlagsPtr_operator_unsigned_intPtr_Conversion(PxRigidBodyFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxRigidBodyFlag::Enum, unsigned char>::operator unsigned int();
}

ES void void_PxRigidBodyFlagsPtr_clearPtr_PxRigidBodyFlagEnum_(PxRigidBodyFlagsPtr wrp_this, physx::PxRigidBodyFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxActorTypeFlagsPtr(PxActorTypeFlagsPtr ptr){
    delete ptr;
}

ES PxActorTypeFlagsPtr Ctor_PxActorTypeFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxActorTypeFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES PxActorTypeFlagsPtr Ctor_PxActorTypeFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxActorTypeFlagsPtr>::type());
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES PxActorTypeFlagsPtr Ctor_PxActorTypeFlagsPtr_PxActorTypeFlagEnum(physx::PxActorTypeFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxActorTypeFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES PxActorTypeFlagsPtr Ctor_PxActorTypeFlagsPtr_PxActorTypeFlagsPtr(PxActorTypeFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxActorTypeFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES PxActorTypeFlagsPtr Ctor_PxActorTypeFlagsPtr_ushort(unsigned short wrp_b){
    auto ret = *(new std::remove_pointer<PxActorTypeFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES bool bool_const_PxActorTypeFlagsPtr_isSetPtr_PxActorTypeFlagEnum_(PxActorTypeFlagsPtr wrp_this, physx::PxActorTypeFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_PxActorTypeFlagsPtr_setPtr_PxActorTypeFlagEnum_(PxActorTypeFlagsPtr wrp_this, physx::PxActorTypeFlag::Enum wrp_e){
    return (PxActorTypeFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxActorTypeFlagsPtr_operator_Ptr_EqualEqual_PxActorTypeFlagEnum_(PxActorTypeFlagsPtr wrp_lhs, physx::PxActorTypeFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator==(wrp_e);
}

ES bool bool_const_PxActorTypeFlagsPtr_operator_Ptr_EqualEqual_PxActorTypeFlagsPtr_(PxActorTypeFlagsPtr wrp_lhs, PxActorTypeFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator==(*wrp_f);
}

ES bool bool_const_PxActorTypeFlagsPtr_operator_Ptr_EqualEqual_bool_(PxActorTypeFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator==(wrp_b);
}

ES bool bool_const_PxActorTypeFlagsPtr_operator_Ptr_ExclaimEqual_PxActorTypeFlagEnum_(PxActorTypeFlagsPtr wrp_lhs, physx::PxActorTypeFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator!=(wrp_e);
}

ES bool bool_const_PxActorTypeFlagsPtr_operator_Ptr_ExclaimEqual_PxActorTypeFlagsPtr_(PxActorTypeFlagsPtr wrp_lhs, PxActorTypeFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator!=(*wrp_f);
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_PxActorTypeFlagsPtr_operator_Ptr_Equal_PxActorTypeFlagsPtr_(PxActorTypeFlagsPtr wrp_lhs, PxActorTypeFlagsPtr wrp_f){
    return (PxActorTypeFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator=(*wrp_f);
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_PxActorTypeFlagsPtr_operator_Ptr_Equal_PxActorTypeFlagEnum_(PxActorTypeFlagsPtr wrp_lhs, physx::PxActorTypeFlag::Enum wrp_e){
    return (PxActorTypeFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator=(wrp_e);
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_PxActorTypeFlagsPtr_operator_Ptr_PipeEqual_PxActorTypeFlagEnum_(PxActorTypeFlagsPtr wrp_lhs, physx::PxActorTypeFlag::Enum wrp_e){
    return (PxActorTypeFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator|=(wrp_e);
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_PxActorTypeFlagsPtr_operator_Ptr_PipeEqual_PxActorTypeFlagsPtr_(PxActorTypeFlagsPtr wrp_lhs, PxActorTypeFlagsPtr wrp_f){
    return (PxActorTypeFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator|=(*wrp_f);
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_const_PxActorTypeFlagsPtr_operator_Ptr_Pipe_PxActorTypeFlagEnum_(PxActorTypeFlagsPtr wrp_lhs, physx::PxActorTypeFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator|(wrp_e);
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_const_PxActorTypeFlagsPtr_operator_Ptr_Pipe_PxActorTypeFlagsPtr_(PxActorTypeFlagsPtr wrp_lhs, PxActorTypeFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator|(*wrp_f);
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_PxActorTypeFlagsPtr_operator_Ptr_AmpEqual_PxActorTypeFlagEnum_(PxActorTypeFlagsPtr wrp_lhs, physx::PxActorTypeFlag::Enum wrp_e){
    return (PxActorTypeFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator&=(wrp_e);
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_PxActorTypeFlagsPtr_operator_Ptr_AmpEqual_PxActorTypeFlagsPtr_(PxActorTypeFlagsPtr wrp_lhs, PxActorTypeFlagsPtr wrp_f){
    return (PxActorTypeFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator&=(*wrp_f);
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_const_PxActorTypeFlagsPtr_operator_Ptr_Amp_PxActorTypeFlagEnum_(PxActorTypeFlagsPtr wrp_lhs, physx::PxActorTypeFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator&(wrp_e);
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_const_PxActorTypeFlagsPtr_operator_Ptr_Amp_PxActorTypeFlagsPtr_(PxActorTypeFlagsPtr wrp_lhs, PxActorTypeFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator&(*wrp_f);
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_PxActorTypeFlagsPtr_operator_Ptr_CaretEqual_PxActorTypeFlagEnum_(PxActorTypeFlagsPtr wrp_lhs, physx::PxActorTypeFlag::Enum wrp_e){
    return (PxActorTypeFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator^=(wrp_e);
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_PxActorTypeFlagsPtr_operator_Ptr_CaretEqual_PxActorTypeFlagsPtr_(PxActorTypeFlagsPtr wrp_lhs, PxActorTypeFlagsPtr wrp_f){
    return (PxActorTypeFlagsPtr) &wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator^=(*wrp_f);
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_const_PxActorTypeFlagsPtr_operator_Ptr_Caret_PxActorTypeFlagEnum_(PxActorTypeFlagsPtr wrp_lhs, physx::PxActorTypeFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator^(wrp_e);
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_const_PxActorTypeFlagsPtr_operator_Ptr_Caret_PxActorTypeFlagsPtr_(PxActorTypeFlagsPtr wrp_lhs, PxActorTypeFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator^(*wrp_f);
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_const_PxActorTypeFlagsPtr_operator_Ptr_Tilde(PxActorTypeFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator~();
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES bool bool_const_PxActorTypeFlagsPtr_operator_boolPtr_Conversion(PxActorTypeFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator bool();
}

ES uint8_t byte_const_PxActorTypeFlagsPtr_operator_unsigned_charPtr_Conversion(PxActorTypeFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator unsigned char();
}

ES uint16_t ushort_const_PxActorTypeFlagsPtr_operator_unsigned_shortPtr_Conversion(PxActorTypeFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator unsigned short();
}

ES uint32_t uint_const_PxActorTypeFlagsPtr_operator_unsigned_intPtr_Conversion(PxActorTypeFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxActorTypeFlag::Enum, unsigned short>::operator unsigned int();
}

ES void void_PxActorTypeFlagsPtr_clearPtr_PxActorTypeFlagEnum_(PxActorTypeFlagsPtr wrp_this, physx::PxActorTypeFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxFilterFlagsPtr(PxFilterFlagsPtr ptr){
    delete ptr;
}

ES PxFilterFlagsPtr Ctor_PxFilterFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxFilterFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES PxFilterFlagsPtr Ctor_PxFilterFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxFilterFlagsPtr>::type());
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES PxFilterFlagsPtr Ctor_PxFilterFlagsPtr_PxFilterFlagEnum(physx::PxFilterFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxFilterFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES PxFilterFlagsPtr Ctor_PxFilterFlagsPtr_PxFilterFlagsPtr(PxFilterFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxFilterFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES PxFilterFlagsPtr Ctor_PxFilterFlagsPtr_ushort(unsigned short wrp_b){
    auto ret = *(new std::remove_pointer<PxFilterFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES bool bool_const_PxFilterFlagsPtr_isSetPtr_PxFilterFlagEnum_(PxFilterFlagsPtr wrp_this, physx::PxFilterFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_PxFilterFlagsPtr_setPtr_PxFilterFlagEnum_(PxFilterFlagsPtr wrp_this, physx::PxFilterFlag::Enum wrp_e){
    return (PxFilterFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxFilterFlagsPtr_operator_Ptr_EqualEqual_PxFilterFlagEnum_(PxFilterFlagsPtr wrp_lhs, physx::PxFilterFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator==(wrp_e);
}

ES bool bool_const_PxFilterFlagsPtr_operator_Ptr_EqualEqual_PxFilterFlagsPtr_(PxFilterFlagsPtr wrp_lhs, PxFilterFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator==(*wrp_f);
}

ES bool bool_const_PxFilterFlagsPtr_operator_Ptr_EqualEqual_bool_(PxFilterFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator==(wrp_b);
}

ES bool bool_const_PxFilterFlagsPtr_operator_Ptr_ExclaimEqual_PxFilterFlagEnum_(PxFilterFlagsPtr wrp_lhs, physx::PxFilterFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator!=(wrp_e);
}

ES bool bool_const_PxFilterFlagsPtr_operator_Ptr_ExclaimEqual_PxFilterFlagsPtr_(PxFilterFlagsPtr wrp_lhs, PxFilterFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator!=(*wrp_f);
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_PxFilterFlagsPtr_operator_Ptr_Equal_PxFilterFlagsPtr_(PxFilterFlagsPtr wrp_lhs, PxFilterFlagsPtr wrp_f){
    return (PxFilterFlagsPtr) &wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator=(*wrp_f);
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_PxFilterFlagsPtr_operator_Ptr_Equal_PxFilterFlagEnum_(PxFilterFlagsPtr wrp_lhs, physx::PxFilterFlag::Enum wrp_e){
    return (PxFilterFlagsPtr) &wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator=(wrp_e);
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_PxFilterFlagsPtr_operator_Ptr_PipeEqual_PxFilterFlagEnum_(PxFilterFlagsPtr wrp_lhs, physx::PxFilterFlag::Enum wrp_e){
    return (PxFilterFlagsPtr) &wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator|=(wrp_e);
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_PxFilterFlagsPtr_operator_Ptr_PipeEqual_PxFilterFlagsPtr_(PxFilterFlagsPtr wrp_lhs, PxFilterFlagsPtr wrp_f){
    return (PxFilterFlagsPtr) &wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator|=(*wrp_f);
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_const_PxFilterFlagsPtr_operator_Ptr_Pipe_PxFilterFlagEnum_(PxFilterFlagsPtr wrp_lhs, physx::PxFilterFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator|(wrp_e);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_const_PxFilterFlagsPtr_operator_Ptr_Pipe_PxFilterFlagsPtr_(PxFilterFlagsPtr wrp_lhs, PxFilterFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator|(*wrp_f);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_PxFilterFlagsPtr_operator_Ptr_AmpEqual_PxFilterFlagEnum_(PxFilterFlagsPtr wrp_lhs, physx::PxFilterFlag::Enum wrp_e){
    return (PxFilterFlagsPtr) &wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator&=(wrp_e);
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_PxFilterFlagsPtr_operator_Ptr_AmpEqual_PxFilterFlagsPtr_(PxFilterFlagsPtr wrp_lhs, PxFilterFlagsPtr wrp_f){
    return (PxFilterFlagsPtr) &wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator&=(*wrp_f);
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_const_PxFilterFlagsPtr_operator_Ptr_Amp_PxFilterFlagEnum_(PxFilterFlagsPtr wrp_lhs, physx::PxFilterFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator&(wrp_e);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_const_PxFilterFlagsPtr_operator_Ptr_Amp_PxFilterFlagsPtr_(PxFilterFlagsPtr wrp_lhs, PxFilterFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator&(*wrp_f);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_PxFilterFlagsPtr_operator_Ptr_CaretEqual_PxFilterFlagEnum_(PxFilterFlagsPtr wrp_lhs, physx::PxFilterFlag::Enum wrp_e){
    return (PxFilterFlagsPtr) &wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator^=(wrp_e);
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_PxFilterFlagsPtr_operator_Ptr_CaretEqual_PxFilterFlagsPtr_(PxFilterFlagsPtr wrp_lhs, PxFilterFlagsPtr wrp_f){
    return (PxFilterFlagsPtr) &wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator^=(*wrp_f);
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_const_PxFilterFlagsPtr_operator_Ptr_Caret_PxFilterFlagEnum_(PxFilterFlagsPtr wrp_lhs, physx::PxFilterFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator^(wrp_e);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_const_PxFilterFlagsPtr_operator_Ptr_Caret_PxFilterFlagsPtr_(PxFilterFlagsPtr wrp_lhs, PxFilterFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator^(*wrp_f);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_const_PxFilterFlagsPtr_operator_Ptr_Tilde(PxFilterFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator~();
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES bool bool_const_PxFilterFlagsPtr_operator_boolPtr_Conversion(PxFilterFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator bool();
}

ES uint8_t byte_const_PxFilterFlagsPtr_operator_unsigned_charPtr_Conversion(PxFilterFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator unsigned char();
}

ES uint16_t ushort_const_PxFilterFlagsPtr_operator_unsigned_shortPtr_Conversion(PxFilterFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator unsigned short();
}

ES uint32_t uint_const_PxFilterFlagsPtr_operator_unsigned_intPtr_Conversion(PxFilterFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxFilterFlag::Enum, unsigned short>::operator unsigned int();
}

ES void void_PxFilterFlagsPtr_clearPtr_PxFilterFlagEnum_(PxFilterFlagsPtr wrp_this, physx::PxFilterFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxPairFlagsPtr(PxPairFlagsPtr ptr){
    delete ptr;
}

ES PxPairFlagsPtr Ctor_PxPairFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxPairFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

ES PxPairFlagsPtr Ctor_PxPairFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxPairFlagsPtr>::type());
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

ES PxPairFlagsPtr Ctor_PxPairFlagsPtr_PxPairFlagEnum(physx::PxPairFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxPairFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

ES PxPairFlagsPtr Ctor_PxPairFlagsPtr_PxPairFlagsPtr(PxPairFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxPairFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

ES PxPairFlagsPtr Ctor_PxPairFlagsPtr_ushort(unsigned short wrp_b){
    auto ret = *(new std::remove_pointer<PxPairFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

ES bool bool_const_PxPairFlagsPtr_isSetPtr_PxPairFlagEnum_(PxPairFlagsPtr wrp_this, physx::PxPairFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxPairFlagsPtr PxPairFlagsPtr_PxPairFlagsPtr_setPtr_PxPairFlagEnum_(PxPairFlagsPtr wrp_this, physx::PxPairFlag::Enum wrp_e){
    return (PxPairFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxPairFlagsPtr_operator_Ptr_EqualEqual_PxPairFlagEnum_(PxPairFlagsPtr wrp_lhs, physx::PxPairFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator==(wrp_e);
}

ES bool bool_const_PxPairFlagsPtr_operator_Ptr_EqualEqual_PxPairFlagsPtr_(PxPairFlagsPtr wrp_lhs, PxPairFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator==(*wrp_f);
}

ES bool bool_const_PxPairFlagsPtr_operator_Ptr_EqualEqual_bool_(PxPairFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator==(wrp_b);
}

ES bool bool_const_PxPairFlagsPtr_operator_Ptr_ExclaimEqual_PxPairFlagEnum_(PxPairFlagsPtr wrp_lhs, physx::PxPairFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator!=(wrp_e);
}

ES bool bool_const_PxPairFlagsPtr_operator_Ptr_ExclaimEqual_PxPairFlagsPtr_(PxPairFlagsPtr wrp_lhs, PxPairFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator!=(*wrp_f);
}

ES PxPairFlagsPtr PxPairFlagsPtr_PxPairFlagsPtr_operator_Ptr_Equal_PxPairFlagsPtr_(PxPairFlagsPtr wrp_lhs, PxPairFlagsPtr wrp_f){
    return (PxPairFlagsPtr) &wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator=(*wrp_f);
}

ES PxPairFlagsPtr PxPairFlagsPtr_PxPairFlagsPtr_operator_Ptr_Equal_PxPairFlagEnum_(PxPairFlagsPtr wrp_lhs, physx::PxPairFlag::Enum wrp_e){
    return (PxPairFlagsPtr) &wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator=(wrp_e);
}

ES PxPairFlagsPtr PxPairFlagsPtr_PxPairFlagsPtr_operator_Ptr_PipeEqual_PxPairFlagEnum_(PxPairFlagsPtr wrp_lhs, physx::PxPairFlag::Enum wrp_e){
    return (PxPairFlagsPtr) &wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator|=(wrp_e);
}

ES PxPairFlagsPtr PxPairFlagsPtr_PxPairFlagsPtr_operator_Ptr_PipeEqual_PxPairFlagsPtr_(PxPairFlagsPtr wrp_lhs, PxPairFlagsPtr wrp_f){
    return (PxPairFlagsPtr) &wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator|=(*wrp_f);
}

ES PxPairFlagsPtr PxPairFlagsPtr_const_PxPairFlagsPtr_operator_Ptr_Pipe_PxPairFlagEnum_(PxPairFlagsPtr wrp_lhs, physx::PxPairFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator|(wrp_e);
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

ES PxPairFlagsPtr PxPairFlagsPtr_const_PxPairFlagsPtr_operator_Ptr_Pipe_PxPairFlagsPtr_(PxPairFlagsPtr wrp_lhs, PxPairFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator|(*wrp_f);
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

ES PxPairFlagsPtr PxPairFlagsPtr_PxPairFlagsPtr_operator_Ptr_AmpEqual_PxPairFlagEnum_(PxPairFlagsPtr wrp_lhs, physx::PxPairFlag::Enum wrp_e){
    return (PxPairFlagsPtr) &wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator&=(wrp_e);
}

ES PxPairFlagsPtr PxPairFlagsPtr_PxPairFlagsPtr_operator_Ptr_AmpEqual_PxPairFlagsPtr_(PxPairFlagsPtr wrp_lhs, PxPairFlagsPtr wrp_f){
    return (PxPairFlagsPtr) &wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator&=(*wrp_f);
}

ES PxPairFlagsPtr PxPairFlagsPtr_const_PxPairFlagsPtr_operator_Ptr_Amp_PxPairFlagEnum_(PxPairFlagsPtr wrp_lhs, physx::PxPairFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator&(wrp_e);
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

ES PxPairFlagsPtr PxPairFlagsPtr_const_PxPairFlagsPtr_operator_Ptr_Amp_PxPairFlagsPtr_(PxPairFlagsPtr wrp_lhs, PxPairFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator&(*wrp_f);
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

ES PxPairFlagsPtr PxPairFlagsPtr_PxPairFlagsPtr_operator_Ptr_CaretEqual_PxPairFlagEnum_(PxPairFlagsPtr wrp_lhs, physx::PxPairFlag::Enum wrp_e){
    return (PxPairFlagsPtr) &wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator^=(wrp_e);
}

ES PxPairFlagsPtr PxPairFlagsPtr_PxPairFlagsPtr_operator_Ptr_CaretEqual_PxPairFlagsPtr_(PxPairFlagsPtr wrp_lhs, PxPairFlagsPtr wrp_f){
    return (PxPairFlagsPtr) &wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator^=(*wrp_f);
}

ES PxPairFlagsPtr PxPairFlagsPtr_const_PxPairFlagsPtr_operator_Ptr_Caret_PxPairFlagEnum_(PxPairFlagsPtr wrp_lhs, physx::PxPairFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator^(wrp_e);
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

ES PxPairFlagsPtr PxPairFlagsPtr_const_PxPairFlagsPtr_operator_Ptr_Caret_PxPairFlagsPtr_(PxPairFlagsPtr wrp_lhs, PxPairFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator^(*wrp_f);
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

ES PxPairFlagsPtr PxPairFlagsPtr_const_PxPairFlagsPtr_operator_Ptr_Tilde(PxPairFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator~();
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

ES bool bool_const_PxPairFlagsPtr_operator_boolPtr_Conversion(PxPairFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator bool();
}

ES uint8_t byte_const_PxPairFlagsPtr_operator_unsigned_charPtr_Conversion(PxPairFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator unsigned char();
}

ES uint16_t ushort_const_PxPairFlagsPtr_operator_unsigned_shortPtr_Conversion(PxPairFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator unsigned short();
}

ES uint32_t uint_const_PxPairFlagsPtr_operator_unsigned_intPtr_Conversion(PxPairFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxPairFlag::Enum, unsigned short>::operator unsigned int();
}

ES void void_PxPairFlagsPtr_clearPtr_PxPairFlagEnum_(PxPairFlagsPtr wrp_this, physx::PxPairFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void void_PxHitFlags_PxFlagsPtr_Ctor_PxEMPTYC(PxHitFlags* wrp_this, physx::PxEMPTY wrp__){
    *wrp_this = ::physx::PxFlags<::physx::PxHitFlag::Enum, unsigned short>::PxFlags(wrp__);
}

ES void Default_PxHitFlags_(PxHitFlags* nRetRef){
    *nRetRef = PxFlags<physx::PxHitFlag::Enum, unsigned short>();
}

ES void void_PxHitFlags_PxFlagsPtr_Ctor_PxHitFlagEnum_(PxHitFlags* wrp_this, physx::PxHitFlag::Enum wrp_e){
    *wrp_this = ::physx::PxFlags<::physx::PxHitFlag::Enum, unsigned short>::PxFlags(wrp_e);
}

ES void void_PxHitFlags_PxFlagsPtr_Ctor_PxHitFlags_(PxHitFlags* wrp_this, PxHitFlags* wrp_f){
    *wrp_this = ::physx::PxFlags<::physx::PxHitFlag::Enum, unsigned short>::PxFlags(*wrp_f);
}

ES void void_PxHitFlags_PxFlagsPtr_Ctor_ushort_(PxHitFlags* wrp_this, unsigned short wrp_b){
    *wrp_this = ::physx::PxFlags<::physx::PxHitFlag::Enum, unsigned short>::PxFlags(wrp_b);
}

ES bool bool_const_PxHitFlags_isSetPtr_PxHitFlagEnum_(PxHitFlags* wrp_this, physx::PxHitFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxHitFlags* PxHitFlags_PxHitFlags_setPtr_PxHitFlagEnum_(PxHitFlags* wrp_this, physx::PxHitFlag::Enum wrp_e){
    return (PxHitFlags*) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxHitFlags_operator_Ptr_EqualEqual_PxHitFlagEnum_(PxHitFlags* wrp_lhs, physx::PxHitFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator==(wrp_e);
}

ES bool bool_const_PxHitFlags_operator_Ptr_EqualEqual_PxHitFlags_(PxHitFlags* wrp_lhs, PxHitFlags* wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator==(*wrp_f);
}

ES bool bool_const_PxHitFlags_operator_Ptr_EqualEqual_bool_(PxHitFlags* wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator==(wrp_b);
}

ES bool bool_const_PxHitFlags_operator_Ptr_ExclaimEqual_PxHitFlagEnum_(PxHitFlags* wrp_lhs, physx::PxHitFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator!=(wrp_e);
}

ES bool bool_const_PxHitFlags_operator_Ptr_ExclaimEqual_PxHitFlags_(PxHitFlags* wrp_lhs, PxHitFlags* wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator!=(*wrp_f);
}

ES PxHitFlags* PxHitFlags_PxHitFlags_operator_Ptr_Equal_PxHitFlags_(PxHitFlags* wrp_lhs, PxHitFlags* wrp_f){
    return (PxHitFlags*) &wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator=(*wrp_f);
}

ES PxHitFlags* PxHitFlags_PxHitFlags_operator_Ptr_Equal_PxHitFlagEnum_(PxHitFlags* wrp_lhs, physx::PxHitFlag::Enum wrp_e){
    return (PxHitFlags*) &wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator=(wrp_e);
}

ES PxHitFlags* PxHitFlags_PxHitFlags_operator_Ptr_PipeEqual_PxHitFlagEnum_(PxHitFlags* wrp_lhs, physx::PxHitFlag::Enum wrp_e){
    return (PxHitFlags*) &wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator|=(wrp_e);
}

ES PxHitFlags* PxHitFlags_PxHitFlags_operator_Ptr_PipeEqual_PxHitFlags_(PxHitFlags* wrp_lhs, PxHitFlags* wrp_f){
    return (PxHitFlags*) &wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator|=(*wrp_f);
}

ES void PxHitFlags_const_PxHitFlags_operator_Ptr_Pipe_PxHitFlagEnum_(PxHitFlags* nRetRef, PxHitFlags* wrp_lhs, physx::PxHitFlag::Enum wrp_e){
    *nRetRef = wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator|(wrp_e);
}

ES void PxHitFlags_const_PxHitFlags_operator_Ptr_Pipe_PxHitFlags_(PxHitFlags* nRetRef, PxHitFlags* wrp_lhs, PxHitFlags* wrp_f){
    *nRetRef = wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator|(*wrp_f);
}

ES PxHitFlags* PxHitFlags_PxHitFlags_operator_Ptr_AmpEqual_PxHitFlagEnum_(PxHitFlags* wrp_lhs, physx::PxHitFlag::Enum wrp_e){
    return (PxHitFlags*) &wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator&=(wrp_e);
}

ES PxHitFlags* PxHitFlags_PxHitFlags_operator_Ptr_AmpEqual_PxHitFlags_(PxHitFlags* wrp_lhs, PxHitFlags* wrp_f){
    return (PxHitFlags*) &wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator&=(*wrp_f);
}

ES void PxHitFlags_const_PxHitFlags_operator_Ptr_Amp_PxHitFlagEnum_(PxHitFlags* nRetRef, PxHitFlags* wrp_lhs, physx::PxHitFlag::Enum wrp_e){
    *nRetRef = wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator&(wrp_e);
}

ES void PxHitFlags_const_PxHitFlags_operator_Ptr_Amp_PxHitFlags_(PxHitFlags* nRetRef, PxHitFlags* wrp_lhs, PxHitFlags* wrp_f){
    *nRetRef = wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator&(*wrp_f);
}

ES PxHitFlags* PxHitFlags_PxHitFlags_operator_Ptr_CaretEqual_PxHitFlagEnum_(PxHitFlags* wrp_lhs, physx::PxHitFlag::Enum wrp_e){
    return (PxHitFlags*) &wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator^=(wrp_e);
}

ES PxHitFlags* PxHitFlags_PxHitFlags_operator_Ptr_CaretEqual_PxHitFlags_(PxHitFlags* wrp_lhs, PxHitFlags* wrp_f){
    return (PxHitFlags*) &wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator^=(*wrp_f);
}

ES void PxHitFlags_const_PxHitFlags_operator_Ptr_Caret_PxHitFlagEnum_(PxHitFlags* nRetRef, PxHitFlags* wrp_lhs, physx::PxHitFlag::Enum wrp_e){
    *nRetRef = wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator^(wrp_e);
}

ES void PxHitFlags_const_PxHitFlags_operator_Ptr_Caret_PxHitFlags_(PxHitFlags* nRetRef, PxHitFlags* wrp_lhs, PxHitFlags* wrp_f){
    *nRetRef = wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator^(*wrp_f);
}

ES void PxHitFlags_const_PxHitFlags_operator_Ptr_Tilde(PxHitFlags* nRetRef, PxHitFlags* wrp_lhs){
    *nRetRef = wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator~();
}

ES bool bool_const_PxHitFlags_operator_boolPtr_Conversion(PxHitFlags* wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator bool();
}

ES uint8_t byte_const_PxHitFlags_operator_unsigned_charPtr_Conversion(PxHitFlags* wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator unsigned char();
}

ES uint16_t ushort_const_PxHitFlags_operator_unsigned_shortPtr_Conversion(PxHitFlags* wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator unsigned short();
}

ES uint32_t uint_const_PxHitFlags_operator_unsigned_intPtr_Conversion(PxHitFlags* wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxHitFlag::Enum, unsigned short>::operator unsigned int();
}

ES void void_PxHitFlags_clearPtr_PxHitFlagEnum_(PxHitFlags* wrp_this, physx::PxHitFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxQueryFlagsPtr(PxQueryFlagsPtr ptr){
    delete ptr;
}

ES PxQueryFlagsPtr Ctor_PxQueryFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxQueryFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxQueryFlags];
    std::memcpy(heap, &ret, sizeof PxQueryFlags);
    return (PxQueryFlagsPtr) heap;
}

ES PxQueryFlagsPtr Ctor_PxQueryFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxQueryFlagsPtr>::type());
    auto heap = new char[sizeof PxQueryFlags];
    std::memcpy(heap, &ret, sizeof PxQueryFlags);
    return (PxQueryFlagsPtr) heap;
}

ES PxQueryFlagsPtr Ctor_PxQueryFlagsPtr_PxQueryFlagEnum(physx::PxQueryFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxQueryFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxQueryFlags];
    std::memcpy(heap, &ret, sizeof PxQueryFlags);
    return (PxQueryFlagsPtr) heap;
}

ES PxQueryFlagsPtr Ctor_PxQueryFlagsPtr_PxQueryFlagsPtr(PxQueryFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxQueryFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxQueryFlags];
    std::memcpy(heap, &ret, sizeof PxQueryFlags);
    return (PxQueryFlagsPtr) heap;
}

ES PxQueryFlagsPtr Ctor_PxQueryFlagsPtr_ushort(unsigned short wrp_b){
    auto ret = *(new std::remove_pointer<PxQueryFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxQueryFlags];
    std::memcpy(heap, &ret, sizeof PxQueryFlags);
    return (PxQueryFlagsPtr) heap;
}

ES bool bool_const_PxQueryFlagsPtr_isSetPtr_PxQueryFlagEnum_(PxQueryFlagsPtr wrp_this, physx::PxQueryFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_PxQueryFlagsPtr_setPtr_PxQueryFlagEnum_(PxQueryFlagsPtr wrp_this, physx::PxQueryFlag::Enum wrp_e){
    return (PxQueryFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxQueryFlagsPtr_operator_Ptr_EqualEqual_PxQueryFlagEnum_(PxQueryFlagsPtr wrp_lhs, physx::PxQueryFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator==(wrp_e);
}

ES bool bool_const_PxQueryFlagsPtr_operator_Ptr_EqualEqual_PxQueryFlagsPtr_(PxQueryFlagsPtr wrp_lhs, PxQueryFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator==(*wrp_f);
}

ES bool bool_const_PxQueryFlagsPtr_operator_Ptr_EqualEqual_bool_(PxQueryFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator==(wrp_b);
}

ES bool bool_const_PxQueryFlagsPtr_operator_Ptr_ExclaimEqual_PxQueryFlagEnum_(PxQueryFlagsPtr wrp_lhs, physx::PxQueryFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator!=(wrp_e);
}

ES bool bool_const_PxQueryFlagsPtr_operator_Ptr_ExclaimEqual_PxQueryFlagsPtr_(PxQueryFlagsPtr wrp_lhs, PxQueryFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator!=(*wrp_f);
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_PxQueryFlagsPtr_operator_Ptr_Equal_PxQueryFlagsPtr_(PxQueryFlagsPtr wrp_lhs, PxQueryFlagsPtr wrp_f){
    return (PxQueryFlagsPtr) &wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator=(*wrp_f);
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_PxQueryFlagsPtr_operator_Ptr_Equal_PxQueryFlagEnum_(PxQueryFlagsPtr wrp_lhs, physx::PxQueryFlag::Enum wrp_e){
    return (PxQueryFlagsPtr) &wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator=(wrp_e);
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_PxQueryFlagsPtr_operator_Ptr_PipeEqual_PxQueryFlagEnum_(PxQueryFlagsPtr wrp_lhs, physx::PxQueryFlag::Enum wrp_e){
    return (PxQueryFlagsPtr) &wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator|=(wrp_e);
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_PxQueryFlagsPtr_operator_Ptr_PipeEqual_PxQueryFlagsPtr_(PxQueryFlagsPtr wrp_lhs, PxQueryFlagsPtr wrp_f){
    return (PxQueryFlagsPtr) &wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator|=(*wrp_f);
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_const_PxQueryFlagsPtr_operator_Ptr_Pipe_PxQueryFlagEnum_(PxQueryFlagsPtr wrp_lhs, physx::PxQueryFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator|(wrp_e);
    auto heap = new char[sizeof PxQueryFlags];
    std::memcpy(heap, &ret, sizeof PxQueryFlags);
    return (PxQueryFlagsPtr) heap;
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_const_PxQueryFlagsPtr_operator_Ptr_Pipe_PxQueryFlagsPtr_(PxQueryFlagsPtr wrp_lhs, PxQueryFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator|(*wrp_f);
    auto heap = new char[sizeof PxQueryFlags];
    std::memcpy(heap, &ret, sizeof PxQueryFlags);
    return (PxQueryFlagsPtr) heap;
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_PxQueryFlagsPtr_operator_Ptr_AmpEqual_PxQueryFlagEnum_(PxQueryFlagsPtr wrp_lhs, physx::PxQueryFlag::Enum wrp_e){
    return (PxQueryFlagsPtr) &wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator&=(wrp_e);
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_PxQueryFlagsPtr_operator_Ptr_AmpEqual_PxQueryFlagsPtr_(PxQueryFlagsPtr wrp_lhs, PxQueryFlagsPtr wrp_f){
    return (PxQueryFlagsPtr) &wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator&=(*wrp_f);
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_const_PxQueryFlagsPtr_operator_Ptr_Amp_PxQueryFlagEnum_(PxQueryFlagsPtr wrp_lhs, physx::PxQueryFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator&(wrp_e);
    auto heap = new char[sizeof PxQueryFlags];
    std::memcpy(heap, &ret, sizeof PxQueryFlags);
    return (PxQueryFlagsPtr) heap;
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_const_PxQueryFlagsPtr_operator_Ptr_Amp_PxQueryFlagsPtr_(PxQueryFlagsPtr wrp_lhs, PxQueryFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator&(*wrp_f);
    auto heap = new char[sizeof PxQueryFlags];
    std::memcpy(heap, &ret, sizeof PxQueryFlags);
    return (PxQueryFlagsPtr) heap;
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_PxQueryFlagsPtr_operator_Ptr_CaretEqual_PxQueryFlagEnum_(PxQueryFlagsPtr wrp_lhs, physx::PxQueryFlag::Enum wrp_e){
    return (PxQueryFlagsPtr) &wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator^=(wrp_e);
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_PxQueryFlagsPtr_operator_Ptr_CaretEqual_PxQueryFlagsPtr_(PxQueryFlagsPtr wrp_lhs, PxQueryFlagsPtr wrp_f){
    return (PxQueryFlagsPtr) &wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator^=(*wrp_f);
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_const_PxQueryFlagsPtr_operator_Ptr_Caret_PxQueryFlagEnum_(PxQueryFlagsPtr wrp_lhs, physx::PxQueryFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator^(wrp_e);
    auto heap = new char[sizeof PxQueryFlags];
    std::memcpy(heap, &ret, sizeof PxQueryFlags);
    return (PxQueryFlagsPtr) heap;
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_const_PxQueryFlagsPtr_operator_Ptr_Caret_PxQueryFlagsPtr_(PxQueryFlagsPtr wrp_lhs, PxQueryFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator^(*wrp_f);
    auto heap = new char[sizeof PxQueryFlags];
    std::memcpy(heap, &ret, sizeof PxQueryFlags);
    return (PxQueryFlagsPtr) heap;
}

ES PxQueryFlagsPtr PxQueryFlagsPtr_const_PxQueryFlagsPtr_operator_Ptr_Tilde(PxQueryFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator~();
    auto heap = new char[sizeof PxQueryFlags];
    std::memcpy(heap, &ret, sizeof PxQueryFlags);
    return (PxQueryFlagsPtr) heap;
}

ES bool bool_const_PxQueryFlagsPtr_operator_boolPtr_Conversion(PxQueryFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator bool();
}

ES uint8_t byte_const_PxQueryFlagsPtr_operator_unsigned_charPtr_Conversion(PxQueryFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator unsigned char();
}

ES uint16_t ushort_const_PxQueryFlagsPtr_operator_unsigned_shortPtr_Conversion(PxQueryFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator unsigned short();
}

ES uint32_t uint_const_PxQueryFlagsPtr_operator_unsigned_intPtr_Conversion(PxQueryFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxQueryFlag::Enum, unsigned short>::operator unsigned int();
}

ES void void_PxQueryFlagsPtr_clearPtr_PxQueryFlagEnum_(PxQueryFlagsPtr wrp_this, physx::PxQueryFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxPvdSceneFlagsPtr(PxPvdSceneFlagsPtr ptr){
    delete ptr;
}

ES PxPvdSceneFlagsPtr Ctor_PxPvdSceneFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxPvdSceneFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxPvdSceneFlags];
    std::memcpy(heap, &ret, sizeof PxPvdSceneFlags);
    return (PxPvdSceneFlagsPtr) heap;
}

ES PxPvdSceneFlagsPtr Ctor_PxPvdSceneFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxPvdSceneFlagsPtr>::type());
    auto heap = new char[sizeof PxPvdSceneFlags];
    std::memcpy(heap, &ret, sizeof PxPvdSceneFlags);
    return (PxPvdSceneFlagsPtr) heap;
}

ES PxPvdSceneFlagsPtr Ctor_PxPvdSceneFlagsPtr_PxPvdSceneFlagEnum(physx::PxPvdSceneFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxPvdSceneFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxPvdSceneFlags];
    std::memcpy(heap, &ret, sizeof PxPvdSceneFlags);
    return (PxPvdSceneFlagsPtr) heap;
}

ES PxPvdSceneFlagsPtr Ctor_PxPvdSceneFlagsPtr_PxPvdSceneFlagsPtr(PxPvdSceneFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxPvdSceneFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxPvdSceneFlags];
    std::memcpy(heap, &ret, sizeof PxPvdSceneFlags);
    return (PxPvdSceneFlagsPtr) heap;
}

ES PxPvdSceneFlagsPtr Ctor_PxPvdSceneFlagsPtr_byte(unsigned char wrp_b){
    auto ret = *(new std::remove_pointer<PxPvdSceneFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxPvdSceneFlags];
    std::memcpy(heap, &ret, sizeof PxPvdSceneFlags);
    return (PxPvdSceneFlagsPtr) heap;
}

ES bool bool_const_PxPvdSceneFlagsPtr_isSetPtr_PxPvdSceneFlagEnum_(PxPvdSceneFlagsPtr wrp_this, physx::PxPvdSceneFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_PxPvdSceneFlagsPtr_setPtr_PxPvdSceneFlagEnum_(PxPvdSceneFlagsPtr wrp_this, physx::PxPvdSceneFlag::Enum wrp_e){
    return (PxPvdSceneFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxPvdSceneFlagsPtr_operator_Ptr_EqualEqual_PxPvdSceneFlagEnum_(PxPvdSceneFlagsPtr wrp_lhs, physx::PxPvdSceneFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator==(wrp_e);
}

ES bool bool_const_PxPvdSceneFlagsPtr_operator_Ptr_EqualEqual_PxPvdSceneFlagsPtr_(PxPvdSceneFlagsPtr wrp_lhs, PxPvdSceneFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator==(*wrp_f);
}

ES bool bool_const_PxPvdSceneFlagsPtr_operator_Ptr_EqualEqual_bool_(PxPvdSceneFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator==(wrp_b);
}

ES bool bool_const_PxPvdSceneFlagsPtr_operator_Ptr_ExclaimEqual_PxPvdSceneFlagEnum_(PxPvdSceneFlagsPtr wrp_lhs, physx::PxPvdSceneFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator!=(wrp_e);
}

ES bool bool_const_PxPvdSceneFlagsPtr_operator_Ptr_ExclaimEqual_PxPvdSceneFlagsPtr_(PxPvdSceneFlagsPtr wrp_lhs, PxPvdSceneFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator!=(*wrp_f);
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_PxPvdSceneFlagsPtr_operator_Ptr_Equal_PxPvdSceneFlagsPtr_(PxPvdSceneFlagsPtr wrp_lhs, PxPvdSceneFlagsPtr wrp_f){
    return (PxPvdSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator=(*wrp_f);
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_PxPvdSceneFlagsPtr_operator_Ptr_Equal_PxPvdSceneFlagEnum_(PxPvdSceneFlagsPtr wrp_lhs, physx::PxPvdSceneFlag::Enum wrp_e){
    return (PxPvdSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator=(wrp_e);
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_PxPvdSceneFlagsPtr_operator_Ptr_PipeEqual_PxPvdSceneFlagEnum_(PxPvdSceneFlagsPtr wrp_lhs, physx::PxPvdSceneFlag::Enum wrp_e){
    return (PxPvdSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator|=(wrp_e);
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_PxPvdSceneFlagsPtr_operator_Ptr_PipeEqual_PxPvdSceneFlagsPtr_(PxPvdSceneFlagsPtr wrp_lhs, PxPvdSceneFlagsPtr wrp_f){
    return (PxPvdSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator|=(*wrp_f);
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_const_PxPvdSceneFlagsPtr_operator_Ptr_Pipe_PxPvdSceneFlagEnum_(PxPvdSceneFlagsPtr wrp_lhs, physx::PxPvdSceneFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator|(wrp_e);
    auto heap = new char[sizeof PxPvdSceneFlags];
    std::memcpy(heap, &ret, sizeof PxPvdSceneFlags);
    return (PxPvdSceneFlagsPtr) heap;
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_const_PxPvdSceneFlagsPtr_operator_Ptr_Pipe_PxPvdSceneFlagsPtr_(PxPvdSceneFlagsPtr wrp_lhs, PxPvdSceneFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator|(*wrp_f);
    auto heap = new char[sizeof PxPvdSceneFlags];
    std::memcpy(heap, &ret, sizeof PxPvdSceneFlags);
    return (PxPvdSceneFlagsPtr) heap;
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_PxPvdSceneFlagsPtr_operator_Ptr_AmpEqual_PxPvdSceneFlagEnum_(PxPvdSceneFlagsPtr wrp_lhs, physx::PxPvdSceneFlag::Enum wrp_e){
    return (PxPvdSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator&=(wrp_e);
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_PxPvdSceneFlagsPtr_operator_Ptr_AmpEqual_PxPvdSceneFlagsPtr_(PxPvdSceneFlagsPtr wrp_lhs, PxPvdSceneFlagsPtr wrp_f){
    return (PxPvdSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator&=(*wrp_f);
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_const_PxPvdSceneFlagsPtr_operator_Ptr_Amp_PxPvdSceneFlagEnum_(PxPvdSceneFlagsPtr wrp_lhs, physx::PxPvdSceneFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator&(wrp_e);
    auto heap = new char[sizeof PxPvdSceneFlags];
    std::memcpy(heap, &ret, sizeof PxPvdSceneFlags);
    return (PxPvdSceneFlagsPtr) heap;
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_const_PxPvdSceneFlagsPtr_operator_Ptr_Amp_PxPvdSceneFlagsPtr_(PxPvdSceneFlagsPtr wrp_lhs, PxPvdSceneFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator&(*wrp_f);
    auto heap = new char[sizeof PxPvdSceneFlags];
    std::memcpy(heap, &ret, sizeof PxPvdSceneFlags);
    return (PxPvdSceneFlagsPtr) heap;
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_PxPvdSceneFlagsPtr_operator_Ptr_CaretEqual_PxPvdSceneFlagEnum_(PxPvdSceneFlagsPtr wrp_lhs, physx::PxPvdSceneFlag::Enum wrp_e){
    return (PxPvdSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator^=(wrp_e);
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_PxPvdSceneFlagsPtr_operator_Ptr_CaretEqual_PxPvdSceneFlagsPtr_(PxPvdSceneFlagsPtr wrp_lhs, PxPvdSceneFlagsPtr wrp_f){
    return (PxPvdSceneFlagsPtr) &wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator^=(*wrp_f);
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_const_PxPvdSceneFlagsPtr_operator_Ptr_Caret_PxPvdSceneFlagEnum_(PxPvdSceneFlagsPtr wrp_lhs, physx::PxPvdSceneFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator^(wrp_e);
    auto heap = new char[sizeof PxPvdSceneFlags];
    std::memcpy(heap, &ret, sizeof PxPvdSceneFlags);
    return (PxPvdSceneFlagsPtr) heap;
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_const_PxPvdSceneFlagsPtr_operator_Ptr_Caret_PxPvdSceneFlagsPtr_(PxPvdSceneFlagsPtr wrp_lhs, PxPvdSceneFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator^(*wrp_f);
    auto heap = new char[sizeof PxPvdSceneFlags];
    std::memcpy(heap, &ret, sizeof PxPvdSceneFlags);
    return (PxPvdSceneFlagsPtr) heap;
}

ES PxPvdSceneFlagsPtr PxPvdSceneFlagsPtr_const_PxPvdSceneFlagsPtr_operator_Ptr_Tilde(PxPvdSceneFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator~();
    auto heap = new char[sizeof PxPvdSceneFlags];
    std::memcpy(heap, &ret, sizeof PxPvdSceneFlags);
    return (PxPvdSceneFlagsPtr) heap;
}

ES bool bool_const_PxPvdSceneFlagsPtr_operator_boolPtr_Conversion(PxPvdSceneFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator bool();
}

ES uint8_t byte_const_PxPvdSceneFlagsPtr_operator_unsigned_charPtr_Conversion(PxPvdSceneFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator unsigned char();
}

ES uint16_t ushort_const_PxPvdSceneFlagsPtr_operator_unsigned_shortPtr_Conversion(PxPvdSceneFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator unsigned short();
}

ES uint32_t uint_const_PxPvdSceneFlagsPtr_operator_unsigned_intPtr_Conversion(PxPvdSceneFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxPvdSceneFlag::Enum, unsigned char>::operator unsigned int();
}

ES void void_PxPvdSceneFlagsPtr_clearPtr_PxPvdSceneFlagEnum_(PxPvdSceneFlagsPtr wrp_this, physx::PxPvdSceneFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxRigidDynamicLockFlagsPtr(PxRigidDynamicLockFlagsPtr ptr){
    delete ptr;
}

ES PxRigidDynamicLockFlagsPtr Ctor_PxRigidDynamicLockFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxRigidDynamicLockFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES PxRigidDynamicLockFlagsPtr Ctor_PxRigidDynamicLockFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxRigidDynamicLockFlagsPtr>::type());
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES PxRigidDynamicLockFlagsPtr Ctor_PxRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagEnum(physx::PxRigidDynamicLockFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxRigidDynamicLockFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES PxRigidDynamicLockFlagsPtr Ctor_PxRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagsPtr(PxRigidDynamicLockFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxRigidDynamicLockFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES PxRigidDynamicLockFlagsPtr Ctor_PxRigidDynamicLockFlagsPtr_ushort(unsigned short wrp_b){
    auto ret = *(new std::remove_pointer<PxRigidDynamicLockFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES bool bool_const_PxRigidDynamicLockFlagsPtr_isSetPtr_PxRigidDynamicLockFlagEnum_(PxRigidDynamicLockFlagsPtr wrp_this, physx::PxRigidDynamicLockFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagsPtr_setPtr_PxRigidDynamicLockFlagEnum_(PxRigidDynamicLockFlagsPtr wrp_this, physx::PxRigidDynamicLockFlag::Enum wrp_e){
    return (PxRigidDynamicLockFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxRigidDynamicLockFlagsPtr_operator_Ptr_EqualEqual_PxRigidDynamicLockFlagEnum_(PxRigidDynamicLockFlagsPtr wrp_lhs, physx::PxRigidDynamicLockFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator==(wrp_e);
}

ES bool bool_const_PxRigidDynamicLockFlagsPtr_operator_Ptr_EqualEqual_PxRigidDynamicLockFlagsPtr_(PxRigidDynamicLockFlagsPtr wrp_lhs, PxRigidDynamicLockFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator==(*wrp_f);
}

ES bool bool_const_PxRigidDynamicLockFlagsPtr_operator_Ptr_EqualEqual_bool_(PxRigidDynamicLockFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator==(wrp_b);
}

ES bool bool_const_PxRigidDynamicLockFlagsPtr_operator_Ptr_ExclaimEqual_PxRigidDynamicLockFlagEnum_(PxRigidDynamicLockFlagsPtr wrp_lhs, physx::PxRigidDynamicLockFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator!=(wrp_e);
}

ES bool bool_const_PxRigidDynamicLockFlagsPtr_operator_Ptr_ExclaimEqual_PxRigidDynamicLockFlagsPtr_(PxRigidDynamicLockFlagsPtr wrp_lhs, PxRigidDynamicLockFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator!=(*wrp_f);
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagsPtr_operator_Ptr_Equal_PxRigidDynamicLockFlagsPtr_(PxRigidDynamicLockFlagsPtr wrp_lhs, PxRigidDynamicLockFlagsPtr wrp_f){
    return (PxRigidDynamicLockFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator=(*wrp_f);
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagsPtr_operator_Ptr_Equal_PxRigidDynamicLockFlagEnum_(PxRigidDynamicLockFlagsPtr wrp_lhs, physx::PxRigidDynamicLockFlag::Enum wrp_e){
    return (PxRigidDynamicLockFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator=(wrp_e);
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagsPtr_operator_Ptr_PipeEqual_PxRigidDynamicLockFlagEnum_(PxRigidDynamicLockFlagsPtr wrp_lhs, physx::PxRigidDynamicLockFlag::Enum wrp_e){
    return (PxRigidDynamicLockFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator|=(wrp_e);
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagsPtr_operator_Ptr_PipeEqual_PxRigidDynamicLockFlagsPtr_(PxRigidDynamicLockFlagsPtr wrp_lhs, PxRigidDynamicLockFlagsPtr wrp_f){
    return (PxRigidDynamicLockFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator|=(*wrp_f);
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_const_PxRigidDynamicLockFlagsPtr_operator_Ptr_Pipe_PxRigidDynamicLockFlagEnum_(PxRigidDynamicLockFlagsPtr wrp_lhs, physx::PxRigidDynamicLockFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator|(wrp_e);
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_const_PxRigidDynamicLockFlagsPtr_operator_Ptr_Pipe_PxRigidDynamicLockFlagsPtr_(PxRigidDynamicLockFlagsPtr wrp_lhs, PxRigidDynamicLockFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator|(*wrp_f);
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagsPtr_operator_Ptr_AmpEqual_PxRigidDynamicLockFlagEnum_(PxRigidDynamicLockFlagsPtr wrp_lhs, physx::PxRigidDynamicLockFlag::Enum wrp_e){
    return (PxRigidDynamicLockFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator&=(wrp_e);
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagsPtr_operator_Ptr_AmpEqual_PxRigidDynamicLockFlagsPtr_(PxRigidDynamicLockFlagsPtr wrp_lhs, PxRigidDynamicLockFlagsPtr wrp_f){
    return (PxRigidDynamicLockFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator&=(*wrp_f);
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_const_PxRigidDynamicLockFlagsPtr_operator_Ptr_Amp_PxRigidDynamicLockFlagEnum_(PxRigidDynamicLockFlagsPtr wrp_lhs, physx::PxRigidDynamicLockFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator&(wrp_e);
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_const_PxRigidDynamicLockFlagsPtr_operator_Ptr_Amp_PxRigidDynamicLockFlagsPtr_(PxRigidDynamicLockFlagsPtr wrp_lhs, PxRigidDynamicLockFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator&(*wrp_f);
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagsPtr_operator_Ptr_CaretEqual_PxRigidDynamicLockFlagEnum_(PxRigidDynamicLockFlagsPtr wrp_lhs, physx::PxRigidDynamicLockFlag::Enum wrp_e){
    return (PxRigidDynamicLockFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator^=(wrp_e);
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagsPtr_operator_Ptr_CaretEqual_PxRigidDynamicLockFlagsPtr_(PxRigidDynamicLockFlagsPtr wrp_lhs, PxRigidDynamicLockFlagsPtr wrp_f){
    return (PxRigidDynamicLockFlagsPtr) &wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator^=(*wrp_f);
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_const_PxRigidDynamicLockFlagsPtr_operator_Ptr_Caret_PxRigidDynamicLockFlagEnum_(PxRigidDynamicLockFlagsPtr wrp_lhs, physx::PxRigidDynamicLockFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator^(wrp_e);
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_const_PxRigidDynamicLockFlagsPtr_operator_Ptr_Caret_PxRigidDynamicLockFlagsPtr_(PxRigidDynamicLockFlagsPtr wrp_lhs, PxRigidDynamicLockFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator^(*wrp_f);
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_const_PxRigidDynamicLockFlagsPtr_operator_Ptr_Tilde(PxRigidDynamicLockFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator~();
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES bool bool_const_PxRigidDynamicLockFlagsPtr_operator_boolPtr_Conversion(PxRigidDynamicLockFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator bool();
}

ES uint8_t byte_const_PxRigidDynamicLockFlagsPtr_operator_unsigned_charPtr_Conversion(PxRigidDynamicLockFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator unsigned char();
}

ES uint16_t ushort_const_PxRigidDynamicLockFlagsPtr_operator_unsigned_shortPtr_Conversion(PxRigidDynamicLockFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator unsigned short();
}

ES uint32_t uint_const_PxRigidDynamicLockFlagsPtr_operator_unsigned_intPtr_Conversion(PxRigidDynamicLockFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxRigidDynamicLockFlag::Enum, unsigned short>::operator unsigned int();
}

ES void void_PxRigidDynamicLockFlagsPtr_clearPtr_PxRigidDynamicLockFlagEnum_(PxRigidDynamicLockFlagsPtr wrp_this, physx::PxRigidDynamicLockFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxArticulationFlagsPtr(PxArticulationFlagsPtr ptr){
    delete ptr;
}

ES PxArticulationFlagsPtr Ctor_PxArticulationFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxArticulationFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES PxArticulationFlagsPtr Ctor_PxArticulationFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxArticulationFlagsPtr>::type());
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES PxArticulationFlagsPtr Ctor_PxArticulationFlagsPtr_PxArticulationFlagEnum(physx::PxArticulationFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxArticulationFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES PxArticulationFlagsPtr Ctor_PxArticulationFlagsPtr_PxArticulationFlagsPtr(PxArticulationFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxArticulationFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES PxArticulationFlagsPtr Ctor_PxArticulationFlagsPtr_byte(unsigned char wrp_b){
    auto ret = *(new std::remove_pointer<PxArticulationFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES bool bool_const_PxArticulationFlagsPtr_isSetPtr_PxArticulationFlagEnum_(PxArticulationFlagsPtr wrp_this, physx::PxArticulationFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_PxArticulationFlagsPtr_setPtr_PxArticulationFlagEnum_(PxArticulationFlagsPtr wrp_this, physx::PxArticulationFlag::Enum wrp_e){
    return (PxArticulationFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxArticulationFlagsPtr_operator_Ptr_EqualEqual_PxArticulationFlagEnum_(PxArticulationFlagsPtr wrp_lhs, physx::PxArticulationFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator==(wrp_e);
}

ES bool bool_const_PxArticulationFlagsPtr_operator_Ptr_EqualEqual_PxArticulationFlagsPtr_(PxArticulationFlagsPtr wrp_lhs, PxArticulationFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator==(*wrp_f);
}

ES bool bool_const_PxArticulationFlagsPtr_operator_Ptr_EqualEqual_bool_(PxArticulationFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator==(wrp_b);
}

ES bool bool_const_PxArticulationFlagsPtr_operator_Ptr_ExclaimEqual_PxArticulationFlagEnum_(PxArticulationFlagsPtr wrp_lhs, physx::PxArticulationFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator!=(wrp_e);
}

ES bool bool_const_PxArticulationFlagsPtr_operator_Ptr_ExclaimEqual_PxArticulationFlagsPtr_(PxArticulationFlagsPtr wrp_lhs, PxArticulationFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator!=(*wrp_f);
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_PxArticulationFlagsPtr_operator_Ptr_Equal_PxArticulationFlagsPtr_(PxArticulationFlagsPtr wrp_lhs, PxArticulationFlagsPtr wrp_f){
    return (PxArticulationFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator=(*wrp_f);
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_PxArticulationFlagsPtr_operator_Ptr_Equal_PxArticulationFlagEnum_(PxArticulationFlagsPtr wrp_lhs, physx::PxArticulationFlag::Enum wrp_e){
    return (PxArticulationFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator=(wrp_e);
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_PxArticulationFlagsPtr_operator_Ptr_PipeEqual_PxArticulationFlagEnum_(PxArticulationFlagsPtr wrp_lhs, physx::PxArticulationFlag::Enum wrp_e){
    return (PxArticulationFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator|=(wrp_e);
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_PxArticulationFlagsPtr_operator_Ptr_PipeEqual_PxArticulationFlagsPtr_(PxArticulationFlagsPtr wrp_lhs, PxArticulationFlagsPtr wrp_f){
    return (PxArticulationFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator|=(*wrp_f);
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_const_PxArticulationFlagsPtr_operator_Ptr_Pipe_PxArticulationFlagEnum_(PxArticulationFlagsPtr wrp_lhs, physx::PxArticulationFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator|(wrp_e);
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_const_PxArticulationFlagsPtr_operator_Ptr_Pipe_PxArticulationFlagsPtr_(PxArticulationFlagsPtr wrp_lhs, PxArticulationFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator|(*wrp_f);
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_PxArticulationFlagsPtr_operator_Ptr_AmpEqual_PxArticulationFlagEnum_(PxArticulationFlagsPtr wrp_lhs, physx::PxArticulationFlag::Enum wrp_e){
    return (PxArticulationFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator&=(wrp_e);
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_PxArticulationFlagsPtr_operator_Ptr_AmpEqual_PxArticulationFlagsPtr_(PxArticulationFlagsPtr wrp_lhs, PxArticulationFlagsPtr wrp_f){
    return (PxArticulationFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator&=(*wrp_f);
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_const_PxArticulationFlagsPtr_operator_Ptr_Amp_PxArticulationFlagEnum_(PxArticulationFlagsPtr wrp_lhs, physx::PxArticulationFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator&(wrp_e);
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_const_PxArticulationFlagsPtr_operator_Ptr_Amp_PxArticulationFlagsPtr_(PxArticulationFlagsPtr wrp_lhs, PxArticulationFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator&(*wrp_f);
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_PxArticulationFlagsPtr_operator_Ptr_CaretEqual_PxArticulationFlagEnum_(PxArticulationFlagsPtr wrp_lhs, physx::PxArticulationFlag::Enum wrp_e){
    return (PxArticulationFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator^=(wrp_e);
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_PxArticulationFlagsPtr_operator_Ptr_CaretEqual_PxArticulationFlagsPtr_(PxArticulationFlagsPtr wrp_lhs, PxArticulationFlagsPtr wrp_f){
    return (PxArticulationFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator^=(*wrp_f);
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_const_PxArticulationFlagsPtr_operator_Ptr_Caret_PxArticulationFlagEnum_(PxArticulationFlagsPtr wrp_lhs, physx::PxArticulationFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator^(wrp_e);
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_const_PxArticulationFlagsPtr_operator_Ptr_Caret_PxArticulationFlagsPtr_(PxArticulationFlagsPtr wrp_lhs, PxArticulationFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator^(*wrp_f);
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_const_PxArticulationFlagsPtr_operator_Ptr_Tilde(PxArticulationFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator~();
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES bool bool_const_PxArticulationFlagsPtr_operator_boolPtr_Conversion(PxArticulationFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator bool();
}

ES uint8_t byte_const_PxArticulationFlagsPtr_operator_unsigned_charPtr_Conversion(PxArticulationFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator unsigned char();
}

ES uint16_t ushort_const_PxArticulationFlagsPtr_operator_unsigned_shortPtr_Conversion(PxArticulationFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator unsigned short();
}

ES uint32_t uint_const_PxArticulationFlagsPtr_operator_unsigned_intPtr_Conversion(PxArticulationFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxArticulationFlag::Enum, unsigned char>::operator unsigned int();
}

ES void void_PxArticulationFlagsPtr_clearPtr_PxArticulationFlagEnum_(PxArticulationFlagsPtr wrp_this, physx::PxArticulationFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxArticulationCacheFlagsPtr(PxArticulationCacheFlagsPtr ptr){
    delete ptr;
}

ES PxArticulationCacheFlagsPtr Ctor_PxArticulationCacheFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxArticulationCacheFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxArticulationCacheFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationCacheFlags);
    return (PxArticulationCacheFlagsPtr) heap;
}

ES PxArticulationCacheFlagsPtr Ctor_PxArticulationCacheFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxArticulationCacheFlagsPtr>::type());
    auto heap = new char[sizeof PxArticulationCacheFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationCacheFlags);
    return (PxArticulationCacheFlagsPtr) heap;
}

ES PxArticulationCacheFlagsPtr Ctor_PxArticulationCacheFlagsPtr_PxArticulationCachePtr_Enum(physx::PxArticulationCache::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxArticulationCacheFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxArticulationCacheFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationCacheFlags);
    return (PxArticulationCacheFlagsPtr) heap;
}

ES PxArticulationCacheFlagsPtr Ctor_PxArticulationCacheFlagsPtr_PxArticulationCacheFlagsPtr(PxArticulationCacheFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxArticulationCacheFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxArticulationCacheFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationCacheFlags);
    return (PxArticulationCacheFlagsPtr) heap;
}

ES PxArticulationCacheFlagsPtr Ctor_PxArticulationCacheFlagsPtr_byte(unsigned char wrp_b){
    auto ret = *(new std::remove_pointer<PxArticulationCacheFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxArticulationCacheFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationCacheFlags);
    return (PxArticulationCacheFlagsPtr) heap;
}

ES bool bool_const_PxArticulationCacheFlagsPtr_isSetPtr_PxArticulationCachePtr_Enum_(PxArticulationCacheFlagsPtr wrp_this, physx::PxArticulationCache::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_PxArticulationCacheFlagsPtr_setPtr_PxArticulationCachePtr_Enum_(PxArticulationCacheFlagsPtr wrp_this, physx::PxArticulationCache::Enum wrp_e){
    return (PxArticulationCacheFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxArticulationCacheFlagsPtr_operator_Ptr_EqualEqual_PxArticulationCachePtr_Enum_(PxArticulationCacheFlagsPtr wrp_lhs, physx::PxArticulationCache::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator==(wrp_e);
}

ES bool bool_const_PxArticulationCacheFlagsPtr_operator_Ptr_EqualEqual_PxArticulationCacheFlagsPtr_(PxArticulationCacheFlagsPtr wrp_lhs, PxArticulationCacheFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator==(*wrp_f);
}

ES bool bool_const_PxArticulationCacheFlagsPtr_operator_Ptr_EqualEqual_bool_(PxArticulationCacheFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator==(wrp_b);
}

ES bool bool_const_PxArticulationCacheFlagsPtr_operator_Ptr_ExclaimEqual_PxArticulationCachePtr_Enum_(PxArticulationCacheFlagsPtr wrp_lhs, physx::PxArticulationCache::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator!=(wrp_e);
}

ES bool bool_const_PxArticulationCacheFlagsPtr_operator_Ptr_ExclaimEqual_PxArticulationCacheFlagsPtr_(PxArticulationCacheFlagsPtr wrp_lhs, PxArticulationCacheFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator!=(*wrp_f);
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_PxArticulationCacheFlagsPtr_operator_Ptr_Equal_PxArticulationCacheFlagsPtr_(PxArticulationCacheFlagsPtr wrp_lhs, PxArticulationCacheFlagsPtr wrp_f){
    return (PxArticulationCacheFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator=(*wrp_f);
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_PxArticulationCacheFlagsPtr_operator_Ptr_Equal_PxArticulationCachePtr_Enum_(PxArticulationCacheFlagsPtr wrp_lhs, physx::PxArticulationCache::Enum wrp_e){
    return (PxArticulationCacheFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator=(wrp_e);
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_PxArticulationCacheFlagsPtr_operator_Ptr_PipeEqual_PxArticulationCachePtr_Enum_(PxArticulationCacheFlagsPtr wrp_lhs, physx::PxArticulationCache::Enum wrp_e){
    return (PxArticulationCacheFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator|=(wrp_e);
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_PxArticulationCacheFlagsPtr_operator_Ptr_PipeEqual_PxArticulationCacheFlagsPtr_(PxArticulationCacheFlagsPtr wrp_lhs, PxArticulationCacheFlagsPtr wrp_f){
    return (PxArticulationCacheFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator|=(*wrp_f);
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_const_PxArticulationCacheFlagsPtr_operator_Ptr_Pipe_PxArticulationCachePtr_Enum_(PxArticulationCacheFlagsPtr wrp_lhs, physx::PxArticulationCache::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator|(wrp_e);
    auto heap = new char[sizeof PxArticulationCacheFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationCacheFlags);
    return (PxArticulationCacheFlagsPtr) heap;
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_const_PxArticulationCacheFlagsPtr_operator_Ptr_Pipe_PxArticulationCacheFlagsPtr_(PxArticulationCacheFlagsPtr wrp_lhs, PxArticulationCacheFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator|(*wrp_f);
    auto heap = new char[sizeof PxArticulationCacheFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationCacheFlags);
    return (PxArticulationCacheFlagsPtr) heap;
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_PxArticulationCacheFlagsPtr_operator_Ptr_AmpEqual_PxArticulationCachePtr_Enum_(PxArticulationCacheFlagsPtr wrp_lhs, physx::PxArticulationCache::Enum wrp_e){
    return (PxArticulationCacheFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator&=(wrp_e);
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_PxArticulationCacheFlagsPtr_operator_Ptr_AmpEqual_PxArticulationCacheFlagsPtr_(PxArticulationCacheFlagsPtr wrp_lhs, PxArticulationCacheFlagsPtr wrp_f){
    return (PxArticulationCacheFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator&=(*wrp_f);
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_const_PxArticulationCacheFlagsPtr_operator_Ptr_Amp_PxArticulationCachePtr_Enum_(PxArticulationCacheFlagsPtr wrp_lhs, physx::PxArticulationCache::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator&(wrp_e);
    auto heap = new char[sizeof PxArticulationCacheFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationCacheFlags);
    return (PxArticulationCacheFlagsPtr) heap;
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_const_PxArticulationCacheFlagsPtr_operator_Ptr_Amp_PxArticulationCacheFlagsPtr_(PxArticulationCacheFlagsPtr wrp_lhs, PxArticulationCacheFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator&(*wrp_f);
    auto heap = new char[sizeof PxArticulationCacheFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationCacheFlags);
    return (PxArticulationCacheFlagsPtr) heap;
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_PxArticulationCacheFlagsPtr_operator_Ptr_CaretEqual_PxArticulationCachePtr_Enum_(PxArticulationCacheFlagsPtr wrp_lhs, physx::PxArticulationCache::Enum wrp_e){
    return (PxArticulationCacheFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator^=(wrp_e);
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_PxArticulationCacheFlagsPtr_operator_Ptr_CaretEqual_PxArticulationCacheFlagsPtr_(PxArticulationCacheFlagsPtr wrp_lhs, PxArticulationCacheFlagsPtr wrp_f){
    return (PxArticulationCacheFlagsPtr) &wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator^=(*wrp_f);
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_const_PxArticulationCacheFlagsPtr_operator_Ptr_Caret_PxArticulationCachePtr_Enum_(PxArticulationCacheFlagsPtr wrp_lhs, physx::PxArticulationCache::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator^(wrp_e);
    auto heap = new char[sizeof PxArticulationCacheFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationCacheFlags);
    return (PxArticulationCacheFlagsPtr) heap;
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_const_PxArticulationCacheFlagsPtr_operator_Ptr_Caret_PxArticulationCacheFlagsPtr_(PxArticulationCacheFlagsPtr wrp_lhs, PxArticulationCacheFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator^(*wrp_f);
    auto heap = new char[sizeof PxArticulationCacheFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationCacheFlags);
    return (PxArticulationCacheFlagsPtr) heap;
}

ES PxArticulationCacheFlagsPtr PxArticulationCacheFlagsPtr_const_PxArticulationCacheFlagsPtr_operator_Ptr_Tilde(PxArticulationCacheFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator~();
    auto heap = new char[sizeof PxArticulationCacheFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationCacheFlags);
    return (PxArticulationCacheFlagsPtr) heap;
}

ES bool bool_const_PxArticulationCacheFlagsPtr_operator_boolPtr_Conversion(PxArticulationCacheFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator bool();
}

ES uint8_t byte_const_PxArticulationCacheFlagsPtr_operator_unsigned_charPtr_Conversion(PxArticulationCacheFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator unsigned char();
}

ES uint16_t ushort_const_PxArticulationCacheFlagsPtr_operator_unsigned_shortPtr_Conversion(PxArticulationCacheFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator unsigned short();
}

ES uint32_t uint_const_PxArticulationCacheFlagsPtr_operator_unsigned_intPtr_Conversion(PxArticulationCacheFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxArticulationCache::Enum, unsigned char>::operator unsigned int();
}

ES void void_PxArticulationCacheFlagsPtr_clearPtr_PxArticulationCachePtr_Enum_(PxArticulationCacheFlagsPtr wrp_this, physx::PxArticulationCache::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxDeletionEventFlagsPtr(PxDeletionEventFlagsPtr ptr){
    delete ptr;
}

ES PxDeletionEventFlagsPtr Ctor_PxDeletionEventFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxDeletionEventFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof PxDeletionEventFlags];
    std::memcpy(heap, &ret, sizeof PxDeletionEventFlags);
    return (PxDeletionEventFlagsPtr) heap;
}

ES PxDeletionEventFlagsPtr Ctor_PxDeletionEventFlagsPtr_(){
    auto ret = *(new std::remove_pointer<PxDeletionEventFlagsPtr>::type());
    auto heap = new char[sizeof PxDeletionEventFlags];
    std::memcpy(heap, &ret, sizeof PxDeletionEventFlags);
    return (PxDeletionEventFlagsPtr) heap;
}

ES PxDeletionEventFlagsPtr Ctor_PxDeletionEventFlagsPtr_PxDeletionEventFlagEnum(physx::PxDeletionEventFlag::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxDeletionEventFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxDeletionEventFlags];
    std::memcpy(heap, &ret, sizeof PxDeletionEventFlags);
    return (PxDeletionEventFlagsPtr) heap;
}

ES PxDeletionEventFlagsPtr Ctor_PxDeletionEventFlagsPtr_PxDeletionEventFlagsPtr(PxDeletionEventFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxDeletionEventFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxDeletionEventFlags];
    std::memcpy(heap, &ret, sizeof PxDeletionEventFlags);
    return (PxDeletionEventFlagsPtr) heap;
}

ES PxDeletionEventFlagsPtr Ctor_PxDeletionEventFlagsPtr_byte(unsigned char wrp_b){
    auto ret = *(new std::remove_pointer<PxDeletionEventFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxDeletionEventFlags];
    std::memcpy(heap, &ret, sizeof PxDeletionEventFlags);
    return (PxDeletionEventFlagsPtr) heap;
}

ES bool bool_const_PxDeletionEventFlagsPtr_isSetPtr_PxDeletionEventFlagEnum_(PxDeletionEventFlagsPtr wrp_this, physx::PxDeletionEventFlag::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_PxDeletionEventFlagsPtr_setPtr_PxDeletionEventFlagEnum_(PxDeletionEventFlagsPtr wrp_this, physx::PxDeletionEventFlag::Enum wrp_e){
    return (PxDeletionEventFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxDeletionEventFlagsPtr_operator_Ptr_EqualEqual_PxDeletionEventFlagEnum_(PxDeletionEventFlagsPtr wrp_lhs, physx::PxDeletionEventFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator==(wrp_e);
}

ES bool bool_const_PxDeletionEventFlagsPtr_operator_Ptr_EqualEqual_PxDeletionEventFlagsPtr_(PxDeletionEventFlagsPtr wrp_lhs, PxDeletionEventFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator==(*wrp_f);
}

ES bool bool_const_PxDeletionEventFlagsPtr_operator_Ptr_EqualEqual_bool_(PxDeletionEventFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator==(wrp_b);
}

ES bool bool_const_PxDeletionEventFlagsPtr_operator_Ptr_ExclaimEqual_PxDeletionEventFlagEnum_(PxDeletionEventFlagsPtr wrp_lhs, physx::PxDeletionEventFlag::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator!=(wrp_e);
}

ES bool bool_const_PxDeletionEventFlagsPtr_operator_Ptr_ExclaimEqual_PxDeletionEventFlagsPtr_(PxDeletionEventFlagsPtr wrp_lhs, PxDeletionEventFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator!=(*wrp_f);
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_PxDeletionEventFlagsPtr_operator_Ptr_Equal_PxDeletionEventFlagsPtr_(PxDeletionEventFlagsPtr wrp_lhs, PxDeletionEventFlagsPtr wrp_f){
    return (PxDeletionEventFlagsPtr) &wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator=(*wrp_f);
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_PxDeletionEventFlagsPtr_operator_Ptr_Equal_PxDeletionEventFlagEnum_(PxDeletionEventFlagsPtr wrp_lhs, physx::PxDeletionEventFlag::Enum wrp_e){
    return (PxDeletionEventFlagsPtr) &wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator=(wrp_e);
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_PxDeletionEventFlagsPtr_operator_Ptr_PipeEqual_PxDeletionEventFlagEnum_(PxDeletionEventFlagsPtr wrp_lhs, physx::PxDeletionEventFlag::Enum wrp_e){
    return (PxDeletionEventFlagsPtr) &wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator|=(wrp_e);
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_PxDeletionEventFlagsPtr_operator_Ptr_PipeEqual_PxDeletionEventFlagsPtr_(PxDeletionEventFlagsPtr wrp_lhs, PxDeletionEventFlagsPtr wrp_f){
    return (PxDeletionEventFlagsPtr) &wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator|=(*wrp_f);
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_const_PxDeletionEventFlagsPtr_operator_Ptr_Pipe_PxDeletionEventFlagEnum_(PxDeletionEventFlagsPtr wrp_lhs, physx::PxDeletionEventFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator|(wrp_e);
    auto heap = new char[sizeof PxDeletionEventFlags];
    std::memcpy(heap, &ret, sizeof PxDeletionEventFlags);
    return (PxDeletionEventFlagsPtr) heap;
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_const_PxDeletionEventFlagsPtr_operator_Ptr_Pipe_PxDeletionEventFlagsPtr_(PxDeletionEventFlagsPtr wrp_lhs, PxDeletionEventFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator|(*wrp_f);
    auto heap = new char[sizeof PxDeletionEventFlags];
    std::memcpy(heap, &ret, sizeof PxDeletionEventFlags);
    return (PxDeletionEventFlagsPtr) heap;
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_PxDeletionEventFlagsPtr_operator_Ptr_AmpEqual_PxDeletionEventFlagEnum_(PxDeletionEventFlagsPtr wrp_lhs, physx::PxDeletionEventFlag::Enum wrp_e){
    return (PxDeletionEventFlagsPtr) &wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator&=(wrp_e);
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_PxDeletionEventFlagsPtr_operator_Ptr_AmpEqual_PxDeletionEventFlagsPtr_(PxDeletionEventFlagsPtr wrp_lhs, PxDeletionEventFlagsPtr wrp_f){
    return (PxDeletionEventFlagsPtr) &wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator&=(*wrp_f);
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_const_PxDeletionEventFlagsPtr_operator_Ptr_Amp_PxDeletionEventFlagEnum_(PxDeletionEventFlagsPtr wrp_lhs, physx::PxDeletionEventFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator&(wrp_e);
    auto heap = new char[sizeof PxDeletionEventFlags];
    std::memcpy(heap, &ret, sizeof PxDeletionEventFlags);
    return (PxDeletionEventFlagsPtr) heap;
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_const_PxDeletionEventFlagsPtr_operator_Ptr_Amp_PxDeletionEventFlagsPtr_(PxDeletionEventFlagsPtr wrp_lhs, PxDeletionEventFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator&(*wrp_f);
    auto heap = new char[sizeof PxDeletionEventFlags];
    std::memcpy(heap, &ret, sizeof PxDeletionEventFlags);
    return (PxDeletionEventFlagsPtr) heap;
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_PxDeletionEventFlagsPtr_operator_Ptr_CaretEqual_PxDeletionEventFlagEnum_(PxDeletionEventFlagsPtr wrp_lhs, physx::PxDeletionEventFlag::Enum wrp_e){
    return (PxDeletionEventFlagsPtr) &wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator^=(wrp_e);
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_PxDeletionEventFlagsPtr_operator_Ptr_CaretEqual_PxDeletionEventFlagsPtr_(PxDeletionEventFlagsPtr wrp_lhs, PxDeletionEventFlagsPtr wrp_f){
    return (PxDeletionEventFlagsPtr) &wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator^=(*wrp_f);
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_const_PxDeletionEventFlagsPtr_operator_Ptr_Caret_PxDeletionEventFlagEnum_(PxDeletionEventFlagsPtr wrp_lhs, physx::PxDeletionEventFlag::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator^(wrp_e);
    auto heap = new char[sizeof PxDeletionEventFlags];
    std::memcpy(heap, &ret, sizeof PxDeletionEventFlags);
    return (PxDeletionEventFlagsPtr) heap;
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_const_PxDeletionEventFlagsPtr_operator_Ptr_Caret_PxDeletionEventFlagsPtr_(PxDeletionEventFlagsPtr wrp_lhs, PxDeletionEventFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator^(*wrp_f);
    auto heap = new char[sizeof PxDeletionEventFlags];
    std::memcpy(heap, &ret, sizeof PxDeletionEventFlags);
    return (PxDeletionEventFlagsPtr) heap;
}

ES PxDeletionEventFlagsPtr PxDeletionEventFlagsPtr_const_PxDeletionEventFlagsPtr_operator_Ptr_Tilde(PxDeletionEventFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator~();
    auto heap = new char[sizeof PxDeletionEventFlags];
    std::memcpy(heap, &ret, sizeof PxDeletionEventFlags);
    return (PxDeletionEventFlagsPtr) heap;
}

ES bool bool_const_PxDeletionEventFlagsPtr_operator_boolPtr_Conversion(PxDeletionEventFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator bool();
}

ES uint8_t byte_const_PxDeletionEventFlagsPtr_operator_unsigned_charPtr_Conversion(PxDeletionEventFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator unsigned char();
}

ES uint16_t ushort_const_PxDeletionEventFlagsPtr_operator_unsigned_shortPtr_Conversion(PxDeletionEventFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator unsigned short();
}

ES uint32_t uint_const_PxDeletionEventFlagsPtr_operator_unsigned_intPtr_Conversion(PxDeletionEventFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxDeletionEventFlag::Enum, unsigned char>::operator unsigned int();
}

ES void void_PxDeletionEventFlagsPtr_clearPtr_PxDeletionEventFlagEnum_(PxDeletionEventFlagsPtr wrp_this, physx::PxDeletionEventFlag::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_Px1DConstraintFlagsPtr(Px1DConstraintFlagsPtr ptr){
    delete ptr;
}

ES Px1DConstraintFlagsPtr Ctor_Px1DConstraintFlagsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<Px1DConstraintFlagsPtr>::type(wrp__));
    auto heap = new char[sizeof Px1DConstraintFlags];
    std::memcpy(heap, &ret, sizeof Px1DConstraintFlags);
    return (Px1DConstraintFlagsPtr) heap;
}

ES Px1DConstraintFlagsPtr Ctor_Px1DConstraintFlagsPtr_(){
    auto ret = *(new std::remove_pointer<Px1DConstraintFlagsPtr>::type());
    auto heap = new char[sizeof Px1DConstraintFlags];
    std::memcpy(heap, &ret, sizeof Px1DConstraintFlags);
    return (Px1DConstraintFlagsPtr) heap;
}

ES Px1DConstraintFlagsPtr Ctor_Px1DConstraintFlagsPtr_Px1DConstraintFlagPtr_Type(physx::Px1DConstraintFlag::Type wrp_e){
    auto ret = *(new std::remove_pointer<Px1DConstraintFlagsPtr>::type(wrp_e));
    auto heap = new char[sizeof Px1DConstraintFlags];
    std::memcpy(heap, &ret, sizeof Px1DConstraintFlags);
    return (Px1DConstraintFlagsPtr) heap;
}

ES Px1DConstraintFlagsPtr Ctor_Px1DConstraintFlagsPtr_Px1DConstraintFlagsPtr(Px1DConstraintFlagsPtr wrp_f){
    auto ret = *(new std::remove_pointer<Px1DConstraintFlagsPtr>::type(*wrp_f));
    auto heap = new char[sizeof Px1DConstraintFlags];
    std::memcpy(heap, &ret, sizeof Px1DConstraintFlags);
    return (Px1DConstraintFlagsPtr) heap;
}

ES Px1DConstraintFlagsPtr Ctor_Px1DConstraintFlagsPtr_ushort(unsigned short wrp_b){
    auto ret = *(new std::remove_pointer<Px1DConstraintFlagsPtr>::type(wrp_b));
    auto heap = new char[sizeof Px1DConstraintFlags];
    std::memcpy(heap, &ret, sizeof Px1DConstraintFlags);
    return (Px1DConstraintFlagsPtr) heap;
}

ES bool bool_const_Px1DConstraintFlagsPtr_isSetPtr_Px1DConstraintFlagPtr_Type_(Px1DConstraintFlagsPtr wrp_this, physx::Px1DConstraintFlag::Type wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_Px1DConstraintFlagsPtr_setPtr_Px1DConstraintFlagPtr_Type_(Px1DConstraintFlagsPtr wrp_this, physx::Px1DConstraintFlag::Type wrp_e){
    return (Px1DConstraintFlagsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_Px1DConstraintFlagsPtr_operator_Ptr_EqualEqual_Px1DConstraintFlagPtr_Type_(Px1DConstraintFlagsPtr wrp_lhs, physx::Px1DConstraintFlag::Type wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator==(wrp_e);
}

ES bool bool_const_Px1DConstraintFlagsPtr_operator_Ptr_EqualEqual_Px1DConstraintFlagsPtr_(Px1DConstraintFlagsPtr wrp_lhs, Px1DConstraintFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator==(*wrp_f);
}

ES bool bool_const_Px1DConstraintFlagsPtr_operator_Ptr_EqualEqual_bool_(Px1DConstraintFlagsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator==(wrp_b);
}

ES bool bool_const_Px1DConstraintFlagsPtr_operator_Ptr_ExclaimEqual_Px1DConstraintFlagPtr_Type_(Px1DConstraintFlagsPtr wrp_lhs, physx::Px1DConstraintFlag::Type wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator!=(wrp_e);
}

ES bool bool_const_Px1DConstraintFlagsPtr_operator_Ptr_ExclaimEqual_Px1DConstraintFlagsPtr_(Px1DConstraintFlagsPtr wrp_lhs, Px1DConstraintFlagsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator!=(*wrp_f);
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_Px1DConstraintFlagsPtr_operator_Ptr_Equal_Px1DConstraintFlagsPtr_(Px1DConstraintFlagsPtr wrp_lhs, Px1DConstraintFlagsPtr wrp_f){
    return (Px1DConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator=(*wrp_f);
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_Px1DConstraintFlagsPtr_operator_Ptr_Equal_Px1DConstraintFlagPtr_Type_(Px1DConstraintFlagsPtr wrp_lhs, physx::Px1DConstraintFlag::Type wrp_e){
    return (Px1DConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator=(wrp_e);
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_Px1DConstraintFlagsPtr_operator_Ptr_PipeEqual_Px1DConstraintFlagPtr_Type_(Px1DConstraintFlagsPtr wrp_lhs, physx::Px1DConstraintFlag::Type wrp_e){
    return (Px1DConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator|=(wrp_e);
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_Px1DConstraintFlagsPtr_operator_Ptr_PipeEqual_Px1DConstraintFlagsPtr_(Px1DConstraintFlagsPtr wrp_lhs, Px1DConstraintFlagsPtr wrp_f){
    return (Px1DConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator|=(*wrp_f);
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_const_Px1DConstraintFlagsPtr_operator_Ptr_Pipe_Px1DConstraintFlagPtr_Type_(Px1DConstraintFlagsPtr wrp_lhs, physx::Px1DConstraintFlag::Type wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator|(wrp_e);
    auto heap = new char[sizeof Px1DConstraintFlags];
    std::memcpy(heap, &ret, sizeof Px1DConstraintFlags);
    return (Px1DConstraintFlagsPtr) heap;
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_const_Px1DConstraintFlagsPtr_operator_Ptr_Pipe_Px1DConstraintFlagsPtr_(Px1DConstraintFlagsPtr wrp_lhs, Px1DConstraintFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator|(*wrp_f);
    auto heap = new char[sizeof Px1DConstraintFlags];
    std::memcpy(heap, &ret, sizeof Px1DConstraintFlags);
    return (Px1DConstraintFlagsPtr) heap;
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_Px1DConstraintFlagsPtr_operator_Ptr_AmpEqual_Px1DConstraintFlagPtr_Type_(Px1DConstraintFlagsPtr wrp_lhs, physx::Px1DConstraintFlag::Type wrp_e){
    return (Px1DConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator&=(wrp_e);
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_Px1DConstraintFlagsPtr_operator_Ptr_AmpEqual_Px1DConstraintFlagsPtr_(Px1DConstraintFlagsPtr wrp_lhs, Px1DConstraintFlagsPtr wrp_f){
    return (Px1DConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator&=(*wrp_f);
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_const_Px1DConstraintFlagsPtr_operator_Ptr_Amp_Px1DConstraintFlagPtr_Type_(Px1DConstraintFlagsPtr wrp_lhs, physx::Px1DConstraintFlag::Type wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator&(wrp_e);
    auto heap = new char[sizeof Px1DConstraintFlags];
    std::memcpy(heap, &ret, sizeof Px1DConstraintFlags);
    return (Px1DConstraintFlagsPtr) heap;
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_const_Px1DConstraintFlagsPtr_operator_Ptr_Amp_Px1DConstraintFlagsPtr_(Px1DConstraintFlagsPtr wrp_lhs, Px1DConstraintFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator&(*wrp_f);
    auto heap = new char[sizeof Px1DConstraintFlags];
    std::memcpy(heap, &ret, sizeof Px1DConstraintFlags);
    return (Px1DConstraintFlagsPtr) heap;
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_Px1DConstraintFlagsPtr_operator_Ptr_CaretEqual_Px1DConstraintFlagPtr_Type_(Px1DConstraintFlagsPtr wrp_lhs, physx::Px1DConstraintFlag::Type wrp_e){
    return (Px1DConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator^=(wrp_e);
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_Px1DConstraintFlagsPtr_operator_Ptr_CaretEqual_Px1DConstraintFlagsPtr_(Px1DConstraintFlagsPtr wrp_lhs, Px1DConstraintFlagsPtr wrp_f){
    return (Px1DConstraintFlagsPtr) &wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator^=(*wrp_f);
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_const_Px1DConstraintFlagsPtr_operator_Ptr_Caret_Px1DConstraintFlagPtr_Type_(Px1DConstraintFlagsPtr wrp_lhs, physx::Px1DConstraintFlag::Type wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator^(wrp_e);
    auto heap = new char[sizeof Px1DConstraintFlags];
    std::memcpy(heap, &ret, sizeof Px1DConstraintFlags);
    return (Px1DConstraintFlagsPtr) heap;
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_const_Px1DConstraintFlagsPtr_operator_Ptr_Caret_Px1DConstraintFlagsPtr_(Px1DConstraintFlagsPtr wrp_lhs, Px1DConstraintFlagsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator^(*wrp_f);
    auto heap = new char[sizeof Px1DConstraintFlags];
    std::memcpy(heap, &ret, sizeof Px1DConstraintFlags);
    return (Px1DConstraintFlagsPtr) heap;
}

ES Px1DConstraintFlagsPtr Px1DConstraintFlagsPtr_const_Px1DConstraintFlagsPtr_operator_Ptr_Tilde(Px1DConstraintFlagsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator~();
    auto heap = new char[sizeof Px1DConstraintFlags];
    std::memcpy(heap, &ret, sizeof Px1DConstraintFlags);
    return (Px1DConstraintFlagsPtr) heap;
}

ES bool bool_const_Px1DConstraintFlagsPtr_operator_boolPtr_Conversion(Px1DConstraintFlagsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator bool();
}

ES uint8_t byte_const_Px1DConstraintFlagsPtr_operator_unsigned_charPtr_Conversion(Px1DConstraintFlagsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator unsigned char();
}

ES uint16_t ushort_const_Px1DConstraintFlagsPtr_operator_unsigned_shortPtr_Conversion(Px1DConstraintFlagsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator unsigned short();
}

ES uint32_t uint_const_Px1DConstraintFlagsPtr_operator_unsigned_intPtr_Conversion(Px1DConstraintFlagsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::Px1DConstraintFlag::Type, unsigned short>::operator unsigned int();
}

ES void void_Px1DConstraintFlagsPtr_clearPtr_Px1DConstraintFlagPtr_Type_(Px1DConstraintFlagsPtr wrp_this, physx::Px1DConstraintFlag::Type wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxFlags_PxArticulationAxisEnum_bytePtr(PxFlags_PxArticulationAxisEnum_bytePtr ptr){
    delete ptr;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr Ctor_PxFlags_PxArticulationAxisEnum_bytePtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxFlags_PxArticulationAxisEnum_bytePtr>::type(wrp__));
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr Ctor_PxFlags_PxArticulationAxisEnum_bytePtr_(){
    auto ret = *(new std::remove_pointer<PxFlags_PxArticulationAxisEnum_bytePtr>::type());
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr Ctor_PxFlags_PxArticulationAxisEnum_bytePtr_PxArticulationAxisEnum(physx::PxArticulationAxis::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxFlags_PxArticulationAxisEnum_bytePtr>::type(wrp_e));
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr Ctor_PxFlags_PxArticulationAxisEnum_bytePtr_PxFlags_PxArticulationAxisEnum_bytePtr(PxFlags_PxArticulationAxisEnum_bytePtr wrp_f){
    auto ret = *(new std::remove_pointer<PxFlags_PxArticulationAxisEnum_bytePtr>::type(*wrp_f));
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr Ctor_PxFlags_PxArticulationAxisEnum_bytePtr_byte(unsigned char wrp_b){
    auto ret = *(new std::remove_pointer<PxFlags_PxArticulationAxisEnum_bytePtr>::type(wrp_b));
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES bool bool_const_PxFlags_PxArticulationAxisEnum_bytePtr_isSetPtr_PxArticulationAxisEnum_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_this, physx::PxArticulationAxis::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_PxFlags_PxArticulationAxisEnum_bytePtr_setPtr_PxArticulationAxisEnum_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_this, physx::PxArticulationAxis::Enum wrp_e){
    return (PxFlags_PxArticulationAxisEnum_bytePtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_EqualEqual_PxArticulationAxisEnum_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, physx::PxArticulationAxis::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator==(wrp_e);
}

ES bool bool_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_EqualEqual_PxFlags_PxArticulationAxisEnum_bytePtr_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, PxFlags_PxArticulationAxisEnum_bytePtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator==(*wrp_f);
}

ES bool bool_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_EqualEqual_bool_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator==(wrp_b);
}

ES bool bool_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_ExclaimEqual_PxArticulationAxisEnum_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, physx::PxArticulationAxis::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator!=(wrp_e);
}

ES bool bool_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_ExclaimEqual_PxFlags_PxArticulationAxisEnum_bytePtr_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, PxFlags_PxArticulationAxisEnum_bytePtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator!=(*wrp_f);
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Equal_PxFlags_PxArticulationAxisEnum_bytePtr_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, PxFlags_PxArticulationAxisEnum_bytePtr wrp_f){
    return (PxFlags_PxArticulationAxisEnum_bytePtr) &wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator=(*wrp_f);
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Equal_PxArticulationAxisEnum_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, physx::PxArticulationAxis::Enum wrp_e){
    return (PxFlags_PxArticulationAxisEnum_bytePtr) &wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator=(wrp_e);
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_PipeEqual_PxArticulationAxisEnum_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, physx::PxArticulationAxis::Enum wrp_e){
    return (PxFlags_PxArticulationAxisEnum_bytePtr) &wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator|=(wrp_e);
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_PipeEqual_PxFlags_PxArticulationAxisEnum_bytePtr_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, PxFlags_PxArticulationAxisEnum_bytePtr wrp_f){
    return (PxFlags_PxArticulationAxisEnum_bytePtr) &wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator|=(*wrp_f);
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Pipe_PxArticulationAxisEnum_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, physx::PxArticulationAxis::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator|(wrp_e);
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Pipe_PxFlags_PxArticulationAxisEnum_bytePtr_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, PxFlags_PxArticulationAxisEnum_bytePtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator|(*wrp_f);
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_AmpEqual_PxArticulationAxisEnum_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, physx::PxArticulationAxis::Enum wrp_e){
    return (PxFlags_PxArticulationAxisEnum_bytePtr) &wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator&=(wrp_e);
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_AmpEqual_PxFlags_PxArticulationAxisEnum_bytePtr_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, PxFlags_PxArticulationAxisEnum_bytePtr wrp_f){
    return (PxFlags_PxArticulationAxisEnum_bytePtr) &wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator&=(*wrp_f);
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Amp_PxArticulationAxisEnum_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, physx::PxArticulationAxis::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator&(wrp_e);
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Amp_PxFlags_PxArticulationAxisEnum_bytePtr_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, PxFlags_PxArticulationAxisEnum_bytePtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator&(*wrp_f);
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_CaretEqual_PxArticulationAxisEnum_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, physx::PxArticulationAxis::Enum wrp_e){
    return (PxFlags_PxArticulationAxisEnum_bytePtr) &wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator^=(wrp_e);
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_CaretEqual_PxFlags_PxArticulationAxisEnum_bytePtr_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, PxFlags_PxArticulationAxisEnum_bytePtr wrp_f){
    return (PxFlags_PxArticulationAxisEnum_bytePtr) &wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator^=(*wrp_f);
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Caret_PxArticulationAxisEnum_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, physx::PxArticulationAxis::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator^(wrp_e);
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Caret_PxFlags_PxArticulationAxisEnum_bytePtr_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs, PxFlags_PxArticulationAxisEnum_bytePtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator^(*wrp_f);
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Tilde(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator~();
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES bool bool_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_boolPtr_Conversion(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator bool();
}

ES uint8_t byte_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_unsigned_charPtr_Conversion(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator unsigned char();
}

ES uint16_t ushort_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_unsigned_shortPtr_Conversion(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator unsigned short();
}

ES uint32_t uint_const_PxFlags_PxArticulationAxisEnum_bytePtr_operator_unsigned_intPtr_Conversion(PxFlags_PxArticulationAxisEnum_bytePtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxArticulationAxis::Enum, unsigned char>::operator unsigned int();
}

ES void void_PxFlags_PxArticulationAxisEnum_bytePtr_clearPtr_PxArticulationAxisEnum_(PxFlags_PxArticulationAxisEnum_bytePtr wrp_this, physx::PxArticulationAxis::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

ES void Freer_physx_PxArticulationMotionsPtr(PxArticulationMotionsPtr ptr){
    delete ptr;
}

ES PxArticulationMotionsPtr Ctor_PxArticulationMotionsPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxArticulationMotionsPtr>::type(wrp__));
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES PxArticulationMotionsPtr Ctor_PxArticulationMotionsPtr_(){
    auto ret = *(new std::remove_pointer<PxArticulationMotionsPtr>::type());
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES PxArticulationMotionsPtr Ctor_PxArticulationMotionsPtr_PxArticulationMotionEnum(physx::PxArticulationMotion::Enum wrp_e){
    auto ret = *(new std::remove_pointer<PxArticulationMotionsPtr>::type(wrp_e));
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES PxArticulationMotionsPtr Ctor_PxArticulationMotionsPtr_PxArticulationMotionsPtr(PxArticulationMotionsPtr wrp_f){
    auto ret = *(new std::remove_pointer<PxArticulationMotionsPtr>::type(*wrp_f));
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES PxArticulationMotionsPtr Ctor_PxArticulationMotionsPtr_byte(unsigned char wrp_b){
    auto ret = *(new std::remove_pointer<PxArticulationMotionsPtr>::type(wrp_b));
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES bool bool_const_PxArticulationMotionsPtr_isSetPtr_PxArticulationMotionEnum_(PxArticulationMotionsPtr wrp_this, physx::PxArticulationMotion::Enum wrp_e){
    return (bool) wrp_this->isSet(wrp_e);
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_PxArticulationMotionsPtr_setPtr_PxArticulationMotionEnum_(PxArticulationMotionsPtr wrp_this, physx::PxArticulationMotion::Enum wrp_e){
    return (PxArticulationMotionsPtr) &wrp_this->set(wrp_e);
}

ES bool bool_const_PxArticulationMotionsPtr_operator_Ptr_EqualEqual_PxArticulationMotionEnum_(PxArticulationMotionsPtr wrp_lhs, physx::PxArticulationMotion::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator==(wrp_e);
}

ES bool bool_const_PxArticulationMotionsPtr_operator_Ptr_EqualEqual_PxArticulationMotionsPtr_(PxArticulationMotionsPtr wrp_lhs, PxArticulationMotionsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator==(*wrp_f);
}

ES bool bool_const_PxArticulationMotionsPtr_operator_Ptr_EqualEqual_bool_(PxArticulationMotionsPtr wrp_lhs, bool wrp_b){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator==(wrp_b);
}

ES bool bool_const_PxArticulationMotionsPtr_operator_Ptr_ExclaimEqual_PxArticulationMotionEnum_(PxArticulationMotionsPtr wrp_lhs, physx::PxArticulationMotion::Enum wrp_e){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator!=(wrp_e);
}

ES bool bool_const_PxArticulationMotionsPtr_operator_Ptr_ExclaimEqual_PxArticulationMotionsPtr_(PxArticulationMotionsPtr wrp_lhs, PxArticulationMotionsPtr wrp_f){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator!=(*wrp_f);
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_PxArticulationMotionsPtr_operator_Ptr_Equal_PxArticulationMotionsPtr_(PxArticulationMotionsPtr wrp_lhs, PxArticulationMotionsPtr wrp_f){
    return (PxArticulationMotionsPtr) &wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator=(*wrp_f);
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_PxArticulationMotionsPtr_operator_Ptr_Equal_PxArticulationMotionEnum_(PxArticulationMotionsPtr wrp_lhs, physx::PxArticulationMotion::Enum wrp_e){
    return (PxArticulationMotionsPtr) &wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator=(wrp_e);
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_PxArticulationMotionsPtr_operator_Ptr_PipeEqual_PxArticulationMotionEnum_(PxArticulationMotionsPtr wrp_lhs, physx::PxArticulationMotion::Enum wrp_e){
    return (PxArticulationMotionsPtr) &wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator|=(wrp_e);
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_PxArticulationMotionsPtr_operator_Ptr_PipeEqual_PxArticulationMotionsPtr_(PxArticulationMotionsPtr wrp_lhs, PxArticulationMotionsPtr wrp_f){
    return (PxArticulationMotionsPtr) &wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator|=(*wrp_f);
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_const_PxArticulationMotionsPtr_operator_Ptr_Pipe_PxArticulationMotionEnum_(PxArticulationMotionsPtr wrp_lhs, physx::PxArticulationMotion::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator|(wrp_e);
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_const_PxArticulationMotionsPtr_operator_Ptr_Pipe_PxArticulationMotionsPtr_(PxArticulationMotionsPtr wrp_lhs, PxArticulationMotionsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator|(*wrp_f);
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_PxArticulationMotionsPtr_operator_Ptr_AmpEqual_PxArticulationMotionEnum_(PxArticulationMotionsPtr wrp_lhs, physx::PxArticulationMotion::Enum wrp_e){
    return (PxArticulationMotionsPtr) &wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator&=(wrp_e);
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_PxArticulationMotionsPtr_operator_Ptr_AmpEqual_PxArticulationMotionsPtr_(PxArticulationMotionsPtr wrp_lhs, PxArticulationMotionsPtr wrp_f){
    return (PxArticulationMotionsPtr) &wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator&=(*wrp_f);
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_const_PxArticulationMotionsPtr_operator_Ptr_Amp_PxArticulationMotionEnum_(PxArticulationMotionsPtr wrp_lhs, physx::PxArticulationMotion::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator&(wrp_e);
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_const_PxArticulationMotionsPtr_operator_Ptr_Amp_PxArticulationMotionsPtr_(PxArticulationMotionsPtr wrp_lhs, PxArticulationMotionsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator&(*wrp_f);
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_PxArticulationMotionsPtr_operator_Ptr_CaretEqual_PxArticulationMotionEnum_(PxArticulationMotionsPtr wrp_lhs, physx::PxArticulationMotion::Enum wrp_e){
    return (PxArticulationMotionsPtr) &wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator^=(wrp_e);
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_PxArticulationMotionsPtr_operator_Ptr_CaretEqual_PxArticulationMotionsPtr_(PxArticulationMotionsPtr wrp_lhs, PxArticulationMotionsPtr wrp_f){
    return (PxArticulationMotionsPtr) &wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator^=(*wrp_f);
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_const_PxArticulationMotionsPtr_operator_Ptr_Caret_PxArticulationMotionEnum_(PxArticulationMotionsPtr wrp_lhs, physx::PxArticulationMotion::Enum wrp_e){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator^(wrp_e);
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_const_PxArticulationMotionsPtr_operator_Ptr_Caret_PxArticulationMotionsPtr_(PxArticulationMotionsPtr wrp_lhs, PxArticulationMotionsPtr wrp_f){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator^(*wrp_f);
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_const_PxArticulationMotionsPtr_operator_Ptr_Tilde(PxArticulationMotionsPtr wrp_lhs){
    auto ret = wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator~();
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES bool bool_const_PxArticulationMotionsPtr_operator_boolPtr_Conversion(PxArticulationMotionsPtr wrp_lhs){
    return (bool) wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator bool();
}

ES uint8_t byte_const_PxArticulationMotionsPtr_operator_unsigned_charPtr_Conversion(PxArticulationMotionsPtr wrp_lhs){
    return (uint8_t) wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator unsigned char();
}

ES uint16_t ushort_const_PxArticulationMotionsPtr_operator_unsigned_shortPtr_Conversion(PxArticulationMotionsPtr wrp_lhs){
    return (uint16_t) wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator unsigned short();
}

ES uint32_t uint_const_PxArticulationMotionsPtr_operator_unsigned_intPtr_Conversion(PxArticulationMotionsPtr wrp_lhs){
    return (uint32_t) wrp_lhs->PxFlags<physx::PxArticulationMotion::Enum, unsigned char>::operator unsigned int();
}

ES void void_PxArticulationMotionsPtr_clearPtr_PxArticulationMotionEnum_(PxArticulationMotionsPtr wrp_this, physx::PxArticulationMotion::Enum wrp_e){
    wrp_this->clear(wrp_e);
}

