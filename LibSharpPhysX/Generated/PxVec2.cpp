// Generated by minBND 5.1.94.90 - Â© github.com/Alan-FGR

ES void PxVec2_operator_Ptr_Star_float_PxVec2_(physx::PxVec2* nRetRef, float wrp_f, physx::PxVec2* wrp_v){
    *nRetRef = ::physx::operator*(wrp_f, *wrp_v);
}

ES void void_PxVec2_PxVec2Ptr_Ctor(physx::PxVec2* wrp_this){
    *wrp_this = ::physx::PxVec2::PxVec2();
}

ES void void_PxVec2_PxVec2Ptr_Ctor_PxZERO_(physx::PxVec2* wrp_this, physx::PxZERO wrp_r){
    *wrp_this = ::physx::PxVec2::PxVec2(wrp_r);
}

ES void void_PxVec2_PxVec2Ptr_Ctor_float_(physx::PxVec2* wrp_this, float wrp_a){
    *wrp_this = ::physx::PxVec2::PxVec2(wrp_a);
}

ES void void_PxVec2_PxVec2Ptr_Ctor_float_float_(physx::PxVec2* wrp_this, float wrp_nx, float wrp_ny){
    *wrp_this = ::physx::PxVec2::PxVec2(wrp_nx, wrp_ny);
}

ES void void_PxVec2_PxVec2Ptr_Ctor_PxVec2_(physx::PxVec2* wrp_this, physx::PxVec2* wrp_v){
    *wrp_this = ::physx::PxVec2::PxVec2(*wrp_v);
}

ES physx::PxVec2* PxVec2_PxVec2_operator_Ptr_Equal_PxVec2_(physx::PxVec2* wrp_lhs, physx::PxVec2* wrp_p){
    return (physx::PxVec2*) &wrp_lhs->::physx::PxVec2::operator=(*wrp_p);
}

ES float* float_PxVec2_operator_Ptr_Subscript_int_(physx::PxVec2* wrp_lhs, int wrp_index){
    return (float*) &wrp_lhs->::physx::PxVec2::operator[](wrp_index);
}

ES float* float_const_PxVec2_operator_Ptr_Subscript_int_(physx::PxVec2* wrp_lhs, int wrp_index){
    return (float*) &wrp_lhs->::physx::PxVec2::operator[](wrp_index);
}

ES bool bool_const_PxVec2_operator_Ptr_EqualEqual_PxVec2_(physx::PxVec2* wrp_lhs, physx::PxVec2* wrp_v){
    return (bool) wrp_lhs->::physx::PxVec2::operator==(*wrp_v);
}

ES bool bool_const_PxVec2_operator_Ptr_ExclaimEqual_PxVec2_(physx::PxVec2* wrp_lhs, physx::PxVec2* wrp_v){
    return (bool) wrp_lhs->::physx::PxVec2::operator!=(*wrp_v);
}

ES bool bool_const_PxVec2_isZeroPtr(physx::PxVec2* wrp_this){
    return (bool) wrp_this->isZero();
}

ES bool bool_const_PxVec2_isFinitePtr(physx::PxVec2* wrp_this){
    return (bool) wrp_this->isFinite();
}

ES bool bool_const_PxVec2_isNormalizedPtr(physx::PxVec2* wrp_this){
    return (bool) wrp_this->isNormalized();
}

ES float float_const_PxVec2_magnitudeSquaredPtr(physx::PxVec2* wrp_this){
    return (float) wrp_this->magnitudeSquared();
}

ES float float_const_PxVec2_magnitudePtr(physx::PxVec2* wrp_this){
    return (float) wrp_this->magnitude();
}

ES void PxVec2_const_PxVec2_operator_Ptr_Minus(physx::PxVec2* nRetRef, physx::PxVec2* wrp_lhs){
    *nRetRef = wrp_lhs->::physx::PxVec2::operator-();
}

ES void PxVec2_const_PxVec2_operator_Ptr_Plus_PxVec2_(physx::PxVec2* nRetRef, physx::PxVec2* wrp_lhs, physx::PxVec2* wrp_v){
    *nRetRef = wrp_lhs->::physx::PxVec2::operator+(*wrp_v);
}

ES void PxVec2_const_PxVec2_operator_Ptr_Minus_PxVec2_(physx::PxVec2* nRetRef, physx::PxVec2* wrp_lhs, physx::PxVec2* wrp_v){
    *nRetRef = wrp_lhs->::physx::PxVec2::operator-(*wrp_v);
}

ES void PxVec2_const_PxVec2_operator_Ptr_Star_float_(physx::PxVec2* nRetRef, physx::PxVec2* wrp_lhs, float wrp_f){
    *nRetRef = wrp_lhs->::physx::PxVec2::operator*(wrp_f);
}

ES void PxVec2_const_PxVec2_operator_Ptr_Slash_float_(physx::PxVec2* nRetRef, physx::PxVec2* wrp_lhs, float wrp_f){
    *nRetRef = wrp_lhs->::physx::PxVec2::operator/(wrp_f);
}

ES physx::PxVec2* PxVec2_PxVec2_operator_Ptr_PlusEqual_PxVec2_(physx::PxVec2* wrp_lhs, physx::PxVec2* wrp_v){
    return (physx::PxVec2*) &wrp_lhs->::physx::PxVec2::operator+=(*wrp_v);
}

ES physx::PxVec2* PxVec2_PxVec2_operator_Ptr_MinusEqual_PxVec2_(physx::PxVec2* wrp_lhs, physx::PxVec2* wrp_v){
    return (physx::PxVec2*) &wrp_lhs->::physx::PxVec2::operator-=(*wrp_v);
}

ES physx::PxVec2* PxVec2_PxVec2_operator_Ptr_StarEqual_float_(physx::PxVec2* wrp_lhs, float wrp_f){
    return (physx::PxVec2*) &wrp_lhs->::physx::PxVec2::operator*=(wrp_f);
}

ES physx::PxVec2* PxVec2_PxVec2_operator_Ptr_SlashEqual_float_(physx::PxVec2* wrp_lhs, float wrp_f){
    return (physx::PxVec2*) &wrp_lhs->::physx::PxVec2::operator/=(wrp_f);
}

ES float float_const_PxVec2_dotPtr_PxVec2_(physx::PxVec2* wrp_this, physx::PxVec2* wrp_v){
    return (float) wrp_this->dot(*wrp_v);
}

ES void PxVec2_const_PxVec2_getNormalizedPtr(physx::PxVec2* nRetRef, physx::PxVec2* wrp_this){
    *nRetRef = wrp_this->getNormalized();
}

ES float float_PxVec2_normalizePtr(physx::PxVec2* wrp_this){
    return (float) wrp_this->normalize();
}

ES void PxVec2_const_PxVec2_multiplyPtr_PxVec2_(physx::PxVec2* nRetRef, physx::PxVec2* wrp_this, physx::PxVec2* wrp_a){
    *nRetRef = wrp_this->multiply(*wrp_a);
}

ES void PxVec2_const_PxVec2_minimumPtr_PxVec2_(physx::PxVec2* nRetRef, physx::PxVec2* wrp_this, physx::PxVec2* wrp_v){
    *nRetRef = wrp_this->minimum(*wrp_v);
}

ES float float_const_PxVec2_minElementPtr(physx::PxVec2* wrp_this){
    return (float) wrp_this->minElement();
}

ES void PxVec2_const_PxVec2_maximumPtr_PxVec2_(physx::PxVec2* nRetRef, physx::PxVec2* wrp_this, physx::PxVec2* wrp_v){
    *nRetRef = wrp_this->maximum(*wrp_v);
}

ES float float_const_PxVec2_maxElementPtr(physx::PxVec2* wrp_this){
    return (float) wrp_this->maxElement();
}

