// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
ES void Freer_physx_PxMeshScalePtr(PxMeshScalePtr ptr){
    delete ptr;
}

ES PxMeshScalePtr Ctor_physx_PxMeshScalePtr_(){
    return (PxMeshScalePtr) new std::remove_pointer<PxMeshScalePtr>::type();
}

ES PxMeshScalePtr Ctor_physx_PxMeshScalePtr_float(float wrp_r){
    return (PxMeshScalePtr) new std::remove_pointer<PxMeshScalePtr>::type(wrp_r);
}

ES PxMeshScalePtr Ctor_physx_PxMeshScalePtr_physx_PxVec3_(physx::PxVec3* wrp_s){
    return (PxMeshScalePtr) new std::remove_pointer<PxMeshScalePtr>::type(*wrp_s);
}

ES PxMeshScalePtr Ctor_physx_PxMeshScalePtr_physx_PxVec3_physx_PxQuat_(physx::PxVec3* wrp_s, physx::PxQuat* wrp_r){
    return (PxMeshScalePtr) new std::remove_pointer<PxMeshScalePtr>::type(*wrp_s, *wrp_r);
}

ES void PxMeshScale_GET_scale(PxMeshScalePtr cls, physx::PxVec3* GetRetRef) {*GetRetRef = cls->scale;}
ES void PxMeshScale_SET_scale(PxMeshScalePtr cls, physx::PxVec3 value) {cls->scale = value;}

ES void PxMeshScale_GET_rotation(PxMeshScalePtr cls, physx::PxQuat* GetRetRef) {*GetRetRef = cls->rotation;}
ES void PxMeshScale_SET_rotation(PxMeshScalePtr cls, physx::PxQuat value) {cls->rotation = value;}

ES bool bool_const_physx_PxMeshScale_isIdentity(PxMeshScalePtr wrp_this){
    return (bool) wrp_this->isIdentity();
}

ES PxMeshScalePtr physx_PxMeshScalePtr_const_physx_PxMeshScale_getInverse(PxMeshScalePtr wrp_this){
    auto ret = wrp_this->getInverse();
    auto heap = new char[sizeof PxMeshScale];
    std::memcpy(heap, &ret, sizeof PxMeshScale);
    return (PxMeshScalePtr) heap;
}

ES void physx_PxMat33_const_physx_PxMeshScale_toMat33(physx::PxMat33* RetRef, PxMeshScalePtr wrp_this){
    *RetRef = wrp_this->toMat33();
}

ES bool bool_const_physx_PxMeshScale_hasNegativeDeterminant(PxMeshScalePtr wrp_this){
    return (bool) wrp_this->hasNegativeDeterminant();
}

ES void physx_PxVec3_const_physx_PxMeshScale_transform_physx_PxVec3_(physx::PxVec3* RetRef, PxMeshScalePtr wrp_this, physx::PxVec3* wrp_v){
    *RetRef = wrp_this->transform(*wrp_v);
}

ES bool bool_const_physx_PxMeshScale_isValidForTriangleMesh(PxMeshScalePtr wrp_this){
    return (bool) wrp_this->isValidForTriangleMesh();
}

ES bool bool_const_physx_PxMeshScale_isValidForConvexMesh(PxMeshScalePtr wrp_this){
    return (bool) wrp_this->isValidForConvexMesh();
}
