//Generated by MinBinder.

ES void C_PxBase_release(physx::PxBase cls){ // L85

    return cls.release();
}

ES const char* C_CONST_PxBase_getConcreteTypeName(physx::PxBase cls){ // L91

    return cls.getConcreteTypeName();
}

ES * C_PxBase_is(physx::PxBase cls){ // L101

    return cls.is();
}

ES * C_CONST_PxBase_is(physx::PxBase cls){ // L111

    return cls.is();
}

ES physx::PxType C_CONST_PxBase_getConcreteType(physx::PxBase cls){ // L119

    return cls.getConcreteType();
}

ES void C_PxBase_setBaseFlag(physx::PxBase cls,physx::PxBaseFlag::Enum flag,bool value){ // L127

    return cls.setBaseFlag(flag,value);
}

ES void C_PxBase_setBaseFlags(physx::PxBase cls,physx::PxBaseFlags inFlags){ // L136

    return cls.setBaseFlags(inFlags);
}

ES physx::PxBaseFlags C_CONST_PxBase_getBaseFlags(physx::PxBase cls){ // L145

    return cls.getBaseFlags();
}

ES bool C_CONST_PxBase_isReleasable(physx::PxBase cls){ // L156

    return cls.isReleasable();
}

ES physx::PxBase C_PxBase_PxBase(physx::PxType concreteType,physx::PxBaseFlags baseFlags){ // L162

    return physx::PxBase::PxBase(concreteType,baseFlags);
}

ES physx::PxBase C_PxBase_PxBase(physx::PxBaseFlags baseFlags){ // L168

    return physx::PxBase::PxBase(baseFlags);
}

ES bool C_CONST_PxBase_isKindOf(physx::PxBase cls,const char* superClass){ // L178

    return cls.isKindOf(superClass);
}

ES bool C_CONST_PxBase_typeMatch(physx::PxBase cls){ // L180

    return cls.typeMatch();
}

