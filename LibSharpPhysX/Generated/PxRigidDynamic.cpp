// Generated by minBND 5.1.90.51 - Â© github.com/Alan-FGR

//DBG: FunctionNode physx::operator| L64
//physx::operator| static physx.PxRigidDynamicLockFlagsPtr OpPipe_New(physx.PxRigidDynamicLockFlagEnum a, physx.PxRigidDynamicLockFlagEnum b) will also be bound as member operator
//RET nat: PxRigidDynamicLockFlagsPtr, man: physx.PxRigidDynamicLockFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxRigidDynamicLockFlag::Enum, man: physx.PxRigidDynamicLockFlagEnum, kind: Value
//PAR nat: physx::PxRigidDynamicLockFlag::Enum, man: physx.PxRigidDynamicLockFlagEnum, kind: Value
ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_operator_Ptr_Pipe_PxRigidDynamicLockFlagEnum_PxRigidDynamicLockFlagEnum_(physx::PxRigidDynamicLockFlag::Enum wrp_a, physx::PxRigidDynamicLockFlag::Enum wrp_b){
    auto ret = ::physx::operator|(wrp_a, wrp_b);
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

//DBG: FunctionNode physx::operator& L64
//physx::operator& static physx.PxRigidDynamicLockFlagsPtr OpAnd_New(physx.PxRigidDynamicLockFlagEnum a, physx.PxRigidDynamicLockFlagEnum b) will also be bound as member operator
//RET nat: PxRigidDynamicLockFlagsPtr, man: physx.PxRigidDynamicLockFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxRigidDynamicLockFlag::Enum, man: physx.PxRigidDynamicLockFlagEnum, kind: Value
//PAR nat: physx::PxRigidDynamicLockFlag::Enum, man: physx.PxRigidDynamicLockFlagEnum, kind: Value
ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_operator_Ptr_Amp_PxRigidDynamicLockFlagEnum_PxRigidDynamicLockFlagEnum_(physx::PxRigidDynamicLockFlag::Enum wrp_a, physx::PxRigidDynamicLockFlag::Enum wrp_b){
    auto ret = ::physx::operator&(wrp_a, wrp_b);
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

//DBG: FunctionNode physx::operator~ L64
//physx::operator~ static physx.PxRigidDynamicLockFlagsPtr OpTilde_New(physx.PxRigidDynamicLockFlagEnum a) will also be bound as member operator
//RET nat: PxRigidDynamicLockFlagsPtr, man: physx.PxRigidDynamicLockFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxRigidDynamicLockFlag::Enum, man: physx.PxRigidDynamicLockFlagEnum, kind: Value
ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_operator_Ptr_Tilde_PxRigidDynamicLockFlagEnum_(physx::PxRigidDynamicLockFlag::Enum wrp_a){
    auto ret = ::physx::operator~(wrp_a);
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

//DBG: ClassNode PxRigidDynamicLockFlag physx::PxRigidDynamicLockFlag L50-61
//Subclasses using this: 0

//DBG: ClassNode PxRigidDynamic physx::PxRigidDynamic L83-381Bases: PxRigidBodyPtr|PxRigidActorPtr|PxActorPtr|PxBasePtr

//DBG: MethodNode physx::PxRigidDynamic::setKinematicTarget L117
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxTransform*, man: physx.PxTransform*, kind: Value
ES void void_PxRigidDynamicPtr_setKinematicTargetPtr_PxTransform_(PxRigidDynamicPtr wrp_this, physx::PxTransform* wrp_destination){
    wrp_this->setKinematicTarget(*wrp_destination);
}

//DBG: MethodNode physx::PxRigidDynamic::getKinematicTarget L127
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxTransform*, man: physx.PxTransform*, kind: Value
ES bool bool_const_PxRigidDynamicPtr_getKinematicTargetPtr_PxTransform_(PxRigidDynamicPtr wrp_this, physx::PxTransform* wrp_target){
    return (bool) wrp_this->getKinematicTarget(*wrp_target);
}

//DBG: MethodNode physx::PxRigidDynamic::isSleeping L168
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
ES bool bool_const_PxRigidDynamicPtr_isSleepingPtr(PxRigidDynamicPtr wrp_this){
    return (bool) wrp_this->isSleeping();
}

//DBG: MethodNode physx::PxRigidDynamic::setSleepThreshold L182
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxRigidDynamicPtr_setSleepThresholdPtr_float_(PxRigidDynamicPtr wrp_this, PxReal wrp_threshold){
    wrp_this->setSleepThreshold(wrp_threshold);
}

//DBG: MethodNode physx::PxRigidDynamic::getSleepThreshold L191
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
ES PxReal float_const_PxRigidDynamicPtr_getSleepThresholdPtr(PxRigidDynamicPtr wrp_this){
    return (PxReal) wrp_this->getSleepThreshold();
}

//DBG: MethodNode physx::PxRigidDynamic::setStabilizationThreshold L206
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxRigidDynamicPtr_setStabilizationThresholdPtr_float_(PxRigidDynamicPtr wrp_this, PxReal wrp_threshold){
    wrp_this->setStabilizationThreshold(wrp_threshold);
}

//DBG: MethodNode physx::PxRigidDynamic::getStabilizationThreshold L217
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
ES PxReal float_const_PxRigidDynamicPtr_getStabilizationThresholdPtr(PxRigidDynamicPtr wrp_this){
    return (PxReal) wrp_this->getStabilizationThreshold();
}

//DBG: MethodNode physx::PxRigidDynamic::getRigidDynamicLockFlags L229
//RET nat: PxRigidDynamicLockFlagsPtr, man: physx.PxRigidDynamicLockFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_const_PxRigidDynamicPtr_getRigidDynamicLockFlagsPtr(PxRigidDynamicPtr wrp_this){
    auto ret = wrp_this->getRigidDynamicLockFlags();
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

//DBG: MethodNode physx::PxRigidDynamic::setRigidDynamicLockFlag L244
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxRigidDynamicLockFlag::Enum, man: physx.PxRigidDynamicLockFlagEnum, kind: Value
//PAR nat: bool, man: bool, kind: Value
ES void void_PxRigidDynamicPtr_setRigidDynamicLockFlagPtr_PxRigidDynamicLockFlagEnum_bool_(PxRigidDynamicPtr wrp_this, physx::PxRigidDynamicLockFlag::Enum wrp_flag, bool wrp_value){
    wrp_this->setRigidDynamicLockFlag(wrp_flag, wrp_value);
}

//DBG: MethodNode physx::PxRigidDynamic::setRigidDynamicLockFlags L245
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxRigidDynamicLockFlagsPtr, man: physx.PxRigidDynamicLockFlagsPtr, kind: PtrStruct
ES void void_PxRigidDynamicPtr_setRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagsPtr_(PxRigidDynamicPtr wrp_this, PxRigidDynamicLockFlagsPtr wrp_flags){
    wrp_this->setRigidDynamicLockFlags(*wrp_flags);
}

//DBG: MethodNode physx::PxRigidDynamic::setWakeCounter L269
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxRigidDynamicPtr_setWakeCounterPtr_float_(PxRigidDynamicPtr wrp_this, PxReal wrp_wakeCounterValue){
    wrp_this->setWakeCounter(wrp_wakeCounterValue);
}

//DBG: MethodNode physx::PxRigidDynamic::getWakeCounter L278
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
ES PxReal float_const_PxRigidDynamicPtr_getWakeCounterPtr(PxRigidDynamicPtr wrp_this){
    return (PxReal) wrp_this->getWakeCounter();
}

//DBG: MethodNode physx::PxRigidDynamic::wakeUp L294
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
ES void void_PxRigidDynamicPtr_wakeUpPtr(PxRigidDynamicPtr wrp_this){
    wrp_this->wakeUp();
}

//DBG: MethodNode physx::PxRigidDynamic::putToSleep L310
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
ES void void_PxRigidDynamicPtr_putToSleepPtr(PxRigidDynamicPtr wrp_this){
    wrp_this->putToSleep();
}

//DBG: MethodNode physx::PxRigidDynamic::setSolverIterationCounts L332
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxU32, man: uint, kind: Value
//PAR nat: PxU32, man: uint, kind: Value
ES void void_PxRigidDynamicPtr_setSolverIterationCountsPtr_uint_uint_(PxRigidDynamicPtr wrp_this, PxU32 wrp_minPositionIters, PxU32 wrp_minVelocityIters){
    wrp_this->setSolverIterationCounts(wrp_minPositionIters, wrp_minVelocityIters);
}

//DBG: MethodNode physx::PxRigidDynamic::getSolverIterationCounts L339
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxU32*, man: uint*, kind: Value
//PAR nat: PxU32*, man: uint*, kind: Value
ES void void_const_PxRigidDynamicPtr_getSolverIterationCountsPtr_uint_uint_(PxRigidDynamicPtr wrp_this, PxU32* wrp_minPositionIters, PxU32* wrp_minVelocityIters){
    wrp_this->getSolverIterationCounts(*wrp_minPositionIters, *wrp_minVelocityIters);
}

//DBG: MethodNode physx::PxRigidDynamic::getContactReportThreshold L360
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
ES PxReal float_const_PxRigidDynamicPtr_getContactReportThresholdPtr(PxRigidDynamicPtr wrp_this){
    return (PxReal) wrp_this->getContactReportThreshold();
}

//DBG: MethodNode physx::PxRigidDynamic::setContactReportThreshold L371
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxRigidDynamicPtr_setContactReportThresholdPtr_float_(PxRigidDynamicPtr wrp_this, PxReal wrp_threshold){
    wrp_this->setContactReportThreshold(wrp_threshold);
}

//DBG: MethodNode physx::PxRigidDynamic::getConcreteTypeName L373
//RET nat: char*, man: string, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
ES char* string_const_PxRigidDynamicPtr_getConcreteTypeNamePtr(PxRigidDynamicPtr wrp_this){
    return (char*) wrp_this->getConcreteTypeName();
}

//DBG: MethodNode physx::PxRigidDynamic::operator= L83
//ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxRigidDynamic::operator= L83

//DBG: MethodNode physx::PxRigidDynamic::setKinematicTarget L117
//Value Converter setKinematicTarget
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable

//DBG: MethodNode physx::PxRigidDynamic::setKinematicTarget L117
//Value Converter setKinematicTarget
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable

//DBG: MethodNode physx::PxRigidDynamic::getKinematicTarget L127
//Value Converter getKinematicTarget
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable

//DBG: MethodNode physx::PxRigidDynamic::getKinematicTarget L127
//Value Converter getKinematicTarget
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable

//DBG: MethodNode physx::PxRigidDynamic::setSolverIterationCounts L332
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxU32, man: uint, kind: Value
ES void void_PxRigidDynamicPtr_setSolverIterationCountsPtr_uint_(PxRigidDynamicPtr wrp_this, PxU32 wrp_minPositionIters){
    wrp_this->setSolverIterationCounts(wrp_minPositionIters);
}

//DBG: Field: userData - 314-314
//PIPING
//Skipping: SKIPPING! MethodNode physx::PxBase::is L101 is | 
//Skipping: SKIPPING! MethodNode physx::PxBase::is L111 isConst | 

//Operators

//DBG: DeclNode PxRigidDynamicLockFlags physx::PxRigidDynamicLockFlags L63
