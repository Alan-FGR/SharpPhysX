// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
ES void void_physx_PxRigidDynamic_setKinematicTarget_physx_PxTransformPtr_(PxRigidDynamicPtr wrp_this, PxTransformPtr wrp_destination){
    wrp_this->setKinematicTarget(*wrp_destination);
}

ES bool bool_const_physx_PxRigidDynamic_getKinematicTarget_physx_PxTransformPtr_(PxRigidDynamicPtr wrp_this, PxTransformPtr wrp_target){
    return (bool) wrp_this->getKinematicTarget(*wrp_target);
}

ES bool bool_const_physx_PxRigidDynamic_isSleeping(PxRigidDynamicPtr wrp_this){
    return (bool) wrp_this->isSleeping();
}

ES void void_physx_PxRigidDynamic_setSleepThreshold_float_(PxRigidDynamicPtr wrp_this, float wrp_threshold){
    wrp_this->setSleepThreshold(wrp_threshold);
}

ES float float_const_physx_PxRigidDynamic_getSleepThreshold(PxRigidDynamicPtr wrp_this){
    return (float) wrp_this->getSleepThreshold();
}

ES void void_physx_PxRigidDynamic_setStabilizationThreshold_float_(PxRigidDynamicPtr wrp_this, float wrp_threshold){
    wrp_this->setStabilizationThreshold(wrp_threshold);
}

ES float float_const_physx_PxRigidDynamic_getStabilizationThreshold(PxRigidDynamicPtr wrp_this){
    return (float) wrp_this->getStabilizationThreshold();
}

ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_const_physx_PxRigidDynamic_getRigidDynamicLockFlags(PxRigidDynamicPtr wrp_this){
    auto ret = wrp_this->getRigidDynamicLockFlags();
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

ES void void_physx_PxRigidDynamic_setRigidDynamicLockFlag_physx_PxRigidDynamicLockFlagEnum_bool_(PxRigidDynamicPtr wrp_this, physx::PxRigidDynamicLockFlag::Enum wrp_flag, bool wrp_value){
    wrp_this->setRigidDynamicLockFlag(wrp_flag, wrp_value);
}

ES void void_physx_PxRigidDynamic_setRigidDynamicLockFlags_PxRigidDynamicLockFlagsPtr_(PxRigidDynamicPtr wrp_this, PxRigidDynamicLockFlagsPtr wrp_flags){
    wrp_this->setRigidDynamicLockFlags(*wrp_flags);
}

ES void void_physx_PxRigidDynamic_setWakeCounter_float_(PxRigidDynamicPtr wrp_this, float wrp_wakeCounterValue){
    wrp_this->setWakeCounter(wrp_wakeCounterValue);
}

ES float float_const_physx_PxRigidDynamic_getWakeCounter(PxRigidDynamicPtr wrp_this){
    return (float) wrp_this->getWakeCounter();
}

ES void void_physx_PxRigidDynamic_wakeUp(PxRigidDynamicPtr wrp_this){
    wrp_this->wakeUp();
}

ES void void_physx_PxRigidDynamic_putToSleep(PxRigidDynamicPtr wrp_this){
    wrp_this->putToSleep();
}

ES void void_physx_PxRigidDynamic_setSolverIterationCounts_uint_uint_(PxRigidDynamicPtr wrp_this, unsigned int wrp_minPositionIters, unsigned int wrp_minVelocityIters){
    wrp_this->setSolverIterationCounts(wrp_minPositionIters, wrp_minVelocityIters);
}

ES void void_physx_PxRigidDynamic_setSolverIterationCounts_uint_(PxRigidDynamicPtr wrp_this, unsigned int wrp_minPositionIters){
    wrp_this->setSolverIterationCounts(wrp_minPositionIters);
}

ES void void_const_physx_PxRigidDynamic_getSolverIterationCounts_uint_uint_(PxRigidDynamicPtr wrp_this, unsigned int* wrp_minPositionIters, unsigned int* wrp_minVelocityIters){
    wrp_this->getSolverIterationCounts(*wrp_minPositionIters, *wrp_minVelocityIters);
}

ES float float_const_physx_PxRigidDynamic_getContactReportThreshold(PxRigidDynamicPtr wrp_this){
    return (float) wrp_this->getContactReportThreshold();
}

ES void void_physx_PxRigidDynamic_setContactReportThreshold_float_(PxRigidDynamicPtr wrp_this, float wrp_threshold){
    wrp_this->setContactReportThreshold(wrp_threshold);
}

ES char* string_const_physx_PxRigidDynamic_getConcreteTypeName(PxRigidDynamicPtr wrp_this){
    return (char*) wrp_this->getConcreteTypeName();
}
