// Generated by minBND 5.1.78.26 - Â© github.com/Alan-FGR
//DEBUG: UnitNode  - 0
//DEBUG: NamespaceNode physx - 40-384
//DEBUG: FunctionNode physx::operator| - 64
//Internal Op

//DEBUG: FunctionNode physx::operator& - 64
//Internal Op

//DEBUG: FunctionNode physx::operator~ - 64
//Internal Op

//DEBUG: ClassNode physx::PxRigidDynamicLockFlag - 50-61
//DEBUG: EnumNode physx::PxRigidDynamicLockFlag::Enum - 52-60
// TODO EnumNode.GenWrapper()

//DEBUG: ClassNode physx::PxRigidDynamic - 83-381
//Bases: PxRigidBodyPtr|PxRigidActorPtr|PxActorPtr|PxBasePtr
//DEBUG: MethodNode physx::PxRigidDynamic::setKinematicTarget - 117
ES void void_physx_PxRigidDynamic_setKinematicTarget_physx_PxTransform_(PxRigidDynamicPtr wrp_this, physx::PxTransform* wrp_destination){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    //PAR nat: physx::PxTransform*, man: physx.PxTransform*, kind: Value
    wrp_this->setKinematicTarget(*wrp_destination);
}

//DEBUG: MethodNode physx::PxRigidDynamic::getKinematicTarget - 127
ES bool bool_const_physx_PxRigidDynamic_getKinematicTarget_physx_PxTransform_(PxRigidDynamicPtr wrp_this, physx::PxTransform* wrp_target){
    //RET nat: bool, man: bool, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    //PAR nat: physx::PxTransform*, man: physx.PxTransform*, kind: Value
    return (bool) wrp_this->getKinematicTarget(*wrp_target);
}

//DEBUG: MethodNode physx::PxRigidDynamic::isSleeping - 168
ES bool bool_const_physx_PxRigidDynamic_isSleeping(PxRigidDynamicPtr wrp_this){
    //RET nat: bool, man: bool, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    return (bool) wrp_this->isSleeping();
}

//DEBUG: MethodNode physx::PxRigidDynamic::setSleepThreshold - 182
ES void void_physx_PxRigidDynamic_setSleepThreshold_float_(PxRigidDynamicPtr wrp_this, float wrp_threshold){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    //PAR nat: float, man: float, kind: Value
    wrp_this->setSleepThreshold(wrp_threshold);
}

//DEBUG: MethodNode physx::PxRigidDynamic::getSleepThreshold - 191
ES float float_const_physx_PxRigidDynamic_getSleepThreshold(PxRigidDynamicPtr wrp_this){
    //RET nat: float, man: float, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    return (float) wrp_this->getSleepThreshold();
}

//DEBUG: MethodNode physx::PxRigidDynamic::setStabilizationThreshold - 206
ES void void_physx_PxRigidDynamic_setStabilizationThreshold_float_(PxRigidDynamicPtr wrp_this, float wrp_threshold){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    //PAR nat: float, man: float, kind: Value
    wrp_this->setStabilizationThreshold(wrp_threshold);
}

//DEBUG: MethodNode physx::PxRigidDynamic::getStabilizationThreshold - 217
ES float float_const_physx_PxRigidDynamic_getStabilizationThreshold(PxRigidDynamicPtr wrp_this){
    //RET nat: float, man: float, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    return (float) wrp_this->getStabilizationThreshold();
}

//DEBUG: MethodNode physx::PxRigidDynamic::getRigidDynamicLockFlags - 229
ES PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_const_physx_PxRigidDynamic_getRigidDynamicLockFlags(PxRigidDynamicPtr wrp_this){
    //RET nat: PxRigidDynamicLockFlagsPtr, man: PxRigidDynamicLockFlagsPtr, ret: True, kind: PtrStruct
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    auto ret = wrp_this->getRigidDynamicLockFlags();
    auto heap = new char[sizeof PxRigidDynamicLockFlags];
    std::memcpy(heap, &ret, sizeof PxRigidDynamicLockFlags);
    return (PxRigidDynamicLockFlagsPtr) heap;
}

//DEBUG: MethodNode physx::PxRigidDynamic::setRigidDynamicLockFlag - 244
ES void void_physx_PxRigidDynamic_setRigidDynamicLockFlag_physx_PxRigidDynamicLockFlagEnum_bool_(PxRigidDynamicPtr wrp_this, physx::PxRigidDynamicLockFlag::Enum wrp_flag, bool wrp_value){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    //PAR nat: physx::PxRigidDynamicLockFlag::Enum, man: physx.PxRigidDynamicLockFlagEnum, kind: Value
    //PAR nat: bool, man: bool, kind: Value
    wrp_this->setRigidDynamicLockFlag(wrp_flag, wrp_value);
}

//DEBUG: MethodNode physx::PxRigidDynamic::setRigidDynamicLockFlags - 245
ES void void_physx_PxRigidDynamic_setRigidDynamicLockFlags_PxRigidDynamicLockFlagsPtr_(PxRigidDynamicPtr wrp_this, PxRigidDynamicLockFlagsPtr wrp_flags){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    //PAR nat: PxRigidDynamicLockFlagsPtr, man: PxRigidDynamicLockFlagsPtr, kind: PtrStruct
    wrp_this->setRigidDynamicLockFlags(*wrp_flags);
}

//DEBUG: MethodNode physx::PxRigidDynamic::setWakeCounter - 269
ES void void_physx_PxRigidDynamic_setWakeCounter_float_(PxRigidDynamicPtr wrp_this, float wrp_wakeCounterValue){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    //PAR nat: float, man: float, kind: Value
    wrp_this->setWakeCounter(wrp_wakeCounterValue);
}

//DEBUG: MethodNode physx::PxRigidDynamic::getWakeCounter - 278
ES float float_const_physx_PxRigidDynamic_getWakeCounter(PxRigidDynamicPtr wrp_this){
    //RET nat: float, man: float, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    return (float) wrp_this->getWakeCounter();
}

//DEBUG: MethodNode physx::PxRigidDynamic::wakeUp - 294
ES void void_physx_PxRigidDynamic_wakeUp(PxRigidDynamicPtr wrp_this){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    wrp_this->wakeUp();
}

//DEBUG: MethodNode physx::PxRigidDynamic::putToSleep - 310
ES void void_physx_PxRigidDynamic_putToSleep(PxRigidDynamicPtr wrp_this){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    wrp_this->putToSleep();
}

//DEBUG: MethodNode physx::PxRigidDynamic::setSolverIterationCounts - 332
ES void void_physx_PxRigidDynamic_setSolverIterationCounts_uint_uint_(PxRigidDynamicPtr wrp_this, unsigned int wrp_minPositionIters, unsigned int wrp_minVelocityIters){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    //PAR nat: unsigned int, man: uint, kind: Value
    //PAR nat: unsigned int, man: uint, kind: Value
    wrp_this->setSolverIterationCounts(wrp_minPositionIters, wrp_minVelocityIters);
}

//DEBUG: MethodNode physx::PxRigidDynamic::setSolverIterationCounts - 332
ES void void_physx_PxRigidDynamic_setSolverIterationCounts_uint_(PxRigidDynamicPtr wrp_this, unsigned int wrp_minPositionIters){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    //PAR nat: unsigned int, man: uint, kind: Value
    wrp_this->setSolverIterationCounts(wrp_minPositionIters);
}

//DEBUG: MethodNode physx::PxRigidDynamic::getSolverIterationCounts - 339
ES void void_const_physx_PxRigidDynamic_getSolverIterationCounts_uint_uint_(PxRigidDynamicPtr wrp_this, unsigned int* wrp_minPositionIters, unsigned int* wrp_minVelocityIters){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    //PAR nat: unsigned int*, man: uint*, kind: Value
    //PAR nat: unsigned int*, man: uint*, kind: Value
    wrp_this->getSolverIterationCounts(*wrp_minPositionIters, *wrp_minVelocityIters);
}

//DEBUG: MethodNode physx::PxRigidDynamic::getContactReportThreshold - 360
ES float float_const_physx_PxRigidDynamic_getContactReportThreshold(PxRigidDynamicPtr wrp_this){
    //RET nat: float, man: float, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    return (float) wrp_this->getContactReportThreshold();
}

//DEBUG: MethodNode physx::PxRigidDynamic::setContactReportThreshold - 371
ES void void_physx_PxRigidDynamic_setContactReportThreshold_float_(PxRigidDynamicPtr wrp_this, float wrp_threshold){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    //PAR nat: float, man: float, kind: Value
    wrp_this->setContactReportThreshold(wrp_threshold);
}

//DEBUG: MethodNode physx::PxRigidDynamic::getConcreteTypeName - 373
ES char* string_const_physx_PxRigidDynamic_getConcreteTypeName(PxRigidDynamicPtr wrp_this){
    //RET nat: char*, man: string, ret: True, kind: Value
    //PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
    return (char*) wrp_this->getConcreteTypeName();
}

//DEBUG: MethodNode physx::PxRigidDynamic::operator= - 83
//ERRORS OCCURED IN physx::PxRigidDynamic::operator=
//Implicit Function/Method
//Unbindable Operator: Equal

//DEBUG: DeclNode physx::PxRigidDynamicLockFlags - 63
// TODO DeclNode.GenWrapper()
