// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
ES void Freer_physx_PxDominanceGroupPairPtr(PxDominanceGroupPairPtr ptr){
    delete ptr;
}

ES PxDominanceGroupPairPtr Ctor_physx_PxDominanceGroupPairPtr_byte_byte(unsigned char wrp_a, unsigned char wrp_b){
    return (PxDominanceGroupPairPtr) new std::remove_pointer<PxDominanceGroupPairPtr>::type(wrp_a, wrp_b);
}

ES unsigned char PxDominanceGroupPair_GET_dominance0(PxDominanceGroupPairPtr cls) {return (unsigned char)cls->dominance0;}
ES void PxDominanceGroupPair_SET_dominance0(PxDominanceGroupPairPtr cls, unsigned char value) {cls->dominance0 = value;}

ES unsigned char PxDominanceGroupPair_GET_dominance1(PxDominanceGroupPairPtr cls) {return (unsigned char)cls->dominance1;}
ES void PxDominanceGroupPair_SET_dominance1(PxDominanceGroupPairPtr cls, unsigned char value) {cls->dominance1 = value;}

ES void Freer_physx_PxQueryCachePtr(PxQueryCachePtr ptr){
    delete ptr;
}

ES PxQueryCachePtr Ctor_physx_PxQueryCachePtr_(){
    return (PxQueryCachePtr) new std::remove_pointer<PxQueryCachePtr>::type();
}

ES PxQueryCachePtr Ctor_physx_PxQueryCachePtr_physx_PxShapePtr_uint(PxShapePtr wrp_s, unsigned int wrp_findex){
    return (PxQueryCachePtr) new std::remove_pointer<PxQueryCachePtr>::type(wrp_s, wrp_findex);
}

ES PxShapePtr PxQueryCache_GET_shape(PxQueryCachePtr cls) {return (PxShapePtr)cls->shape;}
ES void PxQueryCache_SET_shape(PxQueryCachePtr cls, PxShapePtr value) {cls->shape = value;}

ES PxRigidActorPtr PxQueryCache_GET_actor(PxQueryCachePtr cls) {return (PxRigidActorPtr)cls->actor;}
ES void PxQueryCache_SET_actor(PxQueryCachePtr cls, PxRigidActorPtr value) {cls->actor = value;}

ES unsigned int PxQueryCache_GET_faceIndex(PxQueryCachePtr cls) {return (unsigned int)cls->faceIndex;}
ES void PxQueryCache_SET_faceIndex(PxQueryCachePtr cls, unsigned int value) {cls->faceIndex = value;}

ES void* PxScene_GET_userData(PxScenePtr cls) {return (void*)cls->userData;}
ES void PxScene_SET_userData(PxScenePtr cls, void* value) {cls->userData = value;}

ES void void_physx_PxScene_release(PxScenePtr wrp_this){
    wrp_this->release();
}

ES void void_physx_PxScene_setFlag_physx_PxSceneFlagEnum_bool_(PxScenePtr wrp_this, physx::PxSceneFlag::Enum wrp_flag, bool wrp_value){
    wrp_this->setFlag(wrp_flag, wrp_value);
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_const_physx_PxScene_getFlags(PxScenePtr wrp_this){
    auto ret = wrp_this->getFlags();
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES void void_physx_PxScene_setLimits_physx_PxSceneLimitsPtr_(PxScenePtr wrp_this, PxSceneLimitsPtr wrp_limits){
    wrp_this->setLimits(*wrp_limits);
}

ES PxSceneLimitsPtr physx_PxSceneLimitsPtr_const_physx_PxScene_getLimits(PxScenePtr wrp_this){
    auto ret = wrp_this->getLimits();
    auto heap = new char[sizeof PxSceneLimits];
    std::memcpy(heap, &ret, sizeof PxSceneLimits);
    return (PxSceneLimitsPtr) heap;
}

ES PxPhysicsPtr physx_PxPhysicsPtr_physx_PxScene_getPhysics(PxScenePtr wrp_this){
    return (PxPhysicsPtr) &wrp_this->getPhysics();
}

ES unsigned int uint_const_physx_PxScene_getTimestamp(PxScenePtr wrp_this){
    return (unsigned int) wrp_this->getTimestamp();
}

ES void void_physx_PxScene_addArticulation_physx_PxArticulationBasePtr_(PxScenePtr wrp_this, PxArticulationBasePtr wrp_articulation){
    wrp_this->addArticulation(*wrp_articulation);
}

ES void void_physx_PxScene_removeArticulation_physx_PxArticulationBasePtr_bool_(PxScenePtr wrp_this, PxArticulationBasePtr wrp_articulation, bool wrp_wakeOnLostTouch){
    wrp_this->removeArticulation(*wrp_articulation, wrp_wakeOnLostTouch);
}

ES void void_physx_PxScene_removeArticulation_physx_PxArticulationBasePtr_(PxScenePtr wrp_this, PxArticulationBasePtr wrp_articulation){
    wrp_this->removeArticulation(*wrp_articulation);
}

ES void void_physx_PxScene_addActor_physx_PxActorPtr_(PxScenePtr wrp_this, PxActorPtr wrp_actor){
    wrp_this->addActor(*wrp_actor);
}

ES void void_physx_PxScene_addActors_physx_PxActorPtr_uint_(PxScenePtr wrp_this, PxActorPtr* wrp_actors, unsigned int wrp_nbActors){
    wrp_this->addActors(wrp_actors, wrp_nbActors);
}

ES void void_physx_PxScene_removeActor_physx_PxActorPtr_bool_(PxScenePtr wrp_this, PxActorPtr wrp_actor, bool wrp_wakeOnLostTouch){
    wrp_this->removeActor(*wrp_actor, wrp_wakeOnLostTouch);
}

ES void void_physx_PxScene_removeActor_physx_PxActorPtr_(PxScenePtr wrp_this, PxActorPtr wrp_actor){
    wrp_this->removeActor(*wrp_actor);
}

ES void void_physx_PxScene_removeActors_physx_PxActorPtr_uint_bool_(PxScenePtr wrp_this, PxActorPtr* wrp_actors, unsigned int wrp_nbActors, bool wrp_wakeOnLostTouch){
    wrp_this->removeActors(wrp_actors, wrp_nbActors, wrp_wakeOnLostTouch);
}

ES void void_physx_PxScene_removeActors_physx_PxActorPtr_uint_(PxScenePtr wrp_this, PxActorPtr* wrp_actors, unsigned int wrp_nbActors){
    wrp_this->removeActors(wrp_actors, wrp_nbActors);
}

ES void void_physx_PxScene_addAggregate_physx_PxAggregatePtr_(PxScenePtr wrp_this, PxAggregatePtr wrp_aggregate){
    wrp_this->addAggregate(*wrp_aggregate);
}

ES void void_physx_PxScene_removeAggregate_physx_PxAggregatePtr_bool_(PxScenePtr wrp_this, PxAggregatePtr wrp_aggregate, bool wrp_wakeOnLostTouch){
    wrp_this->removeAggregate(*wrp_aggregate, wrp_wakeOnLostTouch);
}

ES void void_physx_PxScene_removeAggregate_physx_PxAggregatePtr_(PxScenePtr wrp_this, PxAggregatePtr wrp_aggregate){
    wrp_this->removeAggregate(*wrp_aggregate);
}

ES void void_physx_PxScene_addCollection_physx_PxCollectionPtr_(PxScenePtr wrp_this, PxCollectionPtr wrp_collection){
    wrp_this->addCollection(*wrp_collection);
}

ES unsigned int uint_const_physx_PxScene_getNbActors_PxActorTypeFlagsPtr_(PxScenePtr wrp_this, PxActorTypeFlagsPtr wrp_types){
    return (unsigned int) wrp_this->getNbActors(*wrp_types);
}

ES unsigned int uint_const_physx_PxScene_getActors_PxActorTypeFlagsPtr_physx_PxActorPtr_uint_uint_(PxScenePtr wrp_this, PxActorTypeFlagsPtr wrp_types, PxActorPtr* wrp_userBuffer, unsigned int wrp_bufferSize, unsigned int wrp_startIndex){
    return (unsigned int) wrp_this->getActors(*wrp_types, wrp_userBuffer, wrp_bufferSize, wrp_startIndex);
}

ES unsigned int uint_const_physx_PxScene_getActors_PxActorTypeFlagsPtr_physx_PxActorPtr_uint_(PxScenePtr wrp_this, PxActorTypeFlagsPtr wrp_types, PxActorPtr* wrp_userBuffer, unsigned int wrp_bufferSize){
    return (unsigned int) wrp_this->getActors(*wrp_types, wrp_userBuffer, wrp_bufferSize);
}

ES PxActorPtr* physx_PxActorPtr_physx_PxScene_getActiveActors_uint_(PxScenePtr wrp_this, unsigned int* wrp_nbActorsOut){
    return (PxActorPtr*) wrp_this->getActiveActors(*wrp_nbActorsOut);
}

ES unsigned int uint_const_physx_PxScene_getNbArticulations(PxScenePtr wrp_this){
    return (unsigned int) wrp_this->getNbArticulations();
}

ES unsigned int uint_const_physx_PxScene_getArticulations_physx_PxArticulationBasePtr_uint_uint_(PxScenePtr wrp_this, PxArticulationBasePtr* wrp_userBuffer, unsigned int wrp_bufferSize, unsigned int wrp_startIndex){
    return (unsigned int) wrp_this->getArticulations(wrp_userBuffer, wrp_bufferSize, wrp_startIndex);
}

ES unsigned int uint_const_physx_PxScene_getArticulations_physx_PxArticulationBasePtr_uint_(PxScenePtr wrp_this, PxArticulationBasePtr* wrp_userBuffer, unsigned int wrp_bufferSize){
    return (unsigned int) wrp_this->getArticulations(wrp_userBuffer, wrp_bufferSize);
}

ES unsigned int uint_const_physx_PxScene_getNbConstraints(PxScenePtr wrp_this){
    return (unsigned int) wrp_this->getNbConstraints();
}

ES unsigned int uint_const_physx_PxScene_getConstraints_physx_PxConstraintPtr_uint_uint_(PxScenePtr wrp_this, PxConstraintPtr* wrp_userBuffer, unsigned int wrp_bufferSize, unsigned int wrp_startIndex){
    return (unsigned int) wrp_this->getConstraints(wrp_userBuffer, wrp_bufferSize, wrp_startIndex);
}

ES unsigned int uint_const_physx_PxScene_getConstraints_physx_PxConstraintPtr_uint_(PxScenePtr wrp_this, PxConstraintPtr* wrp_userBuffer, unsigned int wrp_bufferSize){
    return (unsigned int) wrp_this->getConstraints(wrp_userBuffer, wrp_bufferSize);
}

ES unsigned int uint_const_physx_PxScene_getNbAggregates(PxScenePtr wrp_this){
    return (unsigned int) wrp_this->getNbAggregates();
}

ES unsigned int uint_const_physx_PxScene_getAggregates_physx_PxAggregatePtr_uint_uint_(PxScenePtr wrp_this, PxAggregatePtr* wrp_userBuffer, unsigned int wrp_bufferSize, unsigned int wrp_startIndex){
    return (unsigned int) wrp_this->getAggregates(wrp_userBuffer, wrp_bufferSize, wrp_startIndex);
}

ES unsigned int uint_const_physx_PxScene_getAggregates_physx_PxAggregatePtr_uint_(PxScenePtr wrp_this, PxAggregatePtr* wrp_userBuffer, unsigned int wrp_bufferSize){
    return (unsigned int) wrp_this->getAggregates(wrp_userBuffer, wrp_bufferSize);
}

ES void void_physx_PxScene_setDominanceGroupPair_byte_byte_physx_PxDominanceGroupPairPtr_(PxScenePtr wrp_this, unsigned char wrp_group1, unsigned char wrp_group2, PxDominanceGroupPairPtr wrp_dominance){
    wrp_this->setDominanceGroupPair(wrp_group1, wrp_group2, *wrp_dominance);
}

ES PxDominanceGroupPairPtr physx_PxDominanceGroupPairPtr_const_physx_PxScene_getDominanceGroupPair_byte_byte_(PxScenePtr wrp_this, unsigned char wrp_group1, unsigned char wrp_group2){
    auto ret = wrp_this->getDominanceGroupPair(wrp_group1, wrp_group2);
    auto heap = new char[sizeof PxDominanceGroupPair];
    std::memcpy(heap, &ret, sizeof PxDominanceGroupPair);
    return (PxDominanceGroupPairPtr) heap;
}

ES PxCpuDispatcherPtr physx_PxCpuDispatcherPtr_const_physx_PxScene_getCpuDispatcher(PxScenePtr wrp_this){
    return (PxCpuDispatcherPtr) wrp_this->getCpuDispatcher();
}

ES PxGpuDispatcherPtr physx_PxGpuDispatcherPtr_const_physx_PxScene_getGpuDispatcher(PxScenePtr wrp_this){
    return (PxGpuDispatcherPtr) wrp_this->getGpuDispatcher();
}

ES unsigned char byte_physx_PxScene_createClient(PxScenePtr wrp_this){
    return (unsigned char) wrp_this->createClient();
}

ES void void_physx_PxScene_setBroadPhaseCallback_physx_PxBroadPhaseCallbackPtr_(PxScenePtr wrp_this, PxBroadPhaseCallbackPtr wrp_callback){
    wrp_this->setBroadPhaseCallback(wrp_callback);
}

ES PxBroadPhaseCallbackPtr physx_PxBroadPhaseCallbackPtr_const_physx_PxScene_getBroadPhaseCallback(PxScenePtr wrp_this){
    return (PxBroadPhaseCallbackPtr) wrp_this->getBroadPhaseCallback();
}

ES void void_physx_PxScene_setFilterShaderData_IntPtr_uint_(PxScenePtr wrp_this, void* wrp_data, unsigned int wrp_dataSize){
    wrp_this->setFilterShaderData(wrp_data, wrp_dataSize);
}

ES void* IntPtr_const_physx_PxScene_getFilterShaderData(PxScenePtr wrp_this){
    return (void*) wrp_this->getFilterShaderData();
}

ES unsigned int uint_const_physx_PxScene_getFilterShaderDataSize(PxScenePtr wrp_this){
    return (unsigned int) wrp_this->getFilterShaderDataSize();
}

ES PxSimulationFilterShader PxSimulationFilterShader_const_physx_PxScene_getFilterShader(PxScenePtr wrp_this){
    return (PxSimulationFilterShader) wrp_this->getFilterShader();
}

ES PxSimulationFilterCallbackPtr physx_PxSimulationFilterCallbackPtr_const_physx_PxScene_getFilterCallback(PxScenePtr wrp_this){
    return (PxSimulationFilterCallbackPtr) wrp_this->getFilterCallback();
}

ES void void_physx_PxScene_resetFiltering_physx_PxActorPtr_(PxScenePtr wrp_this, PxActorPtr wrp_actor){
    wrp_this->resetFiltering(*wrp_actor);
}

ES void void_physx_PxScene_resetFiltering_physx_PxRigidActorPtr_physx_PxShapePtr_uint_(PxScenePtr wrp_this, PxRigidActorPtr wrp_actor, PxShapePtr* wrp_shapes, unsigned int wrp_shapeCount){
    wrp_this->resetFiltering(*wrp_actor, wrp_shapes, wrp_shapeCount);
}

ES void void_physx_PxScene_simulate_float_physx_PxBaseTaskPtr_IntPtr_uint_bool_(PxScenePtr wrp_this, float wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask, void* wrp_scratchMemBlock, unsigned int wrp_scratchMemBlockSize, bool wrp_controlSimulation){
    wrp_this->simulate(wrp_elapsedTime, wrp_completionTask, wrp_scratchMemBlock, wrp_scratchMemBlockSize, wrp_controlSimulation);
}

ES void void_physx_PxScene_simulate_float_physx_PxBaseTaskPtr_IntPtr_uint_(PxScenePtr wrp_this, float wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask, void* wrp_scratchMemBlock, unsigned int wrp_scratchMemBlockSize){
    wrp_this->simulate(wrp_elapsedTime, wrp_completionTask, wrp_scratchMemBlock, wrp_scratchMemBlockSize);
}

ES void void_physx_PxScene_simulate_float_physx_PxBaseTaskPtr_IntPtr_(PxScenePtr wrp_this, float wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask, void* wrp_scratchMemBlock){
    wrp_this->simulate(wrp_elapsedTime, wrp_completionTask, wrp_scratchMemBlock);
}

ES void void_physx_PxScene_simulate_float_physx_PxBaseTaskPtr_(PxScenePtr wrp_this, float wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask){
    wrp_this->simulate(wrp_elapsedTime, wrp_completionTask);
}

ES void void_physx_PxScene_simulate_float_(PxScenePtr wrp_this, float wrp_elapsedTime){
    wrp_this->simulate(wrp_elapsedTime);
}

ES void void_physx_PxScene_advance_physx_PxBaseTaskPtr_(PxScenePtr wrp_this, PxBaseTaskPtr wrp_completionTask){
    wrp_this->advance(wrp_completionTask);
}

ES void void_physx_PxScene_advance(PxScenePtr wrp_this){
    wrp_this->advance();
}

ES void void_physx_PxScene_collide_float_physx_PxBaseTaskPtr_IntPtr_uint_bool_(PxScenePtr wrp_this, float wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask, void* wrp_scratchMemBlock, unsigned int wrp_scratchMemBlockSize, bool wrp_controlSimulation){
    wrp_this->collide(wrp_elapsedTime, wrp_completionTask, wrp_scratchMemBlock, wrp_scratchMemBlockSize, wrp_controlSimulation);
}

ES void void_physx_PxScene_collide_float_physx_PxBaseTaskPtr_IntPtr_uint_(PxScenePtr wrp_this, float wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask, void* wrp_scratchMemBlock, unsigned int wrp_scratchMemBlockSize){
    wrp_this->collide(wrp_elapsedTime, wrp_completionTask, wrp_scratchMemBlock, wrp_scratchMemBlockSize);
}

ES void void_physx_PxScene_collide_float_physx_PxBaseTaskPtr_IntPtr_(PxScenePtr wrp_this, float wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask, void* wrp_scratchMemBlock){
    wrp_this->collide(wrp_elapsedTime, wrp_completionTask, wrp_scratchMemBlock);
}

ES void void_physx_PxScene_collide_float_physx_PxBaseTaskPtr_(PxScenePtr wrp_this, float wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask){
    wrp_this->collide(wrp_elapsedTime, wrp_completionTask);
}

ES void void_physx_PxScene_collide_float_(PxScenePtr wrp_this, float wrp_elapsedTime){
    wrp_this->collide(wrp_elapsedTime);
}

ES bool bool_physx_PxScene_checkResults_bool_(PxScenePtr wrp_this, bool wrp_block){
    return (bool) wrp_this->checkResults(wrp_block);
}

ES bool bool_physx_PxScene_checkResults(PxScenePtr wrp_this){
    return (bool) wrp_this->checkResults();
}

ES bool bool_physx_PxScene_fetchCollision_bool_(PxScenePtr wrp_this, bool wrp_block){
    return (bool) wrp_this->fetchCollision(wrp_block);
}

ES bool bool_physx_PxScene_fetchCollision(PxScenePtr wrp_this){
    return (bool) wrp_this->fetchCollision();
}

ES bool bool_physx_PxScene_fetchResults_bool_uint_(PxScenePtr wrp_this, bool wrp_block, unsigned int* wrp_errorState){
    return (bool) wrp_this->fetchResults(wrp_block, wrp_errorState);
}

ES bool bool_physx_PxScene_fetchResults_bool_(PxScenePtr wrp_this, bool wrp_block){
    return (bool) wrp_this->fetchResults(wrp_block);
}

ES bool bool_physx_PxScene_fetchResults(PxScenePtr wrp_this){
    return (bool) wrp_this->fetchResults();
}

ES void void_physx_PxScene_processCallbacks_physx_PxBaseTaskPtr_(PxScenePtr wrp_this, PxBaseTaskPtr wrp_continuation){
    wrp_this->processCallbacks(wrp_continuation);
}

ES void void_physx_PxScene_fetchResultsFinish_uint_(PxScenePtr wrp_this, unsigned int* wrp_errorState){
    wrp_this->fetchResultsFinish(wrp_errorState);
}

ES void void_physx_PxScene_fetchResultsFinish(PxScenePtr wrp_this){
    wrp_this->fetchResultsFinish();
}

ES void void_physx_PxScene_flushSimulation_bool_(PxScenePtr wrp_this, bool wrp_sendPendingReports){
    wrp_this->flushSimulation(wrp_sendPendingReports);
}

ES void void_physx_PxScene_flushSimulation(PxScenePtr wrp_this){
    wrp_this->flushSimulation();
}

ES void void_physx_PxScene_setGravity_physx_PxVec3Ptr_(PxScenePtr wrp_this, PxVec3Ptr wrp_vec){
    wrp_this->setGravity(*wrp_vec);
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxScene_getGravity(PxScenePtr wrp_this){
    auto ret = wrp_this->getGravity();
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES void void_physx_PxScene_setBounceThresholdVelocity_floatC(PxScenePtr wrp_this, float wrp_t){
    wrp_this->setBounceThresholdVelocity(wrp_t);
}

ES float float_const_physx_PxScene_getBounceThresholdVelocity(PxScenePtr wrp_this){
    return (float) wrp_this->getBounceThresholdVelocity();
}

ES void void_physx_PxScene_setCCDMaxPasses_uint_(PxScenePtr wrp_this, unsigned int wrp_ccdMaxPasses){
    wrp_this->setCCDMaxPasses(wrp_ccdMaxPasses);
}

ES unsigned int uint_const_physx_PxScene_getCCDMaxPasses(PxScenePtr wrp_this){
    return (unsigned int) wrp_this->getCCDMaxPasses();
}

ES float float_const_physx_PxScene_getFrictionOffsetThreshold(PxScenePtr wrp_this){
    return (float) wrp_this->getFrictionOffsetThreshold();
}

ES void void_physx_PxScene_setFrictionType_physx_PxFrictionTypeEnum_(PxScenePtr wrp_this, physx::PxFrictionType::Enum wrp_frictionType){
    wrp_this->setFrictionType(wrp_frictionType);
}

ES physx::PxFrictionType::Enum physx_PxFrictionTypeEnum_const_physx_PxScene_getFrictionType(PxScenePtr wrp_this){
    return (physx::PxFrictionType::Enum) wrp_this->getFrictionType();
}

ES bool bool_physx_PxScene_setVisualizationParameter_physx_PxVisualizationParameterEnum_float_(PxScenePtr wrp_this, physx::PxVisualizationParameter::Enum wrp_param, float wrp_value){
    return (bool) wrp_this->setVisualizationParameter(wrp_param, wrp_value);
}

ES float float_const_physx_PxScene_getVisualizationParameter_physx_PxVisualizationParameterEnum_(PxScenePtr wrp_this, physx::PxVisualizationParameter::Enum wrp_paramEnum){
    return (float) wrp_this->getVisualizationParameter(wrp_paramEnum);
}

ES void void_physx_PxScene_setVisualizationCullingBox_physx_PxBounds3Ptr_(PxScenePtr wrp_this, PxBounds3Ptr wrp_box){
    wrp_this->setVisualizationCullingBox(*wrp_box);
}

ES PxBounds3Ptr physx_PxBounds3Ptr_const_physx_PxScene_getVisualizationCullingBox(PxScenePtr wrp_this){
    auto ret = wrp_this->getVisualizationCullingBox();
    auto heap = new char[sizeof PxBounds3];
    std::memcpy(heap, &ret, sizeof PxBounds3);
    return (PxBounds3Ptr) heap;
}

ES void void_const_physx_PxScene_getSimulationStatistics_physx_PxSimulationStatisticsPtr_(PxScenePtr wrp_this, PxSimulationStatisticsPtr wrp_stats){
    wrp_this->getSimulationStatistics(*wrp_stats);
}

ES physx::PxPruningStructureType::Enum physx_PxPruningStructureTypeEnum_const_physx_PxScene_getStaticStructure(PxScenePtr wrp_this){
    return (physx::PxPruningStructureType::Enum) wrp_this->getStaticStructure();
}

ES physx::PxPruningStructureType::Enum physx_PxPruningStructureTypeEnum_const_physx_PxScene_getDynamicStructure(PxScenePtr wrp_this){
    return (physx::PxPruningStructureType::Enum) wrp_this->getDynamicStructure();
}

ES void void_physx_PxScene_flushQueryUpdates(PxScenePtr wrp_this){
    wrp_this->flushQueryUpdates();
}

ES void void_physx_PxScene_setDynamicTreeRebuildRateHint_uint_(PxScenePtr wrp_this, unsigned int wrp_dynamicTreeRebuildRateHint){
    wrp_this->setDynamicTreeRebuildRateHint(wrp_dynamicTreeRebuildRateHint);
}

ES unsigned int uint_const_physx_PxScene_getDynamicTreeRebuildRateHint(PxScenePtr wrp_this){
    return (unsigned int) wrp_this->getDynamicTreeRebuildRateHint();
}

ES void void_physx_PxScene_forceDynamicTreeRebuild_bool_bool_(PxScenePtr wrp_this, bool wrp_rebuildStaticStructure, bool wrp_rebuildDynamicStructure){
    wrp_this->forceDynamicTreeRebuild(wrp_rebuildStaticStructure, wrp_rebuildDynamicStructure);
}

ES void void_physx_PxScene_setSceneQueryUpdateMode_physx_PxSceneQueryUpdateModeEnum_(PxScenePtr wrp_this, physx::PxSceneQueryUpdateMode::Enum wrp_updateMode){
    wrp_this->setSceneQueryUpdateMode(wrp_updateMode);
}

ES physx::PxSceneQueryUpdateMode::Enum physx_PxSceneQueryUpdateModeEnum_const_physx_PxScene_getSceneQueryUpdateMode(PxScenePtr wrp_this){
    return (physx::PxSceneQueryUpdateMode::Enum) wrp_this->getSceneQueryUpdateMode();
}

ES void void_physx_PxScene_sceneQueriesUpdate_physx_PxBaseTaskPtr_bool_(PxScenePtr wrp_this, PxBaseTaskPtr wrp_completionTask, bool wrp_controlSimulation){
    wrp_this->sceneQueriesUpdate(wrp_completionTask, wrp_controlSimulation);
}

ES void void_physx_PxScene_sceneQueriesUpdate_physx_PxBaseTaskPtr_(PxScenePtr wrp_this, PxBaseTaskPtr wrp_completionTask){
    wrp_this->sceneQueriesUpdate(wrp_completionTask);
}

ES void void_physx_PxScene_sceneQueriesUpdate(PxScenePtr wrp_this){
    wrp_this->sceneQueriesUpdate();
}

ES bool bool_physx_PxScene_checkQueries_bool_(PxScenePtr wrp_this, bool wrp_block){
    return (bool) wrp_this->checkQueries(wrp_block);
}

ES bool bool_physx_PxScene_checkQueries(PxScenePtr wrp_this){
    return (bool) wrp_this->checkQueries();
}

ES bool bool_physx_PxScene_fetchQueries_bool_(PxScenePtr wrp_this, bool wrp_block){
    return (bool) wrp_this->fetchQueries(wrp_block);
}

ES bool bool_physx_PxScene_fetchQueries(PxScenePtr wrp_this){
    return (bool) wrp_this->fetchQueries();
}

ES bool bool_const_physx_PxScene_raycast_physx_PxVec3Ptr_physx_PxVec3Ptr_float_PxRaycastCallbackPtr_PxHitFlagsPtr_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_C_(PxScenePtr wrp_this, PxVec3Ptr wrp_origin, PxVec3Ptr wrp_unitDir, float wrp_distance, PxRaycastCallbackPtr wrp_hitCall, PxHitFlagsPtr wrp_hitFlags, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache){
    return (bool) wrp_this->raycast(*wrp_origin, *wrp_unitDir, wrp_distance, *wrp_hitCall, *wrp_hitFlags, *wrp_filterData, wrp_filterCall, wrp_cache);
}

ES bool bool_const_physx_PxScene_raycast_physx_PxVec3Ptr_physx_PxVec3Ptr_float_PxRaycastCallbackPtr_PxHitFlagsPtr_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_C_(PxScenePtr wrp_this, PxVec3Ptr wrp_origin, PxVec3Ptr wrp_unitDir, float wrp_distance, PxRaycastCallbackPtr wrp_hitCall, PxHitFlagsPtr wrp_hitFlags, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall){
    return (bool) wrp_this->raycast(*wrp_origin, *wrp_unitDir, wrp_distance, *wrp_hitCall, *wrp_hitFlags, *wrp_filterData, wrp_filterCall);
}

ES bool bool_const_physx_PxScene_raycast_physx_PxVec3Ptr_physx_PxVec3Ptr_float_PxRaycastCallbackPtr_PxHitFlagsPtr_physx_PxQueryFilterDataPtr_C_(PxScenePtr wrp_this, PxVec3Ptr wrp_origin, PxVec3Ptr wrp_unitDir, float wrp_distance, PxRaycastCallbackPtr wrp_hitCall, PxHitFlagsPtr wrp_hitFlags, PxQueryFilterDataPtr wrp_filterData){
    return (bool) wrp_this->raycast(*wrp_origin, *wrp_unitDir, wrp_distance, *wrp_hitCall, *wrp_hitFlags, *wrp_filterData);
}

ES bool bool_const_physx_PxScene_raycast_physx_PxVec3Ptr_physx_PxVec3Ptr_float_PxRaycastCallbackPtr_PxHitFlagsPtr_C_(PxScenePtr wrp_this, PxVec3Ptr wrp_origin, PxVec3Ptr wrp_unitDir, float wrp_distance, PxRaycastCallbackPtr wrp_hitCall, PxHitFlagsPtr wrp_hitFlags){
    return (bool) wrp_this->raycast(*wrp_origin, *wrp_unitDir, wrp_distance, *wrp_hitCall, *wrp_hitFlags);
}

ES bool bool_const_physx_PxScene_raycast_physx_PxVec3Ptr_physx_PxVec3Ptr_float_PxRaycastCallbackPtr_C_(PxScenePtr wrp_this, PxVec3Ptr wrp_origin, PxVec3Ptr wrp_unitDir, float wrp_distance, PxRaycastCallbackPtr wrp_hitCall){
    return (bool) wrp_this->raycast(*wrp_origin, *wrp_unitDir, wrp_distance, *wrp_hitCall);
}

ES bool bool_const_physx_PxScene_sweep_physx_PxGeometryPtr_physx_PxTransformPtr_physx_PxVec3Ptr_float_PxSweepCallbackPtr_PxHitFlagsPtr_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_float_C_C(PxScenePtr wrp_this, PxGeometryPtr wrp_geometry, PxTransformPtr wrp_pose, PxVec3Ptr wrp_unitDir, float wrp_distance, PxSweepCallbackPtr wrp_hitCall, PxHitFlagsPtr wrp_hitFlags, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache, float wrp_inflation){
    return (bool) wrp_this->sweep(*wrp_geometry, *wrp_pose, *wrp_unitDir, wrp_distance, *wrp_hitCall, *wrp_hitFlags, *wrp_filterData, wrp_filterCall, wrp_cache, wrp_inflation);
}

ES bool bool_const_physx_PxScene_sweep_physx_PxGeometryPtr_physx_PxTransformPtr_physx_PxVec3Ptr_float_PxSweepCallbackPtr_PxHitFlagsPtr_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_C_(PxScenePtr wrp_this, PxGeometryPtr wrp_geometry, PxTransformPtr wrp_pose, PxVec3Ptr wrp_unitDir, float wrp_distance, PxSweepCallbackPtr wrp_hitCall, PxHitFlagsPtr wrp_hitFlags, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache){
    return (bool) wrp_this->sweep(*wrp_geometry, *wrp_pose, *wrp_unitDir, wrp_distance, *wrp_hitCall, *wrp_hitFlags, *wrp_filterData, wrp_filterCall, wrp_cache);
}

ES bool bool_const_physx_PxScene_sweep_physx_PxGeometryPtr_physx_PxTransformPtr_physx_PxVec3Ptr_float_PxSweepCallbackPtr_PxHitFlagsPtr_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_C_(PxScenePtr wrp_this, PxGeometryPtr wrp_geometry, PxTransformPtr wrp_pose, PxVec3Ptr wrp_unitDir, float wrp_distance, PxSweepCallbackPtr wrp_hitCall, PxHitFlagsPtr wrp_hitFlags, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall){
    return (bool) wrp_this->sweep(*wrp_geometry, *wrp_pose, *wrp_unitDir, wrp_distance, *wrp_hitCall, *wrp_hitFlags, *wrp_filterData, wrp_filterCall);
}

ES bool bool_const_physx_PxScene_sweep_physx_PxGeometryPtr_physx_PxTransformPtr_physx_PxVec3Ptr_float_PxSweepCallbackPtr_PxHitFlagsPtr_physx_PxQueryFilterDataPtr_C_(PxScenePtr wrp_this, PxGeometryPtr wrp_geometry, PxTransformPtr wrp_pose, PxVec3Ptr wrp_unitDir, float wrp_distance, PxSweepCallbackPtr wrp_hitCall, PxHitFlagsPtr wrp_hitFlags, PxQueryFilterDataPtr wrp_filterData){
    return (bool) wrp_this->sweep(*wrp_geometry, *wrp_pose, *wrp_unitDir, wrp_distance, *wrp_hitCall, *wrp_hitFlags, *wrp_filterData);
}

ES bool bool_const_physx_PxScene_sweep_physx_PxGeometryPtr_physx_PxTransformPtr_physx_PxVec3Ptr_float_PxSweepCallbackPtr_PxHitFlagsPtr_C_(PxScenePtr wrp_this, PxGeometryPtr wrp_geometry, PxTransformPtr wrp_pose, PxVec3Ptr wrp_unitDir, float wrp_distance, PxSweepCallbackPtr wrp_hitCall, PxHitFlagsPtr wrp_hitFlags){
    return (bool) wrp_this->sweep(*wrp_geometry, *wrp_pose, *wrp_unitDir, wrp_distance, *wrp_hitCall, *wrp_hitFlags);
}

ES bool bool_const_physx_PxScene_sweep_physx_PxGeometryPtr_physx_PxTransformPtr_physx_PxVec3Ptr_float_PxSweepCallbackPtr_C_(PxScenePtr wrp_this, PxGeometryPtr wrp_geometry, PxTransformPtr wrp_pose, PxVec3Ptr wrp_unitDir, float wrp_distance, PxSweepCallbackPtr wrp_hitCall){
    return (bool) wrp_this->sweep(*wrp_geometry, *wrp_pose, *wrp_unitDir, wrp_distance, *wrp_hitCall);
}

ES bool bool_const_physx_PxScene_overlap_physx_PxGeometryPtr_physx_PxTransformPtr_PxOverlapCallbackPtr_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_(PxScenePtr wrp_this, PxGeometryPtr wrp_geometry, PxTransformPtr wrp_pose, PxOverlapCallbackPtr wrp_hitCall, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall){
    return (bool) wrp_this->overlap(*wrp_geometry, *wrp_pose, *wrp_hitCall, *wrp_filterData, wrp_filterCall);
}

ES bool bool_const_physx_PxScene_overlap_physx_PxGeometryPtr_physx_PxTransformPtr_PxOverlapCallbackPtr_physx_PxQueryFilterDataPtr_(PxScenePtr wrp_this, PxGeometryPtr wrp_geometry, PxTransformPtr wrp_pose, PxOverlapCallbackPtr wrp_hitCall, PxQueryFilterDataPtr wrp_filterData){
    return (bool) wrp_this->overlap(*wrp_geometry, *wrp_pose, *wrp_hitCall, *wrp_filterData);
}

ES bool bool_const_physx_PxScene_overlap_physx_PxGeometryPtr_physx_PxTransformPtr_PxOverlapCallbackPtr_(PxScenePtr wrp_this, PxGeometryPtr wrp_geometry, PxTransformPtr wrp_pose, PxOverlapCallbackPtr wrp_hitCall){
    return (bool) wrp_this->overlap(*wrp_geometry, *wrp_pose, *wrp_hitCall);
}

ES unsigned int uint_const_physx_PxScene_getSceneQueryStaticTimestamp(PxScenePtr wrp_this){
    return (unsigned int) wrp_this->getSceneQueryStaticTimestamp();
}

ES physx::PxBroadPhaseType::Enum physx_PxBroadPhaseTypeEnum_const_physx_PxScene_getBroadPhaseType(PxScenePtr wrp_this){
    return (physx::PxBroadPhaseType::Enum) wrp_this->getBroadPhaseType();
}

ES bool bool_const_physx_PxScene_getBroadPhaseCaps_physx_PxBroadPhaseCapsPtr_(PxScenePtr wrp_this, PxBroadPhaseCapsPtr wrp_caps){
    return (bool) wrp_this->getBroadPhaseCaps(*wrp_caps);
}

ES unsigned int uint_const_physx_PxScene_getNbBroadPhaseRegions(PxScenePtr wrp_this){
    return (unsigned int) wrp_this->getNbBroadPhaseRegions();
}

ES unsigned int uint_const_physx_PxScene_getBroadPhaseRegions_physx_PxBroadPhaseRegionInfoPtr_uint_uint_(PxScenePtr wrp_this, PxBroadPhaseRegionInfoPtr wrp_userBuffer, unsigned int wrp_bufferSize, unsigned int wrp_startIndex){
    return (unsigned int) wrp_this->getBroadPhaseRegions(wrp_userBuffer, wrp_bufferSize, wrp_startIndex);
}

ES unsigned int uint_const_physx_PxScene_getBroadPhaseRegions_physx_PxBroadPhaseRegionInfoPtr_uint_(PxScenePtr wrp_this, PxBroadPhaseRegionInfoPtr wrp_userBuffer, unsigned int wrp_bufferSize){
    return (unsigned int) wrp_this->getBroadPhaseRegions(wrp_userBuffer, wrp_bufferSize);
}

ES unsigned int uint_physx_PxScene_addBroadPhaseRegion_physx_PxBroadPhaseRegionPtr_bool_(PxScenePtr wrp_this, PxBroadPhaseRegionPtr wrp_region, bool wrp_populateRegion){
    return (unsigned int) wrp_this->addBroadPhaseRegion(*wrp_region, wrp_populateRegion);
}

ES unsigned int uint_physx_PxScene_addBroadPhaseRegion_physx_PxBroadPhaseRegionPtr_(PxScenePtr wrp_this, PxBroadPhaseRegionPtr wrp_region){
    return (unsigned int) wrp_this->addBroadPhaseRegion(*wrp_region);
}

ES bool bool_physx_PxScene_removeBroadPhaseRegion_uint_(PxScenePtr wrp_this, unsigned int wrp_handle){
    return (bool) wrp_this->removeBroadPhaseRegion(wrp_handle);
}

ES PxTaskManagerPtr physx_PxTaskManagerPtr_const_physx_PxScene_getTaskManager(PxScenePtr wrp_this){
    return (PxTaskManagerPtr) wrp_this->getTaskManager();
}

ES void void_physx_PxScene_lockRead_string_uint_(PxScenePtr wrp_this, char* wrp_file, unsigned int wrp_line){
    wrp_this->lockRead(wrp_file, wrp_line);
}

ES void void_physx_PxScene_lockRead_string_(PxScenePtr wrp_this, char* wrp_file){
    wrp_this->lockRead(wrp_file);
}

ES void void_physx_PxScene_lockRead(PxScenePtr wrp_this){
    wrp_this->lockRead();
}

ES void void_physx_PxScene_unlockRead(PxScenePtr wrp_this){
    wrp_this->unlockRead();
}

ES void void_physx_PxScene_lockWrite_string_uint_(PxScenePtr wrp_this, char* wrp_file, unsigned int wrp_line){
    wrp_this->lockWrite(wrp_file, wrp_line);
}

ES void void_physx_PxScene_lockWrite_string_(PxScenePtr wrp_this, char* wrp_file){
    wrp_this->lockWrite(wrp_file);
}

ES void void_physx_PxScene_lockWrite(PxScenePtr wrp_this){
    wrp_this->lockWrite();
}

ES void void_physx_PxScene_unlockWrite(PxScenePtr wrp_this){
    wrp_this->unlockWrite();
}

ES void void_physx_PxScene_setNbContactDataBlocks_uint_(PxScenePtr wrp_this, unsigned int wrp_numBlocks){
    wrp_this->setNbContactDataBlocks(wrp_numBlocks);
}

ES unsigned int uint_const_physx_PxScene_getNbContactDataBlocksUsed(PxScenePtr wrp_this){
    return (unsigned int) wrp_this->getNbContactDataBlocksUsed();
}

ES unsigned int uint_const_physx_PxScene_getMaxNbContactDataBlocksUsed(PxScenePtr wrp_this){
    return (unsigned int) wrp_this->getMaxNbContactDataBlocksUsed();
}

ES unsigned int uint_const_physx_PxScene_getContactReportStreamBufferSize(PxScenePtr wrp_this){
    return (unsigned int) wrp_this->getContactReportStreamBufferSize();
}

ES void void_physx_PxScene_setSolverBatchSize_uint_(PxScenePtr wrp_this, unsigned int wrp_solverBatchSize){
    wrp_this->setSolverBatchSize(wrp_solverBatchSize);
}

ES unsigned int uint_const_physx_PxScene_getSolverBatchSize(PxScenePtr wrp_this){
    return (unsigned int) wrp_this->getSolverBatchSize();
}

ES float float_const_physx_PxScene_getWakeCounterResetValue(PxScenePtr wrp_this){
    return (float) wrp_this->getWakeCounterResetValue();
}

ES void void_physx_PxScene_shiftOrigin_physx_PxVec3Ptr_(PxScenePtr wrp_this, PxVec3Ptr wrp_shift){
    wrp_this->shiftOrigin(*wrp_shift);
}
