// Generated by minBND 5.1.93.2 - Â© github.com/Alan-FGR

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_operator_Ptr_Pipe_PxActorTypeFlagEnum_PxActorTypeFlagEnum_(physx::PxActorTypeFlag::Enum wrp_a, physx::PxActorTypeFlag::Enum wrp_b){
    auto ret = ::physx::operator|(wrp_a, wrp_b);
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_operator_Ptr_Amp_PxActorTypeFlagEnum_PxActorTypeFlagEnum_(physx::PxActorTypeFlag::Enum wrp_a, physx::PxActorTypeFlag::Enum wrp_b){
    auto ret = ::physx::operator&(wrp_a, wrp_b);
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES PxActorTypeFlagsPtr PxActorTypeFlagsPtr_operator_Ptr_Tilde_PxActorTypeFlagEnum_(physx::PxActorTypeFlag::Enum wrp_a){
    auto ret = ::physx::operator~(wrp_a);
    auto heap = new char[sizeof PxActorTypeFlags];
    std::memcpy(heap, &ret, sizeof PxActorTypeFlags);
    return (PxActorTypeFlagsPtr) heap;
}

ES void Freer_physx_PxDominanceGroupPairPtr(PxDominanceGroupPairPtr ptr){
    delete ptr;
}

ES PxDominanceGroupPairPtr Ctor_PxDominanceGroupPairPtr_byte_byte(PxU8 wrp_a, PxU8 wrp_b){
    auto ret = *(new std::remove_pointer<PxDominanceGroupPairPtr>::type(wrp_a, wrp_b));
    auto heap = new char[sizeof PxDominanceGroupPair];
    std::memcpy(heap, &ret, sizeof PxDominanceGroupPair);
    return (PxDominanceGroupPairPtr) heap;
}

ES PxU8 PxDominanceGroupPairPtr_GET_dominance0(PxDominanceGroupPairPtr cls) {return (PxU8)cls->dominance0;}
ES void PxDominanceGroupPairPtr_SET_dominance0(PxDominanceGroupPairPtr cls, PxU8 value) {cls->dominance0 = value;}

ES PxU8 PxDominanceGroupPairPtr_GET_dominance1(PxDominanceGroupPairPtr cls) {return (PxU8)cls->dominance1;}
ES void PxDominanceGroupPairPtr_SET_dominance1(PxDominanceGroupPairPtr cls, PxU8 value) {cls->dominance1 = value;}

ES void Freer_physx_PxQueryCachePtr(PxQueryCachePtr ptr){
    delete ptr;
}

ES PxQueryCachePtr Ctor_PxQueryCachePtr_(){
    auto ret = *(new std::remove_pointer<PxQueryCachePtr>::type());
    auto heap = new char[sizeof PxQueryCache];
    std::memcpy(heap, &ret, sizeof PxQueryCache);
    return (PxQueryCachePtr) heap;
}

ES PxQueryCachePtr Ctor_PxQueryCachePtr_PxShapePtr_uint(PxShapePtr wrp_s, PxU32 wrp_findex){
    auto ret = *(new std::remove_pointer<PxQueryCachePtr>::type(wrp_s, wrp_findex));
    auto heap = new char[sizeof PxQueryCache];
    std::memcpy(heap, &ret, sizeof PxQueryCache);
    return (PxQueryCachePtr) heap;
}

ES PxShapePtr PxQueryCachePtr_GET_shape(PxQueryCachePtr cls) {return (PxShapePtr)cls->shape;}
ES void PxQueryCachePtr_SET_shape(PxQueryCachePtr cls, PxShapePtr value) {cls->shape = value;}

ES PxRigidActorPtr PxQueryCachePtr_GET_actor(PxQueryCachePtr cls) {return (PxRigidActorPtr)cls->actor;}
ES void PxQueryCachePtr_SET_actor(PxQueryCachePtr cls, PxRigidActorPtr value) {cls->actor = value;}

ES PxU32 PxQueryCachePtr_GET_faceIndex(PxQueryCachePtr cls) {return (PxU32)cls->faceIndex;}
ES void PxQueryCachePtr_SET_faceIndex(PxQueryCachePtr cls, PxU32 value) {cls->faceIndex = value;}

ES void* PxScenePtr_GET_userData(PxScenePtr cls) {return (void*)cls->userData;}
ES void PxScenePtr_SET_userData(PxScenePtr cls, void* value) {cls->userData = value;}

ES void void_PxScenePtr_releasePtr(PxScenePtr wrp_this){
    wrp_this->release();
}

ES void void_PxScenePtr_setFlagPtr_PxSceneFlagEnum_bool_(PxScenePtr wrp_this, physx::PxSceneFlag::Enum wrp_flag, bool wrp_value){
    wrp_this->setFlag(wrp_flag, wrp_value);
}

ES PxSceneFlagsPtr PxSceneFlagsPtr_const_PxScenePtr_getFlagsPtr(PxScenePtr wrp_this){
    auto ret = wrp_this->getFlags();
    auto heap = new char[sizeof PxSceneFlags];
    std::memcpy(heap, &ret, sizeof PxSceneFlags);
    return (PxSceneFlagsPtr) heap;
}

ES void void_PxScenePtr_setLimitsPtr_PxSceneLimitsPtr_(PxScenePtr wrp_this, PxSceneLimitsPtr wrp_limits){
    wrp_this->setLimits(*wrp_limits);
}

ES PxSceneLimitsPtr PxSceneLimitsPtr_const_PxScenePtr_getLimitsPtr(PxScenePtr wrp_this){
    auto ret = wrp_this->getLimits();
    auto heap = new char[sizeof PxSceneLimits];
    std::memcpy(heap, &ret, sizeof PxSceneLimits);
    return (PxSceneLimitsPtr) heap;
}

ES PxPhysicsPtr PxPhysicsPtr_PxScenePtr_getPhysicsPtr(PxScenePtr wrp_this){
    return (PxPhysicsPtr) &wrp_this->getPhysics();
}

ES PxU32 uint_const_PxScenePtr_getTimestampPtr(PxScenePtr wrp_this){
    return (PxU32) wrp_this->getTimestamp();
}

ES void void_PxScenePtr_addArticulationPtr_PxArticulationBasePtr_(PxScenePtr wrp_this, PxArticulationBasePtr wrp_articulation){
    wrp_this->addArticulation(*wrp_articulation);
}

ES void void_PxScenePtr_removeArticulationPtr_PxArticulationBasePtr_bool_(PxScenePtr wrp_this, PxArticulationBasePtr wrp_articulation, bool wrp_wakeOnLostTouch){
    wrp_this->removeArticulation(*wrp_articulation, wrp_wakeOnLostTouch);
}

ES void void_PxScenePtr_addActorsPtr_PxActorPtr_uint_(PxScenePtr wrp_this, PxActorPtr* wrp_actors, PxU32 wrp_nbActors){
    wrp_this->addActors(wrp_actors, wrp_nbActors);
}

ES void void_PxScenePtr_removeActorPtr_PxActorPtr_bool_(PxScenePtr wrp_this, PxActorPtr wrp_actor, bool wrp_wakeOnLostTouch){
    wrp_this->removeActor(*wrp_actor, wrp_wakeOnLostTouch);
}

ES void void_PxScenePtr_removeActorsPtr_PxActorPtr_uint_bool_(PxScenePtr wrp_this, PxActorPtr* wrp_actors, PxU32 wrp_nbActors, bool wrp_wakeOnLostTouch){
    wrp_this->removeActors(wrp_actors, wrp_nbActors, wrp_wakeOnLostTouch);
}

ES void void_PxScenePtr_addAggregatePtr_PxAggregatePtr_(PxScenePtr wrp_this, PxAggregatePtr wrp_aggregate){
    wrp_this->addAggregate(*wrp_aggregate);
}

ES void void_PxScenePtr_removeAggregatePtr_PxAggregatePtr_bool_(PxScenePtr wrp_this, PxAggregatePtr wrp_aggregate, bool wrp_wakeOnLostTouch){
    wrp_this->removeAggregate(*wrp_aggregate, wrp_wakeOnLostTouch);
}

ES void void_PxScenePtr_addCollectionPtr_PxCollectionPtr_(PxScenePtr wrp_this, PxCollectionPtr wrp_collection){
    wrp_this->addCollection(*wrp_collection);
}

ES PxU32 uint_const_PxScenePtr_getNbActorsPtr_PxActorTypeFlagsPtr_(PxScenePtr wrp_this, PxActorTypeFlagsPtr wrp_types){
    return (PxU32) wrp_this->getNbActors(*wrp_types);
}

ES PxU32 uint_const_PxScenePtr_getActorsPtr_PxActorTypeFlagsPtr_PxActorPtr_uint_uint_(PxScenePtr wrp_this, PxActorTypeFlagsPtr wrp_types, PxActorPtr* wrp_userBuffer, PxU32 wrp_bufferSize, PxU32 wrp_startIndex){
    return (PxU32) wrp_this->getActors(*wrp_types, wrp_userBuffer, wrp_bufferSize, wrp_startIndex);
}

ES PxActorPtr* PxActorPtr_PxScenePtr_getActiveActorsPtr_uint_(PxScenePtr wrp_this, PxU32* wrp_nbActorsOut){
    return (PxActorPtr*) wrp_this->getActiveActors(*wrp_nbActorsOut);
}

ES PxU32 uint_const_PxScenePtr_getNbArticulationsPtr(PxScenePtr wrp_this){
    return (PxU32) wrp_this->getNbArticulations();
}

ES PxU32 uint_const_PxScenePtr_getArticulationsPtr_PxArticulationBasePtr_uint_uint_(PxScenePtr wrp_this, PxArticulationBasePtr* wrp_userBuffer, PxU32 wrp_bufferSize, PxU32 wrp_startIndex){
    return (PxU32) wrp_this->getArticulations(wrp_userBuffer, wrp_bufferSize, wrp_startIndex);
}

ES PxU32 uint_const_PxScenePtr_getNbConstraintsPtr(PxScenePtr wrp_this){
    return (PxU32) wrp_this->getNbConstraints();
}

ES PxU32 uint_const_PxScenePtr_getConstraintsPtr_PxConstraintPtr_uint_uint_(PxScenePtr wrp_this, PxConstraintPtr* wrp_userBuffer, PxU32 wrp_bufferSize, PxU32 wrp_startIndex){
    return (PxU32) wrp_this->getConstraints(wrp_userBuffer, wrp_bufferSize, wrp_startIndex);
}

ES PxU32 uint_const_PxScenePtr_getNbAggregatesPtr(PxScenePtr wrp_this){
    return (PxU32) wrp_this->getNbAggregates();
}

ES PxU32 uint_const_PxScenePtr_getAggregatesPtr_PxAggregatePtr_uint_uint_(PxScenePtr wrp_this, PxAggregatePtr* wrp_userBuffer, PxU32 wrp_bufferSize, PxU32 wrp_startIndex){
    return (PxU32) wrp_this->getAggregates(wrp_userBuffer, wrp_bufferSize, wrp_startIndex);
}

ES void void_PxScenePtr_setDominanceGroupPairPtr_byte_byte_PxDominanceGroupPairPtr_(PxScenePtr wrp_this, PxDominanceGroup wrp_group1, PxDominanceGroup wrp_group2, PxDominanceGroupPairPtr wrp_dominance){
    wrp_this->setDominanceGroupPair(wrp_group1, wrp_group2, *wrp_dominance);
}

ES PxDominanceGroupPairPtr PxDominanceGroupPairPtr_const_PxScenePtr_getDominanceGroupPairPtr_byte_byte_(PxScenePtr wrp_this, PxDominanceGroup wrp_group1, PxDominanceGroup wrp_group2){
    auto ret = wrp_this->getDominanceGroupPair(wrp_group1, wrp_group2);
    auto heap = new char[sizeof PxDominanceGroupPair];
    std::memcpy(heap, &ret, sizeof PxDominanceGroupPair);
    return (PxDominanceGroupPairPtr) heap;
}

ES PxCpuDispatcherPtr PxCpuDispatcherPtr_const_PxScenePtr_getCpuDispatcherPtr(PxScenePtr wrp_this){
    return (PxCpuDispatcherPtr) wrp_this->getCpuDispatcher();
}

ES PxGpuDispatcherPtr PxGpuDispatcherPtr_const_PxScenePtr_getGpuDispatcherPtr(PxScenePtr wrp_this){
    return (PxGpuDispatcherPtr) wrp_this->getGpuDispatcher();
}

ES PxClientID byte_PxScenePtr_createClientPtr(PxScenePtr wrp_this){
    return (PxClientID) wrp_this->createClient();
}

ES void void_PxScenePtr_setBroadPhaseCallbackPtr_PxBroadPhaseCallbackPtr_(PxScenePtr wrp_this, PxBroadPhaseCallbackPtr wrp_callback){
    wrp_this->setBroadPhaseCallback(wrp_callback);
}

ES PxBroadPhaseCallbackPtr PxBroadPhaseCallbackPtr_const_PxScenePtr_getBroadPhaseCallbackPtr(PxScenePtr wrp_this){
    return (PxBroadPhaseCallbackPtr) wrp_this->getBroadPhaseCallback();
}

ES void void_PxScenePtr_setFilterShaderDataPtr_IntPtr_uint_(PxScenePtr wrp_this, void* wrp_data, PxU32 wrp_dataSize){
    wrp_this->setFilterShaderData(wrp_data, wrp_dataSize);
}

ES void* IntPtr_const_PxScenePtr_getFilterShaderDataPtr(PxScenePtr wrp_this){
    return (void*) wrp_this->getFilterShaderData();
}

ES PxU32 uint_const_PxScenePtr_getFilterShaderDataSizePtr(PxScenePtr wrp_this){
    return (PxU32) wrp_this->getFilterShaderDataSize();
}

ES PxSimulationFilterShader PxSimulationFilterShader_const_PxScenePtr_getFilterShaderPtr(PxScenePtr wrp_this){
    return (PxSimulationFilterShader) wrp_this->getFilterShader();
}

ES PxSimulationFilterCallbackPtr PxSimulationFilterCallbackPtr_const_PxScenePtr_getFilterCallbackPtr(PxScenePtr wrp_this){
    return (PxSimulationFilterCallbackPtr) wrp_this->getFilterCallback();
}

ES void void_PxScenePtr_resetFilteringPtr_PxActorPtr_(PxScenePtr wrp_this, PxActorPtr wrp_actor){
    wrp_this->resetFiltering(*wrp_actor);
}

ES void void_PxScenePtr_resetFilteringPtr_PxRigidActorPtr_PxShapePtr_uint_(PxScenePtr wrp_this, PxRigidActorPtr wrp_actor, PxShapePtr* wrp_shapes, PxU32 wrp_shapeCount){
    wrp_this->resetFiltering(*wrp_actor, wrp_shapes, wrp_shapeCount);
}

ES void void_PxScenePtr_simulatePtr_float_PxBaseTaskPtr_IntPtr_uint_bool_(PxScenePtr wrp_this, PxReal wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask, void* wrp_scratchMemBlock, PxU32 wrp_scratchMemBlockSize, bool wrp_controlSimulation){
    wrp_this->simulate(wrp_elapsedTime, wrp_completionTask, wrp_scratchMemBlock, wrp_scratchMemBlockSize, wrp_controlSimulation);
}

ES void void_PxScenePtr_advancePtr_PxBaseTaskPtr_(PxScenePtr wrp_this, PxBaseTaskPtr wrp_completionTask){
    wrp_this->advance(wrp_completionTask);
}

ES void void_PxScenePtr_collidePtr_float_PxBaseTaskPtr_IntPtr_uint_bool_(PxScenePtr wrp_this, PxReal wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask, void* wrp_scratchMemBlock, PxU32 wrp_scratchMemBlockSize, bool wrp_controlSimulation){
    wrp_this->collide(wrp_elapsedTime, wrp_completionTask, wrp_scratchMemBlock, wrp_scratchMemBlockSize, wrp_controlSimulation);
}

ES bool bool_PxScenePtr_checkResultsPtr_bool_(PxScenePtr wrp_this, bool wrp_block){
    return (bool) wrp_this->checkResults(wrp_block);
}

ES bool bool_PxScenePtr_fetchCollisionPtr_bool_(PxScenePtr wrp_this, bool wrp_block){
    return (bool) wrp_this->fetchCollision(wrp_block);
}

ES bool bool_PxScenePtr_fetchResultsPtr_bool_uint_(PxScenePtr wrp_this, bool wrp_block, PxU32* wrp_errorState){
    return (bool) wrp_this->fetchResults(wrp_block, wrp_errorState);
}

ES void void_PxScenePtr_processCallbacksPtr_PxBaseTaskPtr_(PxScenePtr wrp_this, PxBaseTaskPtr wrp_continuation){
    wrp_this->processCallbacks(wrp_continuation);
}

ES void void_PxScenePtr_fetchResultsFinishPtr_uint_(PxScenePtr wrp_this, PxU32* wrp_errorState){
    wrp_this->fetchResultsFinish(wrp_errorState);
}

ES void void_PxScenePtr_flushSimulationPtr_bool_(PxScenePtr wrp_this, bool wrp_sendPendingReports){
    wrp_this->flushSimulation(wrp_sendPendingReports);
}

ES void void_PxScenePtr_setGravityPtr_PxVec3_(PxScenePtr wrp_this, physx::PxVec3* wrp_vec){
    wrp_this->setGravity(*wrp_vec);
}

ES void PxVec3_const_PxScenePtr_getGravityPtr(physx::PxVec3* nRetRef, PxScenePtr wrp_this){
    *nRetRef = wrp_this->getGravity();
}

ES void void_PxScenePtr_setBounceThresholdVelocityPtr_floatC(PxScenePtr wrp_this, PxReal wrp_t){
    wrp_this->setBounceThresholdVelocity(wrp_t);
}

ES PxReal float_const_PxScenePtr_getBounceThresholdVelocityPtr(PxScenePtr wrp_this){
    return (PxReal) wrp_this->getBounceThresholdVelocity();
}

ES void void_PxScenePtr_setCCDMaxPassesPtr_uint_(PxScenePtr wrp_this, PxU32 wrp_ccdMaxPasses){
    wrp_this->setCCDMaxPasses(wrp_ccdMaxPasses);
}

ES PxU32 uint_const_PxScenePtr_getCCDMaxPassesPtr(PxScenePtr wrp_this){
    return (PxU32) wrp_this->getCCDMaxPasses();
}

ES PxReal float_const_PxScenePtr_getFrictionOffsetThresholdPtr(PxScenePtr wrp_this){
    return (PxReal) wrp_this->getFrictionOffsetThreshold();
}

ES void void_PxScenePtr_setFrictionTypePtr_PxFrictionTypeEnum_(PxScenePtr wrp_this, physx::PxFrictionType::Enum wrp_frictionType){
    wrp_this->setFrictionType(wrp_frictionType);
}

ES physx::PxFrictionType::Enum PxFrictionTypeEnum_const_PxScenePtr_getFrictionTypePtr(PxScenePtr wrp_this){
    return (physx::PxFrictionType::Enum) wrp_this->getFrictionType();
}

ES bool bool_PxScenePtr_setVisualizationParameterPtr_PxVisualizationParameterEnum_float_(PxScenePtr wrp_this, physx::PxVisualizationParameter::Enum wrp_param, PxReal wrp_value){
    return (bool) wrp_this->setVisualizationParameter(wrp_param, wrp_value);
}

ES PxReal float_const_PxScenePtr_getVisualizationParameterPtr_PxVisualizationParameterEnum_(PxScenePtr wrp_this, physx::PxVisualizationParameter::Enum wrp_paramEnum){
    return (PxReal) wrp_this->getVisualizationParameter(wrp_paramEnum);
}

ES void void_PxScenePtr_setVisualizationCullingBoxPtr_PxBounds3_(PxScenePtr wrp_this, physx::PxBounds3* wrp_box){
    wrp_this->setVisualizationCullingBox(*wrp_box);
}

ES void PxBounds3_const_PxScenePtr_getVisualizationCullingBoxPtr(physx::PxBounds3* nRetRef, PxScenePtr wrp_this){
    *nRetRef = wrp_this->getVisualizationCullingBox();
}

ES PxRenderBufferPtr PxRenderBufferPtr_PxScenePtr_getRenderBufferPtr(PxScenePtr wrp_this){
    return (PxRenderBufferPtr) &wrp_this->getRenderBuffer();
}

ES void void_const_PxScenePtr_getSimulationStatisticsPtr_PxSimulationStatisticsPtr_(PxScenePtr wrp_this, PxSimulationStatisticsPtr wrp_stats){
    wrp_this->getSimulationStatistics(*wrp_stats);
}

ES physx::PxPruningStructureType::Enum PxPruningStructureTypeEnum_const_PxScenePtr_getStaticStructurePtr(PxScenePtr wrp_this){
    return (physx::PxPruningStructureType::Enum) wrp_this->getStaticStructure();
}

ES physx::PxPruningStructureType::Enum PxPruningStructureTypeEnum_const_PxScenePtr_getDynamicStructurePtr(PxScenePtr wrp_this){
    return (physx::PxPruningStructureType::Enum) wrp_this->getDynamicStructure();
}

ES void void_PxScenePtr_flushQueryUpdatesPtr(PxScenePtr wrp_this){
    wrp_this->flushQueryUpdates();
}

ES void void_PxScenePtr_setDynamicTreeRebuildRateHintPtr_uint_(PxScenePtr wrp_this, PxU32 wrp_dynamicTreeRebuildRateHint){
    wrp_this->setDynamicTreeRebuildRateHint(wrp_dynamicTreeRebuildRateHint);
}

ES PxU32 uint_const_PxScenePtr_getDynamicTreeRebuildRateHintPtr(PxScenePtr wrp_this){
    return (PxU32) wrp_this->getDynamicTreeRebuildRateHint();
}

ES void void_PxScenePtr_forceDynamicTreeRebuildPtr_bool_bool_(PxScenePtr wrp_this, bool wrp_rebuildStaticStructure, bool wrp_rebuildDynamicStructure){
    wrp_this->forceDynamicTreeRebuild(wrp_rebuildStaticStructure, wrp_rebuildDynamicStructure);
}

ES void void_PxScenePtr_setSceneQueryUpdateModePtr_PxSceneQueryUpdateModeEnum_(PxScenePtr wrp_this, physx::PxSceneQueryUpdateMode::Enum wrp_updateMode){
    wrp_this->setSceneQueryUpdateMode(wrp_updateMode);
}

ES physx::PxSceneQueryUpdateMode::Enum PxSceneQueryUpdateModeEnum_const_PxScenePtr_getSceneQueryUpdateModePtr(PxScenePtr wrp_this){
    return (physx::PxSceneQueryUpdateMode::Enum) wrp_this->getSceneQueryUpdateMode();
}

ES void void_PxScenePtr_sceneQueriesUpdatePtr_PxBaseTaskPtr_bool_(PxScenePtr wrp_this, PxBaseTaskPtr wrp_completionTask, bool wrp_controlSimulation){
    wrp_this->sceneQueriesUpdate(wrp_completionTask, wrp_controlSimulation);
}

ES bool bool_PxScenePtr_checkQueriesPtr_bool_(PxScenePtr wrp_this, bool wrp_block){
    return (bool) wrp_this->checkQueries(wrp_block);
}

ES bool bool_PxScenePtr_fetchQueriesPtr_bool_(PxScenePtr wrp_this, bool wrp_block){
    return (bool) wrp_this->fetchQueries(wrp_block);
}

ES bool bool_const_PxScenePtr_raycastPtr_PxVec3_PxVec3_float_PxRaycastCallbackPtr_PxHitFlags_PxQueryFilterDataPtr_PxQueryFilterCallbackPtr_PxQueryCachePtr_C_(PxScenePtr wrp_this, physx::PxVec3* wrp_origin, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxRaycastCallbackPtr wrp_hitCall, char wrp_hitFlags[sizeof(PxHitFlags)], PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache){
    return (bool) wrp_this->raycast(*wrp_origin, *wrp_unitDir, wrp_distance, *wrp_hitCall, *(PxHitFlags*)&wrp_hitFlags, *wrp_filterData, wrp_filterCall, wrp_cache);
}

ES bool bool_const_PxScenePtr_sweepPtr_PxGeometry_PxTransform_PxVec3_float_PxSweepCallbackPtr_PxHitFlags_PxQueryFilterDataPtr_PxQueryFilterCallbackPtr_PxQueryCachePtr_float_C_C(PxScenePtr wrp_this, physx::PxGeometry* wrp_geometry, physx::PxTransform* wrp_pose, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxSweepCallbackPtr wrp_hitCall, char wrp_hitFlags[sizeof(PxHitFlags)], PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache, PxReal wrp_inflation){
    return (bool) wrp_this->sweep(*wrp_geometry, *wrp_pose, *wrp_unitDir, wrp_distance, *wrp_hitCall, *(PxHitFlags*)&wrp_hitFlags, *wrp_filterData, wrp_filterCall, wrp_cache, wrp_inflation);
}

ES bool bool_const_PxScenePtr_overlapPtr_PxGeometry_PxTransform_PxOverlapCallbackPtr_PxQueryFilterDataPtr_PxQueryFilterCallbackPtr_(PxScenePtr wrp_this, physx::PxGeometry* wrp_geometry, physx::PxTransform* wrp_pose, PxOverlapCallbackPtr wrp_hitCall, PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall){
    return (bool) wrp_this->overlap(*wrp_geometry, *wrp_pose, *wrp_hitCall, *wrp_filterData, wrp_filterCall);
}

ES PxU32 uint_const_PxScenePtr_getSceneQueryStaticTimestampPtr(PxScenePtr wrp_this){
    return (PxU32) wrp_this->getSceneQueryStaticTimestamp();
}

ES physx::PxBroadPhaseType::Enum PxBroadPhaseTypeEnum_const_PxScenePtr_getBroadPhaseTypePtr(PxScenePtr wrp_this){
    return (physx::PxBroadPhaseType::Enum) wrp_this->getBroadPhaseType();
}

ES bool bool_const_PxScenePtr_getBroadPhaseCapsPtr_PxBroadPhaseCapsPtr_(PxScenePtr wrp_this, PxBroadPhaseCapsPtr wrp_caps){
    return (bool) wrp_this->getBroadPhaseCaps(*wrp_caps);
}

ES PxU32 uint_const_PxScenePtr_getNbBroadPhaseRegionsPtr(PxScenePtr wrp_this){
    return (PxU32) wrp_this->getNbBroadPhaseRegions();
}

ES PxU32 uint_const_PxScenePtr_getBroadPhaseRegionsPtr_PxBroadPhaseRegionInfoPtr_uint_uint_(PxScenePtr wrp_this, PxBroadPhaseRegionInfoPtr wrp_userBuffer, PxU32 wrp_bufferSize, PxU32 wrp_startIndex){
    return (PxU32) wrp_this->getBroadPhaseRegions(wrp_userBuffer, wrp_bufferSize, wrp_startIndex);
}

ES PxU32 uint_PxScenePtr_addBroadPhaseRegionPtr_PxBroadPhaseRegionPtr_bool_(PxScenePtr wrp_this, PxBroadPhaseRegionPtr wrp_region, bool wrp_populateRegion){
    return (PxU32) wrp_this->addBroadPhaseRegion(*wrp_region, wrp_populateRegion);
}

ES bool bool_PxScenePtr_removeBroadPhaseRegionPtr_uint_(PxScenePtr wrp_this, PxU32 wrp_handle){
    return (bool) wrp_this->removeBroadPhaseRegion(wrp_handle);
}

ES PxTaskManagerPtr PxTaskManagerPtr_const_PxScenePtr_getTaskManagerPtr(PxScenePtr wrp_this){
    return (PxTaskManagerPtr) wrp_this->getTaskManager();
}

ES void void_PxScenePtr_lockReadPtr_string_uint_(PxScenePtr wrp_this, char* wrp_file, PxU32 wrp_line){
    wrp_this->lockRead(wrp_file, wrp_line);
}

ES void void_PxScenePtr_unlockReadPtr(PxScenePtr wrp_this){
    wrp_this->unlockRead();
}

ES void void_PxScenePtr_lockWritePtr_string_uint_(PxScenePtr wrp_this, char* wrp_file, PxU32 wrp_line){
    wrp_this->lockWrite(wrp_file, wrp_line);
}

ES void void_PxScenePtr_unlockWritePtr(PxScenePtr wrp_this){
    wrp_this->unlockWrite();
}

ES void void_PxScenePtr_setNbContactDataBlocksPtr_uint_(PxScenePtr wrp_this, PxU32 wrp_numBlocks){
    wrp_this->setNbContactDataBlocks(wrp_numBlocks);
}

ES PxU32 uint_const_PxScenePtr_getNbContactDataBlocksUsedPtr(PxScenePtr wrp_this){
    return (PxU32) wrp_this->getNbContactDataBlocksUsed();
}

ES PxU32 uint_const_PxScenePtr_getMaxNbContactDataBlocksUsedPtr(PxScenePtr wrp_this){
    return (PxU32) wrp_this->getMaxNbContactDataBlocksUsed();
}

ES PxU32 uint_const_PxScenePtr_getContactReportStreamBufferSizePtr(PxScenePtr wrp_this){
    return (PxU32) wrp_this->getContactReportStreamBufferSize();
}

ES void void_PxScenePtr_setSolverBatchSizePtr_uint_(PxScenePtr wrp_this, PxU32 wrp_solverBatchSize){
    wrp_this->setSolverBatchSize(wrp_solverBatchSize);
}

ES PxU32 uint_const_PxScenePtr_getSolverBatchSizePtr(PxScenePtr wrp_this){
    return (PxU32) wrp_this->getSolverBatchSize();
}

ES PxReal float_const_PxScenePtr_getWakeCounterResetValuePtr(PxScenePtr wrp_this){
    return (PxReal) wrp_this->getWakeCounterResetValue();
}

ES void void_PxScenePtr_shiftOriginPtr_PxVec3_(PxScenePtr wrp_this, physx::PxVec3* wrp_shift){
    wrp_this->shiftOrigin(*wrp_shift);
}

ES void void_PxScenePtr_removeArticulationPtr_PxArticulationBasePtr_(PxScenePtr wrp_this, PxArticulationBasePtr wrp_articulation){
    wrp_this->removeArticulation(*wrp_articulation);
}

ES void void_PxScenePtr_addActorPtr_PxActorPtr_(PxScenePtr wrp_this, PxActorPtr wrp_actor){
    wrp_this->addActor(*wrp_actor);
}

ES void void_PxScenePtr_removeActorPtr_PxActorPtr_(PxScenePtr wrp_this, PxActorPtr wrp_actor){
    wrp_this->removeActor(*wrp_actor);
}

ES void void_PxScenePtr_removeActorsPtr_PxActorPtr_uint_(PxScenePtr wrp_this, PxActorPtr* wrp_actors, PxU32 wrp_nbActors){
    wrp_this->removeActors(wrp_actors, wrp_nbActors);
}

ES void void_PxScenePtr_removeAggregatePtr_PxAggregatePtr_(PxScenePtr wrp_this, PxAggregatePtr wrp_aggregate){
    wrp_this->removeAggregate(*wrp_aggregate);
}

ES PxU32 uint_const_PxScenePtr_getActorsPtr_PxActorTypeFlagsPtr_PxActorPtr_uint_(PxScenePtr wrp_this, PxActorTypeFlagsPtr wrp_types, PxActorPtr* wrp_userBuffer, PxU32 wrp_bufferSize){
    return (PxU32) wrp_this->getActors(*wrp_types, wrp_userBuffer, wrp_bufferSize);
}

ES PxU32 uint_const_PxScenePtr_getArticulationsPtr_PxArticulationBasePtr_uint_(PxScenePtr wrp_this, PxArticulationBasePtr* wrp_userBuffer, PxU32 wrp_bufferSize){
    return (PxU32) wrp_this->getArticulations(wrp_userBuffer, wrp_bufferSize);
}

ES PxU32 uint_const_PxScenePtr_getConstraintsPtr_PxConstraintPtr_uint_(PxScenePtr wrp_this, PxConstraintPtr* wrp_userBuffer, PxU32 wrp_bufferSize){
    return (PxU32) wrp_this->getConstraints(wrp_userBuffer, wrp_bufferSize);
}

ES PxU32 uint_const_PxScenePtr_getAggregatesPtr_PxAggregatePtr_uint_(PxScenePtr wrp_this, PxAggregatePtr* wrp_userBuffer, PxU32 wrp_bufferSize){
    return (PxU32) wrp_this->getAggregates(wrp_userBuffer, wrp_bufferSize);
}

ES void void_PxScenePtr_simulatePtr_float_(PxScenePtr wrp_this, PxReal wrp_elapsedTime){
    wrp_this->simulate(wrp_elapsedTime);
}

ES void void_PxScenePtr_simulatePtr_float_PxBaseTaskPtr_(PxScenePtr wrp_this, PxReal wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask){
    wrp_this->simulate(wrp_elapsedTime, wrp_completionTask);
}

ES void void_PxScenePtr_simulatePtr_float_PxBaseTaskPtr_IntPtr_(PxScenePtr wrp_this, PxReal wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask, void* wrp_scratchMemBlock){
    wrp_this->simulate(wrp_elapsedTime, wrp_completionTask, wrp_scratchMemBlock);
}

ES void void_PxScenePtr_simulatePtr_float_PxBaseTaskPtr_IntPtr_uint_(PxScenePtr wrp_this, PxReal wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask, void* wrp_scratchMemBlock, PxU32 wrp_scratchMemBlockSize){
    wrp_this->simulate(wrp_elapsedTime, wrp_completionTask, wrp_scratchMemBlock, wrp_scratchMemBlockSize);
}

ES void void_PxScenePtr_advancePtr(PxScenePtr wrp_this){
    wrp_this->advance();
}

ES void void_PxScenePtr_collidePtr_float_(PxScenePtr wrp_this, PxReal wrp_elapsedTime){
    wrp_this->collide(wrp_elapsedTime);
}

ES void void_PxScenePtr_collidePtr_float_PxBaseTaskPtr_(PxScenePtr wrp_this, PxReal wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask){
    wrp_this->collide(wrp_elapsedTime, wrp_completionTask);
}

ES void void_PxScenePtr_collidePtr_float_PxBaseTaskPtr_IntPtr_(PxScenePtr wrp_this, PxReal wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask, void* wrp_scratchMemBlock){
    wrp_this->collide(wrp_elapsedTime, wrp_completionTask, wrp_scratchMemBlock);
}

ES void void_PxScenePtr_collidePtr_float_PxBaseTaskPtr_IntPtr_uint_(PxScenePtr wrp_this, PxReal wrp_elapsedTime, PxBaseTaskPtr wrp_completionTask, void* wrp_scratchMemBlock, PxU32 wrp_scratchMemBlockSize){
    wrp_this->collide(wrp_elapsedTime, wrp_completionTask, wrp_scratchMemBlock, wrp_scratchMemBlockSize);
}

ES bool bool_PxScenePtr_checkResultsPtr(PxScenePtr wrp_this){
    return (bool) wrp_this->checkResults();
}

ES bool bool_PxScenePtr_fetchCollisionPtr(PxScenePtr wrp_this){
    return (bool) wrp_this->fetchCollision();
}

ES bool bool_PxScenePtr_fetchResultsPtr(PxScenePtr wrp_this){
    return (bool) wrp_this->fetchResults();
}

ES bool bool_PxScenePtr_fetchResultsPtr_bool_(PxScenePtr wrp_this, bool wrp_block){
    return (bool) wrp_this->fetchResults(wrp_block);
}

ES void void_PxScenePtr_fetchResultsFinishPtr(PxScenePtr wrp_this){
    wrp_this->fetchResultsFinish();
}

ES void void_PxScenePtr_flushSimulationPtr(PxScenePtr wrp_this){
    wrp_this->flushSimulation();
}

ES void void_PxScenePtr_sceneQueriesUpdatePtr(PxScenePtr wrp_this){
    wrp_this->sceneQueriesUpdate();
}

ES void void_PxScenePtr_sceneQueriesUpdatePtr_PxBaseTaskPtr_(PxScenePtr wrp_this, PxBaseTaskPtr wrp_completionTask){
    wrp_this->sceneQueriesUpdate(wrp_completionTask);
}

ES bool bool_PxScenePtr_checkQueriesPtr(PxScenePtr wrp_this){
    return (bool) wrp_this->checkQueries();
}

ES bool bool_PxScenePtr_fetchQueriesPtr(PxScenePtr wrp_this){
    return (bool) wrp_this->fetchQueries();
}

ES bool bool_const_PxScenePtr_raycastPtr_PxVec3_PxVec3_float_PxRaycastCallbackPtr_C_(PxScenePtr wrp_this, physx::PxVec3* wrp_origin, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxRaycastCallbackPtr wrp_hitCall){
    return (bool) wrp_this->raycast(*wrp_origin, *wrp_unitDir, wrp_distance, *wrp_hitCall);
}

ES bool bool_const_PxScenePtr_raycastPtr_PxVec3_PxVec3_float_PxRaycastCallbackPtr_PxHitFlags_C_(PxScenePtr wrp_this, physx::PxVec3* wrp_origin, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxRaycastCallbackPtr wrp_hitCall, char wrp_hitFlags[sizeof(PxHitFlags)]){
    return (bool) wrp_this->raycast(*wrp_origin, *wrp_unitDir, wrp_distance, *wrp_hitCall, *(PxHitFlags*)&wrp_hitFlags);
}

ES bool bool_const_PxScenePtr_raycastPtr_PxVec3_PxVec3_float_PxRaycastCallbackPtr_PxHitFlags_PxQueryFilterDataPtr_C_(PxScenePtr wrp_this, physx::PxVec3* wrp_origin, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxRaycastCallbackPtr wrp_hitCall, char wrp_hitFlags[sizeof(PxHitFlags)], PxQueryFilterDataPtr wrp_filterData){
    return (bool) wrp_this->raycast(*wrp_origin, *wrp_unitDir, wrp_distance, *wrp_hitCall, *(PxHitFlags*)&wrp_hitFlags, *wrp_filterData);
}

ES bool bool_const_PxScenePtr_raycastPtr_PxVec3_PxVec3_float_PxRaycastCallbackPtr_PxHitFlags_PxQueryFilterDataPtr_PxQueryFilterCallbackPtr_C_(PxScenePtr wrp_this, physx::PxVec3* wrp_origin, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxRaycastCallbackPtr wrp_hitCall, char wrp_hitFlags[sizeof(PxHitFlags)], PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall){
    return (bool) wrp_this->raycast(*wrp_origin, *wrp_unitDir, wrp_distance, *wrp_hitCall, *(PxHitFlags*)&wrp_hitFlags, *wrp_filterData, wrp_filterCall);
}

ES bool bool_const_PxScenePtr_sweepPtr_PxGeometry_PxTransform_PxVec3_float_PxSweepCallbackPtr_C_(PxScenePtr wrp_this, physx::PxGeometry* wrp_geometry, physx::PxTransform* wrp_pose, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxSweepCallbackPtr wrp_hitCall){
    return (bool) wrp_this->sweep(*wrp_geometry, *wrp_pose, *wrp_unitDir, wrp_distance, *wrp_hitCall);
}

ES bool bool_const_PxScenePtr_sweepPtr_PxGeometry_PxTransform_PxVec3_float_PxSweepCallbackPtr_PxHitFlags_C_(PxScenePtr wrp_this, physx::PxGeometry* wrp_geometry, physx::PxTransform* wrp_pose, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxSweepCallbackPtr wrp_hitCall, char wrp_hitFlags[sizeof(PxHitFlags)]){
    return (bool) wrp_this->sweep(*wrp_geometry, *wrp_pose, *wrp_unitDir, wrp_distance, *wrp_hitCall, *(PxHitFlags*)&wrp_hitFlags);
}

ES bool bool_const_PxScenePtr_sweepPtr_PxGeometry_PxTransform_PxVec3_float_PxSweepCallbackPtr_PxHitFlags_PxQueryFilterDataPtr_C_(PxScenePtr wrp_this, physx::PxGeometry* wrp_geometry, physx::PxTransform* wrp_pose, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxSweepCallbackPtr wrp_hitCall, char wrp_hitFlags[sizeof(PxHitFlags)], PxQueryFilterDataPtr wrp_filterData){
    return (bool) wrp_this->sweep(*wrp_geometry, *wrp_pose, *wrp_unitDir, wrp_distance, *wrp_hitCall, *(PxHitFlags*)&wrp_hitFlags, *wrp_filterData);
}

ES bool bool_const_PxScenePtr_sweepPtr_PxGeometry_PxTransform_PxVec3_float_PxSweepCallbackPtr_PxHitFlags_PxQueryFilterDataPtr_PxQueryFilterCallbackPtr_C_(PxScenePtr wrp_this, physx::PxGeometry* wrp_geometry, physx::PxTransform* wrp_pose, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxSweepCallbackPtr wrp_hitCall, char wrp_hitFlags[sizeof(PxHitFlags)], PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall){
    return (bool) wrp_this->sweep(*wrp_geometry, *wrp_pose, *wrp_unitDir, wrp_distance, *wrp_hitCall, *(PxHitFlags*)&wrp_hitFlags, *wrp_filterData, wrp_filterCall);
}

ES bool bool_const_PxScenePtr_sweepPtr_PxGeometry_PxTransform_PxVec3_float_PxSweepCallbackPtr_PxHitFlags_PxQueryFilterDataPtr_PxQueryFilterCallbackPtr_PxQueryCachePtr_C_(PxScenePtr wrp_this, physx::PxGeometry* wrp_geometry, physx::PxTransform* wrp_pose, physx::PxVec3* wrp_unitDir, PxReal wrp_distance, PxSweepCallbackPtr wrp_hitCall, char wrp_hitFlags[sizeof(PxHitFlags)], PxQueryFilterDataPtr wrp_filterData, PxQueryFilterCallbackPtr wrp_filterCall, PxQueryCachePtr wrp_cache){
    return (bool) wrp_this->sweep(*wrp_geometry, *wrp_pose, *wrp_unitDir, wrp_distance, *wrp_hitCall, *(PxHitFlags*)&wrp_hitFlags, *wrp_filterData, wrp_filterCall, wrp_cache);
}

ES bool bool_const_PxScenePtr_overlapPtr_PxGeometry_PxTransform_PxOverlapCallbackPtr_(PxScenePtr wrp_this, physx::PxGeometry* wrp_geometry, physx::PxTransform* wrp_pose, PxOverlapCallbackPtr wrp_hitCall){
    return (bool) wrp_this->overlap(*wrp_geometry, *wrp_pose, *wrp_hitCall);
}

ES bool bool_const_PxScenePtr_overlapPtr_PxGeometry_PxTransform_PxOverlapCallbackPtr_PxQueryFilterDataPtr_(PxScenePtr wrp_this, physx::PxGeometry* wrp_geometry, physx::PxTransform* wrp_pose, PxOverlapCallbackPtr wrp_hitCall, PxQueryFilterDataPtr wrp_filterData){
    return (bool) wrp_this->overlap(*wrp_geometry, *wrp_pose, *wrp_hitCall, *wrp_filterData);
}

ES PxU32 uint_const_PxScenePtr_getBroadPhaseRegionsPtr_PxBroadPhaseRegionInfoPtr_uint_(PxScenePtr wrp_this, PxBroadPhaseRegionInfoPtr wrp_userBuffer, PxU32 wrp_bufferSize){
    return (PxU32) wrp_this->getBroadPhaseRegions(wrp_userBuffer, wrp_bufferSize);
}

ES PxU32 uint_PxScenePtr_addBroadPhaseRegionPtr_PxBroadPhaseRegionPtr_(PxScenePtr wrp_this, PxBroadPhaseRegionPtr wrp_region){
    return (PxU32) wrp_this->addBroadPhaseRegion(*wrp_region);
}

ES void void_PxScenePtr_lockReadPtr(PxScenePtr wrp_this){
    wrp_this->lockRead();
}

ES void void_PxScenePtr_lockReadPtr_string_(PxScenePtr wrp_this, char* wrp_file){
    wrp_this->lockRead(wrp_file);
}

ES void void_PxScenePtr_lockWritePtr(PxScenePtr wrp_this){
    wrp_this->lockWrite();
}

ES void void_PxScenePtr_lockWritePtr_string_(PxScenePtr wrp_this, char* wrp_file){
    wrp_this->lockWrite(wrp_file);
}

