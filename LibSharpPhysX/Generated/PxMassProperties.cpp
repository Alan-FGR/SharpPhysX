// Generated by minBND 5.1.94.90 - Â© github.com/Alan-FGR

ES void Freer_physx_PxMassPropertiesPtr(PxMassPropertiesPtr ptr){
    delete ptr;
}

ES PxMassPropertiesPtr Ctor_PxMassPropertiesPtr_(){
    auto ret = *(new std::remove_pointer<PxMassPropertiesPtr>::type());
    auto heap = new char[sizeof PxMassProperties];
    std::memcpy(heap, &ret, sizeof PxMassProperties);
    return (PxMassPropertiesPtr) heap;
}

ES PxMassPropertiesPtr Ctor_PxMassPropertiesPtr_float_PxMat33_PxVec3_(PxReal wrp_m, physx::PxMat33* wrp_inertiaT, physx::PxVec3* wrp_com){
    auto ret = *(new std::remove_pointer<PxMassPropertiesPtr>::type(wrp_m, *wrp_inertiaT, *wrp_com));
    auto heap = new char[sizeof PxMassProperties];
    std::memcpy(heap, &ret, sizeof PxMassProperties);
    return (PxMassPropertiesPtr) heap;
}

ES PxMassPropertiesPtr Ctor_PxMassPropertiesPtr_PxGeometry_(physx::PxGeometry* wrp_geometry){
    auto ret = *(new std::remove_pointer<PxMassPropertiesPtr>::type(*wrp_geometry));
    auto heap = new char[sizeof PxMassProperties];
    std::memcpy(heap, &ret, sizeof PxMassProperties);
    return (PxMassPropertiesPtr) heap;
}

ES void PxMassPropertiesPtr_GET_inertiaTensor(PxMassPropertiesPtr cls, physx::PxMat33* GetRetRef) {*GetRetRef = cls->inertiaTensor;}
ES void PxMassPropertiesPtr_SET_inertiaTensor(PxMassPropertiesPtr cls, physx::PxMat33 value) {cls->inertiaTensor = value;}

ES void PxMassPropertiesPtr_GET_centerOfMass(PxMassPropertiesPtr cls, physx::PxVec3* GetRetRef) {*GetRetRef = cls->centerOfMass;}
ES void PxMassPropertiesPtr_SET_centerOfMass(PxMassPropertiesPtr cls, physx::PxVec3 value) {cls->centerOfMass = value;}

ES PxReal PxMassPropertiesPtr_GET_mass(PxMassPropertiesPtr cls) {return (PxReal)cls->mass;}
ES void PxMassPropertiesPtr_SET_mass(PxMassPropertiesPtr cls, PxReal value) {cls->mass = value;}

ES PxMassPropertiesPtr PxMassPropertiesPtr_const_PxMassPropertiesPtr_operator_Ptr_Star_floatC(PxMassPropertiesPtr wrp_lhs, PxReal wrp_scale){
    auto ret = wrp_lhs->::physx::PxMassProperties::operator*(wrp_scale);
    auto heap = new char[sizeof PxMassProperties];
    std::memcpy(heap, &ret, sizeof PxMassProperties);
    return (PxMassPropertiesPtr) heap;
}

ES void void_PxMassPropertiesPtr_translatePtr_PxVec3_(PxMassPropertiesPtr wrp_this, physx::PxVec3* wrp_t){
    wrp_this->translate(*wrp_t);
}

ES void PxVec3_PxMassPropertiesPtr_getMassSpaceInertiaPtr_PxMat33_PxQuat_(physx::PxVec3* nRetRef, physx::PxMat33* wrp_inertia, physx::PxQuat* wrp_massFrame){
    *nRetRef = ::physx::PxMassProperties::getMassSpaceInertia(*wrp_inertia, *wrp_massFrame);
}

ES void PxMat33_PxMassPropertiesPtr_translateInertiaPtr_PxMat33_float_PxVec3_C_(physx::PxMat33* nRetRef, physx::PxMat33* wrp_inertia, PxReal wrp_mass, physx::PxVec3* wrp_t){
    *nRetRef = ::physx::PxMassProperties::translateInertia(*wrp_inertia, wrp_mass, *wrp_t);
}

ES void PxMat33_PxMassPropertiesPtr_rotateInertiaPtr_PxMat33_PxQuat_(physx::PxMat33* nRetRef, physx::PxMat33* wrp_inertia, physx::PxQuat* wrp_q){
    *nRetRef = ::physx::PxMassProperties::rotateInertia(*wrp_inertia, *wrp_q);
}

ES void PxMat33_PxMassPropertiesPtr_scaleInertiaPtr_PxMat33_PxQuat_PxVec3_(physx::PxMat33* nRetRef, physx::PxMat33* wrp_inertia, physx::PxQuat* wrp_scaleRotation, physx::PxVec3* wrp_scale){
    *nRetRef = ::physx::PxMassProperties::scaleInertia(*wrp_inertia, *wrp_scaleRotation, *wrp_scale);
}

ES PxMassPropertiesPtr PxMassPropertiesPtr_PxMassPropertiesPtr_sumPtr_PxMassPropertiesPtr_PxTransform_uint_C(PxMassPropertiesPtr wrp_props, physx::PxTransform* wrp_transforms, PxU32 wrp_count){
    auto ret = ::physx::PxMassProperties::sum(wrp_props, wrp_transforms, wrp_count);
    auto heap = new char[sizeof PxMassProperties];
    std::memcpy(heap, &ret, sizeof PxMassProperties);
    return (PxMassPropertiesPtr) heap;
}

