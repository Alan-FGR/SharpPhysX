// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
ES void Freer_physx_PxMassPropertiesPtr(PxMassPropertiesPtr ptr){
    delete ptr;
}

ES PxMassPropertiesPtr Ctor_physx_PxMassPropertiesPtr_(){
    return (PxMassPropertiesPtr) new std::remove_pointer<PxMassPropertiesPtr>::type();
}

ES PxMassPropertiesPtr Ctor_physx_PxMassPropertiesPtr_float_physx_PxMat33Ptr_physx_PxVec3Ptr(float wrp_m, PxMat33Ptr wrp_inertiaT, PxVec3Ptr wrp_com){
    return (PxMassPropertiesPtr) new std::remove_pointer<PxMassPropertiesPtr>::type(wrp_m, *wrp_inertiaT, *wrp_com);
}

ES PxMassPropertiesPtr Ctor_physx_PxMassPropertiesPtr_physx_PxGeometryPtr(PxGeometryPtr wrp_geometry){
    return (PxMassPropertiesPtr) new std::remove_pointer<PxMassPropertiesPtr>::type(*wrp_geometry);
}

ES PxMat33Ptr PxMassProperties_GET_inertiaTensor(PxMassPropertiesPtr cls) {return (PxMat33Ptr)&cls->inertiaTensor;}
ES void PxMassProperties_SET_inertiaTensor(PxMassPropertiesPtr cls, PxMat33Ptr value) {cls->inertiaTensor = *value;}

ES PxVec3Ptr PxMassProperties_GET_centerOfMass(PxMassPropertiesPtr cls) {return (PxVec3Ptr)&cls->centerOfMass;}
ES void PxMassProperties_SET_centerOfMass(PxMassPropertiesPtr cls, PxVec3Ptr value) {cls->centerOfMass = *value;}

ES float PxMassProperties_GET_mass(PxMassPropertiesPtr cls) {return (float)cls->mass;}
ES void PxMassProperties_SET_mass(PxMassPropertiesPtr cls, float value) {cls->mass = value;}

ES PxMassPropertiesPtr physx_PxMassPropertiesPtr_const_physx_PxMassProperties_operator_Star_floatC(PxMassPropertiesPtr wrp_lhs, float wrp_scale){
    auto ret = wrp_lhs->operator*(wrp_scale);
    auto heap = new char[sizeof PxMassProperties];
    std::memcpy(heap, &ret, sizeof PxMassProperties);
    return (PxMassPropertiesPtr) heap;
}

ES void void_physx_PxMassProperties_translate_physx_PxVec3Ptr_(PxMassPropertiesPtr wrp_this, PxVec3Ptr wrp_t){
    wrp_this->translate(*wrp_t);
}

ES PxVec3Ptr physx_PxVec3Ptr_physx_PxMassProperties_getMassSpaceInertia_physx_PxMat33Ptr_physx_PxQuatPtr_(PxMat33Ptr wrp_inertia, PxQuatPtr wrp_massFrame){
    auto ret = physx::PxMassProperties::getMassSpaceInertia(*wrp_inertia, *wrp_massFrame);
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxMat33Ptr physx_PxMat33Ptr_physx_PxMassProperties_translateInertia_physx_PxMat33Ptr_float_physx_PxVec3Ptr_C_(PxMat33Ptr wrp_inertia, float wrp_mass, PxVec3Ptr wrp_t){
    auto ret = physx::PxMassProperties::translateInertia(*wrp_inertia, wrp_mass, *wrp_t);
    auto heap = new char[sizeof PxMat33];
    std::memcpy(heap, &ret, sizeof PxMat33);
    return (PxMat33Ptr) heap;
}

ES PxMat33Ptr physx_PxMat33Ptr_physx_PxMassProperties_rotateInertia_physx_PxMat33Ptr_physx_PxQuatPtr_(PxMat33Ptr wrp_inertia, PxQuatPtr wrp_q){
    auto ret = physx::PxMassProperties::rotateInertia(*wrp_inertia, *wrp_q);
    auto heap = new char[sizeof PxMat33];
    std::memcpy(heap, &ret, sizeof PxMat33);
    return (PxMat33Ptr) heap;
}

ES PxMat33Ptr physx_PxMat33Ptr_physx_PxMassProperties_scaleInertia_physx_PxMat33Ptr_physx_PxQuatPtr_physx_PxVec3Ptr_(PxMat33Ptr wrp_inertia, PxQuatPtr wrp_scaleRotation, PxVec3Ptr wrp_scale){
    auto ret = physx::PxMassProperties::scaleInertia(*wrp_inertia, *wrp_scaleRotation, *wrp_scale);
    auto heap = new char[sizeof PxMat33];
    std::memcpy(heap, &ret, sizeof PxMat33);
    return (PxMat33Ptr) heap;
}

ES PxMassPropertiesPtr physx_PxMassPropertiesPtr_physx_PxMassProperties_sum_physx_PxMassPropertiesPtr_physx_PxTransformPtr_uint_C(PxMassPropertiesPtr wrp_props, PxTransformPtr wrp_transforms, unsigned int wrp_count){
    auto ret = physx::PxMassProperties::sum(wrp_props, wrp_transforms, wrp_count);
    auto heap = new char[sizeof PxMassProperties];
    std::memcpy(heap, &ret, sizeof PxMassProperties);
    return (PxMassPropertiesPtr) heap;
}
