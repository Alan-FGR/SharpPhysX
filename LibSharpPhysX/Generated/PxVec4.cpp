// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
ES void Default_physx_PxVec4_(physx::PxVec4* RetRef){
    *RetRef = *RetRef = physx::PxVec4();
}

ES void void_physx_PxVec4_PxVec4_Ctor_physx_PxZERO_(physx::PxVec4* wrp_this, physx::PxZERO wrp_r){
    *wrp_this = physx::PxVec4::PxVec4(wrp_r);
}

ES void void_physx_PxVec4_PxVec4_Ctor_float_(physx::PxVec4* wrp_this, float wrp_a){
    *wrp_this = physx::PxVec4::PxVec4(wrp_a);
}

ES void void_physx_PxVec4_PxVec4_Ctor_float_float_float_float_(physx::PxVec4* wrp_this, float wrp_nx, float wrp_ny, float wrp_nz, float wrp_nw){
    *wrp_this = physx::PxVec4::PxVec4(wrp_nx, wrp_ny, wrp_nz, wrp_nw);
}

ES void void_physx_PxVec4_PxVec4_Ctor_physx_PxVec3_float_(physx::PxVec4* wrp_this, physx::PxVec3* wrp_v, float wrp_nw){
    *wrp_this = physx::PxVec4::PxVec4(*wrp_v, wrp_nw);
}

ES void void_physx_PxVec4_PxVec4_Ctor_physx_PxVec4_(physx::PxVec4* wrp_this, physx::PxVec4* wrp_v){
    *wrp_this = physx::PxVec4::PxVec4(*wrp_v);
}

ES bool bool_const_physx_PxVec4_operator_EqualEqual_physx_PxVec4_(physx::PxVec4* wrp_lhs, physx::PxVec4* wrp_v){
    return (bool) wrp_lhs->operator==(*wrp_v);
}

ES bool bool_const_physx_PxVec4_operator_ExclaimEqual_physx_PxVec4_(physx::PxVec4* wrp_lhs, physx::PxVec4* wrp_v){
    return (bool) wrp_lhs->operator!=(*wrp_v);
}

ES bool bool_const_physx_PxVec4_isZero(physx::PxVec4* wrp_this){
    return (bool) wrp_this->isZero();
}

ES bool bool_const_physx_PxVec4_isFinite(physx::PxVec4* wrp_this){
    return (bool) wrp_this->isFinite();
}

ES bool bool_const_physx_PxVec4_isNormalized(physx::PxVec4* wrp_this){
    return (bool) wrp_this->isNormalized();
}

ES float float_const_physx_PxVec4_magnitudeSquared(physx::PxVec4* wrp_this){
    return (float) wrp_this->magnitudeSquared();
}

ES float float_const_physx_PxVec4_magnitude(physx::PxVec4* wrp_this){
    return (float) wrp_this->magnitude();
}

ES void physx_PxVec4_const_physx_PxVec4_operator_Minus(physx::PxVec4* RetRef, physx::PxVec4* wrp_lhs){
    *RetRef = wrp_lhs->operator-();
}

ES void physx_PxVec4_const_physx_PxVec4_operator_Plus_physx_PxVec4_(physx::PxVec4* RetRef, physx::PxVec4* wrp_lhs, physx::PxVec4* wrp_v){
    *RetRef = wrp_lhs->operator+(*wrp_v);
}

ES void physx_PxVec4_const_physx_PxVec4_operator_Minus_physx_PxVec4_(physx::PxVec4* RetRef, physx::PxVec4* wrp_lhs, physx::PxVec4* wrp_v){
    *RetRef = wrp_lhs->operator-(*wrp_v);
}

ES void physx_PxVec4_const_physx_PxVec4_operator_Star_float_(physx::PxVec4* RetRef, physx::PxVec4* wrp_lhs, float wrp_f){
    *RetRef = wrp_lhs->operator*(wrp_f);
}

ES void physx_PxVec4_const_physx_PxVec4_operator_Slash_float_(physx::PxVec4* RetRef, physx::PxVec4* wrp_lhs, float wrp_f){
    *RetRef = wrp_lhs->operator/(wrp_f);
}

ES float float_const_physx_PxVec4_dot_physx_PxVec4_(physx::PxVec4* wrp_this, physx::PxVec4* wrp_v){
    return (float) wrp_this->dot(*wrp_v);
}

ES void physx_PxVec4_const_physx_PxVec4_getNormalized(physx::PxVec4* RetRef, physx::PxVec4* wrp_this){
    *RetRef = wrp_this->getNormalized();
}

ES float float_physx_PxVec4_normalize(physx::PxVec4* wrp_this){
    return (float) wrp_this->normalize();
}

ES void physx_PxVec4_const_physx_PxVec4_multiply_physx_PxVec4_(physx::PxVec4* RetRef, physx::PxVec4* wrp_this, physx::PxVec4* wrp_a){
    *RetRef = wrp_this->multiply(*wrp_a);
}

ES void physx_PxVec4_const_physx_PxVec4_minimum_physx_PxVec4_(physx::PxVec4* RetRef, physx::PxVec4* wrp_this, physx::PxVec4* wrp_v){
    *RetRef = wrp_this->minimum(*wrp_v);
}

ES void physx_PxVec4_const_physx_PxVec4_maximum_physx_PxVec4_(physx::PxVec4* RetRef, physx::PxVec4* wrp_this, physx::PxVec4* wrp_v){
    *RetRef = wrp_this->maximum(*wrp_v);
}

ES void physx_PxVec3_const_physx_PxVec4_getXYZ(physx::PxVec3* RetRef, physx::PxVec4* wrp_this){
    *RetRef = wrp_this->getXYZ();
}

ES void void_physx_PxVec4_setZero(physx::PxVec4* wrp_this){
    wrp_this->setZero();
}
    ES void physx_PxVec4_physx_operator_Star_float_physx_PxVec4_(physx::PxVec4* RetRef, float wrp_f, physx::PxVec4* wrp_v){
        *RetRef = operator*(wrp_f, *wrp_v);
    }
