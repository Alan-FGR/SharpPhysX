// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
ES void Freer_physx_PxVec4Ptr(PxVec4Ptr ptr){
    delete ptr;
}

ES PxVec4Ptr Ctor_physx_PxVec4Ptr_(){
    return (PxVec4Ptr) new std::remove_pointer<PxVec4Ptr>::type();
}

ES PxVec4Ptr Ctor_physx_PxVec4Ptr_physx_PxZERO(physx::PxZERO wrp_r){
    return (PxVec4Ptr) new std::remove_pointer<PxVec4Ptr>::type(wrp_r);
}

ES PxVec4Ptr Ctor_physx_PxVec4Ptr_float(float wrp_a){
    return (PxVec4Ptr) new std::remove_pointer<PxVec4Ptr>::type(wrp_a);
}

ES PxVec4Ptr Ctor_physx_PxVec4Ptr_float_float_float_float(float wrp_nx, float wrp_ny, float wrp_nz, float wrp_nw){
    return (PxVec4Ptr) new std::remove_pointer<PxVec4Ptr>::type(wrp_nx, wrp_ny, wrp_nz, wrp_nw);
}

ES PxVec4Ptr Ctor_physx_PxVec4Ptr_physx_PxVec3Ptr_float(PxVec3Ptr wrp_v, float wrp_nw){
    return (PxVec4Ptr) new std::remove_pointer<PxVec4Ptr>::type(*wrp_v, wrp_nw);
}

ES PxVec4Ptr Ctor_physx_PxVec4Ptr_physx_PxVec4Ptr(PxVec4Ptr wrp_v){
    return (PxVec4Ptr) new std::remove_pointer<PxVec4Ptr>::type(*wrp_v);
}

ES float PxVec4_GET_x(PxVec4Ptr cls) {return (float)cls->x;}
ES void PxVec4_SET_x(PxVec4Ptr cls, float value) {cls->x = value;}

ES float PxVec4_GET_y(PxVec4Ptr cls) {return (float)cls->y;}
ES void PxVec4_SET_y(PxVec4Ptr cls, float value) {cls->y = value;}

ES float PxVec4_GET_z(PxVec4Ptr cls) {return (float)cls->z;}
ES void PxVec4_SET_z(PxVec4Ptr cls, float value) {cls->z = value;}

ES float PxVec4_GET_w(PxVec4Ptr cls) {return (float)cls->w;}
ES void PxVec4_SET_w(PxVec4Ptr cls, float value) {cls->w = value;}

ES bool bool_const_physx_PxVec4_operator_EqualEqual_physx_PxVec4Ptr_(PxVec4Ptr wrp_lhs, PxVec4Ptr wrp_v){
    return (bool) wrp_lhs->operator==(*wrp_v);
}

ES bool bool_const_physx_PxVec4_operator_ExclaimEqual_physx_PxVec4Ptr_(PxVec4Ptr wrp_lhs, PxVec4Ptr wrp_v){
    return (bool) wrp_lhs->operator!=(*wrp_v);
}

ES bool bool_const_physx_PxVec4_isZero(PxVec4Ptr wrp_this){
    return (bool) wrp_this->isZero();
}

ES bool bool_const_physx_PxVec4_isFinite(PxVec4Ptr wrp_this){
    return (bool) wrp_this->isFinite();
}

ES bool bool_const_physx_PxVec4_isNormalized(PxVec4Ptr wrp_this){
    return (bool) wrp_this->isNormalized();
}

ES float float_const_physx_PxVec4_magnitudeSquared(PxVec4Ptr wrp_this){
    return (float) wrp_this->magnitudeSquared();
}

ES float float_const_physx_PxVec4_magnitude(PxVec4Ptr wrp_this){
    return (float) wrp_this->magnitude();
}

ES PxVec4Ptr physx_PxVec4Ptr_const_physx_PxVec4_operator_Minus(PxVec4Ptr wrp_lhs){
    auto ret = wrp_lhs->operator-();
    auto heap = new char[sizeof PxVec4];
    std::memcpy(heap, &ret, sizeof PxVec4);
    return (PxVec4Ptr) heap;
}

ES PxVec4Ptr physx_PxVec4Ptr_const_physx_PxVec4_operator_Plus_physx_PxVec4Ptr_(PxVec4Ptr wrp_lhs, PxVec4Ptr wrp_v){
    auto ret = wrp_lhs->operator+(*wrp_v);
    auto heap = new char[sizeof PxVec4];
    std::memcpy(heap, &ret, sizeof PxVec4);
    return (PxVec4Ptr) heap;
}

ES PxVec4Ptr physx_PxVec4Ptr_const_physx_PxVec4_operator_Minus_physx_PxVec4Ptr_(PxVec4Ptr wrp_lhs, PxVec4Ptr wrp_v){
    auto ret = wrp_lhs->operator-(*wrp_v);
    auto heap = new char[sizeof PxVec4];
    std::memcpy(heap, &ret, sizeof PxVec4);
    return (PxVec4Ptr) heap;
}

ES PxVec4Ptr physx_PxVec4Ptr_const_physx_PxVec4_operator_Star_float_(PxVec4Ptr wrp_lhs, float wrp_f){
    auto ret = wrp_lhs->operator*(wrp_f);
    auto heap = new char[sizeof PxVec4];
    std::memcpy(heap, &ret, sizeof PxVec4);
    return (PxVec4Ptr) heap;
}

ES PxVec4Ptr physx_PxVec4Ptr_const_physx_PxVec4_operator_Slash_float_(PxVec4Ptr wrp_lhs, float wrp_f){
    auto ret = wrp_lhs->operator/(wrp_f);
    auto heap = new char[sizeof PxVec4];
    std::memcpy(heap, &ret, sizeof PxVec4);
    return (PxVec4Ptr) heap;
}

ES float float_const_physx_PxVec4_dot_physx_PxVec4Ptr_(PxVec4Ptr wrp_this, PxVec4Ptr wrp_v){
    return (float) wrp_this->dot(*wrp_v);
}

ES PxVec4Ptr physx_PxVec4Ptr_const_physx_PxVec4_getNormalized(PxVec4Ptr wrp_this){
    auto ret = wrp_this->getNormalized();
    auto heap = new char[sizeof PxVec4];
    std::memcpy(heap, &ret, sizeof PxVec4);
    return (PxVec4Ptr) heap;
}

ES float float_physx_PxVec4_normalize(PxVec4Ptr wrp_this){
    return (float) wrp_this->normalize();
}

ES PxVec4Ptr physx_PxVec4Ptr_const_physx_PxVec4_multiply_physx_PxVec4Ptr_(PxVec4Ptr wrp_this, PxVec4Ptr wrp_a){
    auto ret = wrp_this->multiply(*wrp_a);
    auto heap = new char[sizeof PxVec4];
    std::memcpy(heap, &ret, sizeof PxVec4);
    return (PxVec4Ptr) heap;
}

ES PxVec4Ptr physx_PxVec4Ptr_const_physx_PxVec4_minimum_physx_PxVec4Ptr_(PxVec4Ptr wrp_this, PxVec4Ptr wrp_v){
    auto ret = wrp_this->minimum(*wrp_v);
    auto heap = new char[sizeof PxVec4];
    std::memcpy(heap, &ret, sizeof PxVec4);
    return (PxVec4Ptr) heap;
}

ES PxVec4Ptr physx_PxVec4Ptr_const_physx_PxVec4_maximum_physx_PxVec4Ptr_(PxVec4Ptr wrp_this, PxVec4Ptr wrp_v){
    auto ret = wrp_this->maximum(*wrp_v);
    auto heap = new char[sizeof PxVec4];
    std::memcpy(heap, &ret, sizeof PxVec4);
    return (PxVec4Ptr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxVec4_getXYZ(PxVec4Ptr wrp_this){
    auto ret = wrp_this->getXYZ();
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES void void_physx_PxVec4_setZero(PxVec4Ptr wrp_this){
    wrp_this->setZero();
}
    ES PxVec4Ptr physx_PxVec4Ptr_physx_operator_Star_float_physx_PxVec4Ptr_(float wrp_f, PxVec4Ptr wrp_v){
        auto ret = operator*(wrp_f, *wrp_v);
        auto heap = new char[sizeof PxVec4];
        std::memcpy(heap, &ret, sizeof PxVec4);
        return (PxVec4Ptr) heap;
    }
