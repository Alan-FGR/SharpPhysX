// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
ES void Freer_physx_PxActorShapePtr(PxActorShapePtr ptr){
    delete ptr;
}

ES PxActorShapePtr Ctor_physx_PxActorShapePtr_(){
    return (PxActorShapePtr) new std::remove_pointer<PxActorShapePtr>::type();
}

ES PxActorShapePtr Ctor_physx_PxActorShapePtr_physx_PxRigidActorPtr_physx_PxShapePtr(PxRigidActorPtr wrp_a, PxShapePtr wrp_s){
    return (PxActorShapePtr) new std::remove_pointer<PxActorShapePtr>::type(wrp_a, wrp_s);
}

ES PxRigidActorPtr PxActorShape_GET_actor(PxActorShapePtr cls) {return (PxRigidActorPtr)cls->actor;}
ES void PxActorShape_SET_actor(PxActorShapePtr cls, PxRigidActorPtr value) {cls->actor = value;}

ES PxShapePtr PxActorShape_GET_shape(PxActorShapePtr cls) {return (PxShapePtr)cls->shape;}
ES void PxActorShape_SET_shape(PxActorShapePtr cls, PxShapePtr value) {cls->shape = value;}

ES void Freer_physx_PxQueryHitPtr(PxQueryHitPtr ptr){
    delete ptr;
}

ES PxQueryHitPtr Ctor_physx_PxQueryHitPtr_(){
    return (PxQueryHitPtr) new std::remove_pointer<PxQueryHitPtr>::type();
}

ES unsigned int PxQueryHit_GET_faceIndex(PxQueryHitPtr cls) {return (unsigned int)cls->faceIndex;}
ES void PxQueryHit_SET_faceIndex(PxQueryHitPtr cls, unsigned int value) {cls->faceIndex = value;}

ES void Freer_physx_PxLocationHitPtr(PxLocationHitPtr ptr){
    delete ptr;
}

ES PxLocationHitPtr Ctor_physx_PxLocationHitPtr_(){
    return (PxLocationHitPtr) new std::remove_pointer<PxLocationHitPtr>::type();
}

ES PxHitFlagsPtr PxLocationHit_GET_flags(PxLocationHitPtr cls) {return (PxHitFlagsPtr)&cls->flags;}
ES void PxLocationHit_SET_flags(PxLocationHitPtr cls, PxHitFlagsPtr value) {cls->flags = *value;}

ES void PxLocationHit_GET_position(PxLocationHitPtr cls, physx::PxVec3* GetRetRef) {*GetRetRef = cls->position;}
ES void PxLocationHit_SET_position(PxLocationHitPtr cls, physx::PxVec3 value) {cls->position = value;}

ES void PxLocationHit_GET_normal(PxLocationHitPtr cls, physx::PxVec3* GetRetRef) {*GetRetRef = cls->normal;}
ES void PxLocationHit_SET_normal(PxLocationHitPtr cls, physx::PxVec3 value) {cls->normal = value;}

ES float PxLocationHit_GET_distance(PxLocationHitPtr cls) {return (float)cls->distance;}
ES void PxLocationHit_SET_distance(PxLocationHitPtr cls, float value) {cls->distance = value;}

ES bool bool_const_physx_PxLocationHit_hadInitialOverlap(PxLocationHitPtr wrp_this){
    return (bool) wrp_this->hadInitialOverlap();
}

ES void Freer_physx_PxRaycastHitPtr(PxRaycastHitPtr ptr){
    delete ptr;
}

ES PxRaycastHitPtr Ctor_physx_PxRaycastHitPtr_(){
    return (PxRaycastHitPtr) new std::remove_pointer<PxRaycastHitPtr>::type();
}

ES float PxRaycastHit_GET_u(PxRaycastHitPtr cls) {return (float)cls->u;}
ES void PxRaycastHit_SET_u(PxRaycastHitPtr cls, float value) {cls->u = value;}

ES float PxRaycastHit_GET_v(PxRaycastHitPtr cls) {return (float)cls->v;}
ES void PxRaycastHit_SET_v(PxRaycastHitPtr cls, float value) {cls->v = value;}

ES PxOverlapHitPtr Newer_physx_PxOverlapHitPtr(){
    return new std::remove_pointer<PxOverlapHitPtr>::type();
}

ES void Freer_physx_PxOverlapHitPtr(PxOverlapHitPtr ptr){
    delete ptr;
}

ES unsigned int PxOverlapHit_GET_padTo16Bytes(PxOverlapHitPtr cls) {return (unsigned int)cls->padTo16Bytes;}
ES void PxOverlapHit_SET_padTo16Bytes(PxOverlapHitPtr cls, unsigned int value) {cls->padTo16Bytes = value;}

ES void Freer_physx_PxSweepHitPtr(PxSweepHitPtr ptr){
    delete ptr;
}

ES PxSweepHitPtr Ctor_physx_PxSweepHitPtr_(){
    return (PxSweepHitPtr) new std::remove_pointer<PxSweepHitPtr>::type();
}

ES unsigned int PxSweepHit_GET_padTo16Bytes(PxSweepHitPtr cls) {return (unsigned int)cls->padTo16Bytes;}
ES void PxSweepHit_SET_padTo16Bytes(PxSweepHitPtr cls, unsigned int value) {cls->padTo16Bytes = value;}
