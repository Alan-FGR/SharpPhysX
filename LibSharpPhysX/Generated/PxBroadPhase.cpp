// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
ES void void_physx_PxBroadPhaseCallback_onObjectOutOfBounds_physx_PxShapePtr_physx_PxActorPtr_(PxBroadPhaseCallbackPtr wrp_this, PxShapePtr wrp_shape, PxActorPtr wrp_actor){
    wrp_this->onObjectOutOfBounds(*wrp_shape, *wrp_actor);
}

ES void void_physx_PxBroadPhaseCallback_onObjectOutOfBounds_physx_PxAggregatePtr_(PxBroadPhaseCallbackPtr wrp_this, PxAggregatePtr wrp_aggregate){
    wrp_this->onObjectOutOfBounds(*wrp_aggregate);
}

ES PxBroadPhaseRegionPtr Newer_physx_PxBroadPhaseRegionPtr(){
    return new std::remove_pointer<PxBroadPhaseRegionPtr>::type();
}

ES void Freer_physx_PxBroadPhaseRegionPtr(PxBroadPhaseRegionPtr ptr){
    delete ptr;
}

ES PxBounds3Ptr PxBroadPhaseRegion_GET_bounds(PxBroadPhaseRegionPtr cls) {return (PxBounds3Ptr)&cls->bounds;}
ES void PxBroadPhaseRegion_SET_bounds(PxBroadPhaseRegionPtr cls, PxBounds3Ptr value) {cls->bounds = *value;}

ES void* PxBroadPhaseRegion_GET_userData(PxBroadPhaseRegionPtr cls) {return (void*)cls->userData;}
ES void PxBroadPhaseRegion_SET_userData(PxBroadPhaseRegionPtr cls, void* value) {cls->userData = value;}

ES PxBroadPhaseRegionInfoPtr Newer_physx_PxBroadPhaseRegionInfoPtr(){
    return new std::remove_pointer<PxBroadPhaseRegionInfoPtr>::type();
}

ES void Freer_physx_PxBroadPhaseRegionInfoPtr(PxBroadPhaseRegionInfoPtr ptr){
    delete ptr;
}

ES PxBroadPhaseRegionPtr PxBroadPhaseRegionInfo_GET_region(PxBroadPhaseRegionInfoPtr cls) {return (PxBroadPhaseRegionPtr)&cls->region;}
ES void PxBroadPhaseRegionInfo_SET_region(PxBroadPhaseRegionInfoPtr cls, PxBroadPhaseRegionPtr value) {cls->region = *value;}

ES unsigned int PxBroadPhaseRegionInfo_GET_nbStaticObjects(PxBroadPhaseRegionInfoPtr cls) {return (unsigned int)cls->nbStaticObjects;}
ES void PxBroadPhaseRegionInfo_SET_nbStaticObjects(PxBroadPhaseRegionInfoPtr cls, unsigned int value) {cls->nbStaticObjects = value;}

ES unsigned int PxBroadPhaseRegionInfo_GET_nbDynamicObjects(PxBroadPhaseRegionInfoPtr cls) {return (unsigned int)cls->nbDynamicObjects;}
ES void PxBroadPhaseRegionInfo_SET_nbDynamicObjects(PxBroadPhaseRegionInfoPtr cls, unsigned int value) {cls->nbDynamicObjects = value;}

ES bool PxBroadPhaseRegionInfo_GET_active(PxBroadPhaseRegionInfoPtr cls) {return (bool)cls->active;}
ES void PxBroadPhaseRegionInfo_SET_active(PxBroadPhaseRegionInfoPtr cls, bool value) {cls->active = value;}

ES bool PxBroadPhaseRegionInfo_GET_overlap(PxBroadPhaseRegionInfoPtr cls) {return (bool)cls->overlap;}
ES void PxBroadPhaseRegionInfo_SET_overlap(PxBroadPhaseRegionInfoPtr cls, bool value) {cls->overlap = value;}

ES PxBroadPhaseCapsPtr Newer_physx_PxBroadPhaseCapsPtr(){
    return new std::remove_pointer<PxBroadPhaseCapsPtr>::type();
}

ES void Freer_physx_PxBroadPhaseCapsPtr(PxBroadPhaseCapsPtr ptr){
    delete ptr;
}

ES unsigned int PxBroadPhaseCaps_GET_maxNbRegions(PxBroadPhaseCapsPtr cls) {return (unsigned int)cls->maxNbRegions;}
ES void PxBroadPhaseCaps_SET_maxNbRegions(PxBroadPhaseCapsPtr cls, unsigned int value) {cls->maxNbRegions = value;}

ES unsigned int PxBroadPhaseCaps_GET_maxNbObjects(PxBroadPhaseCapsPtr cls) {return (unsigned int)cls->maxNbObjects;}
ES void PxBroadPhaseCaps_SET_maxNbObjects(PxBroadPhaseCapsPtr cls, unsigned int value) {cls->maxNbObjects = value;}

ES bool PxBroadPhaseCaps_GET_needsPredefinedBounds(PxBroadPhaseCapsPtr cls) {return (bool)cls->needsPredefinedBounds;}
ES void PxBroadPhaseCaps_SET_needsPredefinedBounds(PxBroadPhaseCapsPtr cls, bool value) {cls->needsPredefinedBounds = value;}
