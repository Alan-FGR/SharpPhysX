// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
ES PxKinematicJacobianPtr Newer_physx_PxKinematicJacobianPtr(){
    return new std::remove_pointer<PxKinematicJacobianPtr>::type();
}

ES void Freer_physx_PxKinematicJacobianPtr(PxKinematicJacobianPtr ptr){
    delete ptr;
}

ES unsigned int PxKinematicJacobian_GET_nbColumns(PxKinematicJacobianPtr cls) {return (unsigned int)cls->nbColumns;}
ES void PxKinematicJacobian_SET_nbColumns(PxKinematicJacobianPtr cls, unsigned int value) {cls->nbColumns = value;}

ES PxArticulationRootLinkDataPtr Newer_physx_PxArticulationRootLinkDataPtr(){
    return new std::remove_pointer<PxArticulationRootLinkDataPtr>::type();
}

ES void Freer_physx_PxArticulationRootLinkDataPtr(PxArticulationRootLinkDataPtr ptr){
    delete ptr;
}

ES void PxArticulationRootLinkData_GET_transform(PxArticulationRootLinkDataPtr cls, physx::PxTransform* GetRetRef) {*GetRetRef = cls->transform;}
ES void PxArticulationRootLinkData_SET_transform(PxArticulationRootLinkDataPtr cls, physx::PxTransform value) {cls->transform = value;}

ES void PxArticulationRootLinkData_GET_linVel(PxArticulationRootLinkDataPtr cls, physx::PxVec3* GetRetRef) {*GetRetRef = cls->linVel;}
ES void PxArticulationRootLinkData_SET_linVel(PxArticulationRootLinkDataPtr cls, physx::PxVec3 value) {cls->linVel = value;}

ES void PxArticulationRootLinkData_GET_angVel(PxArticulationRootLinkDataPtr cls, physx::PxVec3* GetRetRef) {*GetRetRef = cls->angVel;}
ES void PxArticulationRootLinkData_SET_angVel(PxArticulationRootLinkDataPtr cls, physx::PxVec3 value) {cls->angVel = value;}

ES void PxArticulationRootLinkData_GET_linAcel(PxArticulationRootLinkDataPtr cls, physx::PxVec3* GetRetRef) {*GetRetRef = cls->linAcel;}
ES void PxArticulationRootLinkData_SET_linAcel(PxArticulationRootLinkDataPtr cls, physx::PxVec3 value) {cls->linAcel = value;}

ES void PxArticulationRootLinkData_GET_angAcel(PxArticulationRootLinkDataPtr cls, physx::PxVec3* GetRetRef) {*GetRetRef = cls->angAcel;}
ES void PxArticulationRootLinkData_SET_angAcel(PxArticulationRootLinkDataPtr cls, physx::PxVec3 value) {cls->angAcel = value;}

ES void Freer_physx_PxArticulationCachePtr(PxArticulationCachePtr ptr){
    delete ptr;
}

ES PxArticulationCachePtr Ctor_physx_PxArticulationCachePtr_(){
    return (PxArticulationCachePtr) new std::remove_pointer<PxArticulationCachePtr>::type();
}

ES PxKinematicJacobianPtr PxArticulationCache_GET_jacobian(PxArticulationCachePtr cls) {return (PxKinematicJacobianPtr)cls->jacobian;}
ES void PxArticulationCache_SET_jacobian(PxArticulationCachePtr cls, PxKinematicJacobianPtr value) {cls->jacobian = value;}

ES float* PxArticulationCache_GET_massMatrix(PxArticulationCachePtr cls) {return (float*)cls->massMatrix;}
ES void PxArticulationCache_SET_massMatrix(PxArticulationCachePtr cls, float* value) {cls->massMatrix = value;}

ES float* PxArticulationCache_GET_jointVelocity(PxArticulationCachePtr cls) {return (float*)cls->jointVelocity;}
ES void PxArticulationCache_SET_jointVelocity(PxArticulationCachePtr cls, float* value) {cls->jointVelocity = value;}

ES float* PxArticulationCache_GET_jointAcceleration(PxArticulationCachePtr cls) {return (float*)cls->jointAcceleration;}
ES void PxArticulationCache_SET_jointAcceleration(PxArticulationCachePtr cls, float* value) {cls->jointAcceleration = value;}

ES float* PxArticulationCache_GET_jointPosition(PxArticulationCachePtr cls) {return (float*)cls->jointPosition;}
ES void PxArticulationCache_SET_jointPosition(PxArticulationCachePtr cls, float* value) {cls->jointPosition = value;}

ES float* PxArticulationCache_GET_jointForce(PxArticulationCachePtr cls) {return (float*)cls->jointForce;}
ES void PxArticulationCache_SET_jointForce(PxArticulationCachePtr cls, float* value) {cls->jointForce = value;}

ES float* PxArticulationCache_GET_coefficentMatrix(PxArticulationCachePtr cls) {return (float*)cls->coefficentMatrix;}
ES void PxArticulationCache_SET_coefficentMatrix(PxArticulationCachePtr cls, float* value) {cls->coefficentMatrix = value;}

ES float* PxArticulationCache_GET_lambda(PxArticulationCachePtr cls) {return (float*)cls->lambda;}
ES void PxArticulationCache_SET_lambda(PxArticulationCachePtr cls, float* value) {cls->lambda = value;}

ES PxArticulationRootLinkDataPtr PxArticulationCache_GET_rootLinkData(PxArticulationCachePtr cls) {return (PxArticulationRootLinkDataPtr)&cls->rootLinkData;}
ES void PxArticulationCache_SET_rootLinkData(PxArticulationCachePtr cls, PxArticulationRootLinkDataPtr value) {cls->rootLinkData = *value;}

ES void* PxArticulationCache_GET_scratchMemory(PxArticulationCachePtr cls) {return (void*)cls->scratchMemory;}
ES void PxArticulationCache_SET_scratchMemory(PxArticulationCachePtr cls, void* value) {cls->scratchMemory = value;}

ES void* PxArticulationCache_GET_scratchAllocator(PxArticulationCachePtr cls) {return (void*)cls->scratchAllocator;}
ES void PxArticulationCache_SET_scratchAllocator(PxArticulationCachePtr cls, void* value) {cls->scratchAllocator = value;}

ES unsigned int PxArticulationCache_GET_version(PxArticulationCachePtr cls) {return (unsigned int)cls->version;}
ES void PxArticulationCache_SET_version(PxArticulationCachePtr cls, unsigned int value) {cls->version = value;}

ES void void_physx_PxArticulationReducedCoordinate_release(PxArticulationReducedCoordinatePtr wrp_this){
    wrp_this->release();
}

ES void void_physx_PxArticulationReducedCoordinate_setArticulationFlags_PxArticulationFlagsPtr_(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationFlagsPtr wrp_flags){
    wrp_this->setArticulationFlags(*wrp_flags);
}

ES void void_physx_PxArticulationReducedCoordinate_setArticulationFlag_physx_PxArticulationFlagEnum_bool_(PxArticulationReducedCoordinatePtr wrp_this, physx::PxArticulationFlag::Enum wrp_flag, bool wrp_value){
    wrp_this->setArticulationFlag(wrp_flag, wrp_value);
}

ES PxArticulationFlagsPtr PxArticulationFlagsPtr_const_physx_PxArticulationReducedCoordinate_getArticulationFlags(PxArticulationReducedCoordinatePtr wrp_this){
    auto ret = wrp_this->getArticulationFlags();
    auto heap = new char[sizeof PxArticulationFlags];
    std::memcpy(heap, &ret, sizeof PxArticulationFlags);
    return (PxArticulationFlagsPtr) heap;
}

ES unsigned int uint_const_physx_PxArticulationReducedCoordinate_getDofs(PxArticulationReducedCoordinatePtr wrp_this){
    return (unsigned int) wrp_this->getDofs();
}

ES PxArticulationCachePtr physx_PxArticulationCachePtr_const_physx_PxArticulationReducedCoordinate_createCache(PxArticulationReducedCoordinatePtr wrp_this){
    return (PxArticulationCachePtr) wrp_this->createCache();
}

ES unsigned int uint_const_physx_PxArticulationReducedCoordinate_getCacheDataSize(PxArticulationReducedCoordinatePtr wrp_this){
    return (unsigned int) wrp_this->getCacheDataSize();
}

ES void void_physx_PxArticulationReducedCoordinate_zeroCache_physx_PxArticulationCachePtr_(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationCachePtr wrp_cache){
    wrp_this->zeroCache(*wrp_cache);
}

ES void void_physx_PxArticulationReducedCoordinate_applyCache_physx_PxArticulationCachePtr_PxArticulationCacheFlagsPtr_bool_C_(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationCachePtr wrp_cache, PxArticulationCacheFlagsPtr wrp_flag, bool wrp_autowake){
    wrp_this->applyCache(*wrp_cache, *wrp_flag, wrp_autowake);
}

ES void void_const_physx_PxArticulationReducedCoordinate_copyInternalStateToCache_physx_PxArticulationCachePtr_PxArticulationCacheFlagsPtr_C(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationCachePtr wrp_cache, PxArticulationCacheFlagsPtr wrp_flag){
    wrp_this->copyInternalStateToCache(*wrp_cache, *wrp_flag);
}

ES void void_const_physx_PxArticulationReducedCoordinate_releaseCache_physx_PxArticulationCachePtr_(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationCachePtr wrp_cache){
    wrp_this->releaseCache(*wrp_cache);
}

ES void void_const_physx_PxArticulationReducedCoordinate_packJointData_float_float_(PxArticulationReducedCoordinatePtr wrp_this, float* wrp_maximum, float* wrp_reduced){
    wrp_this->packJointData(wrp_maximum, wrp_reduced);
}

ES void void_const_physx_PxArticulationReducedCoordinate_unpackJointData_float_float_(PxArticulationReducedCoordinatePtr wrp_this, float* wrp_reduced, float* wrp_maximum){
    wrp_this->unpackJointData(wrp_reduced, wrp_maximum);
}

ES void void_const_physx_PxArticulationReducedCoordinate_commonInit(PxArticulationReducedCoordinatePtr wrp_this){
    wrp_this->commonInit();
}

ES void void_const_physx_PxArticulationReducedCoordinate_computeGeneralizedGravityForce_physx_PxArticulationCachePtr_(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationCachePtr wrp_cache){
    wrp_this->computeGeneralizedGravityForce(*wrp_cache);
}

ES void void_const_physx_PxArticulationReducedCoordinate_computeCoriolisAndCentrifugalForce_physx_PxArticulationCachePtr_(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationCachePtr wrp_cache){
    wrp_this->computeCoriolisAndCentrifugalForce(*wrp_cache);
}

ES void void_const_physx_PxArticulationReducedCoordinate_computeGeneralizedExternalForce_physx_PxArticulationCachePtr_(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationCachePtr wrp_cache){
    wrp_this->computeGeneralizedExternalForce(*wrp_cache);
}

ES void void_const_physx_PxArticulationReducedCoordinate_computeJointAcceleration_physx_PxArticulationCachePtr_(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationCachePtr wrp_cache){
    wrp_this->computeJointAcceleration(*wrp_cache);
}

ES void void_const_physx_PxArticulationReducedCoordinate_computeJointForce_physx_PxArticulationCachePtr_(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationCachePtr wrp_cache){
    wrp_this->computeJointForce(*wrp_cache);
}

ES void void_const_physx_PxArticulationReducedCoordinate_computeKinematicJacobian_uint_physx_PxArticulationCachePtrC_(PxArticulationReducedCoordinatePtr wrp_this, unsigned int wrp_linkID, PxArticulationCachePtr wrp_cache){
    wrp_this->computeKinematicJacobian(wrp_linkID, *wrp_cache);
}

ES void void_const_physx_PxArticulationReducedCoordinate_computeCoefficentMatrix_physx_PxArticulationCachePtr_(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationCachePtr wrp_cache){
    wrp_this->computeCoefficentMatrix(*wrp_cache);
}

ES bool bool_const_physx_PxArticulationReducedCoordinate_computeLambda_physx_PxArticulationCachePtr_physx_PxArticulationCachePtr_float_uint_CC(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationCachePtr wrp_cache, PxArticulationCachePtr wrp_initialState, float* wrp_jointTorque, unsigned int wrp_maxIter){
    return (bool) wrp_this->computeLambda(*wrp_cache, *wrp_initialState, wrp_jointTorque, wrp_maxIter);
}

ES void void_const_physx_PxArticulationReducedCoordinate_computeGeneralizedMassMatrix_physx_PxArticulationCachePtr_(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationCachePtr wrp_cache){
    wrp_this->computeGeneralizedMassMatrix(*wrp_cache);
}

ES unsigned int uint_const_physx_PxArticulationReducedCoordinate_getNbLoopJoints(PxArticulationReducedCoordinatePtr wrp_this){
    return (unsigned int) wrp_this->getNbLoopJoints();
}

ES unsigned int uint_const_physx_PxArticulationReducedCoordinate_getCoefficentMatrixSize(PxArticulationReducedCoordinatePtr wrp_this){
    return (unsigned int) wrp_this->getCoefficentMatrixSize();
}

ES void void_physx_PxArticulationReducedCoordinate_teleportRootLink_physx_PxTransform_bool_(PxArticulationReducedCoordinatePtr wrp_this, physx::PxTransform* wrp_pose, bool wrp_autowake){
    wrp_this->teleportRootLink(*wrp_pose, wrp_autowake);
}

ES void void_physx_PxArticulationReducedCoordinate_applyCache_physx_PxArticulationCachePtr_PxArticulationCacheFlagsPtr_C(PxArticulationReducedCoordinatePtr wrp_this, PxArticulationCachePtr wrp_cache, PxArticulationCacheFlagsPtr wrp_flag){
    wrp_this->applyCache(*wrp_cache, *wrp_flag);
}
