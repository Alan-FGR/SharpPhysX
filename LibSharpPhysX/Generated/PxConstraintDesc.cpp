// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
ES void Freer_physx_Px1DConstraintFlagPtr(Px1DConstraintFlagPtr ptr){
    delete ptr;
}

ES Px1DConstraintFlagPtr Ctor_physx_Px1DConstraintFlagPtr_(){
    return (Px1DConstraintFlagPtr) new std::remove_pointer<Px1DConstraintFlagPtr>::type();
}

ES SpringModifiersPtr Newer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_SpringModifiersPtr(){
    return new std::remove_pointer<SpringModifiersPtr>::type();
}

ES void Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_SpringModifiersPtr(SpringModifiersPtr ptr){
    delete ptr;
}

ES float SpringModifiers_GET_stiffness(SpringModifiersPtr cls) {return (float)cls->stiffness;}
ES void SpringModifiers_SET_stiffness(SpringModifiersPtr cls, float value) {cls->stiffness = value;}

ES float SpringModifiers_GET_damping(SpringModifiersPtr cls) {return (float)cls->damping;}
ES void SpringModifiers_SET_damping(SpringModifiersPtr cls, float value) {cls->damping = value;}

ES RestitutionModifiersPtr Newer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_RestitutionModifiersPtr(){
    return new std::remove_pointer<RestitutionModifiersPtr>::type();
}

ES void Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_RestitutionModifiersPtr(RestitutionModifiersPtr ptr){
    delete ptr;
}

ES float RestitutionModifiers_GET_restitution(RestitutionModifiersPtr cls) {return (float)cls->restitution;}
ES void RestitutionModifiers_SET_restitution(RestitutionModifiersPtr cls, float value) {cls->restitution = value;}

ES float RestitutionModifiers_GET_velocityThreshold(RestitutionModifiersPtr cls) {return (float)cls->velocityThreshold;}
ES void RestitutionModifiers_SET_velocityThreshold(RestitutionModifiersPtr cls, float value) {cls->velocityThreshold = value;}

ES physx_Px1DConstraint_ANONYMOUS_unionPtr Newer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr(){
    return new std::remove_pointer<physx_Px1DConstraint_ANONYMOUS_unionPtr>::type();
}

ES void Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr(physx_Px1DConstraint_ANONYMOUS_unionPtr ptr){
    delete ptr;
}

ES SpringModifiersPtr _GET_spring(physx_Px1DConstraint_ANONYMOUS_unionPtr cls) {return (SpringModifiersPtr)&cls->spring;}
ES void _SET_spring(physx_Px1DConstraint_ANONYMOUS_unionPtr cls, SpringModifiersPtr value) {cls->spring = *value;}

ES RestitutionModifiersPtr _GET_bounce(physx_Px1DConstraint_ANONYMOUS_unionPtr cls) {return (RestitutionModifiersPtr)&cls->bounce;}
ES void _SET_bounce(physx_Px1DConstraint_ANONYMOUS_unionPtr cls, RestitutionModifiersPtr value) {cls->bounce = *value;}

ES Px1DConstraintPtr Newer_physx_Px1DConstraintPtr(){
    return new std::remove_pointer<Px1DConstraintPtr>::type();
}

ES void Freer_physx_Px1DConstraintPtr(Px1DConstraintPtr ptr){
    delete ptr;
}

ES void Px1DConstraint_GET_linear0(Px1DConstraintPtr cls, physx::PxVec3* GetRetRef) {*GetRetRef = cls->linear0;}
ES void Px1DConstraint_SET_linear0(Px1DConstraintPtr cls, physx::PxVec3 value) {cls->linear0 = value;}

ES float Px1DConstraint_GET_geometricError(Px1DConstraintPtr cls) {return (float)cls->geometricError;}
ES void Px1DConstraint_SET_geometricError(Px1DConstraintPtr cls, float value) {cls->geometricError = value;}

ES void Px1DConstraint_GET_angular0(Px1DConstraintPtr cls, physx::PxVec3* GetRetRef) {*GetRetRef = cls->angular0;}
ES void Px1DConstraint_SET_angular0(Px1DConstraintPtr cls, physx::PxVec3 value) {cls->angular0 = value;}

ES float Px1DConstraint_GET_velocityTarget(Px1DConstraintPtr cls) {return (float)cls->velocityTarget;}
ES void Px1DConstraint_SET_velocityTarget(Px1DConstraintPtr cls, float value) {cls->velocityTarget = value;}

ES void Px1DConstraint_GET_linear1(Px1DConstraintPtr cls, physx::PxVec3* GetRetRef) {*GetRetRef = cls->linear1;}
ES void Px1DConstraint_SET_linear1(Px1DConstraintPtr cls, physx::PxVec3 value) {cls->linear1 = value;}

ES float Px1DConstraint_GET_minImpulse(Px1DConstraintPtr cls) {return (float)cls->minImpulse;}
ES void Px1DConstraint_SET_minImpulse(Px1DConstraintPtr cls, float value) {cls->minImpulse = value;}

ES void Px1DConstraint_GET_angular1(Px1DConstraintPtr cls, physx::PxVec3* GetRetRef) {*GetRetRef = cls->angular1;}
ES void Px1DConstraint_SET_angular1(Px1DConstraintPtr cls, physx::PxVec3 value) {cls->angular1 = value;}

ES float Px1DConstraint_GET_maxImpulse(Px1DConstraintPtr cls) {return (float)cls->maxImpulse;}
ES void Px1DConstraint_SET_maxImpulse(Px1DConstraintPtr cls, float value) {cls->maxImpulse = value;}

ES physx_Px1DConstraint_ANONYMOUS_unionPtr Px1DConstraint_GET_mods(Px1DConstraintPtr cls) {return (physx_Px1DConstraint_ANONYMOUS_unionPtr)&cls->mods;}
ES void Px1DConstraint_SET_mods(Px1DConstraintPtr cls, physx_Px1DConstraint_ANONYMOUS_unionPtr value) {cls->mods = *value;}

ES float Px1DConstraint_GET_forInternalUse(Px1DConstraintPtr cls) {return (float)cls->forInternalUse;}
ES void Px1DConstraint_SET_forInternalUse(Px1DConstraintPtr cls, float value) {cls->forInternalUse = value;}

ES unsigned short Px1DConstraint_GET_flags(Px1DConstraintPtr cls) {return (unsigned short)cls->flags;}
ES void Px1DConstraint_SET_flags(Px1DConstraintPtr cls, unsigned short value) {cls->flags = value;}

ES unsigned short Px1DConstraint_GET_solveHint(Px1DConstraintPtr cls) {return (unsigned short)cls->solveHint;}
ES void Px1DConstraint_SET_solveHint(Px1DConstraintPtr cls, unsigned short value) {cls->solveHint = value;}

ES void Freer_physx_PxConstraintInvMassScalePtr(PxConstraintInvMassScalePtr ptr){
    delete ptr;
}

ES PxConstraintInvMassScalePtr Ctor_physx_PxConstraintInvMassScalePtr_(){
    return (PxConstraintInvMassScalePtr) new std::remove_pointer<PxConstraintInvMassScalePtr>::type();
}

ES PxConstraintInvMassScalePtr Ctor_physx_PxConstraintInvMassScalePtr_float_float_float_float(float wrp_lin0, float wrp_ang0, float wrp_lin1, float wrp_ang1){
    return (PxConstraintInvMassScalePtr) new std::remove_pointer<PxConstraintInvMassScalePtr>::type(wrp_lin0, wrp_ang0, wrp_lin1, wrp_ang1);
}

ES float PxConstraintInvMassScale_GET_linear0(PxConstraintInvMassScalePtr cls) {return (float)cls->linear0;}
ES void PxConstraintInvMassScale_SET_linear0(PxConstraintInvMassScalePtr cls, float value) {cls->linear0 = value;}

ES float PxConstraintInvMassScale_GET_angular0(PxConstraintInvMassScalePtr cls) {return (float)cls->angular0;}
ES void PxConstraintInvMassScale_SET_angular0(PxConstraintInvMassScalePtr cls, float value) {cls->angular0 = value;}

ES float PxConstraintInvMassScale_GET_linear1(PxConstraintInvMassScalePtr cls) {return (float)cls->linear1;}
ES void PxConstraintInvMassScale_SET_linear1(PxConstraintInvMassScalePtr cls, float value) {cls->linear1 = value;}

ES float PxConstraintInvMassScale_GET_angular1(PxConstraintInvMassScalePtr cls) {return (float)cls->angular1;}
ES void PxConstraintInvMassScale_SET_angular1(PxConstraintInvMassScalePtr cls, float value) {cls->angular1 = value;}

ES void void_physx_PxConstraintVisualizer_visualizeJointFrames_physx_PxTransform_physx_PxTransform_(PxConstraintVisualizerPtr wrp_this, physx::PxTransform* wrp_parent, physx::PxTransform* wrp_child){
    wrp_this->visualizeJointFrames(*wrp_parent, *wrp_child);
}

ES void void_physx_PxConstraintVisualizer_visualizeLinearLimit_physx_PxTransform_physx_PxTransform_float_bool_(PxConstraintVisualizerPtr wrp_this, physx::PxTransform* wrp_t0, physx::PxTransform* wrp_t1, float wrp_value, bool wrp_active){
    wrp_this->visualizeLinearLimit(*wrp_t0, *wrp_t1, wrp_value, wrp_active);
}

ES void void_physx_PxConstraintVisualizer_visualizeAngularLimit_physx_PxTransform_float_float_bool_(PxConstraintVisualizerPtr wrp_this, physx::PxTransform* wrp_t0, float wrp_lower, float wrp_upper, bool wrp_active){
    wrp_this->visualizeAngularLimit(*wrp_t0, wrp_lower, wrp_upper, wrp_active);
}

ES void void_physx_PxConstraintVisualizer_visualizeLimitCone_physx_PxTransform_float_float_bool_(PxConstraintVisualizerPtr wrp_this, physx::PxTransform* wrp_t, float wrp_tanQSwingY, float wrp_tanQSwingZ, bool wrp_active){
    wrp_this->visualizeLimitCone(*wrp_t, wrp_tanQSwingY, wrp_tanQSwingZ, wrp_active);
}

ES void void_physx_PxConstraintVisualizer_visualizeDoubleCone_physx_PxTransform_float_bool_(PxConstraintVisualizerPtr wrp_this, physx::PxTransform* wrp_t, float wrp_angle, bool wrp_active){
    wrp_this->visualizeDoubleCone(*wrp_t, wrp_angle, wrp_active);
}

ES void void_physx_PxConstraintVisualizer_visualizeLine_physx_PxVec3_physx_PxVec3_uint_(PxConstraintVisualizerPtr wrp_this, physx::PxVec3* wrp_p0, physx::PxVec3* wrp_p1, unsigned int wrp_color){
    wrp_this->visualizeLine(*wrp_p0, *wrp_p1, wrp_color);
}

ES void* IntPtr_physx_PxConstraintConnector_prepareData(PxConstraintConnectorPtr wrp_this){
    return (void*) wrp_this->prepareData();
}

ES void void_physx_PxConstraintConnector_onConstraintRelease(PxConstraintConnectorPtr wrp_this){
    wrp_this->onConstraintRelease();
}

ES void void_physx_PxConstraintConnector_onComShift_uint_(PxConstraintConnectorPtr wrp_this, unsigned int wrp_actor){
    wrp_this->onComShift(wrp_actor);
}

ES void void_physx_PxConstraintConnector_onOriginShift_physx_PxVec3_(PxConstraintConnectorPtr wrp_this, physx::PxVec3* wrp_shift){
    wrp_this->onOriginShift(*wrp_shift);
}

ES void* IntPtr_physx_PxConstraintConnector_getExternalReference_uint_(PxConstraintConnectorPtr wrp_this, unsigned int* wrp_typeID){
    return (void*) wrp_this->getExternalReference(*wrp_typeID);
}

ES PxBasePtr physx_PxBasePtr_physx_PxConstraintConnector_getSerializable(PxConstraintConnectorPtr wrp_this){
    return (PxBasePtr) wrp_this->getSerializable();
}

ES PxConstraintSolverPrep PxConstraintSolverPrep_const_physx_PxConstraintConnector_getPrep(PxConstraintConnectorPtr wrp_this){
    return (PxConstraintSolverPrep) wrp_this->getPrep();
}

ES void* IntPtr_const_physx_PxConstraintConnector_getConstantBlock(PxConstraintConnectorPtr wrp_this){
    return (void*) wrp_this->getConstantBlock();
}
