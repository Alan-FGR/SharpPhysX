// Generated by minBND 5.1.78.26 - Â© github.com/Alan-FGR
//DEBUG: UnitNode  - 0
//DEBUG: NamespaceNode physx - 45-197
//DEBUG: FunctionNode physx::getBinaryMetaData_PxBase - 188
//ERRORS OCCURED IN physx::getBinaryMetaData_PxBase
//////Type PxOutputStreamPtr explicitly forbidden by user configuration

//DEBUG: FunctionNode physx::operator| - 64
//Internal Op

//DEBUG: FunctionNode physx::operator& - 64
//Internal Op

//DEBUG: FunctionNode physx::operator~ - 64
//Internal Op

//DEBUG: ClassNode physx::PxBaseFlag - 54-61
//DEBUG: EnumNode physx::PxBaseFlag::Enum - 56-60
// TODO EnumNode.GenWrapper()

//DEBUG: ClassNode physx::PxBase - 73-194
//DEBUG: DeclNode physx::PxBase::is - 101
// TODO DeclNode.GenWrapper()

//DEBUG: DeclNode physx::PxBase::is - 111
// TODO DeclNode.GenWrapper()

//DEBUG: DeclNode physx::PxBase::typeMatch - 180
// TODO DeclNode.GenWrapper()

//DEBUG: DeclNode physx::PxBase - 188
// TODO DeclNode.GenWrapper()

//DEBUG: MethodNode physx::PxBase::release - 85
ES void void_physx_PxBase_release(PxBasePtr wrp_this){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxBasePtr, man: physx.PxBasePtr, kind: PtrStruct
    wrp_this->release();
}

//DEBUG: MethodNode physx::PxBase::getConcreteTypeName - 91
ES char* string_const_physx_PxBase_getConcreteTypeName(PxBasePtr wrp_this){
    //RET nat: char*, man: string, ret: True, kind: Value
    //PAR nat: PxBasePtr, man: physx.PxBasePtr, kind: PtrStruct
    return (char*) wrp_this->getConcreteTypeName();
}

//DEBUG: MethodNode physx::PxBase::is - 101
//ERRORS OCCURED IN physx::PxBase::is
////################################################################## FIXME
//Unparsed type ( TODO ): T*

//DEBUG: MethodNode physx::PxBase::is - 111
//ERRORS OCCURED IN physx::PxBase::is
////################################################################## FIXME
//Unparsed type ( TODO ): T*

//DEBUG: MethodNode physx::PxBase::getConcreteType - 119
ES unsigned short ushort_const_physx_PxBase_getConcreteType(PxBasePtr wrp_this){
    //RET nat: unsigned short, man: ushort, ret: True, kind: Value
    //PAR nat: PxBasePtr, man: physx.PxBasePtr, kind: PtrStruct
    return (unsigned short) wrp_this->getConcreteType();
}

//DEBUG: MethodNode physx::PxBase::setBaseFlag - 127
ES void void_physx_PxBase_setBaseFlag_physx_PxBaseFlagEnum_bool_(PxBasePtr wrp_this, physx::PxBaseFlag::Enum wrp_flag, bool wrp_value){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxBasePtr, man: physx.PxBasePtr, kind: PtrStruct
    //PAR nat: physx::PxBaseFlag::Enum, man: physx.PxBaseFlagEnum, kind: Value
    //PAR nat: bool, man: bool, kind: Value
    wrp_this->setBaseFlag(wrp_flag, wrp_value);
}

//DEBUG: MethodNode physx::PxBase::setBaseFlags - 136
ES void void_physx_PxBase_setBaseFlags_PxBaseFlagsPtr_(PxBasePtr wrp_this, PxBaseFlagsPtr wrp_inFlags){
    //RET nat: void, man: void, ret: True, kind: Value
    //PAR nat: PxBasePtr, man: physx.PxBasePtr, kind: PtrStruct
    //PAR nat: PxBaseFlagsPtr, man: PxBaseFlagsPtr, kind: PtrStruct
    wrp_this->setBaseFlags(*wrp_inFlags);
}

//DEBUG: MethodNode physx::PxBase::getBaseFlags - 145
ES PxBaseFlagsPtr PxBaseFlagsPtr_const_physx_PxBase_getBaseFlags(PxBasePtr wrp_this){
    //RET nat: PxBaseFlagsPtr, man: PxBaseFlagsPtr, ret: True, kind: PtrStruct
    //PAR nat: PxBasePtr, man: physx.PxBasePtr, kind: PtrStruct
    auto ret = wrp_this->getBaseFlags();
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

//DEBUG: MethodNode physx::PxBase::isReleasable - 156
ES bool bool_const_physx_PxBase_isReleasable(PxBasePtr wrp_this){
    //RET nat: bool, man: bool, ret: True, kind: Value
    //PAR nat: PxBasePtr, man: physx.PxBasePtr, kind: PtrStruct
    return (bool) wrp_this->isReleasable();
}

//DEBUG: MethodNode physx::PxBase::operator= - 73
//ERRORS OCCURED IN physx::PxBase::operator=
//Implicit Function/Method
//Unbindable Operator: Equal

//DEBUG: DeclNode physx::PxType - 49
// TODO DeclNode.GenWrapper()

//DEBUG: DeclNode physx::PxBaseFlags - 63
// TODO DeclNode.GenWrapper()
