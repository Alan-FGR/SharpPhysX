// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
ES void void_physx_PxBase_release(PxBasePtr wrp_this){
    wrp_this->release();
}

ES char* string_const_physx_PxBase_getConcreteTypeName(PxBasePtr wrp_this){
    return (char*) wrp_this->getConcreteTypeName();
}

ES unsigned short ushort_const_physx_PxBase_getConcreteType(PxBasePtr wrp_this){
    return (unsigned short) wrp_this->getConcreteType();
}

ES void void_physx_PxBase_setBaseFlag_physx_PxBaseFlagEnum_bool_(PxBasePtr wrp_this, physx::PxBaseFlag::Enum wrp_flag, bool wrp_value){
    wrp_this->setBaseFlag(wrp_flag, wrp_value);
}

ES void void_physx_PxBase_setBaseFlags_PxBaseFlagsPtr_(PxBasePtr wrp_this, PxBaseFlagsPtr wrp_inFlags){
    wrp_this->setBaseFlags(*wrp_inFlags);
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_const_physx_PxBase_getBaseFlags(PxBasePtr wrp_this){
    auto ret = wrp_this->getBaseFlags();
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES bool bool_const_physx_PxBase_isReleasable(PxBasePtr wrp_this){
    return (bool) wrp_this->isReleasable();
}
