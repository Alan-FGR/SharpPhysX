// Generated by minBND 5.1.93.2 - Â© github.com/Alan-FGR

ES PxBaseFlagsPtr PxBaseFlagsPtr_operator_Ptr_Pipe_PxBaseFlagEnum_PxBaseFlagEnum_(physx::PxBaseFlag::Enum wrp_a, physx::PxBaseFlag::Enum wrp_b){
    auto ret = ::physx::operator|(wrp_a, wrp_b);
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_operator_Ptr_Amp_PxBaseFlagEnum_PxBaseFlagEnum_(physx::PxBaseFlag::Enum wrp_a, physx::PxBaseFlag::Enum wrp_b){
    auto ret = ::physx::operator&(wrp_a, wrp_b);
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_operator_Ptr_Tilde_PxBaseFlagEnum_(physx::PxBaseFlag::Enum wrp_a){
    auto ret = ::physx::operator~(wrp_a);
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES void void_PxBasePtr_releasePtr(PxBasePtr wrp_this){
    wrp_this->release();
}

ES char* string_const_PxBasePtr_getConcreteTypeNamePtr(PxBasePtr wrp_this){
    return (char*) wrp_this->getConcreteTypeName();
}

ES PxType ushort_const_PxBasePtr_getConcreteTypePtr(PxBasePtr wrp_this){
    return (PxType) wrp_this->getConcreteType();
}

ES void void_PxBasePtr_setBaseFlagPtr_PxBaseFlagEnum_bool_(PxBasePtr wrp_this, physx::PxBaseFlag::Enum wrp_flag, bool wrp_value){
    wrp_this->setBaseFlag(wrp_flag, wrp_value);
}

ES void void_PxBasePtr_setBaseFlagsPtr_PxBaseFlagsPtr_(PxBasePtr wrp_this, PxBaseFlagsPtr wrp_inFlags){
    wrp_this->setBaseFlags(*wrp_inFlags);
}

ES PxBaseFlagsPtr PxBaseFlagsPtr_const_PxBasePtr_getBaseFlagsPtr(PxBasePtr wrp_this){
    auto ret = wrp_this->getBaseFlags();
    auto heap = new char[sizeof PxBaseFlags];
    std::memcpy(heap, &ret, sizeof PxBaseFlags);
    return (PxBaseFlagsPtr) heap;
}

ES bool bool_const_PxBasePtr_isReleasablePtr(PxBasePtr wrp_this){
    return (bool) wrp_this->isReleasable();
}

