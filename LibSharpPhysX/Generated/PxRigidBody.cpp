// Generated by minBND 5.1.91.17 - Â© github.com/Alan-FGR

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_operator_Ptr_Pipe_PxRigidBodyFlagEnum_PxRigidBodyFlagEnum_(physx::PxRigidBodyFlag::Enum wrp_a, physx::PxRigidBodyFlag::Enum wrp_b){
    auto ret = ::physx::operator|(wrp_a, wrp_b);
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_operator_Ptr_Amp_PxRigidBodyFlagEnum_PxRigidBodyFlagEnum_(physx::PxRigidBodyFlag::Enum wrp_a, physx::PxRigidBodyFlag::Enum wrp_b){
    auto ret = ::physx::operator&(wrp_a, wrp_b);
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_operator_Ptr_Tilde_PxRigidBodyFlagEnum_(physx::PxRigidBodyFlag::Enum wrp_a){
    auto ret = ::physx::operator~(wrp_a);
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES void void_PxRigidBodyPtr_setCMassLocalPosePtr_PxTransform_(PxRigidBodyPtr wrp_this, physx::PxTransform* wrp_pose){
    wrp_this->setCMassLocalPose(*wrp_pose);
}

ES void PxTransform_const_PxRigidBodyPtr_getCMassLocalPosePtr(physx::PxTransform* nRetRef, PxRigidBodyPtr wrp_this){
    *nRetRef = wrp_this->getCMassLocalPose();
}

ES void void_PxRigidBodyPtr_setMassPtr_float_(PxRigidBodyPtr wrp_this, PxReal wrp_mass){
    wrp_this->setMass(wrp_mass);
}

ES PxReal float_const_PxRigidBodyPtr_getMassPtr(PxRigidBodyPtr wrp_this){
    return (PxReal) wrp_this->getMass();
}

ES PxReal float_const_PxRigidBodyPtr_getInvMassPtr(PxRigidBodyPtr wrp_this){
    return (PxReal) wrp_this->getInvMass();
}

ES void void_PxRigidBodyPtr_setMassSpaceInertiaTensorPtr_PxVec3_(PxRigidBodyPtr wrp_this, physx::PxVec3* wrp_m){
    wrp_this->setMassSpaceInertiaTensor(*wrp_m);
}

ES void PxVec3_const_PxRigidBodyPtr_getMassSpaceInertiaTensorPtr(physx::PxVec3* nRetRef, PxRigidBodyPtr wrp_this){
    *nRetRef = wrp_this->getMassSpaceInertiaTensor();
}

ES void PxVec3_const_PxRigidBodyPtr_getMassSpaceInvInertiaTensorPtr(physx::PxVec3* nRetRef, PxRigidBodyPtr wrp_this){
    *nRetRef = wrp_this->getMassSpaceInvInertiaTensor();
}

ES void void_PxRigidBodyPtr_setLinearDampingPtr_float_(PxRigidBodyPtr wrp_this, PxReal wrp_linDamp){
    wrp_this->setLinearDamping(wrp_linDamp);
}

ES PxReal float_const_PxRigidBodyPtr_getLinearDampingPtr(PxRigidBodyPtr wrp_this){
    return (PxReal) wrp_this->getLinearDamping();
}

ES void void_PxRigidBodyPtr_setAngularDampingPtr_float_(PxRigidBodyPtr wrp_this, PxReal wrp_angDamp){
    wrp_this->setAngularDamping(wrp_angDamp);
}

ES PxReal float_const_PxRigidBodyPtr_getAngularDampingPtr(PxRigidBodyPtr wrp_this){
    return (PxReal) wrp_this->getAngularDamping();
}

ES void PxVec3_const_PxRigidBodyPtr_getLinearVelocityPtr(physx::PxVec3* nRetRef, PxRigidBodyPtr wrp_this){
    *nRetRef = wrp_this->getLinearVelocity();
}

ES void void_PxRigidBodyPtr_setLinearVelocityPtr_PxVec3_bool_(PxRigidBodyPtr wrp_this, physx::PxVec3* wrp_linVel, bool wrp_autowake){
    wrp_this->setLinearVelocity(*wrp_linVel, wrp_autowake);
}

ES void PxVec3_const_PxRigidBodyPtr_getAngularVelocityPtr(physx::PxVec3* nRetRef, PxRigidBodyPtr wrp_this){
    *nRetRef = wrp_this->getAngularVelocity();
}

ES void void_PxRigidBodyPtr_setAngularVelocityPtr_PxVec3_bool_(PxRigidBodyPtr wrp_this, physx::PxVec3* wrp_angVel, bool wrp_autowake){
    wrp_this->setAngularVelocity(*wrp_angVel, wrp_autowake);
}

ES void void_PxRigidBodyPtr_setMaxAngularVelocityPtr_float_(PxRigidBodyPtr wrp_this, PxReal wrp_maxAngVel){
    wrp_this->setMaxAngularVelocity(wrp_maxAngVel);
}

ES PxReal float_const_PxRigidBodyPtr_getMaxAngularVelocityPtr(PxRigidBodyPtr wrp_this){
    return (PxReal) wrp_this->getMaxAngularVelocity();
}

ES void void_PxRigidBodyPtr_setMaxLinearVelocityPtr_float_(PxRigidBodyPtr wrp_this, PxReal wrp_maxLinVel){
    wrp_this->setMaxLinearVelocity(wrp_maxLinVel);
}

ES PxReal float_const_PxRigidBodyPtr_getMaxLinearVelocityPtr(PxRigidBodyPtr wrp_this){
    return (PxReal) wrp_this->getMaxLinearVelocity();
}

ES void void_PxRigidBodyPtr_addForcePtr_PxVec3_PxForceModeEnum_bool_(PxRigidBodyPtr wrp_this, physx::PxVec3* wrp_force, physx::PxForceMode::Enum wrp_mode, bool wrp_autowake){
    wrp_this->addForce(*wrp_force, wrp_mode, wrp_autowake);
}

ES void void_PxRigidBodyPtr_addTorquePtr_PxVec3_PxForceModeEnum_bool_(PxRigidBodyPtr wrp_this, physx::PxVec3* wrp_torque, physx::PxForceMode::Enum wrp_mode, bool wrp_autowake){
    wrp_this->addTorque(*wrp_torque, wrp_mode, wrp_autowake);
}

ES void void_PxRigidBodyPtr_clearForcePtr_PxForceModeEnum_(PxRigidBodyPtr wrp_this, physx::PxForceMode::Enum wrp_mode){
    wrp_this->clearForce(wrp_mode);
}

ES void void_PxRigidBodyPtr_clearTorquePtr_PxForceModeEnum_(PxRigidBodyPtr wrp_this, physx::PxForceMode::Enum wrp_mode){
    wrp_this->clearTorque(wrp_mode);
}

ES void void_PxRigidBodyPtr_setForceAndTorquePtr_PxVec3_PxVec3_PxForceModeEnum_(PxRigidBodyPtr wrp_this, physx::PxVec3* wrp_force, physx::PxVec3* wrp_torque, physx::PxForceMode::Enum wrp_mode){
    wrp_this->setForceAndTorque(*wrp_force, *wrp_torque, wrp_mode);
}

ES void void_PxRigidBodyPtr_setRigidBodyFlagPtr_PxRigidBodyFlagEnum_bool_(PxRigidBodyPtr wrp_this, physx::PxRigidBodyFlag::Enum wrp_flag, bool wrp_value){
    wrp_this->setRigidBodyFlag(wrp_flag, wrp_value);
}

ES void void_PxRigidBodyPtr_setRigidBodyFlagsPtr_PxRigidBodyFlagsPtr_(PxRigidBodyPtr wrp_this, PxRigidBodyFlagsPtr wrp_inFlags){
    wrp_this->setRigidBodyFlags(*wrp_inFlags);
}

ES PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_const_PxRigidBodyPtr_getRigidBodyFlagsPtr(PxRigidBodyPtr wrp_this){
    auto ret = wrp_this->getRigidBodyFlags();
    auto heap = new char[sizeof PxRigidBodyFlags];
    std::memcpy(heap, &ret, sizeof PxRigidBodyFlags);
    return (PxRigidBodyFlagsPtr) heap;
}

ES void void_PxRigidBodyPtr_setMinCCDAdvanceCoefficientPtr_float_(PxRigidBodyPtr wrp_this, PxReal wrp_advanceCoefficient){
    wrp_this->setMinCCDAdvanceCoefficient(wrp_advanceCoefficient);
}

ES PxReal float_const_PxRigidBodyPtr_getMinCCDAdvanceCoefficientPtr(PxRigidBodyPtr wrp_this){
    return (PxReal) wrp_this->getMinCCDAdvanceCoefficient();
}

ES void void_PxRigidBodyPtr_setMaxDepenetrationVelocityPtr_float_(PxRigidBodyPtr wrp_this, PxReal wrp_biasClamp){
    wrp_this->setMaxDepenetrationVelocity(wrp_biasClamp);
}

ES PxReal float_const_PxRigidBodyPtr_getMaxDepenetrationVelocityPtr(PxRigidBodyPtr wrp_this){
    return (PxReal) wrp_this->getMaxDepenetrationVelocity();
}

ES void void_PxRigidBodyPtr_setMaxContactImpulsePtr_float_(PxRigidBodyPtr wrp_this, PxReal wrp_maxImpulse){
    wrp_this->setMaxContactImpulse(wrp_maxImpulse);
}

ES PxReal float_const_PxRigidBodyPtr_getMaxContactImpulsePtr(PxRigidBodyPtr wrp_this){
    return (PxReal) wrp_this->getMaxContactImpulse();
}

ES PxU32 uint_const_PxRigidBodyPtr_getInternalIslandNodeIndexPtr(PxRigidBodyPtr wrp_this){
    return (PxU32) wrp_this->getInternalIslandNodeIndex();
}

ES void void_PxRigidBodyPtr_setLinearVelocityPtr_PxVec3_(PxRigidBodyPtr wrp_this, physx::PxVec3* wrp_linVel){
    wrp_this->setLinearVelocity(*wrp_linVel);
}

ES void void_PxRigidBodyPtr_setAngularVelocityPtr_PxVec3_(PxRigidBodyPtr wrp_this, physx::PxVec3* wrp_angVel){
    wrp_this->setAngularVelocity(*wrp_angVel);
}

ES void void_PxRigidBodyPtr_addForcePtr_PxVec3_(PxRigidBodyPtr wrp_this, physx::PxVec3* wrp_force){
    wrp_this->addForce(*wrp_force);
}

ES void void_PxRigidBodyPtr_addForcePtr_PxVec3_PxForceModeEnum_(PxRigidBodyPtr wrp_this, physx::PxVec3* wrp_force, physx::PxForceMode::Enum wrp_mode){
    wrp_this->addForce(*wrp_force, wrp_mode);
}

ES void void_PxRigidBodyPtr_addTorquePtr_PxVec3_(PxRigidBodyPtr wrp_this, physx::PxVec3* wrp_torque){
    wrp_this->addTorque(*wrp_torque);
}

ES void void_PxRigidBodyPtr_addTorquePtr_PxVec3_PxForceModeEnum_(PxRigidBodyPtr wrp_this, physx::PxVec3* wrp_torque, physx::PxForceMode::Enum wrp_mode){
    wrp_this->addTorque(*wrp_torque, wrp_mode);
}

ES void void_PxRigidBodyPtr_clearForcePtr(PxRigidBodyPtr wrp_this){
    wrp_this->clearForce();
}

ES void void_PxRigidBodyPtr_clearTorquePtr(PxRigidBodyPtr wrp_this){
    wrp_this->clearTorque();
}

ES void void_PxRigidBodyPtr_setForceAndTorquePtr_PxVec3_PxVec3_(PxRigidBodyPtr wrp_this, physx::PxVec3* wrp_force, physx::PxVec3* wrp_torque){
    wrp_this->setForceAndTorque(*wrp_force, *wrp_torque);
}

