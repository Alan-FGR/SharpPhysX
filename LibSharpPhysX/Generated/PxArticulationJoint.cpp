// Generated by minBND 5.1.91.17 - Â© github.com/Alan-FGR

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Pipe_PxArticulationAxisEnum_PxArticulationAxisEnum_(physx::PxArticulationAxis::Enum wrp_a, physx::PxArticulationAxis::Enum wrp_b){
    auto ret = ::physx::operator|(wrp_a, wrp_b);
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Amp_PxArticulationAxisEnum_PxArticulationAxisEnum_(physx::PxArticulationAxis::Enum wrp_a, physx::PxArticulationAxis::Enum wrp_b){
    auto ret = ::physx::operator&(wrp_a, wrp_b);
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Tilde_PxArticulationAxisEnum_(physx::PxArticulationAxis::Enum wrp_a){
    auto ret = ::physx::operator~(wrp_a);
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_operator_Ptr_Pipe_PxArticulationMotionEnum_PxArticulationMotionEnum_(physx::PxArticulationMotion::Enum wrp_a, physx::PxArticulationMotion::Enum wrp_b){
    auto ret = ::physx::operator|(wrp_a, wrp_b);
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_operator_Ptr_Amp_PxArticulationMotionEnum_PxArticulationMotionEnum_(physx::PxArticulationMotion::Enum wrp_a, physx::PxArticulationMotion::Enum wrp_b){
    auto ret = ::physx::operator&(wrp_a, wrp_b);
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES PxArticulationMotionsPtr PxArticulationMotionsPtr_operator_Ptr_Tilde_PxArticulationMotionEnum_(physx::PxArticulationMotion::Enum wrp_a){
    auto ret = ::physx::operator~(wrp_a);
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

ES PxArticulationLinkPtr PxArticulationLinkPtr_const_PxArticulationJointBasePtr_getParentArticulationLinkPtr(PxArticulationJointBasePtr wrp_this){
    return (PxArticulationLinkPtr) &wrp_this->getParentArticulationLink();
}

ES void void_PxArticulationJointBasePtr_setParentPosePtr_PxTransform_(PxArticulationJointBasePtr wrp_this, physx::PxTransform* wrp_pose){
    wrp_this->setParentPose(*wrp_pose);
}

ES void PxTransform_const_PxArticulationJointBasePtr_getParentPosePtr(physx::PxTransform* nRetRef, PxArticulationJointBasePtr wrp_this){
    *nRetRef = wrp_this->getParentPose();
}

ES PxArticulationLinkPtr PxArticulationLinkPtr_const_PxArticulationJointBasePtr_getChildArticulationLinkPtr(PxArticulationJointBasePtr wrp_this){
    return (PxArticulationLinkPtr) &wrp_this->getChildArticulationLink();
}

ES void void_PxArticulationJointBasePtr_setChildPosePtr_PxTransform_(PxArticulationJointBasePtr wrp_this, physx::PxTransform* wrp_pose){
    wrp_this->setChildPose(*wrp_pose);
}

ES void PxTransform_const_PxArticulationJointBasePtr_getChildPosePtr(physx::PxTransform* nRetRef, PxArticulationJointBasePtr wrp_this){
    *nRetRef = wrp_this->getChildPose();
}

ES void void_PxArticulationJointPtr_setTargetOrientationPtr_PxQuat_(PxArticulationJointPtr wrp_this, physx::PxQuat* wrp_orientation){
    wrp_this->setTargetOrientation(*wrp_orientation);
}

ES void PxQuat_const_PxArticulationJointPtr_getTargetOrientationPtr(physx::PxQuat* nRetRef, PxArticulationJointPtr wrp_this){
    *nRetRef = wrp_this->getTargetOrientation();
}

ES void void_PxArticulationJointPtr_setTargetVelocityPtr_PxVec3_(PxArticulationJointPtr wrp_this, physx::PxVec3* wrp_velocity){
    wrp_this->setTargetVelocity(*wrp_velocity);
}

ES void PxVec3_const_PxArticulationJointPtr_getTargetVelocityPtr(physx::PxVec3* nRetRef, PxArticulationJointPtr wrp_this){
    *nRetRef = wrp_this->getTargetVelocity();
}

ES void void_PxArticulationJointPtr_setDriveTypePtr_PxArticulationJointDriveTypeEnum_(PxArticulationJointPtr wrp_this, physx::PxArticulationJointDriveType::Enum wrp_driveType){
    wrp_this->setDriveType(wrp_driveType);
}

ES physx::PxArticulationJointDriveType::Enum PxArticulationJointDriveTypeEnum_const_PxArticulationJointPtr_getDriveTypePtr(PxArticulationJointPtr wrp_this){
    return (physx::PxArticulationJointDriveType::Enum) wrp_this->getDriveType();
}

ES void void_PxArticulationJointPtr_setStiffnessPtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_spring){
    wrp_this->setStiffness(wrp_spring);
}

ES PxReal float_const_PxArticulationJointPtr_getStiffnessPtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getStiffness();
}

ES void void_PxArticulationJointPtr_setDampingPtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_damping){
    wrp_this->setDamping(wrp_damping);
}

ES PxReal float_const_PxArticulationJointPtr_getDampingPtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getDamping();
}

ES void void_PxArticulationJointPtr_setInternalCompliancePtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_compliance){
    wrp_this->setInternalCompliance(wrp_compliance);
}

ES PxReal float_const_PxArticulationJointPtr_getInternalCompliancePtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getInternalCompliance();
}

ES void void_PxArticulationJointPtr_setExternalCompliancePtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_compliance){
    wrp_this->setExternalCompliance(wrp_compliance);
}

ES PxReal float_const_PxArticulationJointPtr_getExternalCompliancePtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getExternalCompliance();
}

ES void void_PxArticulationJointPtr_setSwingLimitPtr_float_float_(PxArticulationJointPtr wrp_this, PxReal wrp_zLimit, PxReal wrp_yLimit){
    wrp_this->setSwingLimit(wrp_zLimit, wrp_yLimit);
}

ES void void_const_PxArticulationJointPtr_getSwingLimitPtr_float_float_(PxArticulationJointPtr wrp_this, PxReal* wrp_zLimit, PxReal* wrp_yLimit){
    wrp_this->getSwingLimit(*wrp_zLimit, *wrp_yLimit);
}

ES void void_PxArticulationJointPtr_setTangentialStiffnessPtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_spring){
    wrp_this->setTangentialStiffness(wrp_spring);
}

ES PxReal float_const_PxArticulationJointPtr_getTangentialStiffnessPtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getTangentialStiffness();
}

ES void void_PxArticulationJointPtr_setTangentialDampingPtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_damping){
    wrp_this->setTangentialDamping(wrp_damping);
}

ES PxReal float_const_PxArticulationJointPtr_getTangentialDampingPtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getTangentialDamping();
}

ES void void_PxArticulationJointPtr_setSwingLimitContactDistancePtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_contactDistance){
    wrp_this->setSwingLimitContactDistance(wrp_contactDistance);
}

ES PxReal float_const_PxArticulationJointPtr_getSwingLimitContactDistancePtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getSwingLimitContactDistance();
}

ES void void_PxArticulationJointPtr_setSwingLimitEnabledPtr_bool_(PxArticulationJointPtr wrp_this, bool wrp_enabled){
    wrp_this->setSwingLimitEnabled(wrp_enabled);
}

ES bool bool_const_PxArticulationJointPtr_getSwingLimitEnabledPtr(PxArticulationJointPtr wrp_this){
    return (bool) wrp_this->getSwingLimitEnabled();
}

ES void void_PxArticulationJointPtr_setTwistLimitPtr_float_float_(PxArticulationJointPtr wrp_this, PxReal wrp_lower, PxReal wrp_upper){
    wrp_this->setTwistLimit(wrp_lower, wrp_upper);
}

ES void void_const_PxArticulationJointPtr_getTwistLimitPtr_float_float_(PxArticulationJointPtr wrp_this, PxReal* wrp_lower, PxReal* wrp_upper){
    wrp_this->getTwistLimit(*wrp_lower, *wrp_upper);
}

ES void void_PxArticulationJointPtr_setTwistLimitEnabledPtr_bool_(PxArticulationJointPtr wrp_this, bool wrp_enabled){
    wrp_this->setTwistLimitEnabled(wrp_enabled);
}

ES bool bool_const_PxArticulationJointPtr_getTwistLimitEnabledPtr(PxArticulationJointPtr wrp_this){
    return (bool) wrp_this->getTwistLimitEnabled();
}

ES void void_PxArticulationJointPtr_setTwistLimitContactDistancePtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_contactDistance){
    wrp_this->setTwistLimitContactDistance(wrp_contactDistance);
}

ES PxReal float_const_PxArticulationJointPtr_getTwistLimitContactDistancePtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getTwistLimitContactDistance();
}

ES char* string_const_PxArticulationJointPtr_getConcreteTypeNamePtr(PxArticulationJointPtr wrp_this){
    return (char*) wrp_this->getConcreteTypeName();
}

