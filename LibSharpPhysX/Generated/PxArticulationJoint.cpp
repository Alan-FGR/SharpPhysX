// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
ES PxArticulationLinkPtr physx_PxArticulationLinkPtr_const_physx_PxArticulationJointBase_getParentArticulationLink(PxArticulationJointBasePtr wrp_this){
    return (PxArticulationLinkPtr) &wrp_this->getParentArticulationLink();
}

ES void void_physx_PxArticulationJointBase_setParentPose_physx_PxTransform_(PxArticulationJointBasePtr wrp_this, physx::PxTransform* wrp_pose){
    wrp_this->setParentPose(*wrp_pose);
}

ES void physx_PxTransform_const_physx_PxArticulationJointBase_getParentPose(physx::PxTransform* RetRef, PxArticulationJointBasePtr wrp_this){
    *RetRef = wrp_this->getParentPose();
}

ES PxArticulationLinkPtr physx_PxArticulationLinkPtr_const_physx_PxArticulationJointBase_getChildArticulationLink(PxArticulationJointBasePtr wrp_this){
    return (PxArticulationLinkPtr) &wrp_this->getChildArticulationLink();
}

ES void void_physx_PxArticulationJointBase_setChildPose_physx_PxTransform_(PxArticulationJointBasePtr wrp_this, physx::PxTransform* wrp_pose){
    wrp_this->setChildPose(*wrp_pose);
}

ES void physx_PxTransform_const_physx_PxArticulationJointBase_getChildPose(physx::PxTransform* RetRef, PxArticulationJointBasePtr wrp_this){
    *RetRef = wrp_this->getChildPose();
}

ES void void_physx_PxArticulationJoint_setTargetOrientation_physx_PxQuat_(PxArticulationJointPtr wrp_this, physx::PxQuat* wrp_orientation){
    wrp_this->setTargetOrientation(*wrp_orientation);
}

ES void physx_PxQuat_const_physx_PxArticulationJoint_getTargetOrientation(physx::PxQuat* RetRef, PxArticulationJointPtr wrp_this){
    *RetRef = wrp_this->getTargetOrientation();
}

ES void void_physx_PxArticulationJoint_setTargetVelocity_physx_PxVec3_(PxArticulationJointPtr wrp_this, physx::PxVec3* wrp_velocity){
    wrp_this->setTargetVelocity(*wrp_velocity);
}

ES void physx_PxVec3_const_physx_PxArticulationJoint_getTargetVelocity(physx::PxVec3* RetRef, PxArticulationJointPtr wrp_this){
    *RetRef = wrp_this->getTargetVelocity();
}

ES void void_physx_PxArticulationJoint_setDriveType_physx_PxArticulationJointDriveTypeEnum_(PxArticulationJointPtr wrp_this, physx::PxArticulationJointDriveType::Enum wrp_driveType){
    wrp_this->setDriveType(wrp_driveType);
}

ES physx::PxArticulationJointDriveType::Enum physx_PxArticulationJointDriveTypeEnum_const_physx_PxArticulationJoint_getDriveType(PxArticulationJointPtr wrp_this){
    return (physx::PxArticulationJointDriveType::Enum) wrp_this->getDriveType();
}

ES void void_physx_PxArticulationJoint_setStiffness_float_(PxArticulationJointPtr wrp_this, float wrp_spring){
    wrp_this->setStiffness(wrp_spring);
}

ES float float_const_physx_PxArticulationJoint_getStiffness(PxArticulationJointPtr wrp_this){
    return (float) wrp_this->getStiffness();
}

ES void void_physx_PxArticulationJoint_setDamping_float_(PxArticulationJointPtr wrp_this, float wrp_damping){
    wrp_this->setDamping(wrp_damping);
}

ES float float_const_physx_PxArticulationJoint_getDamping(PxArticulationJointPtr wrp_this){
    return (float) wrp_this->getDamping();
}

ES void void_physx_PxArticulationJoint_setInternalCompliance_float_(PxArticulationJointPtr wrp_this, float wrp_compliance){
    wrp_this->setInternalCompliance(wrp_compliance);
}

ES float float_const_physx_PxArticulationJoint_getInternalCompliance(PxArticulationJointPtr wrp_this){
    return (float) wrp_this->getInternalCompliance();
}

ES void void_physx_PxArticulationJoint_setExternalCompliance_float_(PxArticulationJointPtr wrp_this, float wrp_compliance){
    wrp_this->setExternalCompliance(wrp_compliance);
}

ES float float_const_physx_PxArticulationJoint_getExternalCompliance(PxArticulationJointPtr wrp_this){
    return (float) wrp_this->getExternalCompliance();
}

ES void void_physx_PxArticulationJoint_setSwingLimit_float_float_(PxArticulationJointPtr wrp_this, float wrp_zLimit, float wrp_yLimit){
    wrp_this->setSwingLimit(wrp_zLimit, wrp_yLimit);
}

ES void void_const_physx_PxArticulationJoint_getSwingLimit_float_float_(PxArticulationJointPtr wrp_this, float* wrp_zLimit, float* wrp_yLimit){
    wrp_this->getSwingLimit(*wrp_zLimit, *wrp_yLimit);
}

ES void void_physx_PxArticulationJoint_setTangentialStiffness_float_(PxArticulationJointPtr wrp_this, float wrp_spring){
    wrp_this->setTangentialStiffness(wrp_spring);
}

ES float float_const_physx_PxArticulationJoint_getTangentialStiffness(PxArticulationJointPtr wrp_this){
    return (float) wrp_this->getTangentialStiffness();
}

ES void void_physx_PxArticulationJoint_setTangentialDamping_float_(PxArticulationJointPtr wrp_this, float wrp_damping){
    wrp_this->setTangentialDamping(wrp_damping);
}

ES float float_const_physx_PxArticulationJoint_getTangentialDamping(PxArticulationJointPtr wrp_this){
    return (float) wrp_this->getTangentialDamping();
}

ES void void_physx_PxArticulationJoint_setSwingLimitContactDistance_float_(PxArticulationJointPtr wrp_this, float wrp_contactDistance){
    wrp_this->setSwingLimitContactDistance(wrp_contactDistance);
}

ES float float_const_physx_PxArticulationJoint_getSwingLimitContactDistance(PxArticulationJointPtr wrp_this){
    return (float) wrp_this->getSwingLimitContactDistance();
}

ES void void_physx_PxArticulationJoint_setSwingLimitEnabled_bool_(PxArticulationJointPtr wrp_this, bool wrp_enabled){
    wrp_this->setSwingLimitEnabled(wrp_enabled);
}

ES bool bool_const_physx_PxArticulationJoint_getSwingLimitEnabled(PxArticulationJointPtr wrp_this){
    return (bool) wrp_this->getSwingLimitEnabled();
}

ES void void_physx_PxArticulationJoint_setTwistLimit_float_float_(PxArticulationJointPtr wrp_this, float wrp_lower, float wrp_upper){
    wrp_this->setTwistLimit(wrp_lower, wrp_upper);
}

ES void void_const_physx_PxArticulationJoint_getTwistLimit_float_float_(PxArticulationJointPtr wrp_this, float* wrp_lower, float* wrp_upper){
    wrp_this->getTwistLimit(*wrp_lower, *wrp_upper);
}

ES void void_physx_PxArticulationJoint_setTwistLimitEnabled_bool_(PxArticulationJointPtr wrp_this, bool wrp_enabled){
    wrp_this->setTwistLimitEnabled(wrp_enabled);
}

ES bool bool_const_physx_PxArticulationJoint_getTwistLimitEnabled(PxArticulationJointPtr wrp_this){
    return (bool) wrp_this->getTwistLimitEnabled();
}

ES void void_physx_PxArticulationJoint_setTwistLimitContactDistance_float_(PxArticulationJointPtr wrp_this, float wrp_contactDistance){
    wrp_this->setTwistLimitContactDistance(wrp_contactDistance);
}

ES float float_const_physx_PxArticulationJoint_getTwistLimitContactDistance(PxArticulationJointPtr wrp_this){
    return (float) wrp_this->getTwistLimitContactDistance();
}

ES char* string_const_physx_PxArticulationJoint_getConcreteTypeName(PxArticulationJointPtr wrp_this){
    return (char*) wrp_this->getConcreteTypeName();
}
