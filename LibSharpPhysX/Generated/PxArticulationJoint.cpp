// Generated by minBND 5.1.90.51 - Â© github.com/Alan-FGR

//DBG: FunctionNode physx::operator| L82
//physx::operator| static physx.PxFlags_PxArticulationAxisEnum_bytePtr OpPipe_New(physx.PxArticulationAxisEnum a, physx.PxArticulationAxisEnum b) will also be bound as member operator
//RET nat: PxFlags_PxArticulationAxisEnum_bytePtr, man: physx.PxFlags_PxArticulationAxisEnum_bytePtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxArticulationAxis::Enum, man: physx.PxArticulationAxisEnum, kind: Value
//PAR nat: physx::PxArticulationAxis::Enum, man: physx.PxArticulationAxisEnum, kind: Value
ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Pipe_PxArticulationAxisEnum_PxArticulationAxisEnum_(physx::PxArticulationAxis::Enum wrp_a, physx::PxArticulationAxis::Enum wrp_b){
    auto ret = ::physx::operator|(wrp_a, wrp_b);
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

//DBG: FunctionNode physx::operator& L82
//physx::operator& static physx.PxFlags_PxArticulationAxisEnum_bytePtr OpAnd_New(physx.PxArticulationAxisEnum a, physx.PxArticulationAxisEnum b) will also be bound as member operator
//RET nat: PxFlags_PxArticulationAxisEnum_bytePtr, man: physx.PxFlags_PxArticulationAxisEnum_bytePtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxArticulationAxis::Enum, man: physx.PxArticulationAxisEnum, kind: Value
//PAR nat: physx::PxArticulationAxis::Enum, man: physx.PxArticulationAxisEnum, kind: Value
ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Amp_PxArticulationAxisEnum_PxArticulationAxisEnum_(physx::PxArticulationAxis::Enum wrp_a, physx::PxArticulationAxis::Enum wrp_b){
    auto ret = ::physx::operator&(wrp_a, wrp_b);
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

//DBG: FunctionNode physx::operator~ L82
//physx::operator~ static physx.PxFlags_PxArticulationAxisEnum_bytePtr OpTilde_New(physx.PxArticulationAxisEnum a) will also be bound as member operator
//RET nat: PxFlags_PxArticulationAxisEnum_bytePtr, man: physx.PxFlags_PxArticulationAxisEnum_bytePtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxArticulationAxis::Enum, man: physx.PxArticulationAxisEnum, kind: Value
ES PxFlags_PxArticulationAxisEnum_bytePtr PxFlags_PxArticulationAxisEnum_bytePtr_operator_Ptr_Tilde_PxArticulationAxisEnum_(physx::PxArticulationAxis::Enum wrp_a){
    auto ret = ::physx::operator~(wrp_a);
    auto heap = new char[sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>];
    std::memcpy(heap, &ret, sizeof PxFlags<physx::PxArticulationAxis::Enum, unsigned char>);
    return (PxFlags_PxArticulationAxisEnum_bytePtr) heap;
}

//DBG: FunctionNode physx::operator| L95
//physx::operator| static physx.PxArticulationMotionsPtr OpPipe_New(physx.PxArticulationMotionEnum a, physx.PxArticulationMotionEnum b) will also be bound as member operator
//RET nat: PxArticulationMotionsPtr, man: physx.PxArticulationMotionsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxArticulationMotion::Enum, man: physx.PxArticulationMotionEnum, kind: Value
//PAR nat: physx::PxArticulationMotion::Enum, man: physx.PxArticulationMotionEnum, kind: Value
ES PxArticulationMotionsPtr PxArticulationMotionsPtr_operator_Ptr_Pipe_PxArticulationMotionEnum_PxArticulationMotionEnum_(physx::PxArticulationMotion::Enum wrp_a, physx::PxArticulationMotion::Enum wrp_b){
    auto ret = ::physx::operator|(wrp_a, wrp_b);
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

//DBG: FunctionNode physx::operator& L95
//physx::operator& static physx.PxArticulationMotionsPtr OpAnd_New(physx.PxArticulationMotionEnum a, physx.PxArticulationMotionEnum b) will also be bound as member operator
//RET nat: PxArticulationMotionsPtr, man: physx.PxArticulationMotionsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxArticulationMotion::Enum, man: physx.PxArticulationMotionEnum, kind: Value
//PAR nat: physx::PxArticulationMotion::Enum, man: physx.PxArticulationMotionEnum, kind: Value
ES PxArticulationMotionsPtr PxArticulationMotionsPtr_operator_Ptr_Amp_PxArticulationMotionEnum_PxArticulationMotionEnum_(physx::PxArticulationMotion::Enum wrp_a, physx::PxArticulationMotion::Enum wrp_b){
    auto ret = ::physx::operator&(wrp_a, wrp_b);
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

//DBG: FunctionNode physx::operator~ L95
//physx::operator~ static physx.PxArticulationMotionsPtr OpTilde_New(physx.PxArticulationMotionEnum a) will also be bound as member operator
//RET nat: PxArticulationMotionsPtr, man: physx.PxArticulationMotionsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxArticulationMotion::Enum, man: physx.PxArticulationMotionEnum, kind: Value
ES PxArticulationMotionsPtr PxArticulationMotionsPtr_operator_Ptr_Tilde_PxArticulationMotionEnum_(physx::PxArticulationMotion::Enum wrp_a){
    auto ret = ::physx::operator~(wrp_a);
    auto heap = new char[sizeof PxArticulationMotions];
    std::memcpy(heap, &ret, sizeof PxArticulationMotions);
    return (PxArticulationMotionsPtr) heap;
}

//DBG: DeclTree PxArticulationJointImpl physx::PxArticulationJointImpl L44
//Skipping DeclTree PxArticulationJointImpl physx::PxArticulationJointImpl L44...

//DBG: ClassNode PxArticulationJointDriveType physx::PxArticulationJointDriveType L59-66

//DBG: ClassNode PxArticulationAxis physx::PxArticulationAxis L68-80

//DBG: ClassNode PxArticulationMotion physx::PxArticulationMotion L84-92

//DBG: ClassNode PxArticulationJointType physx::PxArticulationJointType L97-107
//Subclasses using this: 1

//DBG: ClassNode PxArticulationJointBase physx::PxArticulationJointBase L110-180Bases: PxBasePtr

//DBG: MethodNode physx::PxArticulationJointBase::getParentArticulationLink L118
//RET nat: PxArticulationLinkPtr, man: physx.PxArticulationLinkPtr, ret: True, kind: PtrStruct
//PAR nat: PxArticulationJointBasePtr, man: physx.PxArticulationJointBasePtr, kind: PtrStruct
ES PxArticulationLinkPtr PxArticulationLinkPtr_const_PxArticulationJointBasePtr_getParentArticulationLinkPtr(PxArticulationJointBasePtr wrp_this){
    return (PxArticulationLinkPtr) &wrp_this->getParentArticulationLink();
}

//DBG: MethodNode physx::PxArticulationJointBase::setParentPose L129
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointBasePtr, man: physx.PxArticulationJointBasePtr, kind: PtrStruct
//PAR nat: physx::PxTransform*, man: physx.PxTransform*, kind: Value
ES void void_PxArticulationJointBasePtr_setParentPosePtr_PxTransform_(PxArticulationJointBasePtr wrp_this, physx::PxTransform* wrp_pose){
    wrp_this->setParentPose(*wrp_pose);
}

//DBG: MethodNode physx::PxArticulationJointBase::getParentPose L139
//RET nat: physx::PxTransform, man: physx.PxTransform, ret: False, kind: Blittable
//PAR nat: PxArticulationJointBasePtr, man: physx.PxArticulationJointBasePtr, kind: PtrStruct
ES void PxTransform_const_PxArticulationJointBasePtr_getParentPosePtr(physx::PxTransform* nRetRef, PxArticulationJointBasePtr wrp_this){
    *nRetRef = wrp_this->getParentPose();
}

//DBG: MethodNode physx::PxArticulationJointBase::getChildArticulationLink L146
//RET nat: PxArticulationLinkPtr, man: physx.PxArticulationLinkPtr, ret: True, kind: PtrStruct
//PAR nat: PxArticulationJointBasePtr, man: physx.PxArticulationJointBasePtr, kind: PtrStruct
ES PxArticulationLinkPtr PxArticulationLinkPtr_const_PxArticulationJointBasePtr_getChildArticulationLinkPtr(PxArticulationJointBasePtr wrp_this){
    return (PxArticulationLinkPtr) &wrp_this->getChildArticulationLink();
}

//DBG: MethodNode physx::PxArticulationJointBase::setChildPose L158
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointBasePtr, man: physx.PxArticulationJointBasePtr, kind: PtrStruct
//PAR nat: physx::PxTransform*, man: physx.PxTransform*, kind: Value
ES void void_PxArticulationJointBasePtr_setChildPosePtr_PxTransform_(PxArticulationJointBasePtr wrp_this, physx::PxTransform* wrp_pose){
    wrp_this->setChildPose(*wrp_pose);
}

//DBG: MethodNode physx::PxArticulationJointBase::getChildPose L167
//RET nat: physx::PxTransform, man: physx.PxTransform, ret: False, kind: Blittable
//PAR nat: PxArticulationJointBasePtr, man: physx.PxArticulationJointBasePtr, kind: PtrStruct
ES void PxTransform_const_PxArticulationJointBasePtr_getChildPosePtr(physx::PxTransform* nRetRef, PxArticulationJointBasePtr wrp_this){
    *nRetRef = wrp_this->getChildPose();
}

//DBG: MethodNode physx::PxArticulationJointBase::getImpl L169

//DBG: MethodNode physx::PxArticulationJointBase::getImpl L170

//DBG: MethodNode physx::PxArticulationJointBase::~PxArticulationJointBase L172
//ERRORS in MethodNode: Destructor

//DBG: MethodNode physx::PxArticulationJointBase::operator= L110
//ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxArticulationJointBase::operator= L110

//DBG: MethodNode physx::PxArticulationJointBase::setParentPose L129
//Value Converter setParentPose
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointBasePtr, man: physx.PxArticulationJointBasePtr, kind: PtrStruct
//PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable

//DBG: MethodNode physx::PxArticulationJointBase::setParentPose L129
//Value Converter setParentPose
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointBasePtr, man: physx.PxArticulationJointBasePtr, kind: PtrStruct
//PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable

//DBG: MethodNode physx::PxArticulationJointBase::setChildPose L158
//Value Converter setChildPose
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointBasePtr, man: physx.PxArticulationJointBasePtr, kind: PtrStruct
//PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable

//DBG: MethodNode physx::PxArticulationJointBase::setChildPose L158
//Value Converter setChildPose
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointBasePtr, man: physx.PxArticulationJointBasePtr, kind: PtrStruct
//PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable
//PIPING
//Skipping: SKIPPING! MethodNode physx::PxBase::is L101 is | 
//Skipping: SKIPPING! MethodNode physx::PxBase::is L111 isConst | 
//INTERFACES
//Skipping physx.PxArticulationJointImplPtr getImpl(). Errors: 
//Skipping physx.PxArticulationJointImplPtr getImplConst(). Errors: 

//Operators
//Subclasses using this: 0

//DBG: ClassNode PxArticulationJoint physx::PxArticulationJoint L193-565Bases: PxArticulationJointBasePtr|PxBasePtr

//DBG: MethodNode physx::PxArticulationJoint::setTargetOrientation L209
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: physx::PxQuat*, man: physx.PxQuat*, kind: Value
ES void void_PxArticulationJointPtr_setTargetOrientationPtr_PxQuat_(PxArticulationJointPtr wrp_this, physx::PxQuat* wrp_orientation){
    wrp_this->setTargetOrientation(*wrp_orientation);
}

//DBG: MethodNode physx::PxArticulationJoint::getTargetOrientation L218
//RET nat: physx::PxQuat, man: physx.PxQuat, ret: False, kind: Blittable
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES void PxQuat_const_PxArticulationJointPtr_getTargetOrientationPtr(physx::PxQuat* nRetRef, PxArticulationJointPtr wrp_this){
    *nRetRef = wrp_this->getTargetOrientation();
}

//DBG: MethodNode physx::PxArticulationJoint::setTargetVelocity L230
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
ES void void_PxArticulationJointPtr_setTargetVelocityPtr_PxVec3_(PxArticulationJointPtr wrp_this, physx::PxVec3* wrp_velocity){
    wrp_this->setTargetVelocity(*wrp_velocity);
}

//DBG: MethodNode physx::PxArticulationJoint::getTargetVelocity L239
//RET nat: physx::PxVec3, man: physx.PxVec3, ret: False, kind: Blittable
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES void PxVec3_const_PxArticulationJointPtr_getTargetVelocityPtr(physx::PxVec3* nRetRef, PxArticulationJointPtr wrp_this){
    *nRetRef = wrp_this->getTargetVelocity();
}

//DBG: MethodNode physx::PxArticulationJoint::setDriveType L250
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: physx::PxArticulationJointDriveType::Enum, man: physx.PxArticulationJointDriveTypeEnum, kind: Value
ES void void_PxArticulationJointPtr_setDriveTypePtr_PxArticulationJointDriveTypeEnum_(PxArticulationJointPtr wrp_this, physx::PxArticulationJointDriveType::Enum wrp_driveType){
    wrp_this->setDriveType(wrp_driveType);
}

//DBG: MethodNode physx::PxArticulationJoint::getDriveType L259-260
//RET nat: physx::PxArticulationJointDriveType::Enum, man: physx.PxArticulationJointDriveTypeEnum, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES physx::PxArticulationJointDriveType::Enum PxArticulationJointDriveTypeEnum_const_PxArticulationJointPtr_getDriveTypePtr(PxArticulationJointPtr wrp_this){
    return (physx::PxArticulationJointDriveType::Enum) wrp_this->getDriveType();
}

//DBG: MethodNode physx::PxArticulationJoint::setStiffness L277
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxArticulationJointPtr_setStiffnessPtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_spring){
    wrp_this->setStiffness(wrp_spring);
}

//DBG: MethodNode physx::PxArticulationJoint::getStiffness L286
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES PxReal float_const_PxArticulationJointPtr_getStiffnessPtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getStiffness();
}

//DBG: MethodNode physx::PxArticulationJoint::setDamping L302
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxArticulationJointPtr_setDampingPtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_damping){
    wrp_this->setDamping(wrp_damping);
}

//DBG: MethodNode physx::PxArticulationJoint::getDamping L310
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES PxReal float_const_PxArticulationJointPtr_getDampingPtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getDamping();
}

//DBG: MethodNode physx::PxArticulationJoint::setInternalCompliance L331
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxArticulationJointPtr_setInternalCompliancePtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_compliance){
    wrp_this->setInternalCompliance(wrp_compliance);
}

//DBG: MethodNode physx::PxArticulationJoint::getInternalCompliance L341
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES PxReal float_const_PxArticulationJointPtr_getInternalCompliancePtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getInternalCompliance();
}

//DBG: MethodNode physx::PxArticulationJoint::setExternalCompliance L362
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxArticulationJointPtr_setExternalCompliancePtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_compliance){
    wrp_this->setExternalCompliance(wrp_compliance);
}

//DBG: MethodNode physx::PxArticulationJoint::getExternalCompliance L371
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES PxReal float_const_PxArticulationJointPtr_getExternalCompliancePtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getExternalCompliance();
}

//DBG: MethodNode physx::PxArticulationJoint::setSwingLimit L388
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxArticulationJointPtr_setSwingLimitPtr_float_float_(PxArticulationJointPtr wrp_this, PxReal wrp_zLimit, PxReal wrp_yLimit){
    wrp_this->setSwingLimit(wrp_zLimit, wrp_yLimit);
}

//DBG: MethodNode physx::PxArticulationJoint::getSwingLimit L401
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: PxReal*, man: float*, kind: Value
//PAR nat: PxReal*, man: float*, kind: Value
ES void void_const_PxArticulationJointPtr_getSwingLimitPtr_float_float_(PxArticulationJointPtr wrp_this, PxReal* wrp_zLimit, PxReal* wrp_yLimit){
    wrp_this->getSwingLimit(*wrp_zLimit, *wrp_yLimit);
}

//DBG: MethodNode physx::PxArticulationJoint::setTangentialStiffness L411
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxArticulationJointPtr_setTangentialStiffnessPtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_spring){
    wrp_this->setTangentialStiffness(wrp_spring);
}

//DBG: MethodNode physx::PxArticulationJoint::getTangentialStiffness L421
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES PxReal float_const_PxArticulationJointPtr_getTangentialStiffnessPtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getTangentialStiffness();
}

//DBG: MethodNode physx::PxArticulationJoint::setTangentialDamping L430
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxArticulationJointPtr_setTangentialDampingPtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_damping){
    wrp_this->setTangentialDamping(wrp_damping);
}

//DBG: MethodNode physx::PxArticulationJoint::getTangentialDamping L440
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES PxReal float_const_PxArticulationJointPtr_getTangentialDampingPtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getTangentialDamping();
}

//DBG: MethodNode physx::PxArticulationJoint::setSwingLimitContactDistance L454
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxArticulationJointPtr_setSwingLimitContactDistancePtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_contactDistance){
    wrp_this->setSwingLimitContactDistance(wrp_contactDistance);
}

//DBG: MethodNode physx::PxArticulationJoint::getSwingLimitContactDistance L464
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES PxReal float_const_PxArticulationJointPtr_getSwingLimitContactDistancePtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getSwingLimitContactDistance();
}

//DBG: MethodNode physx::PxArticulationJoint::setSwingLimitEnabled L476
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: bool, man: bool, kind: Value
ES void void_PxArticulationJointPtr_setSwingLimitEnabledPtr_bool_(PxArticulationJointPtr wrp_this, bool wrp_enabled){
    wrp_this->setSwingLimitEnabled(wrp_enabled);
}

//DBG: MethodNode physx::PxArticulationJoint::getSwingLimitEnabled L486
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES bool bool_const_PxArticulationJointPtr_getSwingLimitEnabledPtr(PxArticulationJointPtr wrp_this){
    return (bool) wrp_this->getSwingLimitEnabled();
}

//DBG: MethodNode physx::PxArticulationJoint::setTwistLimit L501
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxArticulationJointPtr_setTwistLimitPtr_float_float_(PxArticulationJointPtr wrp_this, PxReal wrp_lower, PxReal wrp_upper){
    wrp_this->setTwistLimit(wrp_lower, wrp_upper);
}

//DBG: MethodNode physx::PxArticulationJoint::getTwistLimit L512
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: PxReal*, man: float*, kind: Value
//PAR nat: PxReal*, man: float*, kind: Value
ES void void_const_PxArticulationJointPtr_getTwistLimitPtr_float_float_(PxArticulationJointPtr wrp_this, PxReal* wrp_lower, PxReal* wrp_upper){
    wrp_this->getTwistLimit(*wrp_lower, *wrp_upper);
}

//DBG: MethodNode physx::PxArticulationJoint::setTwistLimitEnabled L522
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: bool, man: bool, kind: Value
ES void void_PxArticulationJointPtr_setTwistLimitEnabledPtr_bool_(PxArticulationJointPtr wrp_this, bool wrp_enabled){
    wrp_this->setTwistLimitEnabled(wrp_enabled);
}

//DBG: MethodNode physx::PxArticulationJoint::getTwistLimitEnabled L532
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES bool bool_const_PxArticulationJointPtr_getTwistLimitEnabledPtr(PxArticulationJointPtr wrp_this){
    return (bool) wrp_this->getTwistLimitEnabled();
}

//DBG: MethodNode physx::PxArticulationJoint::setTwistLimitContactDistance L546
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
ES void void_PxArticulationJointPtr_setTwistLimitContactDistancePtr_float_(PxArticulationJointPtr wrp_this, PxReal wrp_contactDistance){
    wrp_this->setTwistLimitContactDistance(wrp_contactDistance);
}

//DBG: MethodNode physx::PxArticulationJoint::getTwistLimitContactDistance L556
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES PxReal float_const_PxArticulationJointPtr_getTwistLimitContactDistancePtr(PxArticulationJointPtr wrp_this){
    return (PxReal) wrp_this->getTwistLimitContactDistance();
}

//DBG: MethodNode physx::PxArticulationJoint::getConcreteTypeName L558
//RET nat: char*, man: string, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
ES char* string_const_PxArticulationJointPtr_getConcreteTypeNamePtr(PxArticulationJointPtr wrp_this){
    return (char*) wrp_this->getConcreteTypeName();
}

//DBG: MethodNode physx::PxArticulationJoint::operator= L193
//ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxArticulationJoint::operator= L193

//DBG: MethodNode physx::PxArticulationJoint::setTargetOrientation L209
//Value Converter setTargetOrientation
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: physx::PxQuat, man: physx.PxQuat, kind: Blittable

//DBG: MethodNode physx::PxArticulationJoint::setTargetOrientation L209
//Value Converter setTargetOrientation
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: physx::PxQuat, man: physx.PxQuat, kind: Blittable

//DBG: MethodNode physx::PxArticulationJoint::setTargetVelocity L230
//Value Converter setTargetVelocity
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable

//DBG: MethodNode physx::PxArticulationJoint::setTargetVelocity L230
//Value Converter setTargetVelocity
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxArticulationJointPtr, man: physx.PxArticulationJointPtr, kind: PtrStruct
//PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
//PIPING
//Skipping: SKIPPING! MethodNode physx::PxArticulationJointBase::getImpl L169 getImpl | 
//Skipping: SKIPPING! MethodNode physx::PxArticulationJointBase::getImpl L170 getImplConst | 
//Skipping: SKIPPING! MethodNode physx::PxBase::is L101 is | 
//Skipping: SKIPPING! MethodNode physx::PxBase::is L111 isConst | 

//Operators

//DBG: DeclNode PxArticulationMotions physx::PxArticulationMotions L94
