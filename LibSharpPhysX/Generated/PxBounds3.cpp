// Generated by minBND 5.1.91.1 - Â© github.com/Alan-FGR

ES void Default_PxBounds3_(physx::PxBounds3* nRetRef){
    *nRetRef = PxBounds3();
}

ES void void_PxBounds3_PxBounds3Ptr_Ctor_PxVec3_PxVec3_(physx::PxBounds3* wrp_this, physx::PxVec3* wrp_minimum, physx::PxVec3* wrp_maximum){
    *wrp_this = ::physx::PxBounds3::PxBounds3(*wrp_minimum, *wrp_maximum);
}

ES void PxBounds3_PxBounds3_emptyPtr(physx::PxBounds3* nRetRef, physx::PxBounds3* wrp_this){
    *nRetRef = wrp_this->empty();
}

ES void PxBounds3_PxBounds3_boundsOfPointsPtr_PxVec3_PxVec3_(physx::PxBounds3* nRetRef, physx::PxBounds3* wrp_this, physx::PxVec3* wrp_v0, physx::PxVec3* wrp_v1){
    *nRetRef = wrp_this->boundsOfPoints(*wrp_v0, *wrp_v1);
}

ES void PxBounds3_PxBounds3_centerExtentsPtr_PxVec3_PxVec3_(physx::PxBounds3* nRetRef, physx::PxBounds3* wrp_this, physx::PxVec3* wrp_center, physx::PxVec3* wrp_extent){
    *nRetRef = wrp_this->centerExtents(*wrp_center, *wrp_extent);
}

ES void PxBounds3_PxBounds3_basisExtentPtr_PxVec3_PxMat33_PxVec3_(physx::PxBounds3* nRetRef, physx::PxBounds3* wrp_this, physx::PxVec3* wrp_center, physx::PxMat33* wrp_basis, physx::PxVec3* wrp_extent){
    *nRetRef = wrp_this->basisExtent(*wrp_center, *wrp_basis, *wrp_extent);
}

ES void PxBounds3_PxBounds3_poseExtentPtr_PxTransform_PxVec3_(physx::PxBounds3* nRetRef, physx::PxBounds3* wrp_this, physx::PxTransform* wrp_pose, physx::PxVec3* wrp_extent){
    *nRetRef = wrp_this->poseExtent(*wrp_pose, *wrp_extent);
}

ES void PxBounds3_PxBounds3_transformSafePtr_PxMat33_PxBounds3_(physx::PxBounds3* nRetRef, physx::PxBounds3* wrp_this, physx::PxMat33* wrp_matrix, physx::PxBounds3* wrp_bounds){
    *nRetRef = wrp_this->transformSafe(*wrp_matrix, *wrp_bounds);
}

ES void PxBounds3_PxBounds3_transformFastPtr_PxMat33_PxBounds3_(physx::PxBounds3* nRetRef, physx::PxBounds3* wrp_this, physx::PxMat33* wrp_matrix, physx::PxBounds3* wrp_bounds){
    *nRetRef = wrp_this->transformFast(*wrp_matrix, *wrp_bounds);
}

ES void PxBounds3_PxBounds3_transformSafePtr_PxTransform_PxBounds3_(physx::PxBounds3* nRetRef, physx::PxBounds3* wrp_this, physx::PxTransform* wrp_transform, physx::PxBounds3* wrp_bounds){
    *nRetRef = wrp_this->transformSafe(*wrp_transform, *wrp_bounds);
}

ES void PxBounds3_PxBounds3_transformFastPtr_PxTransform_PxBounds3_(physx::PxBounds3* nRetRef, physx::PxBounds3* wrp_this, physx::PxTransform* wrp_transform, physx::PxBounds3* wrp_bounds){
    *nRetRef = wrp_this->transformFast(*wrp_transform, *wrp_bounds);
}

ES void void_PxBounds3_setEmptyPtr(physx::PxBounds3* wrp_this){
    wrp_this->setEmpty();
}

ES void void_PxBounds3_setMaximalPtr(physx::PxBounds3* wrp_this){
    wrp_this->setMaximal();
}

ES void void_PxBounds3_includePtr_PxVec3_(physx::PxBounds3* wrp_this, physx::PxVec3* wrp_v){
    wrp_this->include(*wrp_v);
}

ES void void_PxBounds3_includePtr_PxBounds3_(physx::PxBounds3* wrp_this, physx::PxBounds3* wrp_b){
    wrp_this->include(*wrp_b);
}

ES bool bool_const_PxBounds3_isEmptyPtr(physx::PxBounds3* wrp_this){
    return (bool) wrp_this->isEmpty();
}

ES bool bool_const_PxBounds3_intersectsPtr_PxBounds3_(physx::PxBounds3* wrp_this, physx::PxBounds3* wrp_b){
    return (bool) wrp_this->intersects(*wrp_b);
}

ES bool bool_const_PxBounds3_intersects1DPtr_PxBounds3_uint_(physx::PxBounds3* wrp_this, physx::PxBounds3* wrp_a, uint32_t wrp_axis){
    return (bool) wrp_this->intersects1D(*wrp_a, wrp_axis);
}

ES bool bool_const_PxBounds3_containsPtr_PxVec3_(physx::PxBounds3* wrp_this, physx::PxVec3* wrp_v){
    return (bool) wrp_this->contains(*wrp_v);
}

ES bool bool_const_PxBounds3_isInsidePtr_PxBounds3_(physx::PxBounds3* wrp_this, physx::PxBounds3* wrp_box){
    return (bool) wrp_this->isInside(*wrp_box);
}

ES void PxVec3_const_PxBounds3_getCenterPtr(physx::PxVec3* nRetRef, physx::PxBounds3* wrp_this){
    *nRetRef = wrp_this->getCenter();
}

ES float float_const_PxBounds3_getCenterPtr_uint_(physx::PxBounds3* wrp_this, uint32_t wrp_axis){
    return (float) wrp_this->getCenter(wrp_axis);
}

ES float float_const_PxBounds3_getExtentsPtr_uint_(physx::PxBounds3* wrp_this, uint32_t wrp_axis){
    return (float) wrp_this->getExtents(wrp_axis);
}

ES void PxVec3_const_PxBounds3_getDimensionsPtr(physx::PxVec3* nRetRef, physx::PxBounds3* wrp_this){
    *nRetRef = wrp_this->getDimensions();
}

ES void PxVec3_const_PxBounds3_getExtentsPtr(physx::PxVec3* nRetRef, physx::PxBounds3* wrp_this){
    *nRetRef = wrp_this->getExtents();
}

ES void void_PxBounds3_scaleSafePtr_float_(physx::PxBounds3* wrp_this, float wrp_scale){
    wrp_this->scaleSafe(wrp_scale);
}

ES void void_PxBounds3_scaleFastPtr_float_(physx::PxBounds3* wrp_this, float wrp_scale){
    wrp_this->scaleFast(wrp_scale);
}

ES void void_PxBounds3_fattenSafePtr_float_(physx::PxBounds3* wrp_this, float wrp_distance){
    wrp_this->fattenSafe(wrp_distance);
}

ES void void_PxBounds3_fattenFastPtr_float_(physx::PxBounds3* wrp_this, float wrp_distance){
    wrp_this->fattenFast(wrp_distance);
}

ES bool bool_const_PxBounds3_isFinitePtr(physx::PxBounds3* wrp_this){
    return (bool) wrp_this->isFinite();
}

ES bool bool_const_PxBounds3_isValidPtr(physx::PxBounds3* wrp_this){
    return (bool) wrp_this->isValid();
}

