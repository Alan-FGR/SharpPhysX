// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
ES void Freer_physx_PxBounds3Ptr(PxBounds3Ptr ptr){
    delete ptr;
}

ES PxBounds3Ptr Ctor_physx_PxBounds3Ptr_(){
    return (PxBounds3Ptr) new std::remove_pointer<PxBounds3Ptr>::type();
}

ES PxBounds3Ptr Ctor_physx_PxBounds3Ptr_physx_PxVec3Ptr_physx_PxVec3Ptr(PxVec3Ptr wrp_minimum, PxVec3Ptr wrp_maximum){
    return (PxBounds3Ptr) new std::remove_pointer<PxBounds3Ptr>::type(*wrp_minimum, *wrp_maximum);
}

ES PxVec3Ptr PxBounds3_GET_minimum(PxBounds3Ptr cls) {return (PxVec3Ptr)&cls->minimum;}
ES void PxBounds3_SET_minimum(PxBounds3Ptr cls, PxVec3Ptr value) {cls->minimum = *value;}

ES PxVec3Ptr PxBounds3_GET_maximum(PxBounds3Ptr cls) {return (PxVec3Ptr)&cls->maximum;}
ES void PxBounds3_SET_maximum(PxBounds3Ptr cls, PxVec3Ptr value) {cls->maximum = *value;}

ES void void_physx_PxBounds3_setEmpty(PxBounds3Ptr wrp_this){
    wrp_this->setEmpty();
}

ES void void_physx_PxBounds3_setMaximal(PxBounds3Ptr wrp_this){
    wrp_this->setMaximal();
}

ES void void_physx_PxBounds3_include_physx_PxVec3Ptr_(PxBounds3Ptr wrp_this, PxVec3Ptr wrp_v){
    wrp_this->include(*wrp_v);
}

ES void void_physx_PxBounds3_include_physx_PxBounds3Ptr_(PxBounds3Ptr wrp_this, PxBounds3Ptr wrp_b){
    wrp_this->include(*wrp_b);
}

ES bool bool_const_physx_PxBounds3_isEmpty(PxBounds3Ptr wrp_this){
    return (bool) wrp_this->isEmpty();
}

ES bool bool_const_physx_PxBounds3_intersects_physx_PxBounds3Ptr_(PxBounds3Ptr wrp_this, PxBounds3Ptr wrp_b){
    return (bool) wrp_this->intersects(*wrp_b);
}

ES bool bool_const_physx_PxBounds3_intersects1D_physx_PxBounds3Ptr_uint_(PxBounds3Ptr wrp_this, PxBounds3Ptr wrp_a, unsigned int wrp_axis){
    return (bool) wrp_this->intersects1D(*wrp_a, wrp_axis);
}

ES bool bool_const_physx_PxBounds3_contains_physx_PxVec3Ptr_(PxBounds3Ptr wrp_this, PxVec3Ptr wrp_v){
    return (bool) wrp_this->contains(*wrp_v);
}

ES bool bool_const_physx_PxBounds3_isInside_physx_PxBounds3Ptr_(PxBounds3Ptr wrp_this, PxBounds3Ptr wrp_box){
    return (bool) wrp_this->isInside(*wrp_box);
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxBounds3_getCenter(PxBounds3Ptr wrp_this){
    auto ret = wrp_this->getCenter();
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES float float_const_physx_PxBounds3_getCenter_uint_(PxBounds3Ptr wrp_this, unsigned int wrp_axis){
    return (float) wrp_this->getCenter(wrp_axis);
}

ES float float_const_physx_PxBounds3_getExtents_uint_(PxBounds3Ptr wrp_this, unsigned int wrp_axis){
    return (float) wrp_this->getExtents(wrp_axis);
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxBounds3_getDimensions(PxBounds3Ptr wrp_this){
    auto ret = wrp_this->getDimensions();
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxBounds3_getExtents(PxBounds3Ptr wrp_this){
    auto ret = wrp_this->getExtents();
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES void void_physx_PxBounds3_scaleSafe_float_(PxBounds3Ptr wrp_this, float wrp_scale){
    wrp_this->scaleSafe(wrp_scale);
}

ES void void_physx_PxBounds3_scaleFast_float_(PxBounds3Ptr wrp_this, float wrp_scale){
    wrp_this->scaleFast(wrp_scale);
}

ES void void_physx_PxBounds3_fattenSafe_float_(PxBounds3Ptr wrp_this, float wrp_distance){
    wrp_this->fattenSafe(wrp_distance);
}

ES void void_physx_PxBounds3_fattenFast_float_(PxBounds3Ptr wrp_this, float wrp_distance){
    wrp_this->fattenFast(wrp_distance);
}

ES bool bool_const_physx_PxBounds3_isFinite(PxBounds3Ptr wrp_this){
    return (bool) wrp_this->isFinite();
}

ES bool bool_const_physx_PxBounds3_isValid(PxBounds3Ptr wrp_this){
    return (bool) wrp_this->isValid();
}

ES PxBounds3Ptr physx_PxBounds3Ptr_physx_PxBounds3_empty(){
    auto ret = physx::PxBounds3::empty();
    auto heap = new char[sizeof PxBounds3];
    std::memcpy(heap, &ret, sizeof PxBounds3);
    return (PxBounds3Ptr) heap;
}

ES PxBounds3Ptr physx_PxBounds3Ptr_physx_PxBounds3_boundsOfPoints_physx_PxVec3Ptr_physx_PxVec3Ptr_(PxVec3Ptr wrp_v0, PxVec3Ptr wrp_v1){
    auto ret = physx::PxBounds3::boundsOfPoints(*wrp_v0, *wrp_v1);
    auto heap = new char[sizeof PxBounds3];
    std::memcpy(heap, &ret, sizeof PxBounds3);
    return (PxBounds3Ptr) heap;
}

ES PxBounds3Ptr physx_PxBounds3Ptr_physx_PxBounds3_centerExtents_physx_PxVec3Ptr_physx_PxVec3Ptr_(PxVec3Ptr wrp_center, PxVec3Ptr wrp_extent){
    auto ret = physx::PxBounds3::centerExtents(*wrp_center, *wrp_extent);
    auto heap = new char[sizeof PxBounds3];
    std::memcpy(heap, &ret, sizeof PxBounds3);
    return (PxBounds3Ptr) heap;
}

ES PxBounds3Ptr physx_PxBounds3Ptr_physx_PxBounds3_basisExtent_physx_PxVec3Ptr_physx_PxMat33Ptr_physx_PxVec3Ptr_(PxVec3Ptr wrp_center, PxMat33Ptr wrp_basis, PxVec3Ptr wrp_extent){
    auto ret = physx::PxBounds3::basisExtent(*wrp_center, *wrp_basis, *wrp_extent);
    auto heap = new char[sizeof PxBounds3];
    std::memcpy(heap, &ret, sizeof PxBounds3);
    return (PxBounds3Ptr) heap;
}

ES PxBounds3Ptr physx_PxBounds3Ptr_physx_PxBounds3_poseExtent_physx_PxTransformPtr_physx_PxVec3Ptr_(PxTransformPtr wrp_pose, PxVec3Ptr wrp_extent){
    auto ret = physx::PxBounds3::poseExtent(*wrp_pose, *wrp_extent);
    auto heap = new char[sizeof PxBounds3];
    std::memcpy(heap, &ret, sizeof PxBounds3);
    return (PxBounds3Ptr) heap;
}

ES PxBounds3Ptr physx_PxBounds3Ptr_physx_PxBounds3_transformSafe_physx_PxMat33Ptr_physx_PxBounds3Ptr_(PxMat33Ptr wrp_matrix, PxBounds3Ptr wrp_bounds){
    auto ret = physx::PxBounds3::transformSafe(*wrp_matrix, *wrp_bounds);
    auto heap = new char[sizeof PxBounds3];
    std::memcpy(heap, &ret, sizeof PxBounds3);
    return (PxBounds3Ptr) heap;
}

ES PxBounds3Ptr physx_PxBounds3Ptr_physx_PxBounds3_transformFast_physx_PxMat33Ptr_physx_PxBounds3Ptr_(PxMat33Ptr wrp_matrix, PxBounds3Ptr wrp_bounds){
    auto ret = physx::PxBounds3::transformFast(*wrp_matrix, *wrp_bounds);
    auto heap = new char[sizeof PxBounds3];
    std::memcpy(heap, &ret, sizeof PxBounds3);
    return (PxBounds3Ptr) heap;
}

ES PxBounds3Ptr physx_PxBounds3Ptr_physx_PxBounds3_transformSafe_physx_PxTransformPtr_physx_PxBounds3Ptr_(PxTransformPtr wrp_transform, PxBounds3Ptr wrp_bounds){
    auto ret = physx::PxBounds3::transformSafe(*wrp_transform, *wrp_bounds);
    auto heap = new char[sizeof PxBounds3];
    std::memcpy(heap, &ret, sizeof PxBounds3);
    return (PxBounds3Ptr) heap;
}

ES PxBounds3Ptr physx_PxBounds3Ptr_physx_PxBounds3_transformFast_physx_PxTransformPtr_physx_PxBounds3Ptr_(PxTransformPtr wrp_transform, PxBounds3Ptr wrp_bounds){
    auto ret = physx::PxBounds3::transformFast(*wrp_transform, *wrp_bounds);
    auto heap = new char[sizeof PxBounds3];
    std::memcpy(heap, &ret, sizeof PxBounds3);
    return (PxBounds3Ptr) heap;
}
