// Generated by minBND 5.1.94.90 - Â© github.com/Alan-FGR

ES PxShapeFlagsPtr PxShapeFlagsPtr_operator_Ptr_Pipe_PxShapeFlag_PxShapeFlag_(physx::PxShapeFlag::Enum wrp_a, physx::PxShapeFlag::Enum wrp_b){
    auto ret = ::physx::operator|(wrp_a, wrp_b);
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_operator_Ptr_Amp_PxShapeFlag_PxShapeFlag_(physx::PxShapeFlag::Enum wrp_a, physx::PxShapeFlag::Enum wrp_b){
    auto ret = ::physx::operator&(wrp_a, wrp_b);
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_operator_Ptr_Tilde_PxShapeFlag_(physx::PxShapeFlag::Enum wrp_a){
    auto ret = ::physx::operator~(wrp_a);
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES void* PxShapePtr_GET_userData(PxShapePtr cls) {return (void*)cls->userData;}
ES void PxShapePtr_SET_userData(PxShapePtr cls, void* value) {cls->userData = value;}

ES void void_PxShapePtr_releasePtr(PxShapePtr wrp_this){
    wrp_this->release();
}

ES PxU32 uint_const_PxShapePtr_getReferenceCountPtr(PxShapePtr wrp_this){
    return (PxU32) wrp_this->getReferenceCount();
}

ES void void_PxShapePtr_acquireReferencePtr(PxShapePtr wrp_this){
    wrp_this->acquireReference();
}

ES physx::PxGeometryType::Enum PxGeometryType_const_PxShapePtr_getGeometryTypePtr(PxShapePtr wrp_this){
    return (physx::PxGeometryType::Enum) wrp_this->getGeometryType();
}

ES void void_PxShapePtr_setGeometryPtr_PxGeometry_(PxShapePtr wrp_this, physx::PxGeometry* wrp_geometry){
    wrp_this->setGeometry(*wrp_geometry);
}

ES PxGeometryHolderPtr PxGeometryHolderPtr_const_PxShapePtr_getGeometryPtr(PxShapePtr wrp_this){
    auto ret = wrp_this->getGeometry();
    auto heap = new char[sizeof PxGeometryHolder];
    std::memcpy(heap, &ret, sizeof PxGeometryHolder);
    return (PxGeometryHolderPtr) heap;
}

ES bool bool_const_PxShapePtr_getBoxGeometryPtr_PxBoxGeometry_(PxShapePtr wrp_this, physx::PxBoxGeometry* wrp_geometry){
    return (bool) wrp_this->getBoxGeometry(*wrp_geometry);
}

ES bool bool_const_PxShapePtr_getSphereGeometryPtr_PxSphereGeometry_(PxShapePtr wrp_this, physx::PxSphereGeometry* wrp_geometry){
    return (bool) wrp_this->getSphereGeometry(*wrp_geometry);
}

ES bool bool_const_PxShapePtr_getCapsuleGeometryPtr_PxCapsuleGeometry_(PxShapePtr wrp_this, physx::PxCapsuleGeometry* wrp_geometry){
    return (bool) wrp_this->getCapsuleGeometry(*wrp_geometry);
}

ES bool bool_const_PxShapePtr_getPlaneGeometryPtr_PxPlaneGeometry_(PxShapePtr wrp_this, physx::PxPlaneGeometry* wrp_geometry){
    return (bool) wrp_this->getPlaneGeometry(*wrp_geometry);
}

ES bool bool_const_PxShapePtr_getConvexMeshGeometryPtr_PxConvexMeshGeometry_(PxShapePtr wrp_this, physx::PxConvexMeshGeometry* wrp_geometry){
    return (bool) wrp_this->getConvexMeshGeometry(*wrp_geometry);
}

ES bool bool_const_PxShapePtr_getTriangleMeshGeometryPtr_PxTriangleMeshGeometry_(PxShapePtr wrp_this, physx::PxTriangleMeshGeometry* wrp_geometry){
    return (bool) wrp_this->getTriangleMeshGeometry(*wrp_geometry);
}

ES bool bool_const_PxShapePtr_getHeightFieldGeometryPtr_PxHeightFieldGeometry_(PxShapePtr wrp_this, physx::PxHeightFieldGeometry* wrp_geometry){
    return (bool) wrp_this->getHeightFieldGeometry(*wrp_geometry);
}

ES PxRigidActorPtr PxRigidActorPtr_const_PxShapePtr_getActorPtr(PxShapePtr wrp_this){
    return (PxRigidActorPtr) wrp_this->getActor();
}

ES void void_PxShapePtr_setLocalPosePtr_PxTransform_(PxShapePtr wrp_this, physx::PxTransform* wrp_pose){
    wrp_this->setLocalPose(*wrp_pose);
}

ES void PxTransform_const_PxShapePtr_getLocalPosePtr(physx::PxTransform* nRetRef, PxShapePtr wrp_this){
    *nRetRef = wrp_this->getLocalPose();
}

ES void void_PxShapePtr_setSimulationFilterDataPtr_PxFilterDataPtr_(PxShapePtr wrp_this, PxFilterDataPtr wrp_data){
    wrp_this->setSimulationFilterData(*wrp_data);
}

ES PxFilterDataPtr PxFilterDataPtr_const_PxShapePtr_getSimulationFilterDataPtr(PxShapePtr wrp_this){
    auto ret = wrp_this->getSimulationFilterData();
    auto heap = new char[sizeof PxFilterData];
    std::memcpy(heap, &ret, sizeof PxFilterData);
    return (PxFilterDataPtr) heap;
}

ES void void_PxShapePtr_setQueryFilterDataPtr_PxFilterDataPtr_(PxShapePtr wrp_this, PxFilterDataPtr wrp_data){
    wrp_this->setQueryFilterData(*wrp_data);
}

ES PxFilterDataPtr PxFilterDataPtr_const_PxShapePtr_getQueryFilterDataPtr(PxShapePtr wrp_this){
    auto ret = wrp_this->getQueryFilterData();
    auto heap = new char[sizeof PxFilterData];
    std::memcpy(heap, &ret, sizeof PxFilterData);
    return (PxFilterDataPtr) heap;
}

ES void void_PxShapePtr_setMaterialsPtr_PxMaterialPtr_ushort_(PxShapePtr wrp_this, PxMaterialPtr* wrp_materials, PxU16 wrp_materialCount){
    wrp_this->setMaterials(wrp_materials, wrp_materialCount);
}

ES PxU16 ushort_const_PxShapePtr_getNbMaterialsPtr(PxShapePtr wrp_this){
    return (PxU16) wrp_this->getNbMaterials();
}

ES PxU32 uint_const_PxShapePtr_getMaterialsPtr_PxMaterialPtr_uint_uint_(PxShapePtr wrp_this, PxMaterialPtr* wrp_userBuffer, PxU32 wrp_bufferSize, PxU32 wrp_startIndex){
    return (PxU32) wrp_this->getMaterials(wrp_userBuffer, wrp_bufferSize, wrp_startIndex);
}

ES PxMaterialPtr PxMaterialPtr_const_PxShapePtr_getMaterialFromInternalFaceIndexPtr_uint_(PxShapePtr wrp_this, PxU32 wrp_faceIndex){
    return (PxMaterialPtr) wrp_this->getMaterialFromInternalFaceIndex(wrp_faceIndex);
}

ES void void_PxShapePtr_setContactOffsetPtr_float_(PxShapePtr wrp_this, PxReal wrp_contactOffset){
    wrp_this->setContactOffset(wrp_contactOffset);
}

ES PxReal float_const_PxShapePtr_getContactOffsetPtr(PxShapePtr wrp_this){
    return (PxReal) wrp_this->getContactOffset();
}

ES void void_PxShapePtr_setRestOffsetPtr_float_(PxShapePtr wrp_this, PxReal wrp_restOffset){
    wrp_this->setRestOffset(wrp_restOffset);
}

ES PxReal float_const_PxShapePtr_getRestOffsetPtr(PxShapePtr wrp_this){
    return (PxReal) wrp_this->getRestOffset();
}

ES void void_PxShapePtr_setTorsionalPatchRadiusPtr_float_(PxShapePtr wrp_this, PxReal wrp_radius){
    wrp_this->setTorsionalPatchRadius(wrp_radius);
}

ES PxReal float_const_PxShapePtr_getTorsionalPatchRadiusPtr(PxShapePtr wrp_this){
    return (PxReal) wrp_this->getTorsionalPatchRadius();
}

ES void void_PxShapePtr_setMinTorsionalPatchRadiusPtr_float_(PxShapePtr wrp_this, PxReal wrp_radius){
    wrp_this->setMinTorsionalPatchRadius(wrp_radius);
}

ES PxReal float_const_PxShapePtr_getMinTorsionalPatchRadiusPtr(PxShapePtr wrp_this){
    return (PxReal) wrp_this->getMinTorsionalPatchRadius();
}

ES void void_PxShapePtr_setFlagPtr_PxShapeFlag_bool_(PxShapePtr wrp_this, physx::PxShapeFlag::Enum wrp_flag, bool wrp_value){
    wrp_this->setFlag(wrp_flag, wrp_value);
}

ES void void_PxShapePtr_setFlagsPtr_PxShapeFlagsPtr_(PxShapePtr wrp_this, PxShapeFlagsPtr wrp_inFlags){
    wrp_this->setFlags(*wrp_inFlags);
}

ES PxShapeFlagsPtr PxShapeFlagsPtr_const_PxShapePtr_getFlagsPtr(PxShapePtr wrp_this){
    auto ret = wrp_this->getFlags();
    auto heap = new char[sizeof PxShapeFlags];
    std::memcpy(heap, &ret, sizeof PxShapeFlags);
    return (PxShapeFlagsPtr) heap;
}

ES bool bool_const_PxShapePtr_isExclusivePtr(PxShapePtr wrp_this){
    return (bool) wrp_this->isExclusive();
}

ES void void_PxShapePtr_setNamePtr_string_(PxShapePtr wrp_this, char* wrp_name){
    wrp_this->setName(wrp_name);
}

ES char* string_const_PxShapePtr_getNamePtr(PxShapePtr wrp_this){
    return (char*) wrp_this->getName();
}

ES char* string_const_PxShapePtr_getConcreteTypeNamePtr(PxShapePtr wrp_this){
    return (char*) wrp_this->getConcreteTypeName();
}

ES PxU32 uint_const_PxShapePtr_getMaterialsPtr_PxMaterialPtr_uint_(PxShapePtr wrp_this, PxMaterialPtr* wrp_userBuffer, PxU32 wrp_bufferSize){
    return (PxU32) wrp_this->getMaterials(wrp_userBuffer, wrp_bufferSize);
}

