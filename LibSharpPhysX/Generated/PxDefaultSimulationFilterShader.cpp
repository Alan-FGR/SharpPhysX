// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
ES PxFilterFlagsPtr PxFilterFlagsPtr_physx_PxDefaultSimulationFilterShader_uint_physx_PxFilterDataPtr_uint_physx_PxFilterDataPtr_PxPairFlagsPtr_IntPtr_uint_(unsigned int wrp_attributes0, PxFilterDataPtr wrp_filterData0, unsigned int wrp_attributes1, PxFilterDataPtr wrp_filterData1, PxPairFlagsPtr wrp_pairFlags, void* wrp_constantBlock, unsigned int wrp_constantBlockSize){
    auto ret = physx::PxDefaultSimulationFilterShader(wrp_attributes0, *wrp_filterData0, wrp_attributes1, *wrp_filterData1, *wrp_pairFlags, wrp_constantBlock, wrp_constantBlockSize);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES bool bool_physx_PxGetGroupCollisionFlag_ushort_ushortCC(unsigned short wrp_group1, unsigned short wrp_group2){
    return (bool) physx::PxGetGroupCollisionFlag(wrp_group1, wrp_group2);
}

ES void void_physx_PxSetGroupCollisionFlag_ushort_ushort_boolCCC(unsigned short wrp_group1, unsigned short wrp_group2, bool wrp_enable){
    physx::PxSetGroupCollisionFlag(wrp_group1, wrp_group2, wrp_enable);
}

ES unsigned short ushort_physx_PxGetGroup_physx_PxActorPtr_(PxActorPtr wrp_actor){
    return (unsigned short) physx::PxGetGroup(*wrp_actor);
}

ES void void_physx_PxSetGroup_physx_PxActorPtr_ushort_C(PxActorPtr wrp_actor, unsigned short wrp_collisionGroup){
    physx::PxSetGroup(*wrp_actor, wrp_collisionGroup);
}

ES void void_physx_PxGetFilterOps_physx_PxFilterOpEnum_physx_PxFilterOpEnum_physx_PxFilterOpEnum_(physx::PxFilterOp::Enum* wrp_op0, physx::PxFilterOp::Enum* wrp_op1, physx::PxFilterOp::Enum* wrp_op2){
    physx::PxGetFilterOps(*wrp_op0, *wrp_op1, *wrp_op2);
}

ES void void_physx_PxSetFilterOps_physx_PxFilterOpEnum_physx_PxFilterOpEnum_physx_PxFilterOpEnum_(physx::PxFilterOp::Enum* wrp_op0, physx::PxFilterOp::Enum* wrp_op1, physx::PxFilterOp::Enum* wrp_op2){
    physx::PxSetFilterOps(*wrp_op0, *wrp_op1, *wrp_op2);
}

ES bool bool_physx_PxGetFilterBool(){
    return (bool) physx::PxGetFilterBool();
}

ES void void_physx_PxSetFilterBool_boolC(bool wrp_enable){
    physx::PxSetFilterBool(wrp_enable);
}

ES void void_physx_PxGetFilterConstants_physx_PxGroupsMaskPtr_physx_PxGroupsMaskPtr_(PxGroupsMaskPtr wrp_c0, PxGroupsMaskPtr wrp_c1){
    physx::PxGetFilterConstants(*wrp_c0, *wrp_c1);
}

ES void void_physx_PxSetFilterConstants_physx_PxGroupsMaskPtr_physx_PxGroupsMaskPtr_(PxGroupsMaskPtr wrp_c0, PxGroupsMaskPtr wrp_c1){
    physx::PxSetFilterConstants(*wrp_c0, *wrp_c1);
}

ES PxGroupsMaskPtr physx_PxGroupsMaskPtr_physx_PxGetGroupsMask_physx_PxActorPtr_(PxActorPtr wrp_actor){
    auto ret = physx::PxGetGroupsMask(*wrp_actor);
    auto heap = new char[sizeof PxGroupsMask];
    std::memcpy(heap, &ret, sizeof PxGroupsMask);
    return (PxGroupsMaskPtr) heap;
}

ES void void_physx_PxSetGroupsMask_physx_PxActorPtr_physx_PxGroupsMaskPtr_(PxActorPtr wrp_actor, PxGroupsMaskPtr wrp_mask){
    physx::PxSetGroupsMask(*wrp_actor, *wrp_mask);
}

ES void Freer_physx_PxGroupsMaskPtr(PxGroupsMaskPtr ptr){
    delete ptr;
}

ES PxGroupsMaskPtr Ctor_physx_PxGroupsMaskPtr_(){
    return (PxGroupsMaskPtr) new std::remove_pointer<PxGroupsMaskPtr>::type();
}

ES unsigned short PxGroupsMask_GET_bits0(PxGroupsMaskPtr cls) {return (unsigned short)cls->bits0;}
ES void PxGroupsMask_SET_bits0(PxGroupsMaskPtr cls, unsigned short value) {cls->bits0 = value;}

ES unsigned short PxGroupsMask_GET_bits1(PxGroupsMaskPtr cls) {return (unsigned short)cls->bits1;}
ES void PxGroupsMask_SET_bits1(PxGroupsMaskPtr cls, unsigned short value) {cls->bits1 = value;}

ES unsigned short PxGroupsMask_GET_bits2(PxGroupsMaskPtr cls) {return (unsigned short)cls->bits2;}
ES void PxGroupsMask_SET_bits2(PxGroupsMaskPtr cls, unsigned short value) {cls->bits2 = value;}

ES unsigned short PxGroupsMask_GET_bits3(PxGroupsMaskPtr cls) {return (unsigned short)cls->bits3;}
ES void PxGroupsMask_SET_bits3(PxGroupsMaskPtr cls, unsigned short value) {cls->bits3 = value;}
