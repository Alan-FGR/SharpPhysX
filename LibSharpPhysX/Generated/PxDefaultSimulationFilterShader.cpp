// Generated by minBND 5.1.91.17 - Â© github.com/Alan-FGR

ES PxFilterFlagsPtr PxFilterFlagsPtr_PxDefaultSimulationFilterShaderPtr_uint_PxFilterDataPtr_uint_PxFilterDataPtr_PxPairFlagsPtr_IntPtr_uint_(PxFilterObjectAttributes wrp_attributes0, PxFilterDataPtr wrp_filterData0, PxFilterObjectAttributes wrp_attributes1, PxFilterDataPtr wrp_filterData1, PxPairFlagsPtr wrp_pairFlags, void* wrp_constantBlock, PxU32 wrp_constantBlockSize){
    auto ret = ::physx::PxDefaultSimulationFilterShader(wrp_attributes0, *wrp_filterData0, wrp_attributes1, *wrp_filterData1, *wrp_pairFlags, wrp_constantBlock, wrp_constantBlockSize);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES bool bool_PxGetGroupCollisionFlagPtr_ushort_ushortCC(PxU16 wrp_group1, PxU16 wrp_group2){
    return (bool) ::physx::PxGetGroupCollisionFlag(wrp_group1, wrp_group2);
}

ES void void_PxSetGroupCollisionFlagPtr_ushort_ushort_boolCCC(PxU16 wrp_group1, PxU16 wrp_group2, bool wrp_enable){
    ::physx::PxSetGroupCollisionFlag(wrp_group1, wrp_group2, wrp_enable);
}

ES PxU16 ushort_PxGetGroupPtr_PxActorPtr_(PxActorPtr wrp_actor){
    return (PxU16) ::physx::PxGetGroup(*wrp_actor);
}

ES void void_PxSetGroupPtr_PxActorPtr_ushort_C(PxActorPtr wrp_actor, PxU16 wrp_collisionGroup){
    ::physx::PxSetGroup(*wrp_actor, wrp_collisionGroup);
}

ES void void_PxGetFilterOpsPtr_PxFilterOpEnum_PxFilterOpEnum_PxFilterOpEnum_(physx::PxFilterOp::Enum* wrp_op0, physx::PxFilterOp::Enum* wrp_op1, physx::PxFilterOp::Enum* wrp_op2){
    ::physx::PxGetFilterOps(*wrp_op0, *wrp_op1, *wrp_op2);
}

ES void void_PxSetFilterOpsPtr_PxFilterOpEnum_PxFilterOpEnum_PxFilterOpEnum_(physx::PxFilterOp::Enum* wrp_op0, physx::PxFilterOp::Enum* wrp_op1, physx::PxFilterOp::Enum* wrp_op2){
    ::physx::PxSetFilterOps(*wrp_op0, *wrp_op1, *wrp_op2);
}

ES bool bool_PxGetFilterBoolPtr(){
    return (bool) ::physx::PxGetFilterBool();
}

ES void void_PxSetFilterBoolPtr_boolC(bool wrp_enable){
    ::physx::PxSetFilterBool(wrp_enable);
}

ES void void_PxGetFilterConstantsPtr_PxGroupsMaskPtr_PxGroupsMaskPtr_(PxGroupsMaskPtr wrp_c0, PxGroupsMaskPtr wrp_c1){
    ::physx::PxGetFilterConstants(*wrp_c0, *wrp_c1);
}

ES void void_PxSetFilterConstantsPtr_PxGroupsMaskPtr_PxGroupsMaskPtr_(PxGroupsMaskPtr wrp_c0, PxGroupsMaskPtr wrp_c1){
    ::physx::PxSetFilterConstants(*wrp_c0, *wrp_c1);
}

ES PxGroupsMaskPtr PxGroupsMaskPtr_PxGetGroupsMaskPtr_PxActorPtr_(PxActorPtr wrp_actor){
    auto ret = ::physx::PxGetGroupsMask(*wrp_actor);
    auto heap = new char[sizeof PxGroupsMask];
    std::memcpy(heap, &ret, sizeof PxGroupsMask);
    return (PxGroupsMaskPtr) heap;
}

ES void void_PxSetGroupsMaskPtr_PxActorPtr_PxGroupsMaskPtr_(PxActorPtr wrp_actor, PxGroupsMaskPtr wrp_mask){
    ::physx::PxSetGroupsMask(*wrp_actor, *wrp_mask);
}

ES void Freer_physx_PxGroupsMaskPtr(PxGroupsMaskPtr ptr){
    delete ptr;
}

ES PxGroupsMaskPtr Ctor_PxGroupsMaskPtr_(){
    auto ret = *(new std::remove_pointer<PxGroupsMaskPtr>::type());
    auto heap = new char[sizeof PxGroupsMask];
    std::memcpy(heap, &ret, sizeof PxGroupsMask);
    return (PxGroupsMaskPtr) heap;
}

ES PxU16 PxGroupsMaskPtr_GET_bits0(PxGroupsMaskPtr cls) {return (PxU16)cls->bits0;}
ES void PxGroupsMaskPtr_SET_bits0(PxGroupsMaskPtr cls, PxU16 value) {cls->bits0 = value;}

ES PxU16 PxGroupsMaskPtr_GET_bits1(PxGroupsMaskPtr cls) {return (PxU16)cls->bits1;}
ES void PxGroupsMaskPtr_SET_bits1(PxGroupsMaskPtr cls, PxU16 value) {cls->bits1 = value;}

ES PxU16 PxGroupsMaskPtr_GET_bits2(PxGroupsMaskPtr cls) {return (PxU16)cls->bits2;}
ES void PxGroupsMaskPtr_SET_bits2(PxGroupsMaskPtr cls, PxU16 value) {cls->bits2 = value;}

ES PxU16 PxGroupsMaskPtr_GET_bits3(PxGroupsMaskPtr cls) {return (PxU16)cls->bits3;}
ES void PxGroupsMaskPtr_SET_bits3(PxGroupsMaskPtr cls, PxU16 value) {cls->bits3 = value;}

