// Generated by minBND 5.1.91.17 - Â© github.com/Alan-FGR

ES void void_PxDebugPoint_PxDebugPointPtr_Ctor_PxVec3_uint_(physx::PxDebugPoint* wrp_this, physx::PxVec3* wrp_p, PxU32* wrp_c){
    *wrp_this = ::physx::PxDebugPoint::PxDebugPoint(*wrp_p, *wrp_c);
}

ES void void_PxDebugLine_PxDebugLinePtr_Ctor_PxVec3_PxVec3_uint_(physx::PxDebugLine* wrp_this, physx::PxVec3* wrp_p0, physx::PxVec3* wrp_p1, PxU32* wrp_c){
    *wrp_this = ::physx::PxDebugLine::PxDebugLine(*wrp_p0, *wrp_p1, *wrp_c);
}

ES void void_PxDebugTriangle_PxDebugTrianglePtr_Ctor_PxVec3_PxVec3_PxVec3_uint_(physx::PxDebugTriangle* wrp_this, physx::PxVec3* wrp_p0, physx::PxVec3* wrp_p1, physx::PxVec3* wrp_p2, PxU32* wrp_c){
    *wrp_this = ::physx::PxDebugTriangle::PxDebugTriangle(*wrp_p0, *wrp_p1, *wrp_p2, *wrp_c);
}

ES void Freer_physx_PxDebugTextPtr(PxDebugTextPtr ptr){
    delete ptr;
}

ES PxDebugTextPtr Ctor_PxDebugTextPtr_(){
    auto ret = *(new std::remove_pointer<PxDebugTextPtr>::type());
    auto heap = new char[sizeof PxDebugText];
    std::memcpy(heap, &ret, sizeof PxDebugText);
    return (PxDebugTextPtr) heap;
}

ES PxDebugTextPtr Ctor_PxDebugTextPtr_PxVec3_float_uint_string(physx::PxVec3* wrp_p, PxReal* wrp_s, PxU32* wrp_c, char* wrp_str){
    auto ret = *(new std::remove_pointer<PxDebugTextPtr>::type(*wrp_p, *wrp_s, *wrp_c, wrp_str));
    auto heap = new char[sizeof PxDebugText];
    std::memcpy(heap, &ret, sizeof PxDebugText);
    return (PxDebugTextPtr) heap;
}

ES void PxDebugTextPtr_GET_position(PxDebugTextPtr cls, physx::PxVec3* GetRetRef) {*GetRetRef = cls->position;}
ES void PxDebugTextPtr_SET_position(PxDebugTextPtr cls, physx::PxVec3 value) {cls->position = value;}

ES PxReal PxDebugTextPtr_GET_size(PxDebugTextPtr cls) {return (PxReal)cls->size;}
ES void PxDebugTextPtr_SET_size(PxDebugTextPtr cls, PxReal value) {cls->size = value;}

ES PxU32 PxDebugTextPtr_GET_color(PxDebugTextPtr cls) {return (PxU32)cls->color;}
ES void PxDebugTextPtr_SET_color(PxDebugTextPtr cls, PxU32 value) {cls->color = value;}

ES char* PxDebugTextPtr_GET_string(PxDebugTextPtr cls) {return (char*)cls->string;}
ES void PxDebugTextPtr_SET_string(PxDebugTextPtr cls, char* value) {cls->string = value;}

ES PxU32 uint_const_PxRenderBufferPtr_getNbPointsPtr(PxRenderBufferPtr wrp_this){
    return (PxU32) wrp_this->getNbPoints();
}

ES physx::PxDebugPoint* PxDebugPoint_const_PxRenderBufferPtr_getPointsPtr(PxRenderBufferPtr wrp_this){
    return (physx::PxDebugPoint*) wrp_this->getPoints();
}

ES PxU32 uint_const_PxRenderBufferPtr_getNbLinesPtr(PxRenderBufferPtr wrp_this){
    return (PxU32) wrp_this->getNbLines();
}

ES physx::PxDebugLine* PxDebugLine_const_PxRenderBufferPtr_getLinesPtr(PxRenderBufferPtr wrp_this){
    return (physx::PxDebugLine*) wrp_this->getLines();
}

ES PxU32 uint_const_PxRenderBufferPtr_getNbTrianglesPtr(PxRenderBufferPtr wrp_this){
    return (PxU32) wrp_this->getNbTriangles();
}

ES physx::PxDebugTriangle* PxDebugTriangle_const_PxRenderBufferPtr_getTrianglesPtr(PxRenderBufferPtr wrp_this){
    return (physx::PxDebugTriangle*) wrp_this->getTriangles();
}

ES PxU32 uint_const_PxRenderBufferPtr_getNbTextsPtr(PxRenderBufferPtr wrp_this){
    return (PxU32) wrp_this->getNbTexts();
}

ES PxDebugTextPtr PxDebugTextPtr_const_PxRenderBufferPtr_getTextsPtr(PxRenderBufferPtr wrp_this){
    return (PxDebugTextPtr) wrp_this->getTexts();
}

ES void void_PxRenderBufferPtr_appendPtr_PxRenderBufferPtr_(PxRenderBufferPtr wrp_this, PxRenderBufferPtr wrp_other){
    wrp_this->append(*wrp_other);
}

ES void void_PxRenderBufferPtr_clearPtr(PxRenderBufferPtr wrp_this){
    wrp_this->clear();
}

