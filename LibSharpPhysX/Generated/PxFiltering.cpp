// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
ES physx::PxFilterObjectType::Enum physx_PxFilterObjectTypeEnum_physx_PxGetFilterObjectType_uint_(unsigned int wrp_attr){
    return (physx::PxFilterObjectType::Enum) physx::PxGetFilterObjectType(wrp_attr);
}

ES bool bool_physx_PxFilterObjectIsKinematic_uint_(unsigned int wrp_attr){
    return (bool) physx::PxFilterObjectIsKinematic(wrp_attr);
}

ES bool bool_physx_PxFilterObjectIsTrigger_uint_(unsigned int wrp_attr){
    return (bool) physx::PxFilterObjectIsTrigger(wrp_attr);
}

ES void Freer_physx_PxFilterDataPtr(PxFilterDataPtr ptr){
    delete ptr;
}

ES PxFilterDataPtr Ctor_physx_PxFilterDataPtr_physx_PxEMPTY(physx::PxEMPTY wrp__){
    return (PxFilterDataPtr) new std::remove_pointer<PxFilterDataPtr>::type(wrp__);
}

ES PxFilterDataPtr Ctor_physx_PxFilterDataPtr_(){
    return (PxFilterDataPtr) new std::remove_pointer<PxFilterDataPtr>::type();
}

ES PxFilterDataPtr Ctor_physx_PxFilterDataPtr_physx_PxFilterDataPtr(PxFilterDataPtr wrp_fd){
    return (PxFilterDataPtr) new std::remove_pointer<PxFilterDataPtr>::type(*wrp_fd);
}

ES PxFilterDataPtr Ctor_physx_PxFilterDataPtr_uint_uint_uint_uint(unsigned int wrp_w0, unsigned int wrp_w1, unsigned int wrp_w2, unsigned int wrp_w3){
    return (PxFilterDataPtr) new std::remove_pointer<PxFilterDataPtr>::type(wrp_w0, wrp_w1, wrp_w2, wrp_w3);
}

ES unsigned int PxFilterData_GET_word0(PxFilterDataPtr cls) {return (unsigned int)cls->word0;}
ES void PxFilterData_SET_word0(PxFilterDataPtr cls, unsigned int value) {cls->word0 = value;}

ES unsigned int PxFilterData_GET_word1(PxFilterDataPtr cls) {return (unsigned int)cls->word1;}
ES void PxFilterData_SET_word1(PxFilterDataPtr cls, unsigned int value) {cls->word1 = value;}

ES unsigned int PxFilterData_GET_word2(PxFilterDataPtr cls) {return (unsigned int)cls->word2;}
ES void PxFilterData_SET_word2(PxFilterDataPtr cls, unsigned int value) {cls->word2 = value;}

ES unsigned int PxFilterData_GET_word3(PxFilterDataPtr cls) {return (unsigned int)cls->word3;}
ES void PxFilterData_SET_word3(PxFilterDataPtr cls, unsigned int value) {cls->word3 = value;}

ES void void_physx_PxFilterData_setToDefault(PxFilterDataPtr wrp_this){
    wrp_this->setToDefault();
}

ES bool bool_const_physx_PxFilterData_operator_EqualEqual_physx_PxFilterDataPtr_(PxFilterDataPtr wrp_lhs, PxFilterDataPtr wrp_a){
    return (bool) wrp_lhs->operator==(*wrp_a);
}

ES bool bool_const_physx_PxFilterData_operator_ExclaimEqual_physx_PxFilterDataPtr_(PxFilterDataPtr wrp_lhs, PxFilterDataPtr wrp_a){
    return (bool) wrp_lhs->operator!=(*wrp_a);
}

ES PxFilterFlagsPtr PxFilterFlagsPtr_physx_PxSimulationFilterCallback_pairFound_uint_uint_physx_PxFilterDataPtr_physx_PxActorPtr_physx_PxShapePtr_uint_physx_PxFilterDataPtr_physx_PxActorPtr_physx_PxShapePtr_PxPairFlagsPtr_(PxSimulationFilterCallbackPtr wrp_this, unsigned int wrp_pairID, unsigned int wrp_attributes0, PxFilterDataPtr wrp_filterData0, PxActorPtr wrp_a0, PxShapePtr wrp_s0, unsigned int wrp_attributes1, PxFilterDataPtr wrp_filterData1, PxActorPtr wrp_a1, PxShapePtr wrp_s1, PxPairFlagsPtr wrp_pairFlags){
    auto ret = wrp_this->pairFound(wrp_pairID, wrp_attributes0, *wrp_filterData0, wrp_a0, wrp_s0, wrp_attributes1, *wrp_filterData1, wrp_a1, wrp_s1, *wrp_pairFlags);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

ES void void_physx_PxSimulationFilterCallback_pairLost_uint_uint_physx_PxFilterDataPtr_uint_physx_PxFilterDataPtr_bool_(PxSimulationFilterCallbackPtr wrp_this, unsigned int wrp_pairID, unsigned int wrp_attributes0, PxFilterDataPtr wrp_filterData0, unsigned int wrp_attributes1, PxFilterDataPtr wrp_filterData1, bool wrp_objectRemoved){
    wrp_this->pairLost(wrp_pairID, wrp_attributes0, *wrp_filterData0, wrp_attributes1, *wrp_filterData1, wrp_objectRemoved);
}

ES bool bool_physx_PxSimulationFilterCallback_statusChange_uint_PxPairFlagsPtr_PxFilterFlagsPtr_(PxSimulationFilterCallbackPtr wrp_this, unsigned int* wrp_pairID, PxPairFlagsPtr wrp_pairFlags, PxFilterFlagsPtr wrp_filterFlags){
    return (bool) wrp_this->statusChange(*wrp_pairID, *wrp_pairFlags, *wrp_filterFlags);
}
