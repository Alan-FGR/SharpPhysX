// Generated by minBND 5.1.90.51 - Â© github.com/Alan-FGR

//DBG: FunctionNode physx::operator| L280
//physx::operator| static physx.PxPairFlagsPtr OpPipe_New(physx.PxPairFlagEnum a, physx.PxPairFlagEnum b) will also be bound as member operator
//RET nat: PxPairFlagsPtr, man: physx.PxPairFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxPairFlag::Enum, man: physx.PxPairFlagEnum, kind: Value
//PAR nat: physx::PxPairFlag::Enum, man: physx.PxPairFlagEnum, kind: Value
ES PxPairFlagsPtr PxPairFlagsPtr_operator_Ptr_Pipe_PxPairFlagEnum_PxPairFlagEnum_(physx::PxPairFlag::Enum wrp_a, physx::PxPairFlag::Enum wrp_b){
    auto ret = ::physx::operator|(wrp_a, wrp_b);
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

//DBG: FunctionNode physx::operator& L280
//physx::operator& static physx.PxPairFlagsPtr OpAnd_New(physx.PxPairFlagEnum a, physx.PxPairFlagEnum b) will also be bound as member operator
//RET nat: PxPairFlagsPtr, man: physx.PxPairFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxPairFlag::Enum, man: physx.PxPairFlagEnum, kind: Value
//PAR nat: physx::PxPairFlag::Enum, man: physx.PxPairFlagEnum, kind: Value
ES PxPairFlagsPtr PxPairFlagsPtr_operator_Ptr_Amp_PxPairFlagEnum_PxPairFlagEnum_(physx::PxPairFlag::Enum wrp_a, physx::PxPairFlag::Enum wrp_b){
    auto ret = ::physx::operator&(wrp_a, wrp_b);
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

//DBG: FunctionNode physx::operator~ L280
//physx::operator~ static physx.PxPairFlagsPtr OpTilde_New(physx.PxPairFlagEnum a) will also be bound as member operator
//RET nat: PxPairFlagsPtr, man: physx.PxPairFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxPairFlag::Enum, man: physx.PxPairFlagEnum, kind: Value
ES PxPairFlagsPtr PxPairFlagsPtr_operator_Ptr_Tilde_PxPairFlagEnum_(physx::PxPairFlag::Enum wrp_a){
    auto ret = ::physx::operator~(wrp_a);
    auto heap = new char[sizeof PxPairFlags];
    std::memcpy(heap, &ret, sizeof PxPairFlags);
    return (PxPairFlagsPtr) heap;
}

//DBG: FunctionNode physx::operator| L358
//physx::operator| static physx.PxFilterFlagsPtr OpPipe_New(physx.PxFilterFlagEnum a, physx.PxFilterFlagEnum b) will also be bound as member operator
//RET nat: PxFilterFlagsPtr, man: physx.PxFilterFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxFilterFlag::Enum, man: physx.PxFilterFlagEnum, kind: Value
//PAR nat: physx::PxFilterFlag::Enum, man: physx.PxFilterFlagEnum, kind: Value
ES PxFilterFlagsPtr PxFilterFlagsPtr_operator_Ptr_Pipe_PxFilterFlagEnum_PxFilterFlagEnum_(physx::PxFilterFlag::Enum wrp_a, physx::PxFilterFlag::Enum wrp_b){
    auto ret = ::physx::operator|(wrp_a, wrp_b);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

//DBG: FunctionNode physx::operator& L358
//physx::operator& static physx.PxFilterFlagsPtr OpAnd_New(physx.PxFilterFlagEnum a, physx.PxFilterFlagEnum b) will also be bound as member operator
//RET nat: PxFilterFlagsPtr, man: physx.PxFilterFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxFilterFlag::Enum, man: physx.PxFilterFlagEnum, kind: Value
//PAR nat: physx::PxFilterFlag::Enum, man: physx.PxFilterFlagEnum, kind: Value
ES PxFilterFlagsPtr PxFilterFlagsPtr_operator_Ptr_Amp_PxFilterFlagEnum_PxFilterFlagEnum_(physx::PxFilterFlag::Enum wrp_a, physx::PxFilterFlag::Enum wrp_b){
    auto ret = ::physx::operator&(wrp_a, wrp_b);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

//DBG: FunctionNode physx::operator~ L358
//physx::operator~ static physx.PxFilterFlagsPtr OpTilde_New(physx.PxFilterFlagEnum a) will also be bound as member operator
//RET nat: PxFilterFlagsPtr, man: physx.PxFilterFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxFilterFlag::Enum, man: physx.PxFilterFlagEnum, kind: Value
ES PxFilterFlagsPtr PxFilterFlagsPtr_operator_Ptr_Tilde_PxFilterFlagEnum_(physx::PxFilterFlag::Enum wrp_a){
    auto ret = ::physx::operator~(wrp_a);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

//DBG: FunctionNode physx::PxGetFilterObjectType L502-505
//RET nat: physx::PxFilterObjectType::Enum, man: physx.PxFilterObjectTypeEnum, ret: True, kind: Value
//PAR nat: PxFilterObjectAttributes, man: uint, kind: Value
ES physx::PxFilterObjectType::Enum PxFilterObjectTypeEnum_PxGetFilterObjectTypePtr_uint_(PxFilterObjectAttributes wrp_attr){
    return (physx::PxFilterObjectType::Enum) ::physx::PxGetFilterObjectType(wrp_attr);
}

//DBG: FunctionNode physx::PxFilterObjectIsKinematic L516-519
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxFilterObjectAttributes, man: uint, kind: Value
ES bool bool_PxFilterObjectIsKinematicPtr_uint_(PxFilterObjectAttributes wrp_attr){
    return (bool) ::physx::PxFilterObjectIsKinematic(wrp_attr);
}

//DBG: FunctionNode physx::PxFilterObjectIsTrigger L530-533
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxFilterObjectAttributes, man: uint, kind: Value
ES bool bool_PxFilterObjectIsTriggerPtr_uint_(PxFilterObjectAttributes wrp_attr){
    return (bool) ::physx::PxFilterObjectIsTrigger(wrp_attr);
}

//DBG: ClassNode PxPairFlag physx::PxPairFlag L55-272

//DBG: ClassNode PxFilterFlag physx::PxFilterFlag L289-350
//Subclasses using this: 0

//DBG: ClassNode PxFilterData physx::PxFilterData L366-436

//DBG: NewerFreerNode PxFilterData physx::PxFilterData L366-436
ES void Freer_physx_PxFilterDataPtr(PxFilterDataPtr ptr){
    delete ptr;
}

//DBG: PtrWrapperCtorNode physx::PxFilterData::PxFilterData L375-377
//RET nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxEMPTY, man: physx.PxEMPTY, kind: Value
ES PxFilterDataPtr Ctor_PxFilterDataPtr_PxEMPTY(physx::PxEMPTY wrp__){
    auto ret = *(new std::remove_pointer<PxFilterDataPtr>::type(wrp__));
    auto heap = new char[sizeof PxFilterData];
    std::memcpy(heap, &ret, sizeof PxFilterData);
    return (PxFilterDataPtr) heap;
}

//DBG: PtrWrapperCtorNode physx::PxFilterData::PxFilterData L382-385
//RET nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, ret: True, kind: PtrStruct
ES PxFilterDataPtr Ctor_PxFilterDataPtr_(){
    auto ret = *(new std::remove_pointer<PxFilterDataPtr>::type());
    auto heap = new char[sizeof PxFilterData];
    std::memcpy(heap, &ret, sizeof PxFilterData);
    return (PxFilterDataPtr) heap;
}

//DBG: PtrWrapperCtorNode physx::PxFilterData::PxFilterData L390
//RET nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, ret: True, kind: PtrStruct
//PAR nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, kind: PtrStruct
ES PxFilterDataPtr Ctor_PxFilterDataPtr_PxFilterDataPtr(PxFilterDataPtr wrp_fd){
    auto ret = *(new std::remove_pointer<PxFilterDataPtr>::type(*wrp_fd));
    auto heap = new char[sizeof PxFilterData];
    std::memcpy(heap, &ret, sizeof PxFilterData);
    return (PxFilterDataPtr) heap;
}

//DBG: PtrWrapperCtorNode physx::PxFilterData::PxFilterData L395
//RET nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, ret: True, kind: PtrStruct
//PAR nat: PxU32, man: uint, kind: Value
//PAR nat: PxU32, man: uint, kind: Value
//PAR nat: PxU32, man: uint, kind: Value
//PAR nat: PxU32, man: uint, kind: Value
ES PxFilterDataPtr Ctor_PxFilterDataPtr_uint_uint_uint_uint(PxU32 wrp_w0, PxU32 wrp_w1, PxU32 wrp_w2, PxU32 wrp_w3){
    auto ret = *(new std::remove_pointer<PxFilterDataPtr>::type(wrp_w0, wrp_w1, wrp_w2, wrp_w3));
    auto heap = new char[sizeof PxFilterData];
    std::memcpy(heap, &ret, sizeof PxFilterData);
    return (PxFilterDataPtr) heap;
}

//DBG: Field: word0 - 432-432
ES PxU32 PxFilterDataPtr_GET_word0(PxFilterDataPtr cls) {return (PxU32)cls->word0;}
ES void PxFilterDataPtr_SET_word0(PxFilterDataPtr cls, PxU32 value) {cls->word0 = value;}

//DBG: Field: word1 - 433-433
ES PxU32 PxFilterDataPtr_GET_word1(PxFilterDataPtr cls) {return (PxU32)cls->word1;}
ES void PxFilterDataPtr_SET_word1(PxFilterDataPtr cls, PxU32 value) {cls->word1 = value;}

//DBG: Field: word2 - 434-434
ES PxU32 PxFilterDataPtr_GET_word2(PxFilterDataPtr cls) {return (PxU32)cls->word2;}
ES void PxFilterDataPtr_SET_word2(PxFilterDataPtr cls, PxU32 value) {cls->word2 = value;}

//DBG: Field: word3 - 435-435
ES PxU32 PxFilterDataPtr_GET_word3(PxFilterDataPtr cls) {return (PxU32)cls->word3;}
ES void PxFilterDataPtr_SET_word3(PxFilterDataPtr cls, PxU32 value) {cls->word3 = value;}

//DBG: MethodNode physx::PxFilterData::setToDefault L400-403
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, kind: PtrStruct
ES void void_PxFilterDataPtr_setToDefaultPtr(PxFilterDataPtr wrp_this){
    wrp_this->setToDefault();
}

//DBG: MethodNode physx::PxFilterData::operator= L408-414
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, kind: PtrStruct
//PAR nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, kind: PtrStruct
ES void void_PxFilterDataPtr_operator_Ptr_Equal_PxFilterDataPtr_(PxFilterDataPtr wrp_lhs, PxFilterDataPtr wrp_fd){
    wrp_lhs->::physx::PxFilterData::operator=(*wrp_fd);
}

//DBG: MethodNode physx::PxFilterData::operator== L419-422
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, kind: PtrStruct
//PAR nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, kind: PtrStruct
ES bool bool_const_PxFilterDataPtr_operator_Ptr_EqualEqual_PxFilterDataPtr_(PxFilterDataPtr wrp_lhs, PxFilterDataPtr wrp_a){
    return (bool) wrp_lhs->::physx::PxFilterData::operator==(*wrp_a);
}

//DBG: MethodNode physx::PxFilterData::operator!= L427-430
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, kind: PtrStruct
//PAR nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, kind: PtrStruct
ES bool bool_const_PxFilterDataPtr_operator_Ptr_ExclaimEqual_PxFilterDataPtr_(PxFilterDataPtr wrp_lhs, PxFilterDataPtr wrp_a){
    return (bool) wrp_lhs->::physx::PxFilterData::operator!=(*wrp_a);
}

//DBG: MethodNode physx::PxFilterData::~PxFilterData L366
//ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxFilterData::~PxFilterData L366, Destructor

//Operators

//DBG: ClassNode PxFilterObjectType physx::PxFilterObjectType L444-472

//DBG: ClassNode PxFilterObjectFlag physx::PxFilterObjectFlag L476-483
//Subclasses using this: 0

//DBG: ClassNode PxSimulationFilterCallback physx::PxSimulationFilterCallback L617-697

//DBG: MethodNode physx::PxSimulationFilterCallback::pairFound L644-647
//RET nat: PxFilterFlagsPtr, man: physx.PxFilterFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: PxSimulationFilterCallbackPtr, man: physx.PxSimulationFilterCallbackPtr, kind: PtrStruct
//PAR nat: PxU32, man: uint, kind: Value
//PAR nat: PxFilterObjectAttributes, man: uint, kind: Value
//PAR nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, kind: PtrStruct
//PAR nat: PxActorPtr, man: physx.PxActorPtr, kind: PtrStruct
//PAR nat: PxShapePtr, man: physx.PxShapePtr, kind: PtrStruct
//PAR nat: PxFilterObjectAttributes, man: uint, kind: Value
//PAR nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, kind: PtrStruct
//PAR nat: PxActorPtr, man: physx.PxActorPtr, kind: PtrStruct
//PAR nat: PxShapePtr, man: physx.PxShapePtr, kind: PtrStruct
//PAR nat: PxPairFlagsPtr, man: physx.PxPairFlagsPtr, kind: PtrStruct
ES PxFilterFlagsPtr PxFilterFlagsPtr_PxSimulationFilterCallbackPtr_pairFoundPtr_uint_uint_PxFilterDataPtr_PxActorPtr_PxShapePtr_uint_PxFilterDataPtr_PxActorPtr_PxShapePtr_PxPairFlagsPtr_(PxSimulationFilterCallbackPtr wrp_this, PxU32 wrp_pairID, PxFilterObjectAttributes wrp_attributes0, PxFilterDataPtr wrp_filterData0, PxActorPtr wrp_a0, PxShapePtr wrp_s0, PxFilterObjectAttributes wrp_attributes1, PxFilterDataPtr wrp_filterData1, PxActorPtr wrp_a1, PxShapePtr wrp_s1, PxPairFlagsPtr wrp_pairFlags){
    auto ret = wrp_this->pairFound(wrp_pairID, wrp_attributes0, *wrp_filterData0, wrp_a0, wrp_s0, wrp_attributes1, *wrp_filterData1, wrp_a1, wrp_s1, *wrp_pairFlags);
    auto heap = new char[sizeof PxFilterFlags];
    std::memcpy(heap, &ret, sizeof PxFilterFlags);
    return (PxFilterFlagsPtr) heap;
}

//DBG: MethodNode physx::PxSimulationFilterCallback::pairLost L664-669
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxSimulationFilterCallbackPtr, man: physx.PxSimulationFilterCallbackPtr, kind: PtrStruct
//PAR nat: PxU32, man: uint, kind: Value
//PAR nat: PxFilterObjectAttributes, man: uint, kind: Value
//PAR nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, kind: PtrStruct
//PAR nat: PxFilterObjectAttributes, man: uint, kind: Value
//PAR nat: PxFilterDataPtr, man: physx.PxFilterDataPtr, kind: PtrStruct
//PAR nat: bool, man: bool, kind: Value
ES void void_PxSimulationFilterCallbackPtr_pairLostPtr_uint_uint_PxFilterDataPtr_uint_PxFilterDataPtr_bool_(PxSimulationFilterCallbackPtr wrp_this, PxU32 wrp_pairID, PxFilterObjectAttributes wrp_attributes0, PxFilterDataPtr wrp_filterData0, PxFilterObjectAttributes wrp_attributes1, PxFilterDataPtr wrp_filterData1, bool wrp_objectRemoved){
    wrp_this->pairLost(wrp_pairID, wrp_attributes0, *wrp_filterData0, wrp_attributes1, *wrp_filterData1, wrp_objectRemoved);
}

//DBG: MethodNode physx::PxSimulationFilterCallback::statusChange L693
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxSimulationFilterCallbackPtr, man: physx.PxSimulationFilterCallbackPtr, kind: PtrStruct
//PAR nat: PxU32*, man: uint*, kind: Value
//PAR nat: PxPairFlagsPtr, man: physx.PxPairFlagsPtr, kind: PtrStruct
//PAR nat: PxFilterFlagsPtr, man: physx.PxFilterFlagsPtr, kind: PtrStruct
ES bool bool_PxSimulationFilterCallbackPtr_statusChangePtr_uint_PxPairFlagsPtr_PxFilterFlagsPtr_(PxSimulationFilterCallbackPtr wrp_this, PxU32* wrp_pairID, PxPairFlagsPtr wrp_pairFlags, PxFilterFlagsPtr wrp_filterFlags){
    return (bool) wrp_this->statusChange(*wrp_pairID, *wrp_pairFlags, *wrp_filterFlags);
}

//DBG: MethodNode physx::PxSimulationFilterCallback::operator= L617
//ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxSimulationFilterCallback::operator= L617

//Operators

//DBG: ClassNode PxPairFilteringMode physx::PxPairFilteringMode L699-725

//DBG: DeclNode PxFilterFlags physx::PxFilterFlags L357

//DBG: DeclNode PxFilterObjectAttributes physx::PxFilterObjectAttributes L491

//DBG: DeclNode PxPairFlags physx::PxPairFlags L279

//DBG: DeclNode PxSimulationFilterShader physx::PxSimulationFilterShader L588-591

//DBG: DeclNode INVALID_FILTER_PAIR_INDEX physx::INVALID_FILTER_PAIR_INDEX L48
