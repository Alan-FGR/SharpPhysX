// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
ES void Default_physx_PxVec3_(physx::PxVec3* RetRef){
    *RetRef = *RetRef = physx::PxVec3();
}

ES void void_physx_PxVec3_PxVec3_Ctor_physx_PxZERO_(physx::PxVec3* wrp_this, physx::PxZERO wrp_r){
    *wrp_this = physx::PxVec3::PxVec3(wrp_r);
}

ES void void_physx_PxVec3_PxVec3_Ctor_float_(physx::PxVec3* wrp_this, float wrp_a){
    *wrp_this = physx::PxVec3::PxVec3(wrp_a);
}

ES void void_physx_PxVec3_PxVec3_Ctor_float_float_float_(physx::PxVec3* wrp_this, float wrp_nx, float wrp_ny, float wrp_nz){
    *wrp_this = physx::PxVec3::PxVec3(wrp_nx, wrp_ny, wrp_nz);
}

ES void void_physx_PxVec3_PxVec3_Ctor_physx_PxVec3_(physx::PxVec3* wrp_this, physx::PxVec3* wrp_v){
    *wrp_this = physx::PxVec3::PxVec3(*wrp_v);
}

ES bool bool_const_physx_PxVec3_operator_EqualEqual_physx_PxVec3_(physx::PxVec3* wrp_lhs, physx::PxVec3* wrp_v){
    return (bool) wrp_lhs->operator==(*wrp_v);
}

ES bool bool_const_physx_PxVec3_operator_ExclaimEqual_physx_PxVec3_(physx::PxVec3* wrp_lhs, physx::PxVec3* wrp_v){
    return (bool) wrp_lhs->operator!=(*wrp_v);
}

ES bool bool_const_physx_PxVec3_isZero(physx::PxVec3* wrp_this){
    return (bool) wrp_this->isZero();
}

ES bool bool_const_physx_PxVec3_isFinite(physx::PxVec3* wrp_this){
    return (bool) wrp_this->isFinite();
}

ES bool bool_const_physx_PxVec3_isNormalized(physx::PxVec3* wrp_this){
    return (bool) wrp_this->isNormalized();
}

ES float float_const_physx_PxVec3_magnitudeSquared(physx::PxVec3* wrp_this){
    return (float) wrp_this->magnitudeSquared();
}

ES float float_const_physx_PxVec3_magnitude(physx::PxVec3* wrp_this){
    return (float) wrp_this->magnitude();
}

ES void physx_PxVec3_const_physx_PxVec3_operator_Minus(physx::PxVec3* RetRef, physx::PxVec3* wrp_lhs){
    *RetRef = wrp_lhs->operator-();
}

ES void physx_PxVec3_const_physx_PxVec3_operator_Plus_physx_PxVec3_(physx::PxVec3* RetRef, physx::PxVec3* wrp_lhs, physx::PxVec3* wrp_v){
    *RetRef = wrp_lhs->operator+(*wrp_v);
}

ES void physx_PxVec3_const_physx_PxVec3_operator_Minus_physx_PxVec3_(physx::PxVec3* RetRef, physx::PxVec3* wrp_lhs, physx::PxVec3* wrp_v){
    *RetRef = wrp_lhs->operator-(*wrp_v);
}

ES void physx_PxVec3_const_physx_PxVec3_operator_Star_float_(physx::PxVec3* RetRef, physx::PxVec3* wrp_lhs, float wrp_f){
    *RetRef = wrp_lhs->operator*(wrp_f);
}

ES void physx_PxVec3_const_physx_PxVec3_operator_Slash_float_(physx::PxVec3* RetRef, physx::PxVec3* wrp_lhs, float wrp_f){
    *RetRef = wrp_lhs->operator/(wrp_f);
}

ES float float_const_physx_PxVec3_dot_physx_PxVec3_(physx::PxVec3* wrp_this, physx::PxVec3* wrp_v){
    return (float) wrp_this->dot(*wrp_v);
}

ES void physx_PxVec3_const_physx_PxVec3_cross_physx_PxVec3_(physx::PxVec3* RetRef, physx::PxVec3* wrp_this, physx::PxVec3* wrp_v){
    *RetRef = wrp_this->cross(*wrp_v);
}

ES void physx_PxVec3_const_physx_PxVec3_getNormalized(physx::PxVec3* RetRef, physx::PxVec3* wrp_this){
    *RetRef = wrp_this->getNormalized();
}

ES float float_physx_PxVec3_normalize(physx::PxVec3* wrp_this){
    return (float) wrp_this->normalize();
}

ES float float_physx_PxVec3_normalizeSafe(physx::PxVec3* wrp_this){
    return (float) wrp_this->normalizeSafe();
}

ES float float_physx_PxVec3_normalizeFast(physx::PxVec3* wrp_this){
    return (float) wrp_this->normalizeFast();
}

ES void physx_PxVec3_const_physx_PxVec3_multiply_physx_PxVec3_(physx::PxVec3* RetRef, physx::PxVec3* wrp_this, physx::PxVec3* wrp_a){
    *RetRef = wrp_this->multiply(*wrp_a);
}

ES void physx_PxVec3_const_physx_PxVec3_minimum_physx_PxVec3_(physx::PxVec3* RetRef, physx::PxVec3* wrp_this, physx::PxVec3* wrp_v){
    *RetRef = wrp_this->minimum(*wrp_v);
}

ES float float_const_physx_PxVec3_minElement(physx::PxVec3* wrp_this){
    return (float) wrp_this->minElement();
}

ES void physx_PxVec3_const_physx_PxVec3_maximum_physx_PxVec3_(physx::PxVec3* RetRef, physx::PxVec3* wrp_this, physx::PxVec3* wrp_v){
    *RetRef = wrp_this->maximum(*wrp_v);
}

ES float float_const_physx_PxVec3_maxElement(physx::PxVec3* wrp_this){
    return (float) wrp_this->maxElement();
}

ES void physx_PxVec3_const_physx_PxVec3_abs(physx::PxVec3* RetRef, physx::PxVec3* wrp_this){
    *RetRef = wrp_this->abs();
}
    ES void physx_PxVec3_physx_operator_Star_float_physx_PxVec3_(physx::PxVec3* RetRef, float wrp_f, physx::PxVec3* wrp_v){
        *RetRef = operator*(wrp_f, *wrp_v);
    }
