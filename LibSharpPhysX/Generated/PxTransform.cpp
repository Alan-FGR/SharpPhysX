// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
ES void Freer_physx_PxTransformPtr(PxTransformPtr ptr){
    delete ptr;
}

ES PxTransformPtr Ctor_physx_PxTransformPtr_(){
    return (PxTransformPtr) new std::remove_pointer<PxTransformPtr>::type();
}

ES PxTransformPtr Ctor_physx_PxTransformPtr_physx_PxVec3Ptr(PxVec3Ptr wrp_position){
    return (PxTransformPtr) new std::remove_pointer<PxTransformPtr>::type(*wrp_position);
}

ES PxTransformPtr Ctor_physx_PxTransformPtr_physx_PxIDENTITY(physx::PxIDENTITY wrp_r){
    return (PxTransformPtr) new std::remove_pointer<PxTransformPtr>::type(wrp_r);
}

ES PxTransformPtr Ctor_physx_PxTransformPtr_physx_PxQuatPtr(PxQuatPtr wrp_orientation){
    return (PxTransformPtr) new std::remove_pointer<PxTransformPtr>::type(*wrp_orientation);
}

ES PxTransformPtr Ctor_physx_PxTransformPtr_float_float_float_physx_PxQuatPtr(float wrp_x, float wrp_y, float wrp_z, PxQuatPtr wrp_aQ){
    return (PxTransformPtr) new std::remove_pointer<PxTransformPtr>::type(wrp_x, wrp_y, wrp_z, *wrp_aQ);
}

ES PxTransformPtr Ctor_physx_PxTransformPtr_float_float_float(float wrp_x, float wrp_y, float wrp_z){
    return (PxTransformPtr) new std::remove_pointer<PxTransformPtr>::type(wrp_x, wrp_y, wrp_z);
}

ES PxTransformPtr Ctor_physx_PxTransformPtr_physx_PxVec3Ptr_physx_PxQuatPtr(PxVec3Ptr wrp_p0, PxQuatPtr wrp_q0){
    return (PxTransformPtr) new std::remove_pointer<PxTransformPtr>::type(*wrp_p0, *wrp_q0);
}

ES PxTransformPtr Ctor_physx_PxTransformPtr_physx_PxMat44Ptr(PxMat44Ptr wrp_m){
    return (PxTransformPtr) new std::remove_pointer<PxTransformPtr>::type(*wrp_m);
}

ES PxQuatPtr PxTransform_GET_q(PxTransformPtr cls) {return (PxQuatPtr)&cls->q;}
ES void PxTransform_SET_q(PxTransformPtr cls, PxQuatPtr value) {cls->q = *value;}

ES PxVec3Ptr PxTransform_GET_p(PxTransformPtr cls) {return (PxVec3Ptr)&cls->p;}
ES void PxTransform_SET_p(PxTransformPtr cls, PxVec3Ptr value) {cls->p = *value;}

ES bool bool_const_physx_PxTransform_operator_EqualEqual_physx_PxTransformPtr_(PxTransformPtr wrp_lhs, PxTransformPtr wrp_t){
    return (bool) wrp_lhs->operator==(*wrp_t);
}

ES PxTransformPtr physx_PxTransformPtr_const_physx_PxTransform_operator_Star_physx_PxTransformPtr_(PxTransformPtr wrp_lhs, PxTransformPtr wrp_x){
    auto ret = wrp_lhs->operator*(*wrp_x);
    auto heap = new char[sizeof PxTransform];
    std::memcpy(heap, &ret, sizeof PxTransform);
    return (PxTransformPtr) heap;
}

ES PxTransformPtr physx_PxTransformPtr_const_physx_PxTransform_getInverse(PxTransformPtr wrp_this){
    auto ret = wrp_this->getInverse();
    auto heap = new char[sizeof PxTransform];
    std::memcpy(heap, &ret, sizeof PxTransform);
    return (PxTransformPtr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxTransform_transform_physx_PxVec3Ptr_(PxTransformPtr wrp_this, PxVec3Ptr wrp_input){
    auto ret = wrp_this->transform(*wrp_input);
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxTransform_transformInv_physx_PxVec3Ptr_(PxTransformPtr wrp_this, PxVec3Ptr wrp_input){
    auto ret = wrp_this->transformInv(*wrp_input);
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxTransform_rotate_physx_PxVec3Ptr_(PxTransformPtr wrp_this, PxVec3Ptr wrp_input){
    auto ret = wrp_this->rotate(*wrp_input);
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxTransform_rotateInv_physx_PxVec3Ptr_(PxTransformPtr wrp_this, PxVec3Ptr wrp_input){
    auto ret = wrp_this->rotateInv(*wrp_input);
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxTransformPtr physx_PxTransformPtr_const_physx_PxTransform_transform_physx_PxTransformPtr_(PxTransformPtr wrp_this, PxTransformPtr wrp_src){
    auto ret = wrp_this->transform(*wrp_src);
    auto heap = new char[sizeof PxTransform];
    std::memcpy(heap, &ret, sizeof PxTransform);
    return (PxTransformPtr) heap;
}

ES bool bool_const_physx_PxTransform_isValid(PxTransformPtr wrp_this){
    return (bool) wrp_this->isValid();
}

ES bool bool_const_physx_PxTransform_isSane(PxTransformPtr wrp_this){
    return (bool) wrp_this->isSane();
}

ES bool bool_const_physx_PxTransform_isFinite(PxTransformPtr wrp_this){
    return (bool) wrp_this->isFinite();
}

ES PxTransformPtr physx_PxTransformPtr_const_physx_PxTransform_transformInv_physx_PxTransformPtr_(PxTransformPtr wrp_this, PxTransformPtr wrp_src){
    auto ret = wrp_this->transformInv(*wrp_src);
    auto heap = new char[sizeof PxTransform];
    std::memcpy(heap, &ret, sizeof PxTransform);
    return (PxTransformPtr) heap;
}

ES PxPlanePtr physx_PxPlanePtr_const_physx_PxTransform_transform_physx_PxPlanePtr_(PxTransformPtr wrp_this, PxPlanePtr wrp_plane){
    auto ret = wrp_this->transform(*wrp_plane);
    auto heap = new char[sizeof PxPlane];
    std::memcpy(heap, &ret, sizeof PxPlane);
    return (PxPlanePtr) heap;
}

ES PxPlanePtr physx_PxPlanePtr_const_physx_PxTransform_inverseTransform_physx_PxPlanePtr_(PxTransformPtr wrp_this, PxPlanePtr wrp_plane){
    auto ret = wrp_this->inverseTransform(*wrp_plane);
    auto heap = new char[sizeof PxPlane];
    std::memcpy(heap, &ret, sizeof PxPlane);
    return (PxPlanePtr) heap;
}

ES PxTransformPtr physx_PxTransformPtr_const_physx_PxTransform_getNormalized(PxTransformPtr wrp_this){
    auto ret = wrp_this->getNormalized();
    auto heap = new char[sizeof PxTransform];
    std::memcpy(heap, &ret, sizeof PxTransform);
    return (PxTransformPtr) heap;
}
