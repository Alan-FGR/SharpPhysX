// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
ES void Default_physx_PxTransform_(physx::PxTransform* RetRef){
    *RetRef = *RetRef = physx::PxTransform();
}

ES void void_physx_PxTransform_PxTransform_Ctor_physx_PxVec3_(physx::PxTransform* wrp_this, physx::PxVec3* wrp_position){
    *wrp_this = physx::PxTransform::PxTransform(*wrp_position);
}

ES void void_physx_PxTransform_PxTransform_Ctor_physx_PxIDENTITY_(physx::PxTransform* wrp_this, physx::PxIDENTITY wrp_r){
    *wrp_this = physx::PxTransform::PxTransform(wrp_r);
}

ES void void_physx_PxTransform_PxTransform_Ctor_physx_PxQuat_(physx::PxTransform* wrp_this, physx::PxQuat* wrp_orientation){
    *wrp_this = physx::PxTransform::PxTransform(*wrp_orientation);
}

ES void void_physx_PxTransform_PxTransform_Ctor_float_float_float_(physx::PxTransform* wrp_this, float wrp_x, float wrp_y, float wrp_z){
    *wrp_this = physx::PxTransform::PxTransform(wrp_x, wrp_y, wrp_z);
}

ES void void_physx_PxTransform_PxTransform_Ctor_float_float_float_physx_PxQuat_(physx::PxTransform* wrp_this, float wrp_x, float wrp_y, float wrp_z, physx::PxQuat wrp_aQ){
    *wrp_this = physx::PxTransform::PxTransform(wrp_x, wrp_y, wrp_z, wrp_aQ);
}

ES void void_physx_PxTransform_PxTransform_Ctor_physx_PxVec3_physx_PxQuat_(physx::PxTransform* wrp_this, physx::PxVec3* wrp_p0, physx::PxQuat* wrp_q0){
    *wrp_this = physx::PxTransform::PxTransform(*wrp_p0, *wrp_q0);
}

ES void void_physx_PxTransform_PxTransform_Ctor_physx_PxMat44_(physx::PxTransform* wrp_this, physx::PxMat44* wrp_m){
    *wrp_this = physx::PxTransform::PxTransform(*wrp_m);
}

ES bool bool_const_physx_PxTransform_operator_EqualEqual_physx_PxTransform_(physx::PxTransform* wrp_lhs, physx::PxTransform* wrp_t){
    return (bool) wrp_lhs->operator==(*wrp_t);
}

ES void physx_PxTransform_const_physx_PxTransform_operator_Star_physx_PxTransform_(physx::PxTransform* RetRef, physx::PxTransform* wrp_lhs, physx::PxTransform* wrp_x){
    *RetRef = wrp_lhs->operator*(*wrp_x);
}

ES void physx_PxTransform_const_physx_PxTransform_getInverse(physx::PxTransform* RetRef, physx::PxTransform* wrp_this){
    *RetRef = wrp_this->getInverse();
}

ES void physx_PxVec3_const_physx_PxTransform_transform_physx_PxVec3_(physx::PxVec3* RetRef, physx::PxTransform* wrp_this, physx::PxVec3* wrp_input){
    *RetRef = wrp_this->transform(*wrp_input);
}

ES void physx_PxVec3_const_physx_PxTransform_transformInv_physx_PxVec3_(physx::PxVec3* RetRef, physx::PxTransform* wrp_this, physx::PxVec3* wrp_input){
    *RetRef = wrp_this->transformInv(*wrp_input);
}

ES void physx_PxVec3_const_physx_PxTransform_rotate_physx_PxVec3_(physx::PxVec3* RetRef, physx::PxTransform* wrp_this, physx::PxVec3* wrp_input){
    *RetRef = wrp_this->rotate(*wrp_input);
}

ES void physx_PxVec3_const_physx_PxTransform_rotateInv_physx_PxVec3_(physx::PxVec3* RetRef, physx::PxTransform* wrp_this, physx::PxVec3* wrp_input){
    *RetRef = wrp_this->rotateInv(*wrp_input);
}

ES void physx_PxTransform_const_physx_PxTransform_transform_physx_PxTransform_(physx::PxTransform* RetRef, physx::PxTransform* wrp_this, physx::PxTransform* wrp_src){
    *RetRef = wrp_this->transform(*wrp_src);
}

ES bool bool_const_physx_PxTransform_isValid(physx::PxTransform* wrp_this){
    return (bool) wrp_this->isValid();
}

ES bool bool_const_physx_PxTransform_isSane(physx::PxTransform* wrp_this){
    return (bool) wrp_this->isSane();
}

ES bool bool_const_physx_PxTransform_isFinite(physx::PxTransform* wrp_this){
    return (bool) wrp_this->isFinite();
}

ES void physx_PxTransform_const_physx_PxTransform_transformInv_physx_PxTransform_(physx::PxTransform* RetRef, physx::PxTransform* wrp_this, physx::PxTransform* wrp_src){
    *RetRef = wrp_this->transformInv(*wrp_src);
}

ES void physx_PxPlane_const_physx_PxTransform_transform_physx_PxPlane_(physx::PxPlane* RetRef, physx::PxTransform* wrp_this, physx::PxPlane* wrp_plane){
    *RetRef = wrp_this->transform(*wrp_plane);
}

ES void physx_PxPlane_const_physx_PxTransform_inverseTransform_physx_PxPlane_(physx::PxPlane* RetRef, physx::PxTransform* wrp_this, physx::PxPlane* wrp_plane){
    *RetRef = wrp_this->inverseTransform(*wrp_plane);
}

ES void physx_PxTransform_const_physx_PxTransform_getNormalized(physx::PxTransform* RetRef, physx::PxTransform* wrp_this){
    *RetRef = wrp_this->getNormalized();
}
