// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
ES void* PxActor_GET_userData(PxActorPtr cls) {return (void*)cls->userData;}
ES void PxActor_SET_userData(PxActorPtr cls, void* value) {cls->userData = value;}

ES void void_physx_PxActor_release(PxActorPtr wrp_this){
    wrp_this->release();
}

ES physx::PxActorType::Enum physx_PxActorTypeEnum_const_physx_PxActor_getType(PxActorPtr wrp_this){
    return (physx::PxActorType::Enum) wrp_this->getType();
}

ES PxScenePtr physx_PxScenePtr_const_physx_PxActor_getScene(PxActorPtr wrp_this){
    return (PxScenePtr) wrp_this->getScene();
}

ES void void_physx_PxActor_setName_string_(PxActorPtr wrp_this, char* wrp_name){
    wrp_this->setName(wrp_name);
}

ES char* string_const_physx_PxActor_getName(PxActorPtr wrp_this){
    return (char*) wrp_this->getName();
}

ES PxBounds3Ptr physx_PxBounds3Ptr_const_physx_PxActor_getWorldBounds_float_(PxActorPtr wrp_this, float wrp_inflation){
    auto ret = wrp_this->getWorldBounds(wrp_inflation);
    auto heap = new char[sizeof PxBounds3];
    std::memcpy(heap, &ret, sizeof PxBounds3);
    return (PxBounds3Ptr) heap;
}

ES PxBounds3Ptr physx_PxBounds3Ptr_const_physx_PxActor_getWorldBounds(PxActorPtr wrp_this){
    auto ret = wrp_this->getWorldBounds();
    auto heap = new char[sizeof PxBounds3];
    std::memcpy(heap, &ret, sizeof PxBounds3);
    return (PxBounds3Ptr) heap;
}

ES void void_physx_PxActor_setActorFlag_physx_PxActorFlagEnum_bool_(PxActorPtr wrp_this, physx::PxActorFlag::Enum wrp_flag, bool wrp_value){
    wrp_this->setActorFlag(wrp_flag, wrp_value);
}

ES void void_physx_PxActor_setActorFlags_PxActorFlagsPtr_(PxActorPtr wrp_this, PxActorFlagsPtr wrp_inFlags){
    wrp_this->setActorFlags(*wrp_inFlags);
}

ES PxActorFlagsPtr PxActorFlagsPtr_const_physx_PxActor_getActorFlags(PxActorPtr wrp_this){
    auto ret = wrp_this->getActorFlags();
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES void void_physx_PxActor_setDominanceGroup_byte_(PxActorPtr wrp_this, unsigned char wrp_dominanceGroup){
    wrp_this->setDominanceGroup(wrp_dominanceGroup);
}

ES unsigned char byte_const_physx_PxActor_getDominanceGroup(PxActorPtr wrp_this){
    return (unsigned char) wrp_this->getDominanceGroup();
}

ES void void_physx_PxActor_setOwnerClient_byte_(PxActorPtr wrp_this, unsigned char wrp_inClient){
    wrp_this->setOwnerClient(wrp_inClient);
}

ES unsigned char byte_const_physx_PxActor_getOwnerClient(PxActorPtr wrp_this){
    return (unsigned char) wrp_this->getOwnerClient();
}

ES PxAggregatePtr physx_PxAggregatePtr_const_physx_PxActor_getAggregate(PxActorPtr wrp_this){
    return (PxAggregatePtr) wrp_this->getAggregate();
}
