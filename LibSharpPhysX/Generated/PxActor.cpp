// Generated by minBND 5.1.91.17 - Â© github.com/Alan-FGR

ES PxActorFlagsPtr PxActorFlagsPtr_operator_Ptr_Pipe_PxActorFlagEnum_PxActorFlagEnum_(physx::PxActorFlag::Enum wrp_a, physx::PxActorFlag::Enum wrp_b){
    auto ret = ::physx::operator|(wrp_a, wrp_b);
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES PxActorFlagsPtr PxActorFlagsPtr_operator_Ptr_Amp_PxActorFlagEnum_PxActorFlagEnum_(physx::PxActorFlag::Enum wrp_a, physx::PxActorFlag::Enum wrp_b){
    auto ret = ::physx::operator&(wrp_a, wrp_b);
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES PxActorFlagsPtr PxActorFlagsPtr_operator_Ptr_Tilde_PxActorFlagEnum_(physx::PxActorFlag::Enum wrp_a){
    auto ret = ::physx::operator~(wrp_a);
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES void* PxActorPtr_GET_userData(PxActorPtr cls) {return (void*)cls->userData;}
ES void PxActorPtr_SET_userData(PxActorPtr cls, void* value) {cls->userData = value;}

ES void void_PxActorPtr_releasePtr(PxActorPtr wrp_this){
    wrp_this->release();
}

ES physx::PxActorType::Enum PxActorTypeEnum_const_PxActorPtr_getTypePtr(PxActorPtr wrp_this){
    return (physx::PxActorType::Enum) wrp_this->getType();
}

ES PxScenePtr PxScenePtr_const_PxActorPtr_getScenePtr(PxActorPtr wrp_this){
    return (PxScenePtr) wrp_this->getScene();
}

ES void void_PxActorPtr_setNamePtr_string_(PxActorPtr wrp_this, char* wrp_name){
    wrp_this->setName(wrp_name);
}

ES char* string_const_PxActorPtr_getNamePtr(PxActorPtr wrp_this){
    return (char*) wrp_this->getName();
}

ES void PxBounds3_const_PxActorPtr_getWorldBoundsPtr_float_(physx::PxBounds3* nRetRef, PxActorPtr wrp_this, float wrp_inflation){
    *nRetRef = wrp_this->getWorldBounds(wrp_inflation);
}

ES void void_PxActorPtr_setActorFlagPtr_PxActorFlagEnum_bool_(PxActorPtr wrp_this, physx::PxActorFlag::Enum wrp_flag, bool wrp_value){
    wrp_this->setActorFlag(wrp_flag, wrp_value);
}

ES void void_PxActorPtr_setActorFlagsPtr_PxActorFlagsPtr_(PxActorPtr wrp_this, PxActorFlagsPtr wrp_inFlags){
    wrp_this->setActorFlags(*wrp_inFlags);
}

ES PxActorFlagsPtr PxActorFlagsPtr_const_PxActorPtr_getActorFlagsPtr(PxActorPtr wrp_this){
    auto ret = wrp_this->getActorFlags();
    auto heap = new char[sizeof PxActorFlags];
    std::memcpy(heap, &ret, sizeof PxActorFlags);
    return (PxActorFlagsPtr) heap;
}

ES void void_PxActorPtr_setDominanceGroupPtr_byte_(PxActorPtr wrp_this, PxDominanceGroup wrp_dominanceGroup){
    wrp_this->setDominanceGroup(wrp_dominanceGroup);
}

ES PxDominanceGroup byte_const_PxActorPtr_getDominanceGroupPtr(PxActorPtr wrp_this){
    return (PxDominanceGroup) wrp_this->getDominanceGroup();
}

ES void void_PxActorPtr_setOwnerClientPtr_byte_(PxActorPtr wrp_this, PxClientID wrp_inClient){
    wrp_this->setOwnerClient(wrp_inClient);
}

ES PxClientID byte_const_PxActorPtr_getOwnerClientPtr(PxActorPtr wrp_this){
    return (PxClientID) wrp_this->getOwnerClient();
}

ES PxAggregatePtr PxAggregatePtr_const_PxActorPtr_getAggregatePtr(PxActorPtr wrp_this){
    return (PxAggregatePtr) wrp_this->getAggregate();
}

ES void PxBounds3_const_PxActorPtr_getWorldBoundsPtr(physx::PxBounds3* nRetRef, PxActorPtr wrp_this){
    *nRetRef = wrp_this->getWorldBounds();
}

