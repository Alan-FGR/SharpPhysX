// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
ES void Freer_physx_PxQuatPtr(PxQuatPtr ptr){
    delete ptr;
}

ES PxQuatPtr Ctor_physx_PxQuatPtr_(){
    return (PxQuatPtr) new std::remove_pointer<PxQuatPtr>::type();
}

ES PxQuatPtr Ctor_physx_PxQuatPtr_physx_PxIDENTITY(physx::PxIDENTITY wrp_r){
    return (PxQuatPtr) new std::remove_pointer<PxQuatPtr>::type(wrp_r);
}

ES PxQuatPtr Ctor_physx_PxQuatPtr_float(float wrp_r){
    return (PxQuatPtr) new std::remove_pointer<PxQuatPtr>::type(wrp_r);
}

ES PxQuatPtr Ctor_physx_PxQuatPtr_float_float_float_float(float wrp_nx, float wrp_ny, float wrp_nz, float wrp_nw){
    return (PxQuatPtr) new std::remove_pointer<PxQuatPtr>::type(wrp_nx, wrp_ny, wrp_nz, wrp_nw);
}

ES PxQuatPtr Ctor_physx_PxQuatPtr_float_physx_PxVec3Ptr(float wrp_angleRadians, PxVec3Ptr wrp_unitAxis){
    return (PxQuatPtr) new std::remove_pointer<PxQuatPtr>::type(wrp_angleRadians, *wrp_unitAxis);
}

ES PxQuatPtr Ctor_physx_PxQuatPtr_physx_PxQuatPtr(PxQuatPtr wrp_v){
    return (PxQuatPtr) new std::remove_pointer<PxQuatPtr>::type(*wrp_v);
}

ES PxQuatPtr Ctor_physx_PxQuatPtr_physx_PxMat33Ptr(PxMat33Ptr wrp_m){
    return (PxQuatPtr) new std::remove_pointer<PxQuatPtr>::type(*wrp_m);
}

ES float PxQuat_GET_x(PxQuatPtr cls) {return (float)cls->x;}
ES void PxQuat_SET_x(PxQuatPtr cls, float value) {cls->x = value;}

ES float PxQuat_GET_y(PxQuatPtr cls) {return (float)cls->y;}
ES void PxQuat_SET_y(PxQuatPtr cls, float value) {cls->y = value;}

ES float PxQuat_GET_z(PxQuatPtr cls) {return (float)cls->z;}
ES void PxQuat_SET_z(PxQuatPtr cls, float value) {cls->z = value;}

ES float PxQuat_GET_w(PxQuatPtr cls) {return (float)cls->w;}
ES void PxQuat_SET_w(PxQuatPtr cls, float value) {cls->w = value;}

ES bool bool_const_physx_PxQuat_isIdentity(PxQuatPtr wrp_this){
    return (bool) wrp_this->isIdentity();
}

ES bool bool_const_physx_PxQuat_isFinite(PxQuatPtr wrp_this){
    return (bool) wrp_this->isFinite();
}

ES bool bool_const_physx_PxQuat_isUnit(PxQuatPtr wrp_this){
    return (bool) wrp_this->isUnit();
}

ES bool bool_const_physx_PxQuat_isSane(PxQuatPtr wrp_this){
    return (bool) wrp_this->isSane();
}

ES bool bool_const_physx_PxQuat_operator_EqualEqual_physx_PxQuatPtr_(PxQuatPtr wrp_lhs, PxQuatPtr wrp_q){
    return (bool) wrp_lhs->operator==(*wrp_q);
}

ES void void_const_physx_PxQuat_toRadiansAndUnitAxis_float_physx_PxVec3Ptr_(PxQuatPtr wrp_this, float* wrp_angle, PxVec3Ptr wrp_axis){
    wrp_this->toRadiansAndUnitAxis(*wrp_angle, *wrp_axis);
}

ES float float_const_physx_PxQuat_getAngle(PxQuatPtr wrp_this){
    return (float) wrp_this->getAngle();
}

ES float float_const_physx_PxQuat_getAngle_physx_PxQuatPtr_(PxQuatPtr wrp_this, PxQuatPtr wrp_q){
    return (float) wrp_this->getAngle(*wrp_q);
}

ES float float_const_physx_PxQuat_magnitudeSquared(PxQuatPtr wrp_this){
    return (float) wrp_this->magnitudeSquared();
}

ES float float_const_physx_PxQuat_dot_physx_PxQuatPtr_(PxQuatPtr wrp_this, PxQuatPtr wrp_v){
    return (float) wrp_this->dot(*wrp_v);
}

ES PxQuatPtr physx_PxQuatPtr_const_physx_PxQuat_getNormalized(PxQuatPtr wrp_this){
    auto ret = wrp_this->getNormalized();
    auto heap = new char[sizeof PxQuat];
    std::memcpy(heap, &ret, sizeof PxQuat);
    return (PxQuatPtr) heap;
}

ES float float_const_physx_PxQuat_magnitude(PxQuatPtr wrp_this){
    return (float) wrp_this->magnitude();
}

ES float float_physx_PxQuat_normalize(PxQuatPtr wrp_this){
    return (float) wrp_this->normalize();
}

ES PxQuatPtr physx_PxQuatPtr_const_physx_PxQuat_getConjugate(PxQuatPtr wrp_this){
    auto ret = wrp_this->getConjugate();
    auto heap = new char[sizeof PxQuat];
    std::memcpy(heap, &ret, sizeof PxQuat);
    return (PxQuatPtr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxQuat_getImaginaryPart(PxQuatPtr wrp_this){
    auto ret = wrp_this->getImaginaryPart();
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxQuat_getBasisVector0(PxQuatPtr wrp_this){
    auto ret = wrp_this->getBasisVector0();
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxQuat_getBasisVector1(PxQuatPtr wrp_this){
    auto ret = wrp_this->getBasisVector1();
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxQuat_getBasisVector2(PxQuatPtr wrp_this){
    auto ret = wrp_this->getBasisVector2();
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxQuat_rotate_physx_PxVec3Ptr_(PxQuatPtr wrp_this, PxVec3Ptr wrp_v){
    auto ret = wrp_this->rotate(*wrp_v);
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxVec3Ptr physx_PxVec3Ptr_const_physx_PxQuat_rotateInv_physx_PxVec3Ptr_(PxQuatPtr wrp_this, PxVec3Ptr wrp_v){
    auto ret = wrp_this->rotateInv(*wrp_v);
    auto heap = new char[sizeof PxVec3];
    std::memcpy(heap, &ret, sizeof PxVec3);
    return (PxVec3Ptr) heap;
}

ES PxQuatPtr physx_PxQuatPtr_const_physx_PxQuat_operator_Star_physx_PxQuatPtr_(PxQuatPtr wrp_lhs, PxQuatPtr wrp_q){
    auto ret = wrp_lhs->operator*(*wrp_q);
    auto heap = new char[sizeof PxQuat];
    std::memcpy(heap, &ret, sizeof PxQuat);
    return (PxQuatPtr) heap;
}

ES PxQuatPtr physx_PxQuatPtr_const_physx_PxQuat_operator_Plus_physx_PxQuatPtr_(PxQuatPtr wrp_lhs, PxQuatPtr wrp_q){
    auto ret = wrp_lhs->operator+(*wrp_q);
    auto heap = new char[sizeof PxQuat];
    std::memcpy(heap, &ret, sizeof PxQuat);
    return (PxQuatPtr) heap;
}

ES PxQuatPtr physx_PxQuatPtr_const_physx_PxQuat_operator_Minus(PxQuatPtr wrp_lhs){
    auto ret = wrp_lhs->operator-();
    auto heap = new char[sizeof PxQuat];
    std::memcpy(heap, &ret, sizeof PxQuat);
    return (PxQuatPtr) heap;
}

ES PxQuatPtr physx_PxQuatPtr_const_physx_PxQuat_operator_Minus_physx_PxQuatPtr_(PxQuatPtr wrp_lhs, PxQuatPtr wrp_q){
    auto ret = wrp_lhs->operator-(*wrp_q);
    auto heap = new char[sizeof PxQuat];
    std::memcpy(heap, &ret, sizeof PxQuat);
    return (PxQuatPtr) heap;
}

ES PxQuatPtr physx_PxQuatPtr_const_physx_PxQuat_operator_Star_float_(PxQuatPtr wrp_lhs, float wrp_r){
    auto ret = wrp_lhs->operator*(wrp_r);
    auto heap = new char[sizeof PxQuat];
    std::memcpy(heap, &ret, sizeof PxQuat);
    return (PxQuatPtr) heap;
}
