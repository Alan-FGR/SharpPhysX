// Generated by minBND 5.1.91.17 - Â© github.com/Alan-FGR

ES void Default_PxQuat_(physx::PxQuat* nRetRef){
    *nRetRef = PxQuat();
}

ES void void_PxQuat_PxQuatPtr_Ctor_PxIDENTITY_(physx::PxQuat* wrp_this, physx::PxIDENTITY wrp_r){
    *wrp_this = ::physx::PxQuat::PxQuat(wrp_r);
}

ES void void_PxQuat_PxQuatPtr_Ctor_float_(physx::PxQuat* wrp_this, float wrp_r){
    *wrp_this = ::physx::PxQuat::PxQuat(wrp_r);
}

ES void void_PxQuat_PxQuatPtr_Ctor_float_float_float_float_(physx::PxQuat* wrp_this, float wrp_nx, float wrp_ny, float wrp_nz, float wrp_nw){
    *wrp_this = ::physx::PxQuat::PxQuat(wrp_nx, wrp_ny, wrp_nz, wrp_nw);
}

ES void void_PxQuat_PxQuatPtr_Ctor_float_PxVec3_(physx::PxQuat* wrp_this, float wrp_angleRadians, physx::PxVec3* wrp_unitAxis){
    *wrp_this = ::physx::PxQuat::PxQuat(wrp_angleRadians, *wrp_unitAxis);
}

ES void void_PxQuat_PxQuatPtr_Ctor_PxQuat_(physx::PxQuat* wrp_this, physx::PxQuat* wrp_v){
    *wrp_this = ::physx::PxQuat::PxQuat(*wrp_v);
}

ES void void_PxQuat_PxQuatPtr_Ctor_PxMat33_(physx::PxQuat* wrp_this, physx::PxMat33* wrp_m){
    *wrp_this = ::physx::PxQuat::PxQuat(*wrp_m);
}

ES bool bool_const_PxQuat_isIdentityPtr(physx::PxQuat* wrp_this){
    return (bool) wrp_this->isIdentity();
}

ES bool bool_const_PxQuat_isFinitePtr(physx::PxQuat* wrp_this){
    return (bool) wrp_this->isFinite();
}

ES bool bool_const_PxQuat_isUnitPtr(physx::PxQuat* wrp_this){
    return (bool) wrp_this->isUnit();
}

ES bool bool_const_PxQuat_isSanePtr(physx::PxQuat* wrp_this){
    return (bool) wrp_this->isSane();
}

ES bool bool_const_PxQuat_operator_Ptr_EqualEqual_PxQuat_(physx::PxQuat* wrp_lhs, physx::PxQuat* wrp_q){
    return (bool) wrp_lhs->::physx::PxQuat::operator==(*wrp_q);
}

ES void void_const_PxQuat_toRadiansAndUnitAxisPtr_float_PxVec3_(physx::PxQuat* wrp_this, float* wrp_angle, physx::PxVec3* wrp_axis){
    wrp_this->toRadiansAndUnitAxis(*wrp_angle, *wrp_axis);
}

ES float float_const_PxQuat_getAnglePtr(physx::PxQuat* wrp_this){
    return (float) wrp_this->getAngle();
}

ES float float_const_PxQuat_getAnglePtr_PxQuat_(physx::PxQuat* wrp_this, physx::PxQuat* wrp_q){
    return (float) wrp_this->getAngle(*wrp_q);
}

ES float float_const_PxQuat_magnitudeSquaredPtr(physx::PxQuat* wrp_this){
    return (float) wrp_this->magnitudeSquared();
}

ES float float_const_PxQuat_dotPtr_PxQuat_(physx::PxQuat* wrp_this, physx::PxQuat* wrp_v){
    return (float) wrp_this->dot(*wrp_v);
}

ES void PxQuat_const_PxQuat_getNormalizedPtr(physx::PxQuat* nRetRef, physx::PxQuat* wrp_this){
    *nRetRef = wrp_this->getNormalized();
}

ES float float_const_PxQuat_magnitudePtr(physx::PxQuat* wrp_this){
    return (float) wrp_this->magnitude();
}

ES float float_PxQuat_normalizePtr(physx::PxQuat* wrp_this){
    return (float) wrp_this->normalize();
}

ES void PxQuat_const_PxQuat_getConjugatePtr(physx::PxQuat* nRetRef, physx::PxQuat* wrp_this){
    *nRetRef = wrp_this->getConjugate();
}

ES void PxVec3_const_PxQuat_getImaginaryPartPtr(physx::PxVec3* nRetRef, physx::PxQuat* wrp_this){
    *nRetRef = wrp_this->getImaginaryPart();
}

ES void PxVec3_const_PxQuat_getBasisVector0Ptr(physx::PxVec3* nRetRef, physx::PxQuat* wrp_this){
    *nRetRef = wrp_this->getBasisVector0();
}

ES void PxVec3_const_PxQuat_getBasisVector1Ptr(physx::PxVec3* nRetRef, physx::PxQuat* wrp_this){
    *nRetRef = wrp_this->getBasisVector1();
}

ES void PxVec3_const_PxQuat_getBasisVector2Ptr(physx::PxVec3* nRetRef, physx::PxQuat* wrp_this){
    *nRetRef = wrp_this->getBasisVector2();
}

ES void PxVec3_const_PxQuat_rotatePtr_PxVec3_(physx::PxVec3* nRetRef, physx::PxQuat* wrp_this, physx::PxVec3* wrp_v){
    *nRetRef = wrp_this->rotate(*wrp_v);
}

ES void PxVec3_const_PxQuat_rotateInvPtr_PxVec3_(physx::PxVec3* nRetRef, physx::PxQuat* wrp_this, physx::PxVec3* wrp_v){
    *nRetRef = wrp_this->rotateInv(*wrp_v);
}

ES physx::PxQuat* PxQuat_PxQuat_operator_Ptr_Equal_PxQuat_(physx::PxQuat* wrp_lhs, physx::PxQuat* wrp_p){
    return (physx::PxQuat*) &wrp_lhs->::physx::PxQuat::operator=(*wrp_p);
}

ES physx::PxQuat* PxQuat_PxQuat_operator_Ptr_StarEqual_PxQuat_(physx::PxQuat* wrp_lhs, physx::PxQuat* wrp_q){
    return (physx::PxQuat*) &wrp_lhs->::physx::PxQuat::operator*=(*wrp_q);
}

ES physx::PxQuat* PxQuat_PxQuat_operator_Ptr_PlusEqual_PxQuat_(physx::PxQuat* wrp_lhs, physx::PxQuat* wrp_q){
    return (physx::PxQuat*) &wrp_lhs->::physx::PxQuat::operator+=(*wrp_q);
}

ES physx::PxQuat* PxQuat_PxQuat_operator_Ptr_MinusEqual_PxQuat_(physx::PxQuat* wrp_lhs, physx::PxQuat* wrp_q){
    return (physx::PxQuat*) &wrp_lhs->::physx::PxQuat::operator-=(*wrp_q);
}

ES physx::PxQuat* PxQuat_PxQuat_operator_Ptr_StarEqual_floatC(physx::PxQuat* wrp_lhs, float wrp_s){
    return (physx::PxQuat*) &wrp_lhs->::physx::PxQuat::operator*=(wrp_s);
}

ES void PxQuat_const_PxQuat_operator_Ptr_Star_PxQuat_(physx::PxQuat* nRetRef, physx::PxQuat* wrp_lhs, physx::PxQuat* wrp_q){
    *nRetRef = wrp_lhs->::physx::PxQuat::operator*(*wrp_q);
}

ES void PxQuat_const_PxQuat_operator_Ptr_Plus_PxQuat_(physx::PxQuat* nRetRef, physx::PxQuat* wrp_lhs, physx::PxQuat* wrp_q){
    *nRetRef = wrp_lhs->::physx::PxQuat::operator+(*wrp_q);
}

ES void PxQuat_const_PxQuat_operator_Ptr_Minus(physx::PxQuat* nRetRef, physx::PxQuat* wrp_lhs){
    *nRetRef = wrp_lhs->::physx::PxQuat::operator-();
}

ES void PxQuat_const_PxQuat_operator_Ptr_Minus_PxQuat_(physx::PxQuat* nRetRef, physx::PxQuat* wrp_lhs, physx::PxQuat* wrp_q){
    *nRetRef = wrp_lhs->::physx::PxQuat::operator-(*wrp_q);
}

ES void PxQuat_const_PxQuat_operator_Ptr_Star_float_(physx::PxQuat* nRetRef, physx::PxQuat* wrp_lhs, float wrp_r){
    *nRetRef = wrp_lhs->::physx::PxQuat::operator*(wrp_r);
}

