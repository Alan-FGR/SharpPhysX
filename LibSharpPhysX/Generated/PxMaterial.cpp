// Generated by minBND 5.1.91.1 - Â© github.com/Alan-FGR

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_operator_Ptr_Pipe_PxMaterialFlagEnum_PxMaterialFlagEnum_(physx::PxMaterialFlag::Enum wrp_a, physx::PxMaterialFlag::Enum wrp_b){
    auto ret = ::physx::operator|(wrp_a, wrp_b);
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_operator_Ptr_Amp_PxMaterialFlagEnum_PxMaterialFlagEnum_(physx::PxMaterialFlag::Enum wrp_a, physx::PxMaterialFlag::Enum wrp_b){
    auto ret = ::physx::operator&(wrp_a, wrp_b);
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_operator_Ptr_Tilde_PxMaterialFlagEnum_(physx::PxMaterialFlag::Enum wrp_a){
    auto ret = ::physx::operator~(wrp_a);
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES void* PxMaterialPtr_GET_userData(PxMaterialPtr cls) {return (void*)cls->userData;}
ES void PxMaterialPtr_SET_userData(PxMaterialPtr cls, void* value) {cls->userData = value;}

ES void void_PxMaterialPtr_releasePtr(PxMaterialPtr wrp_this){
    wrp_this->release();
}

ES PxU32 uint_const_PxMaterialPtr_getReferenceCountPtr(PxMaterialPtr wrp_this){
    return (PxU32) wrp_this->getReferenceCount();
}

ES void void_PxMaterialPtr_acquireReferencePtr(PxMaterialPtr wrp_this){
    wrp_this->acquireReference();
}

ES void void_PxMaterialPtr_setDynamicFrictionPtr_float_(PxMaterialPtr wrp_this, PxReal wrp_coef){
    wrp_this->setDynamicFriction(wrp_coef);
}

ES PxReal float_const_PxMaterialPtr_getDynamicFrictionPtr(PxMaterialPtr wrp_this){
    return (PxReal) wrp_this->getDynamicFriction();
}

ES void void_PxMaterialPtr_setStaticFrictionPtr_float_(PxMaterialPtr wrp_this, PxReal wrp_coef){
    wrp_this->setStaticFriction(wrp_coef);
}

ES PxReal float_const_PxMaterialPtr_getStaticFrictionPtr(PxMaterialPtr wrp_this){
    return (PxReal) wrp_this->getStaticFriction();
}

ES void void_PxMaterialPtr_setRestitutionPtr_float_(PxMaterialPtr wrp_this, PxReal wrp_rest){
    wrp_this->setRestitution(wrp_rest);
}

ES PxReal float_const_PxMaterialPtr_getRestitutionPtr(PxMaterialPtr wrp_this){
    return (PxReal) wrp_this->getRestitution();
}

ES void void_PxMaterialPtr_setFlagPtr_PxMaterialFlagEnum_bool_(PxMaterialPtr wrp_this, physx::PxMaterialFlag::Enum wrp_flag, bool wrp__2){
    wrp_this->setFlag(wrp_flag, wrp__2);
}

ES void void_PxMaterialPtr_setFlagsPtr_PxMaterialFlagsPtr_(PxMaterialPtr wrp_this, PxMaterialFlagsPtr wrp_inFlags){
    wrp_this->setFlags(*wrp_inFlags);
}

ES PxMaterialFlagsPtr PxMaterialFlagsPtr_const_PxMaterialPtr_getFlagsPtr(PxMaterialPtr wrp_this){
    auto ret = wrp_this->getFlags();
    auto heap = new char[sizeof PxMaterialFlags];
    std::memcpy(heap, &ret, sizeof PxMaterialFlags);
    return (PxMaterialFlagsPtr) heap;
}

ES void void_PxMaterialPtr_setFrictionCombineModePtr_PxCombineModeEnum_(PxMaterialPtr wrp_this, physx::PxCombineMode::Enum wrp_combMode){
    wrp_this->setFrictionCombineMode(wrp_combMode);
}

ES physx::PxCombineMode::Enum PxCombineModeEnum_const_PxMaterialPtr_getFrictionCombineModePtr(PxMaterialPtr wrp_this){
    return (physx::PxCombineMode::Enum) wrp_this->getFrictionCombineMode();
}

ES void void_PxMaterialPtr_setRestitutionCombineModePtr_PxCombineModeEnum_(PxMaterialPtr wrp_this, physx::PxCombineMode::Enum wrp_combMode){
    wrp_this->setRestitutionCombineMode(wrp_combMode);
}

ES physx::PxCombineMode::Enum PxCombineModeEnum_const_PxMaterialPtr_getRestitutionCombineModePtr(PxMaterialPtr wrp_this){
    return (physx::PxCombineMode::Enum) wrp_this->getRestitutionCombineMode();
}

ES char* string_const_PxMaterialPtr_getConcreteTypeNamePtr(PxMaterialPtr wrp_this){
    return (char*) wrp_this->getConcreteTypeName();
}

