// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
//Unit PxConstraintDesc
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    public static unsafe partial class pvdsdk {
    
    }
    
    // physx::operator| [static Px1DConstraintFlagsPtr Pipe_New(physx.Px1DConstraintFlagPtr.Type a, physx.Px1DConstraintFlagPtr.Type b)] will be bound as member operator
    
    // physx::operator& [static Px1DConstraintFlagsPtr Amp_New(physx.Px1DConstraintFlagPtr.Type a, physx.Px1DConstraintFlagPtr.Type b)] will be bound as member operator
    
    // physx::operator~ [static Px1DConstraintFlagsPtr Tilde_New(physx.Px1DConstraintFlagPtr.Type a)] will be bound as member operator
    
    public unsafe partial struct Px1DConstraintFlagPtr{
        private System.IntPtr nativePtr_;
        
    public enum Type : int {
            eSPRING = 1,              // eSPRING = 1<<0
            eACCELERATION_SPRING = 2, // eACCELERATION_SPRING = 1<<1
            eRESTITUTION = 4,         // eRESTITUTION = 1<<2
            eKEEPBIAS = 8,            // eKEEPBIAS = 1<<3
            eOUTPUT_FORCE = 16,       // eOUTPUT_FORCE = 1<<4
            eHAS_DRIVE_LIMIT = 32,    // eHAS_DRIVE_LIMIT = 1<<5
            eANGULAR_CONSTRAINT = 64, // eANGULAR_CONSTRAINT = 1 << 6
            eDRIVE_ROW = 128,         // eDRIVE_ROW = 1 << 7
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_Px1DConstraintFlagPtr(Px1DConstraintFlagPtr ptr);
        
        public static void Free(Px1DConstraintFlagPtr ptr){
            Freer_physx_Px1DConstraintFlagPtr(ptr);
        }
        public void Free(){
            Freer_physx_Px1DConstraintFlagPtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.Px1DConstraintFlagPtr Ctor_physx_Px1DConstraintFlagPtr_();
        
        public static physx.Px1DConstraintFlagPtr New() {
            return Ctor_physx_Px1DConstraintFlagPtr_();
        }
    }
    
    public enum PxConstraintSolveHintEnum : int {
        eNONE = 0,                     // eNONE = 0
        eACCELERATION1 = 256,          // eACCELERATION1 = 256
        eSLERP_SPRING = 258,           // eSLERP_SPRING = 258
        eACCELERATION2 = 512,          // eACCELERATION2 = 512
        eACCELERATION3 = 768,          // eACCELERATION3 = 768
        eROTATIONAL_EQUALITY = 1024,   // eROTATIONAL_EQUALITY = 1024
        eROTATIONAL_INEQUALITY = 1025, // eROTATIONAL_INEQUALITY = 1025
        eEQUALITY = 2048,              // eEQUALITY = 2048
        eINEQUALITY = 2049,            // eINEQUALITY = 2049
    }
    
    public unsafe partial struct Px1DConstraintPtr{
        private System.IntPtr nativePtr_;
        
    public unsafe partial struct physx_Px1DConstraint_ANONYMOUS_unionPtr{
            private System.IntPtr nativePtr_;
            
        public unsafe partial struct SpringModifiersPtr{
                private System.IntPtr nativePtr_;
                
            [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
                static extern SpringModifiersPtr Newer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_SpringModifiersPtr();
                
                public static SpringModifiersPtr New(){
                    return Newer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_SpringModifiersPtr();
                }
                
                [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
                static extern void Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_SpringModifiersPtr(SpringModifiersPtr ptr);
                
                public static void Free(SpringModifiersPtr ptr){
                    Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_SpringModifiersPtr(ptr);
                }
                public void Free(){
                    Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_SpringModifiersPtr(this);
                }
                
                [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
                static extern float SpringModifiers_GET_stiffness(SpringModifiersPtr cls);
                
                [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
                static extern void SpringModifiers_SET_stiffness(SpringModifiersPtr cls, float value);
                
                public float stiffness {
                    get => SpringModifiers_GET_stiffness(this);
                    set => SpringModifiers_SET_stiffness(this, value);
                }
                
                [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
                static extern float SpringModifiers_GET_damping(SpringModifiersPtr cls);
                
                [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
                static extern void SpringModifiers_SET_damping(SpringModifiersPtr cls, float value);
                
                public float damping {
                    get => SpringModifiers_GET_damping(this);
                    set => SpringModifiers_SET_damping(this, value);
                }
            }
            
            public unsafe partial struct RestitutionModifiersPtr{
                private System.IntPtr nativePtr_;
                
            [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
                static extern RestitutionModifiersPtr Newer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_RestitutionModifiersPtr();
                
                public static RestitutionModifiersPtr New(){
                    return Newer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_RestitutionModifiersPtr();
                }
                
                [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
                static extern void Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_RestitutionModifiersPtr(RestitutionModifiersPtr ptr);
                
                public static void Free(RestitutionModifiersPtr ptr){
                    Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_RestitutionModifiersPtr(ptr);
                }
                public void Free(){
                    Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_RestitutionModifiersPtr(this);
                }
                
                [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
                static extern float RestitutionModifiers_GET_restitution(RestitutionModifiersPtr cls);
                
                [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
                static extern void RestitutionModifiers_SET_restitution(RestitutionModifiersPtr cls, float value);
                
                public float restitution {
                    get => RestitutionModifiers_GET_restitution(this);
                    set => RestitutionModifiers_SET_restitution(this, value);
                }
                
                [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
                static extern float RestitutionModifiers_GET_velocityThreshold(RestitutionModifiersPtr cls);
                
                [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
                static extern void RestitutionModifiers_SET_velocityThreshold(RestitutionModifiersPtr cls, float value);
                
                public float velocityThreshold {
                    get => RestitutionModifiers_GET_velocityThreshold(this);
                    set => RestitutionModifiers_SET_velocityThreshold(this, value);
                }
            }
            
            [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
            static extern physx_Px1DConstraint_ANONYMOUS_unionPtr Newer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr();
            
            public static physx_Px1DConstraint_ANONYMOUS_unionPtr New(){
                return Newer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr();
            }
            
            [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
            static extern void Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr(physx_Px1DConstraint_ANONYMOUS_unionPtr ptr);
            
            public static void Free(physx_Px1DConstraint_ANONYMOUS_unionPtr ptr){
                Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr(ptr);
            }
            public void Free(){
                Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr(this);
            }
            
            [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
            static extern physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr.SpringModifiersPtr _GET_spring(physx_Px1DConstraint_ANONYMOUS_unionPtr cls);
            
            [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
            static extern void _SET_spring(physx_Px1DConstraint_ANONYMOUS_unionPtr cls, physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr.SpringModifiersPtr value);
            
            public physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr.SpringModifiersPtr spring {
                get => _GET_spring(this);
                set => _SET_spring(this, value);
            }
            
            [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
            static extern physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr.RestitutionModifiersPtr _GET_bounce(physx_Px1DConstraint_ANONYMOUS_unionPtr cls);
            
            [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
            static extern void _SET_bounce(physx_Px1DConstraint_ANONYMOUS_unionPtr cls, physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr.RestitutionModifiersPtr value);
            
            public physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr.RestitutionModifiersPtr bounce {
                get => _GET_bounce(this);
                set => _SET_bounce(this, value);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern Px1DConstraintPtr Newer_physx_Px1DConstraintPtr();
        
        public static Px1DConstraintPtr New(){
            return Newer_physx_Px1DConstraintPtr();
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_Px1DConstraintPtr(Px1DConstraintPtr ptr);
        
        public static void Free(Px1DConstraintPtr ptr){
            Freer_physx_Px1DConstraintPtr(ptr);
        }
        public void Free(){
            Freer_physx_Px1DConstraintPtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3Ptr Px1DConstraint_GET_linear0(Px1DConstraintPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Px1DConstraint_SET_linear0(Px1DConstraintPtr cls, physx.PxVec3Ptr value);
        
        public physx.PxVec3Ptr linear0 {
            get => Px1DConstraint_GET_linear0(this);
            set => Px1DConstraint_SET_linear0(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float Px1DConstraint_GET_geometricError(Px1DConstraintPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Px1DConstraint_SET_geometricError(Px1DConstraintPtr cls, float value);
        
        public float geometricError {
            get => Px1DConstraint_GET_geometricError(this);
            set => Px1DConstraint_SET_geometricError(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3Ptr Px1DConstraint_GET_angular0(Px1DConstraintPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Px1DConstraint_SET_angular0(Px1DConstraintPtr cls, physx.PxVec3Ptr value);
        
        public physx.PxVec3Ptr angular0 {
            get => Px1DConstraint_GET_angular0(this);
            set => Px1DConstraint_SET_angular0(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float Px1DConstraint_GET_velocityTarget(Px1DConstraintPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Px1DConstraint_SET_velocityTarget(Px1DConstraintPtr cls, float value);
        
        public float velocityTarget {
            get => Px1DConstraint_GET_velocityTarget(this);
            set => Px1DConstraint_SET_velocityTarget(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3Ptr Px1DConstraint_GET_linear1(Px1DConstraintPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Px1DConstraint_SET_linear1(Px1DConstraintPtr cls, physx.PxVec3Ptr value);
        
        public physx.PxVec3Ptr linear1 {
            get => Px1DConstraint_GET_linear1(this);
            set => Px1DConstraint_SET_linear1(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float Px1DConstraint_GET_minImpulse(Px1DConstraintPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Px1DConstraint_SET_minImpulse(Px1DConstraintPtr cls, float value);
        
        public float minImpulse {
            get => Px1DConstraint_GET_minImpulse(this);
            set => Px1DConstraint_SET_minImpulse(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3Ptr Px1DConstraint_GET_angular1(Px1DConstraintPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Px1DConstraint_SET_angular1(Px1DConstraintPtr cls, physx.PxVec3Ptr value);
        
        public physx.PxVec3Ptr angular1 {
            get => Px1DConstraint_GET_angular1(this);
            set => Px1DConstraint_SET_angular1(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float Px1DConstraint_GET_maxImpulse(Px1DConstraintPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Px1DConstraint_SET_maxImpulse(Px1DConstraintPtr cls, float value);
        
        public float maxImpulse {
            get => Px1DConstraint_GET_maxImpulse(this);
            set => Px1DConstraint_SET_maxImpulse(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr Px1DConstraint_GET_mods(Px1DConstraintPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Px1DConstraint_SET_mods(Px1DConstraintPtr cls, physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr value);
        
        public physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr mods {
            get => Px1DConstraint_GET_mods(this);
            set => Px1DConstraint_SET_mods(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float Px1DConstraint_GET_forInternalUse(Px1DConstraintPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Px1DConstraint_SET_forInternalUse(Px1DConstraintPtr cls, float value);
        
        public float forInternalUse {
            get => Px1DConstraint_GET_forInternalUse(this);
            set => Px1DConstraint_SET_forInternalUse(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern ushort Px1DConstraint_GET_flags(Px1DConstraintPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Px1DConstraint_SET_flags(Px1DConstraintPtr cls, ushort value);
        
        public ushort flags {
            get => Px1DConstraint_GET_flags(this);
            set => Px1DConstraint_SET_flags(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern ushort Px1DConstraint_GET_solveHint(Px1DConstraintPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Px1DConstraint_SET_solveHint(Px1DConstraintPtr cls, ushort value);
        
        public ushort solveHint {
            get => Px1DConstraint_GET_solveHint(this);
            set => Px1DConstraint_SET_solveHint(this, value);
        }
    }
    
    public enum PxConstraintVisualizationFlagEnum : int {
        eLOCAL_FRAMES = 1, // eLOCAL_FRAMES = 1
        eLIMITS = 2,       // eLIMITS = 2
    }
    
    public unsafe partial struct PxConstraintInvMassScalePtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxConstraintInvMassScalePtr(PxConstraintInvMassScalePtr ptr);
        
        public static void Free(PxConstraintInvMassScalePtr ptr){
            Freer_physx_PxConstraintInvMassScalePtr(ptr);
        }
        public void Free(){
            Freer_physx_PxConstraintInvMassScalePtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxConstraintInvMassScalePtr Ctor_physx_PxConstraintInvMassScalePtr_();
        
        public static physx.PxConstraintInvMassScalePtr New() {
            return Ctor_physx_PxConstraintInvMassScalePtr_();
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxConstraintInvMassScalePtr Ctor_physx_PxConstraintInvMassScalePtr_float_float_float_float(float pvk_lin0, float pvk_ang0, float pvk_lin1, float pvk_ang1);
        
        public static physx.PxConstraintInvMassScalePtr New(float lin0, float ang0, float lin1, float ang1) {
            float pvk_in_lin0 = lin0;
            float pvk_in_ang0 = ang0;
            float pvk_in_lin1 = lin1;
            float pvk_in_ang1 = ang1;
            return Ctor_physx_PxConstraintInvMassScalePtr_float_float_float_float(pvk_in_lin0, pvk_in_ang0, pvk_in_lin1, pvk_in_ang1);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxConstraintInvMassScale_GET_linear0(PxConstraintInvMassScalePtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxConstraintInvMassScale_SET_linear0(PxConstraintInvMassScalePtr cls, float value);
        
        public float linear0 {
            get => PxConstraintInvMassScale_GET_linear0(this);
            set => PxConstraintInvMassScale_SET_linear0(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxConstraintInvMassScale_GET_angular0(PxConstraintInvMassScalePtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxConstraintInvMassScale_SET_angular0(PxConstraintInvMassScalePtr cls, float value);
        
        public float angular0 {
            get => PxConstraintInvMassScale_GET_angular0(this);
            set => PxConstraintInvMassScale_SET_angular0(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxConstraintInvMassScale_GET_linear1(PxConstraintInvMassScalePtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxConstraintInvMassScale_SET_linear1(PxConstraintInvMassScalePtr cls, float value);
        
        public float linear1 {
            get => PxConstraintInvMassScale_GET_linear1(this);
            set => PxConstraintInvMassScale_SET_linear1(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxConstraintInvMassScale_GET_angular1(PxConstraintInvMassScalePtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxConstraintInvMassScale_SET_angular1(PxConstraintInvMassScalePtr cls, float value);
        
        public float angular1 {
            get => PxConstraintInvMassScale_GET_angular1(this);
            set => PxConstraintInvMassScale_SET_angular1(this, value);
        }
    }
    
    public unsafe partial struct PxConstraintVisualizerPtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxConstraintVisualizer_visualizeJointFrames_physx_PxTransformPtr_physx_PxTransformPtr_(physx.PxConstraintVisualizerPtr pvk_this, physx.PxTransformPtr pvk_parent, physx.PxTransformPtr pvk_child);
        
        public void visualizeJointFrames(physx.PxTransformPtr parent, physx.PxTransformPtr child) {
            physx.PxConstraintVisualizerPtr pvk_in_this = this;
            physx.PxTransformPtr pvk_in_parent = parent;
            physx.PxTransformPtr pvk_in_child = child;
            void_physx_PxConstraintVisualizer_visualizeJointFrames_physx_PxTransformPtr_physx_PxTransformPtr_(pvk_in_this, pvk_in_parent, pvk_in_child);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxConstraintVisualizer_visualizeLinearLimit_physx_PxTransformPtr_physx_PxTransformPtr_float_bool_(physx.PxConstraintVisualizerPtr pvk_this, physx.PxTransformPtr pvk_t0, physx.PxTransformPtr pvk_t1, float pvk_value, bool pvk_active);
        
        public void visualizeLinearLimit(physx.PxTransformPtr t0, physx.PxTransformPtr t1, float value, bool active) {
            physx.PxConstraintVisualizerPtr pvk_in_this = this;
            physx.PxTransformPtr pvk_in_t0 = t0;
            physx.PxTransformPtr pvk_in_t1 = t1;
            float pvk_in_value = value;
            bool pvk_in_active = active;
            void_physx_PxConstraintVisualizer_visualizeLinearLimit_physx_PxTransformPtr_physx_PxTransformPtr_float_bool_(pvk_in_this, pvk_in_t0, pvk_in_t1, pvk_in_value, pvk_in_active);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxConstraintVisualizer_visualizeAngularLimit_physx_PxTransformPtr_float_float_bool_(physx.PxConstraintVisualizerPtr pvk_this, physx.PxTransformPtr pvk_t0, float pvk_lower, float pvk_upper, bool pvk_active);
        
        public void visualizeAngularLimit(physx.PxTransformPtr t0, float lower, float upper, bool active) {
            physx.PxConstraintVisualizerPtr pvk_in_this = this;
            physx.PxTransformPtr pvk_in_t0 = t0;
            float pvk_in_lower = lower;
            float pvk_in_upper = upper;
            bool pvk_in_active = active;
            void_physx_PxConstraintVisualizer_visualizeAngularLimit_physx_PxTransformPtr_float_float_bool_(pvk_in_this, pvk_in_t0, pvk_in_lower, pvk_in_upper, pvk_in_active);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxConstraintVisualizer_visualizeLimitCone_physx_PxTransformPtr_float_float_bool_(physx.PxConstraintVisualizerPtr pvk_this, physx.PxTransformPtr pvk_t, float pvk_tanQSwingY, float pvk_tanQSwingZ, bool pvk_active);
        
        public void visualizeLimitCone(physx.PxTransformPtr t, float tanQSwingY, float tanQSwingZ, bool active) {
            physx.PxConstraintVisualizerPtr pvk_in_this = this;
            physx.PxTransformPtr pvk_in_t = t;
            float pvk_in_tanQSwingY = tanQSwingY;
            float pvk_in_tanQSwingZ = tanQSwingZ;
            bool pvk_in_active = active;
            void_physx_PxConstraintVisualizer_visualizeLimitCone_physx_PxTransformPtr_float_float_bool_(pvk_in_this, pvk_in_t, pvk_in_tanQSwingY, pvk_in_tanQSwingZ, pvk_in_active);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxConstraintVisualizer_visualizeDoubleCone_physx_PxTransformPtr_float_bool_(physx.PxConstraintVisualizerPtr pvk_this, physx.PxTransformPtr pvk_t, float pvk_angle, bool pvk_active);
        
        public void visualizeDoubleCone(physx.PxTransformPtr t, float angle, bool active) {
            physx.PxConstraintVisualizerPtr pvk_in_this = this;
            physx.PxTransformPtr pvk_in_t = t;
            float pvk_in_angle = angle;
            bool pvk_in_active = active;
            void_physx_PxConstraintVisualizer_visualizeDoubleCone_physx_PxTransformPtr_float_bool_(pvk_in_this, pvk_in_t, pvk_in_angle, pvk_in_active);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxConstraintVisualizer_visualizeLine_physx_PxVec3Ptr_physx_PxVec3Ptr_uint_(physx.PxConstraintVisualizerPtr pvk_this, physx.PxVec3Ptr pvk_p0, physx.PxVec3Ptr pvk_p1, uint pvk_color);
        
        public void visualizeLine(physx.PxVec3Ptr p0, physx.PxVec3Ptr p1, uint color) {
            physx.PxConstraintVisualizerPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_p0 = p0;
            physx.PxVec3Ptr pvk_in_p1 = p1;
            uint pvk_in_color = color;
            void_physx_PxConstraintVisualizer_visualizeLine_physx_PxVec3Ptr_physx_PxVec3Ptr_uint_(pvk_in_this, pvk_in_p0, pvk_in_p1, pvk_in_color);
        }
    }
    
    public enum PxPvdUpdateTypeEnum : int {
        CREATE_INSTANCE = 0,       // CREATE_INSTANCE
        RELEASE_INSTANCE = 1,      // RELEASE_INSTANCE
        UPDATE_ALL_PROPERTIES = 2, // UPDATE_ALL_PROPERTIES
        UPDATE_SIM_PROPERTIES = 3, // UPDATE_SIM_PROPERTIES
    }
    
    public unsafe partial struct PxConstraintConnectorPtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr IntPtr_physx_PxConstraintConnector_prepareData(physx.PxConstraintConnectorPtr pvk_this);
        
        public IntPtr prepareData() {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            return IntPtr_physx_PxConstraintConnector_prepareData(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxConstraintConnector_onConstraintRelease(physx.PxConstraintConnectorPtr pvk_this);
        
        public void onConstraintRelease() {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            void_physx_PxConstraintConnector_onConstraintRelease(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxConstraintConnector_onComShift_uint_(physx.PxConstraintConnectorPtr pvk_this, uint pvk_actor);
        
        public void onComShift(uint actor) {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            uint pvk_in_actor = actor;
            void_physx_PxConstraintConnector_onComShift_uint_(pvk_in_this, pvk_in_actor);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxConstraintConnector_onOriginShift_physx_PxVec3Ptr_(physx.PxConstraintConnectorPtr pvk_this, physx.PxVec3Ptr pvk_shift);
        
        public void onOriginShift(physx.PxVec3Ptr shift) {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_shift = shift;
            void_physx_PxConstraintConnector_onOriginShift_physx_PxVec3Ptr_(pvk_in_this, pvk_in_shift);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr IntPtr_physx_PxConstraintConnector_getExternalReference_uint_(physx.PxConstraintConnectorPtr pvk_this, uint* pvk_typeID);
        
        public IntPtr getExternalReference(uint* typeID) {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            uint* pvk_in_typeID = typeID;
            return IntPtr_physx_PxConstraintConnector_getExternalReference_uint_(pvk_in_this, pvk_in_typeID);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxBasePtr physx_PxBasePtr_physx_PxConstraintConnector_getSerializable(physx.PxConstraintConnectorPtr pvk_this);
        
        public physx.PxBasePtr getSerializable() {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            return physx_PxBasePtr_physx_PxConstraintConnector_getSerializable(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxConstraintSolverPrep PxConstraintSolverPrep_const_physx_PxConstraintConnector_getPrep(physx.PxConstraintConnectorPtr pvk_this);
        
        public PxConstraintSolverPrep getPrep() {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            return PxConstraintSolverPrep_const_physx_PxConstraintConnector_getPrep(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr IntPtr_const_physx_PxConstraintConnector_getConstantBlock(physx.PxConstraintConnectorPtr pvk_this);
        
        public IntPtr getConstantBlock() {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            return IntPtr_const_physx_PxConstraintConnector_getConstantBlock(pvk_in_this);
        }
    }
    
}
