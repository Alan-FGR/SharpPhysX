// Generated by minBND 5.1.93.2 - Â© github.com/Alan-FGR
using System;
using System.Runtime.InteropServices;
using static minBND_pinvokes;

public static unsafe partial class physx {
    public static unsafe partial class pvdsdk {

    }

    public static physx.Px1DConstraintFlagsPtr OpPipe_New(physx.Px1DConstraintFlagPtr.Type a, physx.Px1DConstraintFlagPtr.Type b) {
        physx.Px1DConstraintFlagPtr.Type pvk_in_a = a;
        physx.Px1DConstraintFlagPtr.Type pvk_in_b = b;
        return Px1DConstraintFlagsPtr_operator_Ptr_Pipe_Px1DConstraintFlagPtr_Type_Px1DConstraintFlagPtr_Type_(pvk_in_a, pvk_in_b);
    }

    public static physx.Px1DConstraintFlagsPtr OpAnd_New(physx.Px1DConstraintFlagPtr.Type a, physx.Px1DConstraintFlagPtr.Type b) {
        physx.Px1DConstraintFlagPtr.Type pvk_in_a = a;
        physx.Px1DConstraintFlagPtr.Type pvk_in_b = b;
        return Px1DConstraintFlagsPtr_operator_Ptr_Amp_Px1DConstraintFlagPtr_Type_Px1DConstraintFlagPtr_Type_(pvk_in_a, pvk_in_b);
    }

    public static physx.Px1DConstraintFlagsPtr OpTilde_New(physx.Px1DConstraintFlagPtr.Type a) {
        physx.Px1DConstraintFlagPtr.Type pvk_in_a = a;
        return Px1DConstraintFlagsPtr_operator_Ptr_Tilde_Px1DConstraintFlagPtr_Type_(pvk_in_a);
    }

    public unsafe partial struct Px1DConstraintFlagPtr {
        private System.IntPtr nativePtr_;

        public enum Type : int {
            eSPRING = 1,              // eSPRING = 1<<0
            eACCELERATION_SPRING = 2, // eACCELERATION_SPRING = 1<<1
            eRESTITUTION = 4,         // eRESTITUTION = 1<<2
            eKEEPBIAS = 8,            // eKEEPBIAS = 1<<3
            eOUTPUT_FORCE = 16,       // eOUTPUT_FORCE = 1<<4
            eHAS_DRIVE_LIMIT = 32,    // eHAS_DRIVE_LIMIT = 1<<5
            eANGULAR_CONSTRAINT = 64, // eANGULAR_CONSTRAINT = 1 << 6
            eDRIVE_ROW = 128,         // eDRIVE_ROW = 1 << 7
        }

        public static void Free(physx.Px1DConstraintFlagPtr ptr){
            Freer_physx_Px1DConstraintFlagPtr(ptr);
        }
        public void Free(){
            Freer_physx_Px1DConstraintFlagPtr(this);
        }

        public static physx.Px1DConstraintFlagPtr New() {
            return Ctor_Px1DConstraintFlagPtr_();
        }

    }

    public enum PxConstraintSolveHintEnum : int {
        eNONE = 0,                     // eNONE = 0
        eACCELERATION1 = 256,          // eACCELERATION1 = 256
        eSLERP_SPRING = 258,           // eSLERP_SPRING = 258
        eACCELERATION2 = 512,          // eACCELERATION2 = 512
        eACCELERATION3 = 768,          // eACCELERATION3 = 768
        eROTATIONAL_EQUALITY = 1024,   // eROTATIONAL_EQUALITY = 1024
        eROTATIONAL_INEQUALITY = 1025, // eROTATIONAL_INEQUALITY = 1025
        eEQUALITY = 2048,              // eEQUALITY = 2048
        eINEQUALITY = 2049,            // eINEQUALITY = 2049
    }

    public unsafe partial struct Px1DConstraintPtr {
        private System.IntPtr nativePtr_;

        public unsafe partial struct physx_Px1DConstraint_ANONYMOUS_unionPtr {
            private System.IntPtr nativePtr_;

            public unsafe partial struct SpringModifiersPtr {
                private System.IntPtr nativePtr_;

                public static physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr.SpringModifiersPtr New(){
                    return Newer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_SpringModifiersPtr();
                }
                public static void Free(physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr.SpringModifiersPtr ptr){
                    Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_SpringModifiersPtr(ptr);
                }
                public void Free(){
                    Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_SpringModifiersPtr(this);
                }

                public float stiffness {
                    get => SpringModifiersPtr_GET_stiffness(this);
                    set => SpringModifiersPtr_SET_stiffness(this, value);
                }

                public float damping {
                    get => SpringModifiersPtr_GET_damping(this);
                    set => SpringModifiersPtr_SET_damping(this, value);
                }

            }

            public unsafe partial struct RestitutionModifiersPtr {
                private System.IntPtr nativePtr_;

                public static physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr.RestitutionModifiersPtr New(){
                    return Newer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_RestitutionModifiersPtr();
                }
                public static void Free(physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr.RestitutionModifiersPtr ptr){
                    Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_RestitutionModifiersPtr(ptr);
                }
                public void Free(){
                    Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr_RestitutionModifiersPtr(this);
                }

                public float restitution {
                    get => RestitutionModifiersPtr_GET_restitution(this);
                    set => RestitutionModifiersPtr_SET_restitution(this, value);
                }

                public float velocityThreshold {
                    get => RestitutionModifiersPtr_GET_velocityThreshold(this);
                    set => RestitutionModifiersPtr_SET_velocityThreshold(this, value);
                }

            }

            public static physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr New(){
                return Newer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr();
            }
            public static void Free(physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr ptr){
                Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr(ptr);
            }
            public void Free(){
                Freer_physx_Px1DConstraintPtr_physx_Px1DConstraint_ANONYMOUS_unionPtr(this);
            }

            public physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr.SpringModifiersPtr spring {
                get => physx_Px1DConstraint_ANONYMOUS_unionPtr_GET_spring(this);
                set => physx_Px1DConstraint_ANONYMOUS_unionPtr_SET_spring(this, value);
            }

            public physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr.RestitutionModifiersPtr bounce {
                get => physx_Px1DConstraint_ANONYMOUS_unionPtr_GET_bounce(this);
                set => physx_Px1DConstraint_ANONYMOUS_unionPtr_SET_bounce(this, value);
            }

        }

        public static physx.Px1DConstraintPtr New(){
            return Newer_physx_Px1DConstraintPtr();
        }
        public static void Free(physx.Px1DConstraintPtr ptr){
            Freer_physx_Px1DConstraintPtr(ptr);
        }
        public void Free(){
            Freer_physx_Px1DConstraintPtr(this);
        }

        public physx.PxVec3 linear0 {
            get { physx.PxVec3 GetRetRef; Px1DConstraintPtr_GET_linear0(this, &GetRetRef); return GetRetRef; }
            set => Px1DConstraintPtr_SET_linear0(this, value);
        }

        public float geometricError {
            get => Px1DConstraintPtr_GET_geometricError(this);
            set => Px1DConstraintPtr_SET_geometricError(this, value);
        }

        public physx.PxVec3 angular0 {
            get { physx.PxVec3 GetRetRef; Px1DConstraintPtr_GET_angular0(this, &GetRetRef); return GetRetRef; }
            set => Px1DConstraintPtr_SET_angular0(this, value);
        }

        public float velocityTarget {
            get => Px1DConstraintPtr_GET_velocityTarget(this);
            set => Px1DConstraintPtr_SET_velocityTarget(this, value);
        }

        public physx.PxVec3 linear1 {
            get { physx.PxVec3 GetRetRef; Px1DConstraintPtr_GET_linear1(this, &GetRetRef); return GetRetRef; }
            set => Px1DConstraintPtr_SET_linear1(this, value);
        }

        public float minImpulse {
            get => Px1DConstraintPtr_GET_minImpulse(this);
            set => Px1DConstraintPtr_SET_minImpulse(this, value);
        }

        public physx.PxVec3 angular1 {
            get { physx.PxVec3 GetRetRef; Px1DConstraintPtr_GET_angular1(this, &GetRetRef); return GetRetRef; }
            set => Px1DConstraintPtr_SET_angular1(this, value);
        }

        public float maxImpulse {
            get => Px1DConstraintPtr_GET_maxImpulse(this);
            set => Px1DConstraintPtr_SET_maxImpulse(this, value);
        }

        public physx.Px1DConstraintPtr.physx_Px1DConstraint_ANONYMOUS_unionPtr mods {
            get => Px1DConstraintPtr_GET_mods(this);
            set => Px1DConstraintPtr_SET_mods(this, value);
        }

        public float forInternalUse {
            get => Px1DConstraintPtr_GET_forInternalUse(this);
            set => Px1DConstraintPtr_SET_forInternalUse(this, value);
        }

        public ushort flags {
            get => Px1DConstraintPtr_GET_flags(this);
            set => Px1DConstraintPtr_SET_flags(this, value);
        }

        public ushort solveHint {
            get => Px1DConstraintPtr_GET_solveHint(this);
            set => Px1DConstraintPtr_SET_solveHint(this, value);
        }

    }

    public enum PxConstraintVisualizationFlagEnum : int {
        eLOCAL_FRAMES = 1, // eLOCAL_FRAMES = 1
        eLIMITS = 2,       // eLIMITS = 2
    }

    public unsafe partial struct PxConstraintInvMassScalePtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxConstraintInvMassScalePtr ptr){
            Freer_physx_PxConstraintInvMassScalePtr(ptr);
        }
        public void Free(){
            Freer_physx_PxConstraintInvMassScalePtr(this);
        }

        public static physx.PxConstraintInvMassScalePtr New() {
            return Ctor_PxConstraintInvMassScalePtr_();
        }

        public static physx.PxConstraintInvMassScalePtr New(float lin0, float ang0, float lin1, float ang1) {
            float pvk_in_lin0 = lin0;
            float pvk_in_ang0 = ang0;
            float pvk_in_lin1 = lin1;
            float pvk_in_ang1 = ang1;
            return Ctor_PxConstraintInvMassScalePtr_float_float_float_float(pvk_in_lin0, pvk_in_ang0, pvk_in_lin1, pvk_in_ang1);
        }

        public float linear0 {
            get => PxConstraintInvMassScalePtr_GET_linear0(this);
            set => PxConstraintInvMassScalePtr_SET_linear0(this, value);
        }

        public float angular0 {
            get => PxConstraintInvMassScalePtr_GET_angular0(this);
            set => PxConstraintInvMassScalePtr_SET_angular0(this, value);
        }

        public float linear1 {
            get => PxConstraintInvMassScalePtr_GET_linear1(this);
            set => PxConstraintInvMassScalePtr_SET_linear1(this, value);
        }

        public float angular1 {
            get => PxConstraintInvMassScalePtr_GET_angular1(this);
            set => PxConstraintInvMassScalePtr_SET_angular1(this, value);
        }

    }

    public unsafe partial struct PxConstraintVisualizerPtr {
        private System.IntPtr nativePtr_;

        public void visualizeJointFrames(physx.PxTransform* parent, physx.PxTransform* child) {
            physx.PxConstraintVisualizerPtr pvk_in_this = this;
            physx.PxTransform* pvk_in_parent = parent;
            physx.PxTransform* pvk_in_child = child;
            void_PxConstraintVisualizerPtr_visualizeJointFramesPtr_PxTransform_PxTransform_(pvk_in_this, pvk_in_parent, pvk_in_child);
        }

        public void visualizeLinearLimit(physx.PxTransform* t0, physx.PxTransform* t1, float value, bool active) {
            physx.PxConstraintVisualizerPtr pvk_in_this = this;
            physx.PxTransform* pvk_in_t0 = t0;
            physx.PxTransform* pvk_in_t1 = t1;
            float pvk_in_value = value;
            bool pvk_in_active = active;
            void_PxConstraintVisualizerPtr_visualizeLinearLimitPtr_PxTransform_PxTransform_float_bool_(pvk_in_this, pvk_in_t0, pvk_in_t1, pvk_in_value, pvk_in_active);
        }

        public void visualizeAngularLimit(physx.PxTransform* t0, float lower, float upper, bool active) {
            physx.PxConstraintVisualizerPtr pvk_in_this = this;
            physx.PxTransform* pvk_in_t0 = t0;
            float pvk_in_lower = lower;
            float pvk_in_upper = upper;
            bool pvk_in_active = active;
            void_PxConstraintVisualizerPtr_visualizeAngularLimitPtr_PxTransform_float_float_bool_(pvk_in_this, pvk_in_t0, pvk_in_lower, pvk_in_upper, pvk_in_active);
        }

        public void visualizeLimitCone(physx.PxTransform* t, float tanQSwingY, float tanQSwingZ, bool active) {
            physx.PxConstraintVisualizerPtr pvk_in_this = this;
            physx.PxTransform* pvk_in_t = t;
            float pvk_in_tanQSwingY = tanQSwingY;
            float pvk_in_tanQSwingZ = tanQSwingZ;
            bool pvk_in_active = active;
            void_PxConstraintVisualizerPtr_visualizeLimitConePtr_PxTransform_float_float_bool_(pvk_in_this, pvk_in_t, pvk_in_tanQSwingY, pvk_in_tanQSwingZ, pvk_in_active);
        }

        public void visualizeDoubleCone(physx.PxTransform* t, float angle, bool active) {
            physx.PxConstraintVisualizerPtr pvk_in_this = this;
            physx.PxTransform* pvk_in_t = t;
            float pvk_in_angle = angle;
            bool pvk_in_active = active;
            void_PxConstraintVisualizerPtr_visualizeDoubleConePtr_PxTransform_float_bool_(pvk_in_this, pvk_in_t, pvk_in_angle, pvk_in_active);
        }

        public void visualizeLine(physx.PxVec3* p0, physx.PxVec3* p1, uint color) {
            physx.PxConstraintVisualizerPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_p0 = p0;
            physx.PxVec3* pvk_in_p1 = p1;
            uint pvk_in_color = color;
            void_PxConstraintVisualizerPtr_visualizeLinePtr_PxVec3_PxVec3_uint_(pvk_in_this, pvk_in_p0, pvk_in_p1, pvk_in_color);
        }

        public void visualizeJointFrames(physx.PxTransform parent, physx.PxTransform child) {
            visualizeJointFrames((physx.PxTransform*)&parent, (physx.PxTransform*)&child);
        }

        public void visualizeJointFrames(physx.PxTransform.Ref parent, physx.PxTransform.Ref child) {
            visualizeJointFrames((physx.PxTransform*)(*((IntPtr*)(&parent))), (physx.PxTransform*)(*((IntPtr*)(&child))));
        }

        public void visualizeLinearLimit(physx.PxTransform t0, physx.PxTransform t1, float value, bool active) {
            visualizeLinearLimit((physx.PxTransform*)&t0, (physx.PxTransform*)&t1, value, active);
        }

        public void visualizeLinearLimit(physx.PxTransform.Ref t0, physx.PxTransform.Ref t1, float value, bool active) {
            visualizeLinearLimit((physx.PxTransform*)(*((IntPtr*)(&t0))), (physx.PxTransform*)(*((IntPtr*)(&t1))), value, active);
        }

        public void visualizeAngularLimit(physx.PxTransform t0, float lower, float upper, bool active) {
            visualizeAngularLimit((physx.PxTransform*)&t0, lower, upper, active);
        }

        public void visualizeAngularLimit(physx.PxTransform.Ref t0, float lower, float upper, bool active) {
            visualizeAngularLimit((physx.PxTransform*)(*((IntPtr*)(&t0))), lower, upper, active);
        }

        public void visualizeLimitCone(physx.PxTransform t, float tanQSwingY, float tanQSwingZ, bool active) {
            visualizeLimitCone((physx.PxTransform*)&t, tanQSwingY, tanQSwingZ, active);
        }

        public void visualizeLimitCone(physx.PxTransform.Ref t, float tanQSwingY, float tanQSwingZ, bool active) {
            visualizeLimitCone((physx.PxTransform*)(*((IntPtr*)(&t))), tanQSwingY, tanQSwingZ, active);
        }

        public void visualizeDoubleCone(physx.PxTransform t, float angle, bool active) {
            visualizeDoubleCone((physx.PxTransform*)&t, angle, active);
        }

        public void visualizeDoubleCone(physx.PxTransform.Ref t, float angle, bool active) {
            visualizeDoubleCone((physx.PxTransform*)(*((IntPtr*)(&t))), angle, active);
        }

        public void visualizeLine(physx.PxVec3 p0, physx.PxVec3 p1, uint color) {
            visualizeLine((physx.PxVec3*)&p0, (physx.PxVec3*)&p1, color);
        }

        public void visualizeLine(physx.PxVec3.Ref p0, physx.PxVec3.Ref p1, uint color) {
            visualizeLine((physx.PxVec3*)(*((IntPtr*)(&p0))), (physx.PxVec3*)(*((IntPtr*)(&p1))), color);
        }
    }

    public enum PxPvdUpdateTypeEnum : int {
        CREATE_INSTANCE = 0,       // CREATE_INSTANCE
        RELEASE_INSTANCE = 1,      // RELEASE_INSTANCE
        UPDATE_ALL_PROPERTIES = 2, // UPDATE_ALL_PROPERTIES
        UPDATE_SIM_PROPERTIES = 3, // UPDATE_SIM_PROPERTIES
    }

    public unsafe partial struct PxConstraintConnectorPtr {
        private System.IntPtr nativePtr_;

        public IntPtr prepareData() {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            return IntPtr_PxConstraintConnectorPtr_prepareDataPtr(pvk_in_this);
        }

        public void onConstraintRelease() {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            void_PxConstraintConnectorPtr_onConstraintReleasePtr(pvk_in_this);
        }

        public void onComShift(uint actor) {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            uint pvk_in_actor = actor;
            void_PxConstraintConnectorPtr_onComShiftPtr_uint_(pvk_in_this, pvk_in_actor);
        }

        public void onOriginShift(physx.PxVec3* shift) {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_shift = shift;
            void_PxConstraintConnectorPtr_onOriginShiftPtr_PxVec3_(pvk_in_this, pvk_in_shift);
        }

        public IntPtr getExternalReference(uint* typeID) {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            uint* pvk_in_typeID = typeID;
            return IntPtr_PxConstraintConnectorPtr_getExternalReferencePtr_uint_(pvk_in_this, pvk_in_typeID);
        }

        public physx.PxBasePtr getSerializable() {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            return PxBasePtr_PxConstraintConnectorPtr_getSerializablePtr(pvk_in_this);
        }

        public PxConstraintSolverPrep getPrep() {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            return PxConstraintSolverPrep_const_PxConstraintConnectorPtr_getPrepPtr(pvk_in_this);
        }

        public IntPtr getConstantBlock() {
            physx.PxConstraintConnectorPtr pvk_in_this = this;
            return IntPtr_const_PxConstraintConnectorPtr_getConstantBlockPtr(pvk_in_this);
        }

        public void onOriginShift(physx.PxVec3 shift) {
            onOriginShift((physx.PxVec3*)&shift);
        }

        public void onOriginShift(physx.PxVec3.Ref shift) {
            onOriginShift((physx.PxVec3*)(*((IntPtr*)(&shift))));
        }
    }

}
