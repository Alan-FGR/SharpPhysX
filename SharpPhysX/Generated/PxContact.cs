// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
//Unit PxContact
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    public unsafe partial struct PxMassModificationPropsPtr {
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxMassModificationPropsPtr Newer_physx_PxMassModificationPropsPtr();
        
        public static PxMassModificationPropsPtr New(){
            return Newer_physx_PxMassModificationPropsPtr();
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxMassModificationPropsPtr(PxMassModificationPropsPtr ptr);
        
        public static void Free(PxMassModificationPropsPtr ptr){
            Freer_physx_PxMassModificationPropsPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxMassModificationPropsPtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxMassModificationProps_GET_mInvMassScale0(PxMassModificationPropsPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxMassModificationProps_SET_mInvMassScale0(PxMassModificationPropsPtr cls, float value);
        
        public float mInvMassScale0 {
            get => PxMassModificationProps_GET_mInvMassScale0(this);
            set => PxMassModificationProps_SET_mInvMassScale0(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxMassModificationProps_GET_mInvInertiaScale0(PxMassModificationPropsPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxMassModificationProps_SET_mInvInertiaScale0(PxMassModificationPropsPtr cls, float value);
        
        public float mInvInertiaScale0 {
            get => PxMassModificationProps_GET_mInvInertiaScale0(this);
            set => PxMassModificationProps_SET_mInvInertiaScale0(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxMassModificationProps_GET_mInvMassScale1(PxMassModificationPropsPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxMassModificationProps_SET_mInvMassScale1(PxMassModificationPropsPtr cls, float value);
        
        public float mInvMassScale1 {
            get => PxMassModificationProps_GET_mInvMassScale1(this);
            set => PxMassModificationProps_SET_mInvMassScale1(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxMassModificationProps_GET_mInvInertiaScale1(PxMassModificationPropsPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxMassModificationProps_SET_mInvInertiaScale1(PxMassModificationPropsPtr cls, float value);
        
        public float mInvInertiaScale1 {
            get => PxMassModificationProps_GET_mInvInertiaScale1(this);
            set => PxMassModificationProps_SET_mInvInertiaScale1(this, value);
        }
    }
    
    public unsafe partial struct PxContactPatchPtr {
        private System.IntPtr nativePtr_;
        
    public enum PxContactPatchFlags : int {
            eHAS_FACE_INDICES = 1,              // eHAS_FACE_INDICES = 1
            eMODIFIABLE = 2,                    // eMODIFIABLE = 2
            eFORCE_NO_RESPONSE = 4,             // eFORCE_NO_RESPONSE = 4
            eHAS_MODIFIED_MASS_RATIOS = 8,      // eHAS_MODIFIED_MASS_RATIOS = 8
            eHAS_TARGET_VELOCITY = 16,          // eHAS_TARGET_VELOCITY = 16
            eHAS_MAX_IMPULSE = 32,              // eHAS_MAX_IMPULSE = 32
            eREGENERATE_PATCHES = 64,           // eREGENERATE_PATCHES = 64
            eCOMPRESSED_MODIFIED_CONTACT = 128, // eCOMPRESSED_MODIFIED_CONTACT = 128
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxContactPatchPtr Newer_physx_PxContactPatchPtr();
        
        public static PxContactPatchPtr New(){
            return Newer_physx_PxContactPatchPtr();
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxContactPatchPtr(PxContactPatchPtr ptr);
        
        public static void Free(PxContactPatchPtr ptr){
            Freer_physx_PxContactPatchPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxContactPatchPtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxMassModificationPropsPtr PxContactPatch_GET_mMassModification(PxContactPatchPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactPatch_SET_mMassModification(PxContactPatchPtr cls, physx.PxMassModificationPropsPtr value);
        
        public physx.PxMassModificationPropsPtr mMassModification {
            get => PxContactPatch_GET_mMassModification(this);
            set => PxContactPatch_SET_mMassModification(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactPatch_GET_normal(PxContactPatchPtr cls, physx.PxVec3* GetRetRef);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactPatch_SET_normal(PxContactPatchPtr cls, physx.PxVec3 value);
        
        public physx.PxVec3 normal {
            get { physx.PxVec3 GetRetRef; PxContactPatch_GET_normal(this, &GetRetRef); return GetRetRef; }
            set => PxContactPatch_SET_normal(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxContactPatch_GET_restitution(PxContactPatchPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactPatch_SET_restitution(PxContactPatchPtr cls, float value);
        
        public float restitution {
            get => PxContactPatch_GET_restitution(this);
            set => PxContactPatch_SET_restitution(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxContactPatch_GET_dynamicFriction(PxContactPatchPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactPatch_SET_dynamicFriction(PxContactPatchPtr cls, float value);
        
        public float dynamicFriction {
            get => PxContactPatch_GET_dynamicFriction(this);
            set => PxContactPatch_SET_dynamicFriction(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxContactPatch_GET_staticFriction(PxContactPatchPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactPatch_SET_staticFriction(PxContactPatchPtr cls, float value);
        
        public float staticFriction {
            get => PxContactPatch_GET_staticFriction(this);
            set => PxContactPatch_SET_staticFriction(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern byte PxContactPatch_GET_startContactIndex(PxContactPatchPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactPatch_SET_startContactIndex(PxContactPatchPtr cls, byte value);
        
        public byte startContactIndex {
            get => PxContactPatch_GET_startContactIndex(this);
            set => PxContactPatch_SET_startContactIndex(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern byte PxContactPatch_GET_nbContacts(PxContactPatchPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactPatch_SET_nbContacts(PxContactPatchPtr cls, byte value);
        
        public byte nbContacts {
            get => PxContactPatch_GET_nbContacts(this);
            set => PxContactPatch_SET_nbContacts(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern byte PxContactPatch_GET_materialFlags(PxContactPatchPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactPatch_SET_materialFlags(PxContactPatchPtr cls, byte value);
        
        public byte materialFlags {
            get => PxContactPatch_GET_materialFlags(this);
            set => PxContactPatch_SET_materialFlags(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern byte PxContactPatch_GET_internalFlags(PxContactPatchPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactPatch_SET_internalFlags(PxContactPatchPtr cls, byte value);
        
        public byte internalFlags {
            get => PxContactPatch_GET_internalFlags(this);
            set => PxContactPatch_SET_internalFlags(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern ushort PxContactPatch_GET_materialIndex0(PxContactPatchPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactPatch_SET_materialIndex0(PxContactPatchPtr cls, ushort value);
        
        public ushort materialIndex0 {
            get => PxContactPatch_GET_materialIndex0(this);
            set => PxContactPatch_SET_materialIndex0(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern ushort PxContactPatch_GET_materialIndex1(PxContactPatchPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactPatch_SET_materialIndex1(PxContactPatchPtr cls, ushort value);
        
        public ushort materialIndex1 {
            get => PxContactPatch_GET_materialIndex1(this);
            set => PxContactPatch_SET_materialIndex1(this, value);
        }
    }
    
    public unsafe partial struct PxContactPtr {
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxContactPtr Newer_physx_PxContactPtr();
        
        public static PxContactPtr New(){
            return Newer_physx_PxContactPtr();
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxContactPtr(PxContactPtr ptr);
        
        public static void Free(PxContactPtr ptr){
            Freer_physx_PxContactPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxContactPtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContact_GET_contact(PxContactPtr cls, physx.PxVec3* GetRetRef);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContact_SET_contact(PxContactPtr cls, physx.PxVec3 value);
        
        public physx.PxVec3 contact {
            get { physx.PxVec3 GetRetRef; PxContact_GET_contact(this, &GetRetRef); return GetRetRef; }
            set => PxContact_SET_contact(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxContact_GET_separation(PxContactPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContact_SET_separation(PxContactPtr cls, float value);
        
        public float separation {
            get => PxContact_GET_separation(this);
            set => PxContact_SET_separation(this, value);
        }
    }
    
    public unsafe partial struct PxExtendedContactPtr {
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxExtendedContactPtr Newer_physx_PxExtendedContactPtr();
        
        public static PxExtendedContactPtr New(){
            return Newer_physx_PxExtendedContactPtr();
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxExtendedContactPtr(PxExtendedContactPtr ptr);
        
        public static void Free(PxExtendedContactPtr ptr){
            Freer_physx_PxExtendedContactPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxExtendedContactPtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxExtendedContact_GET_targetVelocity(PxExtendedContactPtr cls, physx.PxVec3* GetRetRef);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxExtendedContact_SET_targetVelocity(PxExtendedContactPtr cls, physx.PxVec3 value);
        
        public physx.PxVec3 targetVelocity {
            get { physx.PxVec3 GetRetRef; PxExtendedContact_GET_targetVelocity(this, &GetRetRef); return GetRetRef; }
            set => PxExtendedContact_SET_targetVelocity(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxExtendedContact_GET_maxImpulse(PxExtendedContactPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxExtendedContact_SET_maxImpulse(PxExtendedContactPtr cls, float value);
        
        public float maxImpulse {
            get => PxExtendedContact_GET_maxImpulse(this);
            set => PxExtendedContact_SET_maxImpulse(this, value);
        }
        public static implicit operator physx.PxContactPtr(PxExtendedContactPtr obj) => *(physx.PxContactPtr*)&obj;
        public static explicit operator PxExtendedContactPtr(physx.PxContactPtr obj) => *(PxExtendedContactPtr*)&obj;
    }
    
    public unsafe partial struct PxModifiableContactPtr {
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxModifiableContactPtr Newer_physx_PxModifiableContactPtr();
        
        public static PxModifiableContactPtr New(){
            return Newer_physx_PxModifiableContactPtr();
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxModifiableContactPtr(PxModifiableContactPtr ptr);
        
        public static void Free(PxModifiableContactPtr ptr){
            Freer_physx_PxModifiableContactPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxModifiableContactPtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxModifiableContact_GET_normal(PxModifiableContactPtr cls, physx.PxVec3* GetRetRef);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxModifiableContact_SET_normal(PxModifiableContactPtr cls, physx.PxVec3 value);
        
        public physx.PxVec3 normal {
            get { physx.PxVec3 GetRetRef; PxModifiableContact_GET_normal(this, &GetRetRef); return GetRetRef; }
            set => PxModifiableContact_SET_normal(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxModifiableContact_GET_restitution(PxModifiableContactPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxModifiableContact_SET_restitution(PxModifiableContactPtr cls, float value);
        
        public float restitution {
            get => PxModifiableContact_GET_restitution(this);
            set => PxModifiableContact_SET_restitution(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxModifiableContact_GET_materialFlags(PxModifiableContactPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxModifiableContact_SET_materialFlags(PxModifiableContactPtr cls, uint value);
        
        public uint materialFlags {
            get => PxModifiableContact_GET_materialFlags(this);
            set => PxModifiableContact_SET_materialFlags(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern ushort PxModifiableContact_GET_materialIndex0(PxModifiableContactPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxModifiableContact_SET_materialIndex0(PxModifiableContactPtr cls, ushort value);
        
        public ushort materialIndex0 {
            get => PxModifiableContact_GET_materialIndex0(this);
            set => PxModifiableContact_SET_materialIndex0(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern ushort PxModifiableContact_GET_materialIndex1(PxModifiableContactPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxModifiableContact_SET_materialIndex1(PxModifiableContactPtr cls, ushort value);
        
        public ushort materialIndex1 {
            get => PxModifiableContact_GET_materialIndex1(this);
            set => PxModifiableContact_SET_materialIndex1(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxModifiableContact_GET_staticFriction(PxModifiableContactPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxModifiableContact_SET_staticFriction(PxModifiableContactPtr cls, float value);
        
        public float staticFriction {
            get => PxModifiableContact_GET_staticFriction(this);
            set => PxModifiableContact_SET_staticFriction(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxModifiableContact_GET_dynamicFriction(PxModifiableContactPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxModifiableContact_SET_dynamicFriction(PxModifiableContactPtr cls, float value);
        
        public float dynamicFriction {
            get => PxModifiableContact_GET_dynamicFriction(this);
            set => PxModifiableContact_SET_dynamicFriction(this, value);
        }
        public static implicit operator physx.PxExtendedContactPtr(PxModifiableContactPtr obj) => *(physx.PxExtendedContactPtr*)&obj;
        public static explicit operator PxModifiableContactPtr(physx.PxExtendedContactPtr obj) => *(PxModifiableContactPtr*)&obj;
        public static implicit operator physx.PxContactPtr(PxModifiableContactPtr obj) => *(physx.PxContactPtr*)&obj;
        public static explicit operator PxModifiableContactPtr(physx.PxContactPtr obj) => *(PxModifiableContactPtr*)&obj;
    }
    
    public unsafe partial struct PxContactStreamIteratorPtr {
        private System.IntPtr nativePtr_;
        
    public enum StreamFormat : int {
            eSIMPLE_STREAM = 0,                // eSIMPLE_STREAM
            eMODIFIABLE_STREAM = 1,            // eMODIFIABLE_STREAM
            eCOMPRESSED_MODIFIABLE_STREAM = 2, // eCOMPRESSED_MODIFIABLE_STREAM
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxContactStreamIteratorPtr(PxContactStreamIteratorPtr ptr);
        
        public static void Free(PxContactStreamIteratorPtr ptr){
            Freer_physx_PxContactStreamIteratorPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxContactStreamIteratorPtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxContactStreamIteratorPtr Ctor_physx_PxContactStreamIteratorPtr_byte_byte_uint_uint_uint(byte* pvk_contactPatches, byte* pvk_contactPoints, uint* pvk_contactFaceIndices, uint pvk_nbPatches, uint pvk_nbContacts);
        
        public static physx.PxContactStreamIteratorPtr New(byte* contactPatches, byte* contactPoints, uint* contactFaceIndices, uint nbPatches, uint nbContacts) {
            byte* pvk_in_contactPatches = contactPatches;
            byte* pvk_in_contactPoints = contactPoints;
            uint* pvk_in_contactFaceIndices = contactFaceIndices;
            uint pvk_in_nbPatches = nbPatches;
            uint pvk_in_nbContacts = nbContacts;
            return Ctor_physx_PxContactStreamIteratorPtr_byte_byte_uint_uint_uint(pvk_in_contactPatches, pvk_in_contactPoints, pvk_in_contactFaceIndices, pvk_in_nbPatches, pvk_in_nbContacts);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_GET_zero(PxContactStreamIteratorPtr cls, physx.PxVec3* GetRetRef);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_zero(PxContactStreamIteratorPtr cls, physx.PxVec3 value);
        
        public physx.PxVec3 zero {
            get { physx.PxVec3 GetRetRef; PxContactStreamIterator_GET_zero(this, &GetRetRef); return GetRetRef; }
            set => PxContactStreamIterator_SET_zero(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxContactPatchPtr PxContactStreamIterator_GET_patch(PxContactStreamIteratorPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_patch(PxContactStreamIteratorPtr cls, physx.PxContactPatchPtr value);
        
        public physx.PxContactPatchPtr patch {
            get => PxContactStreamIterator_GET_patch(this);
            set => PxContactStreamIterator_SET_patch(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxContactPtr PxContactStreamIterator_GET_contact(PxContactStreamIteratorPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_contact(PxContactStreamIteratorPtr cls, physx.PxContactPtr value);
        
        public physx.PxContactPtr contact {
            get => PxContactStreamIterator_GET_contact(this);
            set => PxContactStreamIterator_SET_contact(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint* PxContactStreamIterator_GET_faceIndice(PxContactStreamIteratorPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_faceIndice(PxContactStreamIteratorPtr cls, uint* value);
        
        public uint* faceIndice {
            get => PxContactStreamIterator_GET_faceIndice(this);
            set => PxContactStreamIterator_SET_faceIndice(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxContactStreamIterator_GET_totalPatches(PxContactStreamIteratorPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_totalPatches(PxContactStreamIteratorPtr cls, uint value);
        
        public uint totalPatches {
            get => PxContactStreamIterator_GET_totalPatches(this);
            set => PxContactStreamIterator_SET_totalPatches(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxContactStreamIterator_GET_totalContacts(PxContactStreamIteratorPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_totalContacts(PxContactStreamIteratorPtr cls, uint value);
        
        public uint totalContacts {
            get => PxContactStreamIterator_GET_totalContacts(this);
            set => PxContactStreamIterator_SET_totalContacts(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxContactStreamIterator_GET_nextContactIndex(PxContactStreamIteratorPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_nextContactIndex(PxContactStreamIteratorPtr cls, uint value);
        
        public uint nextContactIndex {
            get => PxContactStreamIterator_GET_nextContactIndex(this);
            set => PxContactStreamIterator_SET_nextContactIndex(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxContactStreamIterator_GET_nextPatchIndex(PxContactStreamIteratorPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_nextPatchIndex(PxContactStreamIteratorPtr cls, uint value);
        
        public uint nextPatchIndex {
            get => PxContactStreamIterator_GET_nextPatchIndex(this);
            set => PxContactStreamIterator_SET_nextPatchIndex(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxContactStreamIterator_GET_contactPatchHeaderSize(PxContactStreamIteratorPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_contactPatchHeaderSize(PxContactStreamIteratorPtr cls, uint value);
        
        public uint contactPatchHeaderSize {
            get => PxContactStreamIterator_GET_contactPatchHeaderSize(this);
            set => PxContactStreamIterator_SET_contactPatchHeaderSize(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxContactStreamIterator_GET_contactPointSize(PxContactStreamIteratorPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_contactPointSize(PxContactStreamIteratorPtr cls, uint value);
        
        public uint contactPointSize {
            get => PxContactStreamIterator_GET_contactPointSize(this);
            set => PxContactStreamIterator_SET_contactPointSize(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxContactStreamIteratorPtr.StreamFormat PxContactStreamIterator_GET_mStreamFormat(PxContactStreamIteratorPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_mStreamFormat(PxContactStreamIteratorPtr cls, physx.PxContactStreamIteratorPtr.StreamFormat value);
        
        public physx.PxContactStreamIteratorPtr.StreamFormat mStreamFormat {
            get => PxContactStreamIterator_GET_mStreamFormat(this);
            set => PxContactStreamIterator_SET_mStreamFormat(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxContactStreamIterator_GET_forceNoResponse(PxContactStreamIteratorPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_forceNoResponse(PxContactStreamIteratorPtr cls, uint value);
        
        public uint forceNoResponse {
            get => PxContactStreamIterator_GET_forceNoResponse(this);
            set => PxContactStreamIterator_SET_forceNoResponse(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool PxContactStreamIterator_GET_pointStepped(PxContactStreamIteratorPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_pointStepped(PxContactStreamIteratorPtr cls, bool value);
        
        public bool pointStepped {
            get => PxContactStreamIterator_GET_pointStepped(this);
            set => PxContactStreamIterator_SET_pointStepped(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxContactStreamIterator_GET_hasFaceIndices(PxContactStreamIteratorPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxContactStreamIterator_SET_hasFaceIndices(PxContactStreamIteratorPtr cls, uint value);
        
        public uint hasFaceIndices {
            get => PxContactStreamIterator_GET_hasFaceIndices(this);
            set => PxContactStreamIterator_SET_hasFaceIndices(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxContactStreamIterator_hasNextPatch(physx.PxContactStreamIteratorPtr pvk_this);
        
        public bool hasNextPatch() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return bool_const_physx_PxContactStreamIterator_hasNextPatch(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxContactStreamIterator_getTotalContactCount(physx.PxContactStreamIteratorPtr pvk_this);
        
        public uint getTotalContactCount() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return uint_const_physx_PxContactStreamIterator_getTotalContactCount(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxContactStreamIterator_getTotalPatchCount(physx.PxContactStreamIteratorPtr pvk_this);
        
        public uint getTotalPatchCount() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return uint_const_physx_PxContactStreamIterator_getTotalPatchCount(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxContactStreamIterator_nextPatch(physx.PxContactStreamIteratorPtr pvk_this);
        
        public void nextPatch() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            void_physx_PxContactStreamIterator_nextPatch(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxContactStreamIterator_hasNextContact(physx.PxContactStreamIteratorPtr pvk_this);
        
        public bool hasNextContact() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return bool_const_physx_PxContactStreamIterator_hasNextContact(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxContactStreamIterator_nextContact(physx.PxContactStreamIteratorPtr pvk_this);
        
        public void nextContact() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            void_physx_PxContactStreamIterator_nextContact(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3* physx_PxVec3_const_physx_PxContactStreamIterator_getContactNormal(physx.PxContactStreamIteratorPtr pvk_this);
        
        public physx.PxVec3* getContactNormal() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return physx_PxVec3_const_physx_PxContactStreamIterator_getContactNormal(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxContactStreamIterator_getInvMassScale0(physx.PxContactStreamIteratorPtr pvk_this);
        
        public float getInvMassScale0() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return float_const_physx_PxContactStreamIterator_getInvMassScale0(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxContactStreamIterator_getInvMassScale1(physx.PxContactStreamIteratorPtr pvk_this);
        
        public float getInvMassScale1() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return float_const_physx_PxContactStreamIterator_getInvMassScale1(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxContactStreamIterator_getInvInertiaScale0(physx.PxContactStreamIteratorPtr pvk_this);
        
        public float getInvInertiaScale0() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return float_const_physx_PxContactStreamIterator_getInvInertiaScale0(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxContactStreamIterator_getInvInertiaScale1(physx.PxContactStreamIteratorPtr pvk_this);
        
        public float getInvInertiaScale1() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return float_const_physx_PxContactStreamIterator_getInvInertiaScale1(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxContactStreamIterator_getMaxImpulse(physx.PxContactStreamIteratorPtr pvk_this);
        
        public float getMaxImpulse() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return float_const_physx_PxContactStreamIterator_getMaxImpulse(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3* physx_PxVec3_const_physx_PxContactStreamIterator_getTargetVel(physx.PxContactStreamIteratorPtr pvk_this);
        
        public physx.PxVec3* getTargetVel() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return physx_PxVec3_const_physx_PxContactStreamIterator_getTargetVel(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3* physx_PxVec3_const_physx_PxContactStreamIterator_getContactPoint(physx.PxContactStreamIteratorPtr pvk_this);
        
        public physx.PxVec3* getContactPoint() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return physx_PxVec3_const_physx_PxContactStreamIterator_getContactPoint(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxContactStreamIterator_getSeparation(physx.PxContactStreamIteratorPtr pvk_this);
        
        public float getSeparation() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return float_const_physx_PxContactStreamIterator_getSeparation(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxContactStreamIterator_getFaceIndex0(physx.PxContactStreamIteratorPtr pvk_this);
        
        public uint getFaceIndex0() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return uint_const_physx_PxContactStreamIterator_getFaceIndex0(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxContactStreamIterator_getFaceIndex1(physx.PxContactStreamIteratorPtr pvk_this);
        
        public uint getFaceIndex1() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return uint_const_physx_PxContactStreamIterator_getFaceIndex1(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxContactStreamIterator_getStaticFriction(physx.PxContactStreamIteratorPtr pvk_this);
        
        public float getStaticFriction() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return float_const_physx_PxContactStreamIterator_getStaticFriction(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxContactStreamIterator_getDynamicFriction(physx.PxContactStreamIteratorPtr pvk_this);
        
        public float getDynamicFriction() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return float_const_physx_PxContactStreamIterator_getDynamicFriction(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxContactStreamIterator_getRestitution(physx.PxContactStreamIteratorPtr pvk_this);
        
        public float getRestitution() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return float_const_physx_PxContactStreamIterator_getRestitution(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxContactStreamIterator_getMaterialFlags(physx.PxContactStreamIteratorPtr pvk_this);
        
        public uint getMaterialFlags() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return uint_const_physx_PxContactStreamIterator_getMaterialFlags(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern ushort ushort_const_physx_PxContactStreamIterator_getMaterialIndex0(physx.PxContactStreamIteratorPtr pvk_this);
        
        public ushort getMaterialIndex0() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return ushort_const_physx_PxContactStreamIterator_getMaterialIndex0(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern ushort ushort_const_physx_PxContactStreamIterator_getMaterialIndex1(physx.PxContactStreamIteratorPtr pvk_this);
        
        public ushort getMaterialIndex1() {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            return ushort_const_physx_PxContactStreamIterator_getMaterialIndex1(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxContactStreamIterator_advanceToIndex_uintC(physx.PxContactStreamIteratorPtr pvk_this, uint pvk_initialIndex);
        
        public bool advanceToIndex(uint initialIndex) {
            physx.PxContactStreamIteratorPtr pvk_in_this = this;
            uint pvk_in_initialIndex = initialIndex;
            return bool_physx_PxContactStreamIterator_advanceToIndex_uintC(pvk_in_this, pvk_in_initialIndex);
        }
    }
    
}
