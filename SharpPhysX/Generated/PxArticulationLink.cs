// Generated by minBND 5.1.78.26 - Â© github.com/Alan-FGR
//DEBUG: UnitNode  - 0
//Unit PxArticulationLink
using System;
using System.Runtime.InteropServices;

//DEBUG: NamespaceNode physx - 41-138
public static unsafe partial class physx {
    //DEBUG: ClassNode physx::PxArticulationLink - 57-135
    //Bases: PxRigidBodyPtr|PxRigidActorPtr|PxActorPtr|PxBasePtr
    //Interface use count: 0
    public unsafe partial struct PxArticulationLinkPtr : physx.PxRigidBodyPtr.IPxRigidBodyPtr, physx.PxRigidActorPtr.IPxRigidActorPtr, physx.PxActorPtr.IPxActorPtr, physx.PxBasePtr.IPxBasePtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: MethodNode physx::PxArticulationLink::release - 69
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationLink_release(physx.PxArticulationLinkPtr pvk_this);
        
        public void release() {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxArticulationLinkPtr, man: physx.PxArticulationLinkPtr, stg: PtrStruct
            physx.PxArticulationLinkPtr pvk_in_this = this;
            void_physx_PxArticulationLink_release(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxArticulationLink::getArticulation - 78
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxArticulationBasePtr physx_PxArticulationBasePtr_const_physx_PxArticulationLink_getArticulation(physx.PxArticulationLinkPtr pvk_this);
        
        public physx.PxArticulationBasePtr getArticulation() {
            //RET nat: physx.PxArticulationBasePtr, man: physx.PxArticulationBasePtr, stg: PtrStruct, ret: True
            //PAR nat: PxArticulationLinkPtr, man: physx.PxArticulationLinkPtr, stg: PtrStruct
            physx.PxArticulationLinkPtr pvk_in_this = this;
            return physx_PxArticulationBasePtr_const_physx_PxArticulationLink_getArticulation(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxArticulationLink::getInboundJoint - 88
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxArticulationJointBasePtr physx_PxArticulationJointBasePtr_const_physx_PxArticulationLink_getInboundJoint(physx.PxArticulationLinkPtr pvk_this);
        
        public physx.PxArticulationJointBasePtr getInboundJoint() {
            //RET nat: physx.PxArticulationJointBasePtr, man: physx.PxArticulationJointBasePtr, stg: PtrStruct, ret: True
            //PAR nat: PxArticulationLinkPtr, man: physx.PxArticulationLinkPtr, stg: PtrStruct
            physx.PxArticulationLinkPtr pvk_in_this = this;
            return physx_PxArticulationJointBasePtr_const_physx_PxArticulationLink_getInboundJoint(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxArticulationLink::getInboundJointDof - 97
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxArticulationLink_getInboundJointDof(physx.PxArticulationLinkPtr pvk_this);
        
        public uint getInboundJointDof() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxArticulationLinkPtr, man: physx.PxArticulationLinkPtr, stg: PtrStruct
            physx.PxArticulationLinkPtr pvk_in_this = this;
            return uint_const_physx_PxArticulationLink_getInboundJointDof(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxArticulationLink::getNbChildren - 106
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxArticulationLink_getNbChildren(physx.PxArticulationLinkPtr pvk_this);
        
        public uint getNbChildren() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxArticulationLinkPtr, man: physx.PxArticulationLinkPtr, stg: PtrStruct
            physx.PxArticulationLinkPtr pvk_in_this = this;
            return uint_const_physx_PxArticulationLink_getNbChildren(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxArticulationLink::getLinkIndex - 114
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxArticulationLink_getLinkIndex(physx.PxArticulationLinkPtr pvk_this);
        
        public uint getLinkIndex() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxArticulationLinkPtr, man: physx.PxArticulationLinkPtr, stg: PtrStruct
            physx.PxArticulationLinkPtr pvk_in_this = this;
            return uint_const_physx_PxArticulationLink_getLinkIndex(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxArticulationLink::getChildren - 126
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxArticulationLink_getChildren_physx_PxArticulationLinkPtr_uint_uint_(physx.PxArticulationLinkPtr pvk_this, physx.PxArticulationLinkPtr* pvk_userBuffer, uint pvk_bufferSize, uint pvk_startIndex);
        
        public uint getChildren(physx.PxArticulationLinkPtr* userBuffer, uint bufferSize, uint startIndex=0) {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxArticulationLinkPtr, man: physx.PxArticulationLinkPtr, stg: PtrStruct
            physx.PxArticulationLinkPtr pvk_in_this = this;
            //PAR nat: PxArticulationLinkPtr*, man: physx.PxArticulationLinkPtr*, stg: Value
            physx.PxArticulationLinkPtr* pvk_in_userBuffer = userBuffer;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_bufferSize = bufferSize;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_startIndex = startIndex;
            return uint_const_physx_PxArticulationLink_getChildren_physx_PxArticulationLinkPtr_uint_uint_(pvk_in_this, pvk_in_userBuffer, pvk_in_bufferSize, pvk_in_startIndex);
        }
        
        //DEBUG: MethodNode physx::PxArticulationLink::getChildren - 126
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxArticulationLink_getChildren_physx_PxArticulationLinkPtr_uint_(physx.PxArticulationLinkPtr pvk_this, physx.PxArticulationLinkPtr* pvk_userBuffer, uint pvk_bufferSize);
        
        public uint getChildren(physx.PxArticulationLinkPtr* userBuffer, uint bufferSize) {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxArticulationLinkPtr, man: physx.PxArticulationLinkPtr, stg: PtrStruct
            physx.PxArticulationLinkPtr pvk_in_this = this;
            //PAR nat: PxArticulationLinkPtr*, man: physx.PxArticulationLinkPtr*, stg: Value
            physx.PxArticulationLinkPtr* pvk_in_userBuffer = userBuffer;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_bufferSize = bufferSize;
            return uint_const_physx_PxArticulationLink_getChildren_physx_PxArticulationLinkPtr_uint_(pvk_in_this, pvk_in_userBuffer, pvk_in_bufferSize);
        }
        
        //DEBUG: MethodNode physx::PxArticulationLink::getConcreteTypeName - 128
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern string string_const_physx_PxArticulationLink_getConcreteTypeName(physx.PxArticulationLinkPtr pvk_this);
        
        public string getConcreteTypeName() {
            //RET nat: string, man: string, stg: Value, ret: True
            //PAR nat: PxArticulationLinkPtr, man: physx.PxArticulationLinkPtr, stg: PtrStruct
            physx.PxArticulationLinkPtr pvk_in_this = this;
            return string_const_physx_PxArticulationLink_getConcreteTypeName(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxArticulationLink::operator= - 57
        //ERRORS OCCURED IN physx::PxArticulationLink::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        public static implicit operator physx.PxRigidBodyPtr(PxArticulationLinkPtr obj) => *(physx.PxRigidBodyPtr*)&obj;
        public static explicit operator PxArticulationLinkPtr(physx.PxRigidBodyPtr obj) => *(PxArticulationLinkPtr*)&obj;
        public static implicit operator physx.PxRigidActorPtr(PxArticulationLinkPtr obj) => *(physx.PxRigidActorPtr*)&obj;
        public static explicit operator PxArticulationLinkPtr(physx.PxRigidActorPtr obj) => *(PxArticulationLinkPtr*)&obj;
        public static implicit operator physx.PxActorPtr(PxArticulationLinkPtr obj) => *(physx.PxActorPtr*)&obj;
        public static explicit operator PxArticulationLinkPtr(physx.PxActorPtr obj) => *(PxArticulationLinkPtr*)&obj;
        public static implicit operator physx.PxBasePtr(PxArticulationLinkPtr obj) => *(physx.PxBasePtr*)&obj;
        public static explicit operator PxArticulationLinkPtr(physx.PxBasePtr obj) => *(PxArticulationLinkPtr*)&obj;
    
        // PIPING
        public void setCMassLocalPose(physx.PxTransform* pose){((physx.PxRigidBodyPtr)this).setCMassLocalPose(pose);}
        public physx.PxTransform getCMassLocalPose(){return((physx.PxRigidBodyPtr)this).getCMassLocalPose();}
        public void setMass(float mass){((physx.PxRigidBodyPtr)this).setMass(mass);}
        public float getMass(){return((physx.PxRigidBodyPtr)this).getMass();}
        public float getInvMass(){return((physx.PxRigidBodyPtr)this).getInvMass();}
        public void setMassSpaceInertiaTensor(physx.PxVec3* m){((physx.PxRigidBodyPtr)this).setMassSpaceInertiaTensor(m);}
        public physx.PxVec3 getMassSpaceInertiaTensor(){return((physx.PxRigidBodyPtr)this).getMassSpaceInertiaTensor();}
        public physx.PxVec3 getMassSpaceInvInertiaTensor(){return((physx.PxRigidBodyPtr)this).getMassSpaceInvInertiaTensor();}
        public void setLinearDamping(float linDamp){((physx.PxRigidBodyPtr)this).setLinearDamping(linDamp);}
        public float getLinearDamping(){return((physx.PxRigidBodyPtr)this).getLinearDamping();}
        public void setAngularDamping(float angDamp){((physx.PxRigidBodyPtr)this).setAngularDamping(angDamp);}
        public float getAngularDamping(){return((physx.PxRigidBodyPtr)this).getAngularDamping();}
        public physx.PxVec3 getLinearVelocity(){return((physx.PxRigidBodyPtr)this).getLinearVelocity();}
        public void setLinearVelocity(physx.PxVec3* linVel, bool autowake=true){((physx.PxRigidBodyPtr)this).setLinearVelocity(linVel, autowake);}
        public physx.PxVec3 getAngularVelocity(){return((physx.PxRigidBodyPtr)this).getAngularVelocity();}
        public void setAngularVelocity(physx.PxVec3* angVel, bool autowake=true){((physx.PxRigidBodyPtr)this).setAngularVelocity(angVel, autowake);}
        public void setMaxAngularVelocity(float maxAngVel){((physx.PxRigidBodyPtr)this).setMaxAngularVelocity(maxAngVel);}
        public float getMaxAngularVelocity(){return((physx.PxRigidBodyPtr)this).getMaxAngularVelocity();}
        public void setMaxLinearVelocity(float maxLinVel){((physx.PxRigidBodyPtr)this).setMaxLinearVelocity(maxLinVel);}
        public float getMaxLinearVelocity(){return((physx.PxRigidBodyPtr)this).getMaxLinearVelocity();}
        public void addForce(physx.PxVec3* force, physx.PxForceModeEnum mode, bool autowake=true){((physx.PxRigidBodyPtr)this).addForce(force, mode, autowake);}
        public void addTorque(physx.PxVec3* torque, physx.PxForceModeEnum mode, bool autowake=true){((physx.PxRigidBodyPtr)this).addTorque(torque, mode, autowake);}
        public void clearForce(physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).clearForce(mode);}
        public void clearTorque(physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).clearTorque(mode);}
        public void setForceAndTorque(physx.PxVec3* force, physx.PxVec3* torque, physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).setForceAndTorque(force, torque, mode);}
        public void setRigidBodyFlag(physx.PxRigidBodyFlagEnum flag, bool value){((physx.PxRigidBodyPtr)this).setRigidBodyFlag(flag, value);}
        public void setRigidBodyFlags(PxRigidBodyFlagsPtr inFlags){((physx.PxRigidBodyPtr)this).setRigidBodyFlags(inFlags);}
        public PxRigidBodyFlagsPtr getRigidBodyFlags_New(){return((physx.PxRigidBodyPtr)this).getRigidBodyFlags_New();}
        public void setMinCCDAdvanceCoefficient(float advanceCoefficient){((physx.PxRigidBodyPtr)this).setMinCCDAdvanceCoefficient(advanceCoefficient);}
        public float getMinCCDAdvanceCoefficient(){return((physx.PxRigidBodyPtr)this).getMinCCDAdvanceCoefficient();}
        public void setMaxDepenetrationVelocity(float biasClamp){((physx.PxRigidBodyPtr)this).setMaxDepenetrationVelocity(biasClamp);}
        public float getMaxDepenetrationVelocity(){return((physx.PxRigidBodyPtr)this).getMaxDepenetrationVelocity();}
        public void setMaxContactImpulse(float maxImpulse){((physx.PxRigidBodyPtr)this).setMaxContactImpulse(maxImpulse);}
        public float getMaxContactImpulse(){return((physx.PxRigidBodyPtr)this).getMaxContactImpulse();}
        public uint getInternalIslandNodeIndex(){return((physx.PxRigidBodyPtr)this).getInternalIslandNodeIndex();}
        public physx.PxTransform getGlobalPose(){return((physx.PxRigidActorPtr)this).getGlobalPose();}
        public void setGlobalPose(physx.PxTransform* pose, bool autowake=true){((physx.PxRigidActorPtr)this).setGlobalPose(pose, autowake);}
        public bool attachShape(physx.PxShapePtr shape){return((physx.PxRigidActorPtr)this).attachShape(shape);}
        public void detachShape(physx.PxShapePtr shape, bool wakeOnLostTouch=true){((physx.PxRigidActorPtr)this).detachShape(shape, wakeOnLostTouch);}
        public uint getNbShapes(){return((physx.PxRigidActorPtr)this).getNbShapes();}
        public uint getShapes(physx.PxShapePtr* userBuffer, uint bufferSize, uint startIndex=0){return((physx.PxRigidActorPtr)this).getShapes(userBuffer, bufferSize, startIndex);}
        public uint getNbConstraints(){return((physx.PxRigidActorPtr)this).getNbConstraints();}
        public uint getConstraints(physx.PxConstraintPtr* userBuffer, uint bufferSize, uint startIndex=0){return((physx.PxRigidActorPtr)this).getConstraints(userBuffer, bufferSize, startIndex);}
        public physx.PxActorTypeEnum getType(){return((physx.PxActorPtr)this).getType();}
        public physx.PxScenePtr getScene(){return((physx.PxActorPtr)this).getScene();}
        public void setName(string name){((physx.PxActorPtr)this).setName(name);}
        public string getName(){return((physx.PxActorPtr)this).getName();}
        public physx.PxBounds3 getWorldBounds(float inflation=1.01f){return((physx.PxActorPtr)this).getWorldBounds(inflation);}
        public void setActorFlag(physx.PxActorFlagEnum flag, bool value){((physx.PxActorPtr)this).setActorFlag(flag, value);}
        public void setActorFlags(PxActorFlagsPtr inFlags){((physx.PxActorPtr)this).setActorFlags(inFlags);}
        public PxActorFlagsPtr getActorFlags_New(){return((physx.PxActorPtr)this).getActorFlags_New();}
        public void setDominanceGroup(byte dominanceGroup){((physx.PxActorPtr)this).setDominanceGroup(dominanceGroup);}
        public byte getDominanceGroup(){return((physx.PxActorPtr)this).getDominanceGroup();}
        public void setOwnerClient(byte inClient){((physx.PxActorPtr)this).setOwnerClient(inClient);}
        public byte getOwnerClient(){return((physx.PxActorPtr)this).getOwnerClient();}
        public physx.PxAggregatePtr getAggregate(){return((physx.PxActorPtr)this).getAggregate();}
        ////################################################################## FIXME
        //Unparsed type ( TODO ): T*
        ////################################################################## FIXME
        //Unparsed type ( TODO ): T*
        public ushort getConcreteType(){return((physx.PxBasePtr)this).getConcreteType();}
        public void setBaseFlag(physx.PxBaseFlagEnum flag, bool value){((physx.PxBasePtr)this).setBaseFlag(flag, value);}
        public void setBaseFlags(PxBaseFlagsPtr inFlags){((physx.PxBasePtr)this).setBaseFlags(inFlags);}
        public PxBaseFlagsPtr getBaseFlags_New(){return((physx.PxBasePtr)this).getBaseFlags_New();}
        public bool isReleasable(){return((physx.PxBasePtr)this).isReleasable();}
    }
    
}
