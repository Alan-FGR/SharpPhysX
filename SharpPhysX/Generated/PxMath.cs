//Generated by MinBinder.
using System.Runtime.InteropServices;
public partial class PxMath {
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxMax(float a, float b);

}
public partial class PxMath {
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxMin(float a, float b);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxAbs(float a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern bool __PxEquals(float a, float b, float eps);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern double __PxAbs(double a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern int32_t __PxAbs(int32_t a);

}
public partial class PxMath {
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxSqrt(float a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern double __PxSqrt(double a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxRecipSqrt(float a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern double __PxRecipSqrt(double a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxSin(float a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern double __PxSin(double a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxCos(float a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern double __PxCos(double a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxTan(float a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern double __PxTan(double a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxAsin(float f);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern double __PxAsin(double f);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxAcos(float f);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern double __PxAcos(double f);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxAtan(float a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern double __PxAtan(double a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxAtan2(float x, float y);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern double __PxAtan2(double x, double y);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern bool __PxIsFinite(float f);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern bool __PxIsFinite(double f);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxFloor(float a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxExp(float a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxCeil(float a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxSign(float a);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxPow(float x, float y);

}
public partial class PxMath {
[DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
static extern float __PxLog(float x);

}
