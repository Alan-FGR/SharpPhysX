// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
//Unit PxCpuDispatcher
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    public unsafe partial struct PxCpuDispatcherPtr {
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxCpuDispatcher_submitTask_physx_PxBaseTaskPtr_(physx.PxCpuDispatcherPtr pvk_this, physx.PxBaseTaskPtr pvk_task);
        
        public void submitTask(physx.PxBaseTaskPtr task) {
            physx.PxCpuDispatcherPtr pvk_in_this = this;
            physx.PxBaseTaskPtr pvk_in_task = task;
            void_physx_PxCpuDispatcher_submitTask_physx_PxBaseTaskPtr_(pvk_in_this, pvk_in_task);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxCpuDispatcher_getWorkerCount(physx.PxCpuDispatcherPtr pvk_this);
        
        public uint getWorkerCount() {
            physx.PxCpuDispatcherPtr pvk_in_this = this;
            return uint_const_physx_PxCpuDispatcher_getWorkerCount(pvk_in_this);
        }
    
    
    
        public unsafe interface IPxCpuDispatcherPtr {
            void submitTask(physx.PxBaseTaskPtr task);
            uint getWorkerCount();
        }
    }
    
}
