// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
//Unit PxRigidBody
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    // physx::operator| [static PxRigidBodyFlagsPtr Pipe_New(physx.PxRigidBodyFlagEnum a, physx.PxRigidBodyFlagEnum b)] will be bound as member operator
    
    // physx::operator& [static PxRigidBodyFlagsPtr Amp_New(physx.PxRigidBodyFlagEnum a, physx.PxRigidBodyFlagEnum b)] will be bound as member operator
    
    // physx::operator~ [static PxRigidBodyFlagsPtr Tilde_New(physx.PxRigidBodyFlagEnum a)] will be bound as member operator
    
    public enum PxRigidBodyFlagEnum : int {
        eKINEMATIC = 1,                              // eKINEMATIC = (1<<0)
        eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES = 2, // eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES = (1<<1)
        eENABLE_CCD = 4,                             // eENABLE_CCD = (1<<2)
        eENABLE_CCD_FRICTION = 8,                    // eENABLE_CCD_FRICTION = (1<<3)
        eENABLE_POSE_INTEGRATION_PREVIEW = 16,       // eENABLE_POSE_INTEGRATION_PREVIEW = (1 << 4)
        eENABLE_SPECULATIVE_CCD = 32,                // eENABLE_SPECULATIVE_CCD = (1 << 5)
        eENABLE_CCD_MAX_CONTACT_IMPULSE = 64,        // eENABLE_CCD_MAX_CONTACT_IMPULSE = (1 << 6)
        eRETAIN_ACCELERATIONS = 128,                 // eRETAIN_ACCELERATIONS = (1<<7)
    }
    
    public unsafe partial struct PxRigidBodyPtr : physx.PxRigidActorPtr.IPxRigidActorPtr, physx.PxActorPtr.IPxActorPtr, physx.PxBasePtr.IPxBasePtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setCMassLocalPose_physx_PxTransformPtr_(physx.PxRigidBodyPtr pvk_this, physx.PxTransformPtr pvk_pose);
        
        public void setCMassLocalPose(physx.PxTransformPtr pose) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxTransformPtr pvk_in_pose = pose;
            void_physx_PxRigidBody_setCMassLocalPose_physx_PxTransformPtr_(pvk_in_this, pvk_in_pose);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxTransformPtr physx_PxTransformPtr_const_physx_PxRigidBody_getCMassLocalPose(physx.PxRigidBodyPtr pvk_this);
        
        public physx.PxTransformPtr getCMassLocalPose_New() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return physx_PxTransformPtr_const_physx_PxRigidBody_getCMassLocalPose(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setMass_float_(physx.PxRigidBodyPtr pvk_this, float pvk_mass);
        
        public void setMass(float mass) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_mass = mass;
            void_physx_PxRigidBody_setMass_float_(pvk_in_this, pvk_in_mass);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxRigidBody_getMass(physx.PxRigidBodyPtr pvk_this);
        
        public float getMass() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_physx_PxRigidBody_getMass(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxRigidBody_getInvMass(physx.PxRigidBodyPtr pvk_this);
        
        public float getInvMass() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_physx_PxRigidBody_getInvMass(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setMassSpaceInertiaTensor_physx_PxVec3Ptr_(physx.PxRigidBodyPtr pvk_this, physx.PxVec3Ptr pvk_m);
        
        public void setMassSpaceInertiaTensor(physx.PxVec3Ptr m) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_m = m;
            void_physx_PxRigidBody_setMassSpaceInertiaTensor_physx_PxVec3Ptr_(pvk_in_this, pvk_in_m);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3Ptr physx_PxVec3Ptr_const_physx_PxRigidBody_getMassSpaceInertiaTensor(physx.PxRigidBodyPtr pvk_this);
        
        public physx.PxVec3Ptr getMassSpaceInertiaTensor_New() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return physx_PxVec3Ptr_const_physx_PxRigidBody_getMassSpaceInertiaTensor(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3Ptr physx_PxVec3Ptr_const_physx_PxRigidBody_getMassSpaceInvInertiaTensor(physx.PxRigidBodyPtr pvk_this);
        
        public physx.PxVec3Ptr getMassSpaceInvInertiaTensor_New() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return physx_PxVec3Ptr_const_physx_PxRigidBody_getMassSpaceInvInertiaTensor(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setLinearDamping_float_(physx.PxRigidBodyPtr pvk_this, float pvk_linDamp);
        
        public void setLinearDamping(float linDamp) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_linDamp = linDamp;
            void_physx_PxRigidBody_setLinearDamping_float_(pvk_in_this, pvk_in_linDamp);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxRigidBody_getLinearDamping(physx.PxRigidBodyPtr pvk_this);
        
        public float getLinearDamping() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_physx_PxRigidBody_getLinearDamping(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setAngularDamping_float_(physx.PxRigidBodyPtr pvk_this, float pvk_angDamp);
        
        public void setAngularDamping(float angDamp) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_angDamp = angDamp;
            void_physx_PxRigidBody_setAngularDamping_float_(pvk_in_this, pvk_in_angDamp);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxRigidBody_getAngularDamping(physx.PxRigidBodyPtr pvk_this);
        
        public float getAngularDamping() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_physx_PxRigidBody_getAngularDamping(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3Ptr physx_PxVec3Ptr_const_physx_PxRigidBody_getLinearVelocity(physx.PxRigidBodyPtr pvk_this);
        
        public physx.PxVec3Ptr getLinearVelocity_New() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return physx_PxVec3Ptr_const_physx_PxRigidBody_getLinearVelocity(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setLinearVelocity_physx_PxVec3Ptr_bool_(physx.PxRigidBodyPtr pvk_this, physx.PxVec3Ptr pvk_linVel, bool pvk_autowake);
        
        public void setLinearVelocity(physx.PxVec3Ptr linVel, bool autowake=true) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_linVel = linVel;
            bool pvk_in_autowake = autowake;
            void_physx_PxRigidBody_setLinearVelocity_physx_PxVec3Ptr_bool_(pvk_in_this, pvk_in_linVel, pvk_in_autowake);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setLinearVelocity_physx_PxVec3Ptr_(physx.PxRigidBodyPtr pvk_this, physx.PxVec3Ptr pvk_linVel);
        
        public void setLinearVelocity(physx.PxVec3Ptr linVel) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_linVel = linVel;
            void_physx_PxRigidBody_setLinearVelocity_physx_PxVec3Ptr_(pvk_in_this, pvk_in_linVel);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3Ptr physx_PxVec3Ptr_const_physx_PxRigidBody_getAngularVelocity(physx.PxRigidBodyPtr pvk_this);
        
        public physx.PxVec3Ptr getAngularVelocity_New() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return physx_PxVec3Ptr_const_physx_PxRigidBody_getAngularVelocity(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setAngularVelocity_physx_PxVec3Ptr_bool_(physx.PxRigidBodyPtr pvk_this, physx.PxVec3Ptr pvk_angVel, bool pvk_autowake);
        
        public void setAngularVelocity(physx.PxVec3Ptr angVel, bool autowake=true) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_angVel = angVel;
            bool pvk_in_autowake = autowake;
            void_physx_PxRigidBody_setAngularVelocity_physx_PxVec3Ptr_bool_(pvk_in_this, pvk_in_angVel, pvk_in_autowake);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setAngularVelocity_physx_PxVec3Ptr_(physx.PxRigidBodyPtr pvk_this, physx.PxVec3Ptr pvk_angVel);
        
        public void setAngularVelocity(physx.PxVec3Ptr angVel) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_angVel = angVel;
            void_physx_PxRigidBody_setAngularVelocity_physx_PxVec3Ptr_(pvk_in_this, pvk_in_angVel);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setMaxAngularVelocity_float_(physx.PxRigidBodyPtr pvk_this, float pvk_maxAngVel);
        
        public void setMaxAngularVelocity(float maxAngVel) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_maxAngVel = maxAngVel;
            void_physx_PxRigidBody_setMaxAngularVelocity_float_(pvk_in_this, pvk_in_maxAngVel);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxRigidBody_getMaxAngularVelocity(physx.PxRigidBodyPtr pvk_this);
        
        public float getMaxAngularVelocity() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_physx_PxRigidBody_getMaxAngularVelocity(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setMaxLinearVelocity_float_(physx.PxRigidBodyPtr pvk_this, float pvk_maxLinVel);
        
        public void setMaxLinearVelocity(float maxLinVel) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_maxLinVel = maxLinVel;
            void_physx_PxRigidBody_setMaxLinearVelocity_float_(pvk_in_this, pvk_in_maxLinVel);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxRigidBody_getMaxLinearVelocity(physx.PxRigidBodyPtr pvk_this);
        
        public float getMaxLinearVelocity() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_physx_PxRigidBody_getMaxLinearVelocity(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_addForce_physx_PxVec3Ptr_physx_PxForceModeEnum_bool_(physx.PxRigidBodyPtr pvk_this, physx.PxVec3Ptr pvk_force, physx.PxForceModeEnum pvk_mode, bool pvk_autowake);
        
        public void addForce(physx.PxVec3Ptr force, physx.PxForceModeEnum mode, bool autowake=true) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_force = force;
            physx.PxForceModeEnum pvk_in_mode = mode;
            bool pvk_in_autowake = autowake;
            void_physx_PxRigidBody_addForce_physx_PxVec3Ptr_physx_PxForceModeEnum_bool_(pvk_in_this, pvk_in_force, pvk_in_mode, pvk_in_autowake);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_addForce_physx_PxVec3Ptr_physx_PxForceModeEnum_(physx.PxRigidBodyPtr pvk_this, physx.PxVec3Ptr pvk_force, physx.PxForceModeEnum pvk_mode);
        
        public void addForce(physx.PxVec3Ptr force, physx.PxForceModeEnum mode) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_force = force;
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_physx_PxRigidBody_addForce_physx_PxVec3Ptr_physx_PxForceModeEnum_(pvk_in_this, pvk_in_force, pvk_in_mode);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_addForce_physx_PxVec3Ptr_(physx.PxRigidBodyPtr pvk_this, physx.PxVec3Ptr pvk_force);
        
        public void addForce(physx.PxVec3Ptr force) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_force = force;
            void_physx_PxRigidBody_addForce_physx_PxVec3Ptr_(pvk_in_this, pvk_in_force);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_addTorque_physx_PxVec3Ptr_physx_PxForceModeEnum_bool_(physx.PxRigidBodyPtr pvk_this, physx.PxVec3Ptr pvk_torque, physx.PxForceModeEnum pvk_mode, bool pvk_autowake);
        
        public void addTorque(physx.PxVec3Ptr torque, physx.PxForceModeEnum mode, bool autowake=true) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_torque = torque;
            physx.PxForceModeEnum pvk_in_mode = mode;
            bool pvk_in_autowake = autowake;
            void_physx_PxRigidBody_addTorque_physx_PxVec3Ptr_physx_PxForceModeEnum_bool_(pvk_in_this, pvk_in_torque, pvk_in_mode, pvk_in_autowake);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_addTorque_physx_PxVec3Ptr_physx_PxForceModeEnum_(physx.PxRigidBodyPtr pvk_this, physx.PxVec3Ptr pvk_torque, physx.PxForceModeEnum pvk_mode);
        
        public void addTorque(physx.PxVec3Ptr torque, physx.PxForceModeEnum mode) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_torque = torque;
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_physx_PxRigidBody_addTorque_physx_PxVec3Ptr_physx_PxForceModeEnum_(pvk_in_this, pvk_in_torque, pvk_in_mode);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_addTorque_physx_PxVec3Ptr_(physx.PxRigidBodyPtr pvk_this, physx.PxVec3Ptr pvk_torque);
        
        public void addTorque(physx.PxVec3Ptr torque) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_torque = torque;
            void_physx_PxRigidBody_addTorque_physx_PxVec3Ptr_(pvk_in_this, pvk_in_torque);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_clearForce_physx_PxForceModeEnum_(physx.PxRigidBodyPtr pvk_this, physx.PxForceModeEnum pvk_mode);
        
        public void clearForce(physx.PxForceModeEnum mode) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_physx_PxRigidBody_clearForce_physx_PxForceModeEnum_(pvk_in_this, pvk_in_mode);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_clearForce(physx.PxRigidBodyPtr pvk_this);
        
        public void clearForce() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            void_physx_PxRigidBody_clearForce(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_clearTorque_physx_PxForceModeEnum_(physx.PxRigidBodyPtr pvk_this, physx.PxForceModeEnum pvk_mode);
        
        public void clearTorque(physx.PxForceModeEnum mode) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_physx_PxRigidBody_clearTorque_physx_PxForceModeEnum_(pvk_in_this, pvk_in_mode);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_clearTorque(physx.PxRigidBodyPtr pvk_this);
        
        public void clearTorque() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            void_physx_PxRigidBody_clearTorque(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setForceAndTorque_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxForceModeEnum_(physx.PxRigidBodyPtr pvk_this, physx.PxVec3Ptr pvk_force, physx.PxVec3Ptr pvk_torque, physx.PxForceModeEnum pvk_mode);
        
        public void setForceAndTorque(physx.PxVec3Ptr force, physx.PxVec3Ptr torque, physx.PxForceModeEnum mode) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_force = force;
            physx.PxVec3Ptr pvk_in_torque = torque;
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_physx_PxRigidBody_setForceAndTorque_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxForceModeEnum_(pvk_in_this, pvk_in_force, pvk_in_torque, pvk_in_mode);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setForceAndTorque_physx_PxVec3Ptr_physx_PxVec3Ptr_(physx.PxRigidBodyPtr pvk_this, physx.PxVec3Ptr pvk_force, physx.PxVec3Ptr pvk_torque);
        
        public void setForceAndTorque(physx.PxVec3Ptr force, physx.PxVec3Ptr torque) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_force = force;
            physx.PxVec3Ptr pvk_in_torque = torque;
            void_physx_PxRigidBody_setForceAndTorque_physx_PxVec3Ptr_physx_PxVec3Ptr_(pvk_in_this, pvk_in_force, pvk_in_torque);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setRigidBodyFlag_physx_PxRigidBodyFlagEnum_bool_(physx.PxRigidBodyPtr pvk_this, physx.PxRigidBodyFlagEnum pvk_flag, bool pvk_value);
        
        public void setRigidBodyFlag(physx.PxRigidBodyFlagEnum flag, bool value) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxRigidBodyFlagEnum pvk_in_flag = flag;
            bool pvk_in_value = value;
            void_physx_PxRigidBody_setRigidBodyFlag_physx_PxRigidBodyFlagEnum_bool_(pvk_in_this, pvk_in_flag, pvk_in_value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setRigidBodyFlags_PxRigidBodyFlagsPtr_(physx.PxRigidBodyPtr pvk_this, PxRigidBodyFlagsPtr pvk_inFlags);
        
        public void setRigidBodyFlags(PxRigidBodyFlagsPtr inFlags) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            PxRigidBodyFlagsPtr pvk_in_inFlags = inFlags;
            void_physx_PxRigidBody_setRigidBodyFlags_PxRigidBodyFlagsPtr_(pvk_in_this, pvk_in_inFlags);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxRigidBodyFlagsPtr PxRigidBodyFlagsPtr_const_physx_PxRigidBody_getRigidBodyFlags(physx.PxRigidBodyPtr pvk_this);
        
        public PxRigidBodyFlagsPtr getRigidBodyFlags_New() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return PxRigidBodyFlagsPtr_const_physx_PxRigidBody_getRigidBodyFlags(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setMinCCDAdvanceCoefficient_float_(physx.PxRigidBodyPtr pvk_this, float pvk_advanceCoefficient);
        
        public void setMinCCDAdvanceCoefficient(float advanceCoefficient) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_advanceCoefficient = advanceCoefficient;
            void_physx_PxRigidBody_setMinCCDAdvanceCoefficient_float_(pvk_in_this, pvk_in_advanceCoefficient);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxRigidBody_getMinCCDAdvanceCoefficient(physx.PxRigidBodyPtr pvk_this);
        
        public float getMinCCDAdvanceCoefficient() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_physx_PxRigidBody_getMinCCDAdvanceCoefficient(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setMaxDepenetrationVelocity_float_(physx.PxRigidBodyPtr pvk_this, float pvk_biasClamp);
        
        public void setMaxDepenetrationVelocity(float biasClamp) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_biasClamp = biasClamp;
            void_physx_PxRigidBody_setMaxDepenetrationVelocity_float_(pvk_in_this, pvk_in_biasClamp);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxRigidBody_getMaxDepenetrationVelocity(physx.PxRigidBodyPtr pvk_this);
        
        public float getMaxDepenetrationVelocity() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_physx_PxRigidBody_getMaxDepenetrationVelocity(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBody_setMaxContactImpulse_float_(physx.PxRigidBodyPtr pvk_this, float pvk_maxImpulse);
        
        public void setMaxContactImpulse(float maxImpulse) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_maxImpulse = maxImpulse;
            void_physx_PxRigidBody_setMaxContactImpulse_float_(pvk_in_this, pvk_in_maxImpulse);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxRigidBody_getMaxContactImpulse(physx.PxRigidBodyPtr pvk_this);
        
        public float getMaxContactImpulse() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_physx_PxRigidBody_getMaxContactImpulse(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxRigidBody_getInternalIslandNodeIndex(physx.PxRigidBodyPtr pvk_this);
        
        public uint getInternalIslandNodeIndex() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return uint_const_physx_PxRigidBody_getInternalIslandNodeIndex(pvk_in_this);
        }
        public static implicit operator physx.PxRigidActorPtr(PxRigidBodyPtr obj) => *(physx.PxRigidActorPtr*)&obj;
        public static explicit operator PxRigidBodyPtr(physx.PxRigidActorPtr obj) => *(PxRigidBodyPtr*)&obj;
        public static implicit operator physx.PxActorPtr(PxRigidBodyPtr obj) => *(physx.PxActorPtr*)&obj;
        public static explicit operator PxRigidBodyPtr(physx.PxActorPtr obj) => *(PxRigidBodyPtr*)&obj;
        public static implicit operator physx.PxBasePtr(PxRigidBodyPtr obj) => *(physx.PxBasePtr*)&obj;
        public static explicit operator PxRigidBodyPtr(physx.PxBasePtr obj) => *(PxRigidBodyPtr*)&obj;
    
        // PIPING
        public void release(){((physx.PxRigidActorPtr)this).release();}
        public physx.PxTransformPtr getGlobalPose_New(){return((physx.PxRigidActorPtr)this).getGlobalPose_New();}
        public void setGlobalPose(physx.PxTransformPtr pose, bool autowake=true){((physx.PxRigidActorPtr)this).setGlobalPose(pose, autowake);}
        public bool attachShape(physx.PxShapePtr shape){return((physx.PxRigidActorPtr)this).attachShape(shape);}
        public void detachShape(physx.PxShapePtr shape, bool wakeOnLostTouch=true){((physx.PxRigidActorPtr)this).detachShape(shape, wakeOnLostTouch);}
        public uint getNbShapes(){return((physx.PxRigidActorPtr)this).getNbShapes();}
        public uint getShapes(physx.PxShapePtr* userBuffer, uint bufferSize, uint startIndex=0){return((physx.PxRigidActorPtr)this).getShapes(userBuffer, bufferSize, startIndex);}
        public uint getNbConstraints(){return((physx.PxRigidActorPtr)this).getNbConstraints();}
        public uint getConstraints(physx.PxConstraintPtr* userBuffer, uint bufferSize, uint startIndex=0){return((physx.PxRigidActorPtr)this).getConstraints(userBuffer, bufferSize, startIndex);}
        public physx.PxActorTypeEnum getType(){return((physx.PxActorPtr)this).getType();}
        public physx.PxScenePtr getScene(){return((physx.PxActorPtr)this).getScene();}
        public void setName(string name){((physx.PxActorPtr)this).setName(name);}
        public string getName(){return((physx.PxActorPtr)this).getName();}
        public physx.PxBounds3Ptr getWorldBounds_New(float inflation=1.01f){return((physx.PxActorPtr)this).getWorldBounds_New(inflation);}
        public void setActorFlag(physx.PxActorFlagEnum flag, bool value){((physx.PxActorPtr)this).setActorFlag(flag, value);}
        public void setActorFlags(PxActorFlagsPtr inFlags){((physx.PxActorPtr)this).setActorFlags(inFlags);}
        public PxActorFlagsPtr getActorFlags_New(){return((physx.PxActorPtr)this).getActorFlags_New();}
        public void setDominanceGroup(byte dominanceGroup){((physx.PxActorPtr)this).setDominanceGroup(dominanceGroup);}
        public byte getDominanceGroup(){return((physx.PxActorPtr)this).getDominanceGroup();}
        public void setOwnerClient(byte inClient){((physx.PxActorPtr)this).setOwnerClient(inClient);}
        public byte getOwnerClient(){return((physx.PxActorPtr)this).getOwnerClient();}
        public physx.PxAggregatePtr getAggregate(){return((physx.PxActorPtr)this).getAggregate();}
        public string getConcreteTypeName(){return((physx.PxBasePtr)this).getConcreteTypeName();}
        public ushort getConcreteType(){return((physx.PxBasePtr)this).getConcreteType();}
        public void setBaseFlag(physx.PxBaseFlagEnum flag, bool value){((physx.PxBasePtr)this).setBaseFlag(flag, value);}
        public void setBaseFlags(PxBaseFlagsPtr inFlags){((physx.PxBasePtr)this).setBaseFlags(inFlags);}
        public PxBaseFlagsPtr getBaseFlags_New(){return((physx.PxBasePtr)this).getBaseFlags_New();}
        public bool isReleasable(){return((physx.PxBasePtr)this).isReleasable();}
    
        public unsafe interface IPxRigidBodyPtr {
            void setCMassLocalPose(physx.PxTransformPtr pose);
            physx.PxTransformPtr getCMassLocalPose_New();
            void setMass(float mass);
            float getMass();
            float getInvMass();
            void setMassSpaceInertiaTensor(physx.PxVec3Ptr m);
            physx.PxVec3Ptr getMassSpaceInertiaTensor_New();
            physx.PxVec3Ptr getMassSpaceInvInertiaTensor_New();
            void setLinearDamping(float linDamp);
            float getLinearDamping();
            void setAngularDamping(float angDamp);
            float getAngularDamping();
            physx.PxVec3Ptr getLinearVelocity_New();
            void setLinearVelocity(physx.PxVec3Ptr linVel, bool autowake=true);
            physx.PxVec3Ptr getAngularVelocity_New();
            void setAngularVelocity(physx.PxVec3Ptr angVel, bool autowake=true);
            void setMaxAngularVelocity(float maxAngVel);
            float getMaxAngularVelocity();
            void setMaxLinearVelocity(float maxLinVel);
            float getMaxLinearVelocity();
            void addForce(physx.PxVec3Ptr force, physx.PxForceModeEnum mode, bool autowake=true);
            void addTorque(physx.PxVec3Ptr torque, physx.PxForceModeEnum mode, bool autowake=true);
            void clearForce(physx.PxForceModeEnum mode);
            void clearTorque(physx.PxForceModeEnum mode);
            void setForceAndTorque(physx.PxVec3Ptr force, physx.PxVec3Ptr torque, physx.PxForceModeEnum mode);
            void setRigidBodyFlag(physx.PxRigidBodyFlagEnum flag, bool value);
            void setRigidBodyFlags(PxRigidBodyFlagsPtr inFlags);
            PxRigidBodyFlagsPtr getRigidBodyFlags_New();
            void setMinCCDAdvanceCoefficient(float advanceCoefficient);
            float getMinCCDAdvanceCoefficient();
            void setMaxDepenetrationVelocity(float biasClamp);
            float getMaxDepenetrationVelocity();
            void setMaxContactImpulse(float maxImpulse);
            float getMaxContactImpulse();
            uint getInternalIslandNodeIndex();
        }
    }
    
}
