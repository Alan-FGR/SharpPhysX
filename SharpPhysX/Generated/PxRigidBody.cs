// Generated by minBND 5.1.90.51 - Â© github.com/Alan-FGR
using System;
using System.Runtime.InteropServices;
using static minBND_pinvokes;

public static unsafe partial class physx {

    //DBG: FunctionNode physx::operator| L149
    //physx::operator| static physx.PxRigidBodyFlagsPtr OpPipe_New(physx.PxRigidBodyFlagEnum a, physx.PxRigidBodyFlagEnum b) will also be bound as member operator
    //RET nat: PxRigidBodyFlagsPtr, man: physx.PxRigidBodyFlagsPtr, ret: True, kind: PtrStruct
    //PAR nat: physx::PxRigidBodyFlag::Enum, man: physx.PxRigidBodyFlagEnum, kind: Value
    //PAR nat: physx::PxRigidBodyFlag::Enum, man: physx.PxRigidBodyFlagEnum, kind: Value
    public static physx.PxRigidBodyFlagsPtr OpPipe_New(physx.PxRigidBodyFlagEnum a, physx.PxRigidBodyFlagEnum b) {
        physx.PxRigidBodyFlagEnum pvk_in_a = a;
        physx.PxRigidBodyFlagEnum pvk_in_b = b;
        return PxRigidBodyFlagsPtr_operator_Ptr_Pipe_PxRigidBodyFlagEnum_PxRigidBodyFlagEnum_(pvk_in_a, pvk_in_b);
    }

    //DBG: FunctionNode physx::operator& L149
    //physx::operator& static physx.PxRigidBodyFlagsPtr OpAnd_New(physx.PxRigidBodyFlagEnum a, physx.PxRigidBodyFlagEnum b) will also be bound as member operator
    //RET nat: PxRigidBodyFlagsPtr, man: physx.PxRigidBodyFlagsPtr, ret: True, kind: PtrStruct
    //PAR nat: physx::PxRigidBodyFlag::Enum, man: physx.PxRigidBodyFlagEnum, kind: Value
    //PAR nat: physx::PxRigidBodyFlag::Enum, man: physx.PxRigidBodyFlagEnum, kind: Value
    public static physx.PxRigidBodyFlagsPtr OpAnd_New(physx.PxRigidBodyFlagEnum a, physx.PxRigidBodyFlagEnum b) {
        physx.PxRigidBodyFlagEnum pvk_in_a = a;
        physx.PxRigidBodyFlagEnum pvk_in_b = b;
        return PxRigidBodyFlagsPtr_operator_Ptr_Amp_PxRigidBodyFlagEnum_PxRigidBodyFlagEnum_(pvk_in_a, pvk_in_b);
    }

    //DBG: FunctionNode physx::operator~ L149
    //physx::operator~ static physx.PxRigidBodyFlagsPtr OpTilde_New(physx.PxRigidBodyFlagEnum a) will also be bound as member operator
    //RET nat: PxRigidBodyFlagsPtr, man: physx.PxRigidBodyFlagsPtr, ret: True, kind: PtrStruct
    //PAR nat: physx::PxRigidBodyFlag::Enum, man: physx.PxRigidBodyFlagEnum, kind: Value
    public static physx.PxRigidBodyFlagsPtr OpTilde_New(physx.PxRigidBodyFlagEnum a) {
        physx.PxRigidBodyFlagEnum pvk_in_a = a;
        return PxRigidBodyFlagsPtr_operator_Ptr_Tilde_PxRigidBodyFlagEnum_(pvk_in_a);
    }

    //DBG: ClassNode PxRigidBodyFlag physx::PxRigidBodyFlag L52-141
    public enum PxRigidBodyFlagEnum : int {
        eKINEMATIC = 1,                              // eKINEMATIC = (1<<0)
        eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES = 2, // eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES = (1<<1)
        eENABLE_CCD = 4,                             // eENABLE_CCD = (1<<2)
        eENABLE_CCD_FRICTION = 8,                    // eENABLE_CCD_FRICTION = (1<<3)
        eENABLE_POSE_INTEGRATION_PREVIEW = 16,       // eENABLE_POSE_INTEGRATION_PREVIEW = (1 << 4)
        eENABLE_SPECULATIVE_CCD = 32,                // eENABLE_SPECULATIVE_CCD = (1 << 5)
        eENABLE_CCD_MAX_CONTACT_IMPULSE = 64,        // eENABLE_CCD_MAX_CONTACT_IMPULSE = (1 << 6)
        eRETAIN_ACCELERATIONS = 128,                 // eRETAIN_ACCELERATIONS = (1<<7)
    }
    //Subclasses using this: 2

    public unsafe partial struct PxRigidBodyPtr : physx.PxRigidBodyPtr.IPxRigidBodyPtr, physx.PxRigidActorPtr.IPxRigidActorPtr, physx.PxActorPtr.IPxActorPtr, physx.PxBasePtr.IPxBasePtr {
        private System.IntPtr nativePtr_;

        //DBG: ClassNode PxRigidBody physx::PxRigidBody L157-693Bases: PxRigidActorPtr|PxActorPtr|PxBasePtr

        //DBG: MethodNode physx::PxRigidBody::setCMassLocalPose L180
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxTransform*, man: physx.PxTransform*, kind: Value
        public void setCMassLocalPose(physx.PxTransform* pose) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxTransform* pvk_in_pose = pose;
            void_PxRigidBodyPtr_setCMassLocalPosePtr_PxTransform_(pvk_in_this, pvk_in_pose);
        }

        //DBG: MethodNode physx::PxRigidBody::getCMassLocalPose L190
        //RET nat: physx::PxTransform, man: physx.PxTransform, ret: False, kind: Blittable
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public physx.PxTransform getCMassLocalPose() {
            physx.PxTransform RetRef;
            physx.PxRigidBodyPtr pvk_in_this = this;
            PxTransform_const_PxRigidBodyPtr_getCMassLocalPosePtr(&RetRef, pvk_in_this);
            return RetRef;
        }

        //DBG: MethodNode physx::PxRigidBody::setMass L212
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: PxReal, man: float, kind: Value
        public void setMass(float mass) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_mass = mass;
            void_PxRigidBodyPtr_setMassPtr_float_(pvk_in_this, pvk_in_mass);
        }

        //DBG: MethodNode physx::PxRigidBody::getMass L223
        //RET nat: PxReal, man: float, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public float getMass() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_PxRigidBodyPtr_getMassPtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxRigidBody::getInvMass L232
        //RET nat: PxReal, man: float, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public float getInvMass() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_PxRigidBodyPtr_getInvMassPtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxRigidBody::setMassSpaceInertiaTensor L255
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        public void setMassSpaceInertiaTensor(physx.PxVec3* m) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_m = m;
            void_PxRigidBodyPtr_setMassSpaceInertiaTensorPtr_PxVec3_(pvk_in_this, pvk_in_m);
        }

        //DBG: MethodNode physx::PxRigidBody::getMassSpaceInertiaTensor L268
        //RET nat: physx::PxVec3, man: physx.PxVec3, ret: False, kind: Blittable
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public physx.PxVec3 getMassSpaceInertiaTensor() {
            physx.PxVec3 RetRef;
            physx.PxRigidBodyPtr pvk_in_this = this;
            PxVec3_const_PxRigidBodyPtr_getMassSpaceInertiaTensorPtr(&RetRef, pvk_in_this);
            return RetRef;
        }

        //DBG: MethodNode physx::PxRigidBody::getMassSpaceInvInertiaTensor L281
        //RET nat: physx::PxVec3, man: physx.PxVec3, ret: False, kind: Blittable
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public physx.PxVec3 getMassSpaceInvInertiaTensor() {
            physx.PxVec3 RetRef;
            physx.PxRigidBodyPtr pvk_in_this = this;
            PxVec3_const_PxRigidBodyPtr_getMassSpaceInvInertiaTensorPtr(&RetRef, pvk_in_this);
            return RetRef;
        }

        //DBG: MethodNode physx::PxRigidBody::setLinearDamping L298
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: PxReal, man: float, kind: Value
        public void setLinearDamping(float linDamp) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_linDamp = linDamp;
            void_PxRigidBodyPtr_setLinearDampingPtr_float_(pvk_in_this, pvk_in_linDamp);
        }

        //DBG: MethodNode physx::PxRigidBody::getLinearDamping L307
        //RET nat: PxReal, man: float, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public float getLinearDamping() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_PxRigidBodyPtr_getLinearDampingPtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxRigidBody::setAngularDamping L322
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: PxReal, man: float, kind: Value
        public void setAngularDamping(float angDamp) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_angDamp = angDamp;
            void_PxRigidBodyPtr_setAngularDampingPtr_float_(pvk_in_this, pvk_in_angDamp);
        }

        //DBG: MethodNode physx::PxRigidBody::getAngularDamping L331
        //RET nat: PxReal, man: float, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public float getAngularDamping() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_PxRigidBodyPtr_getAngularDampingPtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxRigidBody::getLinearVelocity L346
        //RET nat: physx::PxVec3, man: physx.PxVec3, ret: False, kind: Blittable
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public physx.PxVec3 getLinearVelocity() {
            physx.PxVec3 RetRef;
            physx.PxRigidBodyPtr pvk_in_this = this;
            PxVec3_const_PxRigidBodyPtr_getLinearVelocityPtr(&RetRef, pvk_in_this);
            return RetRef;
        }

        //DBG: MethodNode physx::PxRigidBody::setLinearVelocity L367
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: bool, man: bool, kind: Value
        public void setLinearVelocity(physx.PxVec3* linVel, bool autowake=true) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_linVel = linVel;
            bool pvk_in_autowake = autowake;
            void_PxRigidBodyPtr_setLinearVelocityPtr_PxVec3_bool_(pvk_in_this, pvk_in_linVel, pvk_in_autowake);
        }

        //DBG: MethodNode physx::PxRigidBody::getAngularVelocity L378
        //RET nat: physx::PxVec3, man: physx.PxVec3, ret: False, kind: Blittable
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public physx.PxVec3 getAngularVelocity() {
            physx.PxVec3 RetRef;
            physx.PxRigidBodyPtr pvk_in_this = this;
            PxVec3_const_PxRigidBodyPtr_getAngularVelocityPtr(&RetRef, pvk_in_this);
            return RetRef;
        }

        //DBG: MethodNode physx::PxRigidBody::setAngularVelocity L400
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: bool, man: bool, kind: Value
        public void setAngularVelocity(physx.PxVec3* angVel, bool autowake=true) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_angVel = angVel;
            bool pvk_in_autowake = autowake;
            void_PxRigidBodyPtr_setAngularVelocityPtr_PxVec3_bool_(pvk_in_this, pvk_in_angVel, pvk_in_autowake);
        }

        //DBG: MethodNode physx::PxRigidBody::setMaxAngularVelocity L420
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: PxReal, man: float, kind: Value
        public void setMaxAngularVelocity(float maxAngVel) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_maxAngVel = maxAngVel;
            void_PxRigidBodyPtr_setMaxAngularVelocityPtr_float_(pvk_in_this, pvk_in_maxAngVel);
        }

        //DBG: MethodNode physx::PxRigidBody::getMaxAngularVelocity L429
        //RET nat: PxReal, man: float, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public float getMaxAngularVelocity() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_PxRigidBodyPtr_getMaxAngularVelocityPtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxRigidBody::setMaxLinearVelocity L447
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: PxReal, man: float, kind: Value
        public void setMaxLinearVelocity(float maxLinVel) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_maxLinVel = maxLinVel;
            void_PxRigidBodyPtr_setMaxLinearVelocityPtr_float_(pvk_in_this, pvk_in_maxLinVel);
        }

        //DBG: MethodNode physx::PxRigidBody::getMaxLinearVelocity L456
        //RET nat: PxReal, man: float, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public float getMaxLinearVelocity() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_PxRigidBodyPtr_getMaxLinearVelocityPtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxRigidBody::addForce L493
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        //PAR nat: bool, man: bool, kind: Value
        public void addForce(physx.PxVec3* force, physx.PxForceModeEnum mode, bool autowake=true) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_force = force;
            physx.PxForceModeEnum pvk_in_mode = mode;
            bool pvk_in_autowake = autowake;
            void_PxRigidBodyPtr_addForcePtr_PxVec3_PxForceModeEnum_bool_(pvk_in_this, pvk_in_force, pvk_in_mode, pvk_in_autowake);
        }

        //DBG: MethodNode physx::PxRigidBody::addTorque L523
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        //PAR nat: bool, man: bool, kind: Value
        public void addTorque(physx.PxVec3* torque, physx.PxForceModeEnum mode, bool autowake=true) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_torque = torque;
            physx.PxForceModeEnum pvk_in_mode = mode;
            bool pvk_in_autowake = autowake;
            void_PxRigidBodyPtr_addTorquePtr_PxVec3_PxForceModeEnum_bool_(pvk_in_this, pvk_in_torque, pvk_in_mode, pvk_in_autowake);
        }

        //DBG: MethodNode physx::PxRigidBody::clearForce L544
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        public void clearForce(physx.PxForceModeEnum mode) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_PxRigidBodyPtr_clearForcePtr_PxForceModeEnum_(pvk_in_this, pvk_in_mode);
        }

        //DBG: MethodNode physx::PxRigidBody::clearTorque L565
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        public void clearTorque(physx.PxForceModeEnum mode) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_PxRigidBodyPtr_clearTorquePtr_PxForceModeEnum_(pvk_in_this, pvk_in_mode);
        }

        //DBG: MethodNode physx::PxRigidBody::setForceAndTorque L579
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        public void setForceAndTorque(physx.PxVec3* force, physx.PxVec3* torque, physx.PxForceModeEnum mode) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_force = force;
            physx.PxVec3* pvk_in_torque = torque;
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_PxRigidBodyPtr_setForceAndTorquePtr_PxVec3_PxVec3_PxForceModeEnum_(pvk_in_this, pvk_in_force, pvk_in_torque, pvk_in_mode);
        }

        //DBG: MethodNode physx::PxRigidBody::setRigidBodyFlag L596
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxRigidBodyFlag::Enum, man: physx.PxRigidBodyFlagEnum, kind: Value
        //PAR nat: bool, man: bool, kind: Value
        public void setRigidBodyFlag(physx.PxRigidBodyFlagEnum flag, bool value) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxRigidBodyFlagEnum pvk_in_flag = flag;
            bool pvk_in_value = value;
            void_PxRigidBodyPtr_setRigidBodyFlagPtr_PxRigidBodyFlagEnum_bool_(pvk_in_this, pvk_in_flag, pvk_in_value);
        }

        //DBG: MethodNode physx::PxRigidBody::setRigidBodyFlags L597
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: PxRigidBodyFlagsPtr, man: physx.PxRigidBodyFlagsPtr, kind: PtrStruct
        public void setRigidBodyFlags(physx.PxRigidBodyFlagsPtr inFlags) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxRigidBodyFlagsPtr pvk_in_inFlags = inFlags;
            void_PxRigidBodyPtr_setRigidBodyFlagsPtr_PxRigidBodyFlagsPtr_(pvk_in_this, pvk_in_inFlags);
        }

        //DBG: MethodNode physx::PxRigidBody::getRigidBodyFlags L608
        //RET nat: PxRigidBodyFlagsPtr, man: physx.PxRigidBodyFlagsPtr, ret: True, kind: PtrStruct
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public physx.PxRigidBodyFlagsPtr getRigidBodyFlags_New() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return PxRigidBodyFlagsPtr_const_PxRigidBodyPtr_getRigidBodyFlagsPtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxRigidBody::setMinCCDAdvanceCoefficient L631
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: PxReal, man: float, kind: Value
        public void setMinCCDAdvanceCoefficient(float advanceCoefficient) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_advanceCoefficient = advanceCoefficient;
            void_PxRigidBodyPtr_setMinCCDAdvanceCoefficientPtr_float_(pvk_in_this, pvk_in_advanceCoefficient);
        }

        //DBG: MethodNode physx::PxRigidBody::getMinCCDAdvanceCoefficient L642
        //RET nat: PxReal, man: float, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public float getMinCCDAdvanceCoefficient() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_PxRigidBodyPtr_getMinCCDAdvanceCoefficientPtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxRigidBody::setMaxDepenetrationVelocity L650
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: PxReal, man: float, kind: Value
        public void setMaxDepenetrationVelocity(float biasClamp) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_biasClamp = biasClamp;
            void_PxRigidBodyPtr_setMaxDepenetrationVelocityPtr_float_(pvk_in_this, pvk_in_biasClamp);
        }

        //DBG: MethodNode physx::PxRigidBody::getMaxDepenetrationVelocity L657
        //RET nat: PxReal, man: float, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public float getMaxDepenetrationVelocity() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_PxRigidBodyPtr_getMaxDepenetrationVelocityPtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxRigidBody::setMaxContactImpulse L669
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: PxReal, man: float, kind: Value
        public void setMaxContactImpulse(float maxImpulse) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            float pvk_in_maxImpulse = maxImpulse;
            void_PxRigidBodyPtr_setMaxContactImpulsePtr_float_(pvk_in_this, pvk_in_maxImpulse);
        }

        //DBG: MethodNode physx::PxRigidBody::getMaxContactImpulse L678
        //RET nat: PxReal, man: float, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public float getMaxContactImpulse() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return float_const_PxRigidBodyPtr_getMaxContactImpulsePtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxRigidBody::getInternalIslandNodeIndex L685
        //RET nat: PxU32, man: uint, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public uint getInternalIslandNodeIndex() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            return uint_const_PxRigidBodyPtr_getInternalIslandNodeIndexPtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxRigidBody::operator= L157
        //ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxRigidBody::operator= L157

        //DBG: MethodNode physx::PxRigidBody::setCMassLocalPose L180
        //Value Converter setCMassLocalPose
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable
        public void setCMassLocalPose(physx.PxTransform pose) {
            setCMassLocalPose((physx.PxTransform*)&pose);
        }

        //DBG: MethodNode physx::PxRigidBody::setCMassLocalPose L180
        //Value Converter setCMassLocalPose
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable
        public void setCMassLocalPose(physx.PxTransform.Ref pose) {
            setCMassLocalPose((physx.PxTransform*)(*((IntPtr*)(&pose))));
        }

        //DBG: MethodNode physx::PxRigidBody::setMassSpaceInertiaTensor L255
        //Value Converter setMassSpaceInertiaTensor
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public void setMassSpaceInertiaTensor(physx.PxVec3 m) {
            setMassSpaceInertiaTensor((physx.PxVec3*)&m);
        }

        //DBG: MethodNode physx::PxRigidBody::setMassSpaceInertiaTensor L255
        //Value Converter setMassSpaceInertiaTensor
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public void setMassSpaceInertiaTensor(physx.PxVec3.Ref m) {
            setMassSpaceInertiaTensor((physx.PxVec3*)(*((IntPtr*)(&m))));
        }

        //DBG: MethodNode physx::PxRigidBody::setLinearVelocity L367
        //Value Converter setLinearVelocity
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public void setLinearVelocity(physx.PxVec3 linVel) {
            setLinearVelocity((physx.PxVec3*)&linVel);
        }

        //DBG: MethodNode physx::PxRigidBody::setLinearVelocity L367
        //Value Converter setLinearVelocity
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public void setLinearVelocity(physx.PxVec3.Ref linVel) {
            setLinearVelocity((physx.PxVec3*)(*((IntPtr*)(&linVel))));
        }

        //DBG: MethodNode physx::PxRigidBody::setLinearVelocity L367
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        public void setLinearVelocity(physx.PxVec3* linVel) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_linVel = linVel;
            void_PxRigidBodyPtr_setLinearVelocityPtr_PxVec3_(pvk_in_this, pvk_in_linVel);
        }

        //DBG: MethodNode physx::PxRigidBody::setLinearVelocity L367
        //Value Converter setLinearVelocity
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: bool, man: bool, kind: Value
        public void setLinearVelocity(physx.PxVec3 linVel, bool autowake=true) {
            setLinearVelocity((physx.PxVec3*)&linVel, autowake);
        }

        //DBG: MethodNode physx::PxRigidBody::setLinearVelocity L367
        //Value Converter setLinearVelocity
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: bool, man: bool, kind: Value
        public void setLinearVelocity(physx.PxVec3.Ref linVel, bool autowake=true) {
            setLinearVelocity((physx.PxVec3*)(*((IntPtr*)(&linVel))), autowake);
        }

        //DBG: MethodNode physx::PxRigidBody::setAngularVelocity L400
        //Value Converter setAngularVelocity
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public void setAngularVelocity(physx.PxVec3 angVel) {
            setAngularVelocity((physx.PxVec3*)&angVel);
        }

        //DBG: MethodNode physx::PxRigidBody::setAngularVelocity L400
        //Value Converter setAngularVelocity
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public void setAngularVelocity(physx.PxVec3.Ref angVel) {
            setAngularVelocity((physx.PxVec3*)(*((IntPtr*)(&angVel))));
        }

        //DBG: MethodNode physx::PxRigidBody::setAngularVelocity L400
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        public void setAngularVelocity(physx.PxVec3* angVel) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_angVel = angVel;
            void_PxRigidBodyPtr_setAngularVelocityPtr_PxVec3_(pvk_in_this, pvk_in_angVel);
        }

        //DBG: MethodNode physx::PxRigidBody::setAngularVelocity L400
        //Value Converter setAngularVelocity
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: bool, man: bool, kind: Value
        public void setAngularVelocity(physx.PxVec3 angVel, bool autowake=true) {
            setAngularVelocity((physx.PxVec3*)&angVel, autowake);
        }

        //DBG: MethodNode physx::PxRigidBody::setAngularVelocity L400
        //Value Converter setAngularVelocity
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: bool, man: bool, kind: Value
        public void setAngularVelocity(physx.PxVec3.Ref angVel, bool autowake=true) {
            setAngularVelocity((physx.PxVec3*)(*((IntPtr*)(&angVel))), autowake);
        }

        //DBG: MethodNode physx::PxRigidBody::addForce L493
        //Value Converter addForce
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public void addForce(physx.PxVec3 force) {
            addForce((physx.PxVec3*)&force);
        }

        //DBG: MethodNode physx::PxRigidBody::addForce L493
        //Value Converter addForce
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public void addForce(physx.PxVec3.Ref force) {
            addForce((physx.PxVec3*)(*((IntPtr*)(&force))));
        }

        //DBG: MethodNode physx::PxRigidBody::addForce L493
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        public void addForce(physx.PxVec3* force) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_force = force;
            void_PxRigidBodyPtr_addForcePtr_PxVec3_(pvk_in_this, pvk_in_force);
        }

        //DBG: MethodNode physx::PxRigidBody::addForce L493
        //Value Converter addForce
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        public void addForce(physx.PxVec3 force, physx.PxForceModeEnum mode) {
            addForce((physx.PxVec3*)&force, mode);
        }

        //DBG: MethodNode physx::PxRigidBody::addForce L493
        //Value Converter addForce
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        public void addForce(physx.PxVec3.Ref force, physx.PxForceModeEnum mode) {
            addForce((physx.PxVec3*)(*((IntPtr*)(&force))), mode);
        }

        //DBG: MethodNode physx::PxRigidBody::addForce L493
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        public void addForce(physx.PxVec3* force, physx.PxForceModeEnum mode) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_force = force;
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_PxRigidBodyPtr_addForcePtr_PxVec3_PxForceModeEnum_(pvk_in_this, pvk_in_force, pvk_in_mode);
        }

        //DBG: MethodNode physx::PxRigidBody::addForce L493
        //Value Converter addForce
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        //PAR nat: bool, man: bool, kind: Value
        public void addForce(physx.PxVec3 force, physx.PxForceModeEnum mode, bool autowake=true) {
            addForce((physx.PxVec3*)&force, mode, autowake);
        }

        //DBG: MethodNode physx::PxRigidBody::addForce L493
        //Value Converter addForce
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        //PAR nat: bool, man: bool, kind: Value
        public void addForce(physx.PxVec3.Ref force, physx.PxForceModeEnum mode, bool autowake=true) {
            addForce((physx.PxVec3*)(*((IntPtr*)(&force))), mode, autowake);
        }

        //DBG: MethodNode physx::PxRigidBody::addTorque L523
        //Value Converter addTorque
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public void addTorque(physx.PxVec3 torque) {
            addTorque((physx.PxVec3*)&torque);
        }

        //DBG: MethodNode physx::PxRigidBody::addTorque L523
        //Value Converter addTorque
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public void addTorque(physx.PxVec3.Ref torque) {
            addTorque((physx.PxVec3*)(*((IntPtr*)(&torque))));
        }

        //DBG: MethodNode physx::PxRigidBody::addTorque L523
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        public void addTorque(physx.PxVec3* torque) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_torque = torque;
            void_PxRigidBodyPtr_addTorquePtr_PxVec3_(pvk_in_this, pvk_in_torque);
        }

        //DBG: MethodNode physx::PxRigidBody::addTorque L523
        //Value Converter addTorque
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        public void addTorque(physx.PxVec3 torque, physx.PxForceModeEnum mode) {
            addTorque((physx.PxVec3*)&torque, mode);
        }

        //DBG: MethodNode physx::PxRigidBody::addTorque L523
        //Value Converter addTorque
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        public void addTorque(physx.PxVec3.Ref torque, physx.PxForceModeEnum mode) {
            addTorque((physx.PxVec3*)(*((IntPtr*)(&torque))), mode);
        }

        //DBG: MethodNode physx::PxRigidBody::addTorque L523
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        public void addTorque(physx.PxVec3* torque, physx.PxForceModeEnum mode) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_torque = torque;
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_PxRigidBodyPtr_addTorquePtr_PxVec3_PxForceModeEnum_(pvk_in_this, pvk_in_torque, pvk_in_mode);
        }

        //DBG: MethodNode physx::PxRigidBody::addTorque L523
        //Value Converter addTorque
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        //PAR nat: bool, man: bool, kind: Value
        public void addTorque(physx.PxVec3 torque, physx.PxForceModeEnum mode, bool autowake=true) {
            addTorque((physx.PxVec3*)&torque, mode, autowake);
        }

        //DBG: MethodNode physx::PxRigidBody::addTorque L523
        //Value Converter addTorque
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        //PAR nat: bool, man: bool, kind: Value
        public void addTorque(physx.PxVec3.Ref torque, physx.PxForceModeEnum mode, bool autowake=true) {
            addTorque((physx.PxVec3*)(*((IntPtr*)(&torque))), mode, autowake);
        }

        //DBG: MethodNode physx::PxRigidBody::clearForce L544
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public void clearForce() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            void_PxRigidBodyPtr_clearForcePtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxRigidBody::clearTorque L565
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        public void clearTorque() {
            physx.PxRigidBodyPtr pvk_in_this = this;
            void_PxRigidBodyPtr_clearTorquePtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxRigidBody::setForceAndTorque L579
        //Value Converter setForceAndTorque
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public void setForceAndTorque(physx.PxVec3 force, physx.PxVec3 torque) {
            setForceAndTorque((physx.PxVec3*)&force, (physx.PxVec3*)&torque);
        }

        //DBG: MethodNode physx::PxRigidBody::setForceAndTorque L579
        //Value Converter setForceAndTorque
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public void setForceAndTorque(physx.PxVec3.Ref force, physx.PxVec3.Ref torque) {
            setForceAndTorque((physx.PxVec3*)(*((IntPtr*)(&force))), (physx.PxVec3*)(*((IntPtr*)(&torque))));
        }

        //DBG: MethodNode physx::PxRigidBody::setForceAndTorque L579
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        public void setForceAndTorque(physx.PxVec3* force, physx.PxVec3* torque) {
            physx.PxRigidBodyPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_force = force;
            physx.PxVec3* pvk_in_torque = torque;
            void_PxRigidBodyPtr_setForceAndTorquePtr_PxVec3_PxVec3_(pvk_in_this, pvk_in_force, pvk_in_torque);
        }

        //DBG: MethodNode physx::PxRigidBody::setForceAndTorque L579
        //Value Converter setForceAndTorque
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        public void setForceAndTorque(physx.PxVec3 force, physx.PxVec3 torque, physx.PxForceModeEnum mode) {
            setForceAndTorque((physx.PxVec3*)&force, (physx.PxVec3*)&torque, mode);
        }

        //DBG: MethodNode physx::PxRigidBody::setForceAndTorque L579
        //Value Converter setForceAndTorque
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, kind: PtrStruct
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, kind: Value
        public void setForceAndTorque(physx.PxVec3.Ref force, physx.PxVec3.Ref torque, physx.PxForceModeEnum mode) {
            setForceAndTorque((physx.PxVec3*)(*((IntPtr*)(&force))), (physx.PxVec3*)(*((IntPtr*)(&torque))), mode);
        }
        public static implicit operator physx.PxRigidActorPtr(PxRigidBodyPtr obj) => *(physx.PxRigidActorPtr*)&obj;
        public static explicit operator PxRigidBodyPtr(physx.PxRigidActorPtr obj) => *(PxRigidBodyPtr*)&obj;
        public static implicit operator physx.PxActorPtr(PxRigidBodyPtr obj) => *(physx.PxActorPtr*)&obj;
        public static explicit operator PxRigidBodyPtr(physx.PxActorPtr obj) => *(PxRigidBodyPtr*)&obj;
        public static implicit operator physx.PxBasePtr(PxRigidBodyPtr obj) => *(physx.PxBasePtr*)&obj;
        public static explicit operator PxRigidBodyPtr(physx.PxBasePtr obj) => *(PxRigidBodyPtr*)&obj;

        //DBG: Field: userData - 314-314
        public IntPtr userData {
            get => PxActorPtr_GET_userData(this);
            set => PxActorPtr_SET_userData(this, value);
        }

        //PIPING
        public void release(){((physx.PxRigidActorPtr)this).release();}
        public physx.PxTransform getGlobalPose(){return((physx.PxRigidActorPtr)this).getGlobalPose();}
        public void setGlobalPose(physx.PxTransform* pose, bool autowake=true){((physx.PxRigidActorPtr)this).setGlobalPose(pose, autowake);}
        public bool attachShape(physx.PxShapePtr shape){return((physx.PxRigidActorPtr)this).attachShape(shape);}
        public void detachShape(physx.PxShapePtr shape, bool wakeOnLostTouch=true){((physx.PxRigidActorPtr)this).detachShape(shape, wakeOnLostTouch);}
        public uint getNbShapes(){return((physx.PxRigidActorPtr)this).getNbShapes();}
        public uint getShapes(physx.PxShapePtr* userBuffer, uint bufferSize, uint startIndex=0){return((physx.PxRigidActorPtr)this).getShapes(userBuffer, bufferSize, startIndex);}
        public uint getNbConstraints(){return((physx.PxRigidActorPtr)this).getNbConstraints();}
        public uint getConstraints(physx.PxConstraintPtr* userBuffer, uint bufferSize, uint startIndex=0){return((physx.PxRigidActorPtr)this).getConstraints(userBuffer, bufferSize, startIndex);}
        public void setGlobalPose(physx.PxTransform pose){((physx.PxRigidActorPtr)this).setGlobalPose((physx.PxTransform*)&pose);}
        public void setGlobalPose(physx.PxTransform.Ref pose){((physx.PxRigidActorPtr)this).setGlobalPose((physx.PxTransform*)(*((IntPtr*)(&pose))));}
        public void setGlobalPose(physx.PxTransform* pose){((physx.PxRigidActorPtr)this).setGlobalPose(pose);}
        public void setGlobalPose(physx.PxTransform pose, bool autowake=true){((physx.PxRigidActorPtr)this).setGlobalPose((physx.PxTransform*)&pose, autowake);}
        public void setGlobalPose(physx.PxTransform.Ref pose, bool autowake=true){((physx.PxRigidActorPtr)this).setGlobalPose((physx.PxTransform*)(*((IntPtr*)(&pose))), autowake);}
        public void detachShape(physx.PxShapePtr shape){((physx.PxRigidActorPtr)this).detachShape(shape);}
        public uint getShapes(physx.PxShapePtr* userBuffer, uint bufferSize){return((physx.PxRigidActorPtr)this).getShapes(userBuffer, bufferSize);}
        public uint getConstraints(physx.PxConstraintPtr* userBuffer, uint bufferSize){return((physx.PxRigidActorPtr)this).getConstraints(userBuffer, bufferSize);}
        public physx.PxActorTypeEnum getType(){return((physx.PxActorPtr)this).getType();}
        public physx.PxScenePtr getScene(){return((physx.PxActorPtr)this).getScene();}
        public void setName(string name){((physx.PxActorPtr)this).setName(name);}
        public string getName(){return((physx.PxActorPtr)this).getName();}
        public physx.PxBounds3 getWorldBounds(float inflation=1.01f){return((physx.PxActorPtr)this).getWorldBounds(inflation);}
        public void setActorFlag(physx.PxActorFlagEnum flag, bool value){((physx.PxActorPtr)this).setActorFlag(flag, value);}
        public void setActorFlags(physx.PxActorFlagsPtr inFlags){((physx.PxActorPtr)this).setActorFlags(inFlags);}
        public physx.PxActorFlagsPtr getActorFlags_New(){return((physx.PxActorPtr)this).getActorFlags_New();}
        public void setDominanceGroup(byte dominanceGroup){((physx.PxActorPtr)this).setDominanceGroup(dominanceGroup);}
        public byte getDominanceGroup(){return((physx.PxActorPtr)this).getDominanceGroup();}
        public void setOwnerClient(byte inClient){((physx.PxActorPtr)this).setOwnerClient(inClient);}
        public byte getOwnerClient(){return((physx.PxActorPtr)this).getOwnerClient();}
        public physx.PxAggregatePtr getAggregate(){return((physx.PxActorPtr)this).getAggregate();}
        public physx.PxBounds3 getWorldBounds(){return((physx.PxActorPtr)this).getWorldBounds();}
        public string getConcreteTypeName(){return((physx.PxBasePtr)this).getConcreteTypeName();}
        //Skipping: SKIPPING! MethodNode physx::PxBase::is L101 is | 
        //Skipping: SKIPPING! MethodNode physx::PxBase::is L111 isConst | 
        public ushort getConcreteType(){return((physx.PxBasePtr)this).getConcreteType();}
        public void setBaseFlag(physx.PxBaseFlagEnum flag, bool value){((physx.PxBasePtr)this).setBaseFlag(flag, value);}
        public void setBaseFlags(physx.PxBaseFlagsPtr inFlags){((physx.PxBasePtr)this).setBaseFlags(inFlags);}
        public physx.PxBaseFlagsPtr getBaseFlags_New(){return((physx.PxBasePtr)this).getBaseFlags_New();}
        public bool isReleasable(){return((physx.PxBasePtr)this).isReleasable();}

        //INTERFACES
        public unsafe interface IPxRigidBodyPtr {
            void setCMassLocalPose(physx.PxTransform* pose);
            physx.PxTransform getCMassLocalPose();
            void setMass(float mass);
            float getMass();
            float getInvMass();
            void setMassSpaceInertiaTensor(physx.PxVec3* m);
            physx.PxVec3 getMassSpaceInertiaTensor();
            physx.PxVec3 getMassSpaceInvInertiaTensor();
            void setLinearDamping(float linDamp);
            float getLinearDamping();
            void setAngularDamping(float angDamp);
            float getAngularDamping();
            physx.PxVec3 getLinearVelocity();
            void setLinearVelocity(physx.PxVec3* linVel, bool autowake=true);
            physx.PxVec3 getAngularVelocity();
            void setAngularVelocity(physx.PxVec3* angVel, bool autowake=true);
            void setMaxAngularVelocity(float maxAngVel);
            float getMaxAngularVelocity();
            void setMaxLinearVelocity(float maxLinVel);
            float getMaxLinearVelocity();
            void addForce(physx.PxVec3* force, physx.PxForceModeEnum mode, bool autowake=true);
            void addTorque(physx.PxVec3* torque, physx.PxForceModeEnum mode, bool autowake=true);
            void clearForce(physx.PxForceModeEnum mode);
            void clearTorque(physx.PxForceModeEnum mode);
            void setForceAndTorque(physx.PxVec3* force, physx.PxVec3* torque, physx.PxForceModeEnum mode);
            void setRigidBodyFlag(physx.PxRigidBodyFlagEnum flag, bool value);
            void setRigidBodyFlags(physx.PxRigidBodyFlagsPtr inFlags);
            physx.PxRigidBodyFlagsPtr getRigidBodyFlags_New();
            void setMinCCDAdvanceCoefficient(float advanceCoefficient);
            float getMinCCDAdvanceCoefficient();
            void setMaxDepenetrationVelocity(float biasClamp);
            float getMaxDepenetrationVelocity();
            void setMaxContactImpulse(float maxImpulse);
            float getMaxContactImpulse();
            uint getInternalIslandNodeIndex();
            void setCMassLocalPose(physx.PxTransform pose);
            void setCMassLocalPose(physx.PxTransform.Ref pose);
            void setMassSpaceInertiaTensor(physx.PxVec3 m);
            void setMassSpaceInertiaTensor(physx.PxVec3.Ref m);
            void setLinearVelocity(physx.PxVec3 linVel);
            void setLinearVelocity(physx.PxVec3.Ref linVel);
            void setLinearVelocity(physx.PxVec3* linVel);
            void setLinearVelocity(physx.PxVec3 linVel, bool autowake=true);
            void setLinearVelocity(physx.PxVec3.Ref linVel, bool autowake=true);
            void setAngularVelocity(physx.PxVec3 angVel);
            void setAngularVelocity(physx.PxVec3.Ref angVel);
            void setAngularVelocity(physx.PxVec3* angVel);
            void setAngularVelocity(physx.PxVec3 angVel, bool autowake=true);
            void setAngularVelocity(physx.PxVec3.Ref angVel, bool autowake=true);
            void addForce(physx.PxVec3 force);
            void addForce(physx.PxVec3.Ref force);
            void addForce(physx.PxVec3* force);
            void addForce(physx.PxVec3 force, physx.PxForceModeEnum mode);
            void addForce(physx.PxVec3.Ref force, physx.PxForceModeEnum mode);
            void addForce(physx.PxVec3* force, physx.PxForceModeEnum mode);
            void addForce(physx.PxVec3 force, physx.PxForceModeEnum mode, bool autowake=true);
            void addForce(physx.PxVec3.Ref force, physx.PxForceModeEnum mode, bool autowake=true);
            void addTorque(physx.PxVec3 torque);
            void addTorque(physx.PxVec3.Ref torque);
            void addTorque(physx.PxVec3* torque);
            void addTorque(physx.PxVec3 torque, physx.PxForceModeEnum mode);
            void addTorque(physx.PxVec3.Ref torque, physx.PxForceModeEnum mode);
            void addTorque(physx.PxVec3* torque, physx.PxForceModeEnum mode);
            void addTorque(physx.PxVec3 torque, physx.PxForceModeEnum mode, bool autowake=true);
            void addTorque(physx.PxVec3.Ref torque, physx.PxForceModeEnum mode, bool autowake=true);
            void clearForce();
            void clearTorque();
            void setForceAndTorque(physx.PxVec3 force, physx.PxVec3 torque);
            void setForceAndTorque(physx.PxVec3.Ref force, physx.PxVec3.Ref torque);
            void setForceAndTorque(physx.PxVec3* force, physx.PxVec3* torque);
            void setForceAndTorque(physx.PxVec3 force, physx.PxVec3 torque, physx.PxForceModeEnum mode);
            void setForceAndTorque(physx.PxVec3.Ref force, physx.PxVec3.Ref torque, physx.PxForceModeEnum mode);
        }

        //Operators
    }

    //DBG: DeclNode PxRigidBodyFlags physx::PxRigidBodyFlags L148
}
