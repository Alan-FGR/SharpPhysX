// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
//Unit PxQuat
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    public unsafe partial struct PxQuat {
        public float x;
        public float y;
        public float z;
        public float w;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Default_physx_PxQuat_(physx.PxQuat* RetRef);
        
        public static physx.PxQuat Default() {
            physx.PxQuat RetRef;
            Default_physx_PxQuat_(&RetRef);
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxQuat_PxQuat_Ctor_physx_PxIDENTITY_(physx.PxQuat* pvk_this, physx.PxIDENTITY pvk_r);
        
        public  PxQuat(physx.PxIDENTITY r) {
            physx.PxIDENTITY pvk_in_r = r;
            PxQuat toInit;
            var pvk_in_this = &toInit;
            void_physx_PxQuat_PxQuat_Ctor_physx_PxIDENTITY_(pvk_in_this, pvk_in_r);
            this = toInit;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxQuat_PxQuat_Ctor_float_(physx.PxQuat* pvk_this, float pvk_r);
        
        public  PxQuat(float r) {
            float pvk_in_r = r;
            PxQuat toInit;
            var pvk_in_this = &toInit;
            void_physx_PxQuat_PxQuat_Ctor_float_(pvk_in_this, pvk_in_r);
            this = toInit;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxQuat_PxQuat_Ctor_float_float_float_float_(physx.PxQuat* pvk_this, float pvk_nx, float pvk_ny, float pvk_nz, float pvk_nw);
        
        public  PxQuat(float nx, float ny, float nz, float nw) {
            float pvk_in_nx = nx;
            float pvk_in_ny = ny;
            float pvk_in_nz = nz;
            float pvk_in_nw = nw;
            PxQuat toInit;
            var pvk_in_this = &toInit;
            void_physx_PxQuat_PxQuat_Ctor_float_float_float_float_(pvk_in_this, pvk_in_nx, pvk_in_ny, pvk_in_nz, pvk_in_nw);
            this = toInit;
        }
        
        public  PxQuat(float angleRadians, physx.PxVec3 unitAxis) : this(angleRadians, &unitAxis) {
            //ctor piping;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxQuat_PxQuat_Ctor_float_physx_PxVec3_(physx.PxQuat* pvk_this, float pvk_angleRadians, physx.PxVec3* pvk_unitAxis);
        
        public  PxQuat(float angleRadians, physx.PxVec3* unitAxis) {
            float pvk_in_angleRadians = angleRadians;
            physx.PxVec3* pvk_in_unitAxis = unitAxis;
            PxQuat toInit;
            var pvk_in_this = &toInit;
            void_physx_PxQuat_PxQuat_Ctor_float_physx_PxVec3_(pvk_in_this, pvk_in_angleRadians, pvk_in_unitAxis);
            this = toInit;
        }
        
        public  PxQuat(physx.PxQuat v) : this(&v) {
            //ctor piping;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxQuat_PxQuat_Ctor_physx_PxQuat_(physx.PxQuat* pvk_this, physx.PxQuat* pvk_v);
        
        public  PxQuat(physx.PxQuat* v) {
            physx.PxQuat* pvk_in_v = v;
            PxQuat toInit;
            var pvk_in_this = &toInit;
            void_physx_PxQuat_PxQuat_Ctor_physx_PxQuat_(pvk_in_this, pvk_in_v);
            this = toInit;
        }
        
        public  PxQuat(physx.PxMat33 m) : this(&m) {
            //ctor piping;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxQuat_PxQuat_Ctor_physx_PxMat33_(physx.PxQuat* pvk_this, physx.PxMat33* pvk_m);
        
        public  PxQuat(physx.PxMat33* m) {
            physx.PxMat33* pvk_in_m = m;
            PxQuat toInit;
            var pvk_in_this = &toInit;
            void_physx_PxQuat_PxQuat_Ctor_physx_PxMat33_(pvk_in_this, pvk_in_m);
            this = toInit;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxQuat_isIdentity(physx.PxQuat* pvk_this);
        
        public bool isIdentity() {
            fixed (PxQuat* pvk_in_this = &this){
                return bool_const_physx_PxQuat_isIdentity(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxQuat_isFinite(physx.PxQuat* pvk_this);
        
        public bool isFinite() {
            fixed (PxQuat* pvk_in_this = &this){
                return bool_const_physx_PxQuat_isFinite(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxQuat_isUnit(physx.PxQuat* pvk_this);
        
        public bool isUnit() {
            fixed (PxQuat* pvk_in_this = &this){
                return bool_const_physx_PxQuat_isUnit(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxQuat_isSane(physx.PxQuat* pvk_this);
        
        public bool isSane() {
            fixed (PxQuat* pvk_in_this = &this){
                return bool_const_physx_PxQuat_isSane(pvk_in_this);
            }
        }
        
        public static bool operator==(physx.PxQuat lhs, physx.PxQuat q) {
            return lhs==&q;
        }
        
        public static bool operator!=(physx.PxQuat lhs, physx.PxQuat q){return !(lhs==q);} // Generated Matching Operator
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxQuat_operator_EqualEqual_physx_PxQuat_(physx.PxQuat* pvk_lhs, physx.PxQuat* pvk_q);
        
        public static bool operator==(physx.PxQuat lhs, physx.PxQuat* q) {
            physx.PxQuat* pvk_in_lhs = &lhs;
            physx.PxQuat* pvk_in_q = q;
            return bool_const_physx_PxQuat_operator_EqualEqual_physx_PxQuat_(pvk_in_lhs, pvk_in_q);
        }
        public static bool operator!=(physx.PxQuat lhs, physx.PxQuat* q){return !(lhs==q);} // Generated Matching Operator
        
        public void toRadiansAndUnitAxis(float* angle, physx.PxVec3 axis) {
            toRadiansAndUnitAxis(angle, &axis);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_const_physx_PxQuat_toRadiansAndUnitAxis_float_physx_PxVec3_(physx.PxQuat* pvk_this, float* pvk_angle, physx.PxVec3* pvk_axis);
        
        public void toRadiansAndUnitAxis(float* angle, physx.PxVec3* axis) {
            float* pvk_in_angle = angle;
            physx.PxVec3* pvk_in_axis = axis;
            fixed (PxQuat* pvk_in_this = &this){
                void_const_physx_PxQuat_toRadiansAndUnitAxis_float_physx_PxVec3_(pvk_in_this, pvk_in_angle, pvk_in_axis);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxQuat_getAngle(physx.PxQuat* pvk_this);
        
        public float getAngle() {
            fixed (PxQuat* pvk_in_this = &this){
                return float_const_physx_PxQuat_getAngle(pvk_in_this);
            }
        }
        
        public float getAngle(physx.PxQuat q) {
            return getAngle(&q);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxQuat_getAngle_physx_PxQuat_(physx.PxQuat* pvk_this, physx.PxQuat* pvk_q);
        
        public float getAngle(physx.PxQuat* q) {
            physx.PxQuat* pvk_in_q = q;
            fixed (PxQuat* pvk_in_this = &this){
                return float_const_physx_PxQuat_getAngle_physx_PxQuat_(pvk_in_this, pvk_in_q);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxQuat_magnitudeSquared(physx.PxQuat* pvk_this);
        
        public float magnitudeSquared() {
            fixed (PxQuat* pvk_in_this = &this){
                return float_const_physx_PxQuat_magnitudeSquared(pvk_in_this);
            }
        }
        
        public float dot(physx.PxQuat v) {
            return dot(&v);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxQuat_dot_physx_PxQuat_(physx.PxQuat* pvk_this, physx.PxQuat* pvk_v);
        
        public float dot(physx.PxQuat* v) {
            physx.PxQuat* pvk_in_v = v;
            fixed (PxQuat* pvk_in_this = &this){
                return float_const_physx_PxQuat_dot_physx_PxQuat_(pvk_in_this, pvk_in_v);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxQuat_const_physx_PxQuat_getNormalized(physx.PxQuat* RetRef, physx.PxQuat* pvk_this);
        
        public physx.PxQuat getNormalized() {
            physx.PxQuat RetRef;
            
            fixed (PxQuat* pvk_in_this = &this){
                physx_PxQuat_const_physx_PxQuat_getNormalized(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxQuat_magnitude(physx.PxQuat* pvk_this);
        
        public float magnitude() {
            fixed (PxQuat* pvk_in_this = &this){
                return float_const_physx_PxQuat_magnitude(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_physx_PxQuat_normalize(physx.PxQuat* pvk_this);
        
        public float normalize() {
            fixed (PxQuat* pvk_in_this = &this){
                return float_physx_PxQuat_normalize(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxQuat_const_physx_PxQuat_getConjugate(physx.PxQuat* RetRef, physx.PxQuat* pvk_this);
        
        public physx.PxQuat getConjugate() {
            physx.PxQuat RetRef;
            
            fixed (PxQuat* pvk_in_this = &this){
                physx_PxQuat_const_physx_PxQuat_getConjugate(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxQuat_getImaginaryPart(physx.PxVec3* RetRef, physx.PxQuat* pvk_this);
        
        public physx.PxVec3 getImaginaryPart() {
            physx.PxVec3 RetRef;
            
            fixed (PxQuat* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxQuat_getImaginaryPart(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxQuat_getBasisVector0(physx.PxVec3* RetRef, physx.PxQuat* pvk_this);
        
        public physx.PxVec3 getBasisVector0() {
            physx.PxVec3 RetRef;
            
            fixed (PxQuat* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxQuat_getBasisVector0(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxQuat_getBasisVector1(physx.PxVec3* RetRef, physx.PxQuat* pvk_this);
        
        public physx.PxVec3 getBasisVector1() {
            physx.PxVec3 RetRef;
            
            fixed (PxQuat* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxQuat_getBasisVector1(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxQuat_getBasisVector2(physx.PxVec3* RetRef, physx.PxQuat* pvk_this);
        
        public physx.PxVec3 getBasisVector2() {
            physx.PxVec3 RetRef;
            
            fixed (PxQuat* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxQuat_getBasisVector2(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        public physx.PxVec3 rotate(physx.PxVec3 v) {
            return rotate(&v);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxQuat_rotate_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxQuat* pvk_this, physx.PxVec3* pvk_v);
        
        public physx.PxVec3 rotate(physx.PxVec3* v) {
            physx.PxVec3 RetRef;
            
            physx.PxVec3* pvk_in_v = v;
            fixed (PxQuat* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxQuat_rotate_physx_PxVec3_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }
        
        public physx.PxVec3 rotateInv(physx.PxVec3 v) {
            return rotateInv(&v);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxQuat_rotateInv_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxQuat* pvk_this, physx.PxVec3* pvk_v);
        
        public physx.PxVec3 rotateInv(physx.PxVec3* v) {
            physx.PxVec3 RetRef;
            
            physx.PxVec3* pvk_in_v = v;
            fixed (PxQuat* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxQuat_rotateInv_physx_PxVec3_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }
        
        public static physx.PxQuat operator*(physx.PxQuat lhs, physx.PxQuat q) {
            return lhs*&q;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxQuat_const_physx_PxQuat_operator_Star_physx_PxQuat_(physx.PxQuat* RetRef, physx.PxQuat* pvk_lhs, physx.PxQuat* pvk_q);
        
        public static physx.PxQuat operator*(physx.PxQuat lhs, physx.PxQuat* q) {
            physx.PxQuat RetRef;
            physx.PxQuat* pvk_in_lhs = &lhs;
            physx.PxQuat* pvk_in_q = q;
            physx_PxQuat_const_physx_PxQuat_operator_Star_physx_PxQuat_(&RetRef, pvk_in_lhs, pvk_in_q);
            return RetRef;
        }
        
        public static physx.PxQuat operator+(physx.PxQuat lhs, physx.PxQuat q) {
            return lhs+&q;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxQuat_const_physx_PxQuat_operator_Plus_physx_PxQuat_(physx.PxQuat* RetRef, physx.PxQuat* pvk_lhs, physx.PxQuat* pvk_q);
        
        public static physx.PxQuat operator+(physx.PxQuat lhs, physx.PxQuat* q) {
            physx.PxQuat RetRef;
            physx.PxQuat* pvk_in_lhs = &lhs;
            physx.PxQuat* pvk_in_q = q;
            physx_PxQuat_const_physx_PxQuat_operator_Plus_physx_PxQuat_(&RetRef, pvk_in_lhs, pvk_in_q);
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxQuat_const_physx_PxQuat_operator_Minus(physx.PxQuat* RetRef, physx.PxQuat* pvk_lhs);
        
        public static physx.PxQuat operator-(physx.PxQuat lhs) {
            physx.PxQuat RetRef;
            physx.PxQuat* pvk_in_lhs = &lhs;
            physx_PxQuat_const_physx_PxQuat_operator_Minus(&RetRef, pvk_in_lhs);
            return RetRef;
        }
        
        public static physx.PxQuat operator-(physx.PxQuat lhs, physx.PxQuat q) {
            return lhs-&q;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxQuat_const_physx_PxQuat_operator_Minus_physx_PxQuat_(physx.PxQuat* RetRef, physx.PxQuat* pvk_lhs, physx.PxQuat* pvk_q);
        
        public static physx.PxQuat operator-(physx.PxQuat lhs, physx.PxQuat* q) {
            physx.PxQuat RetRef;
            physx.PxQuat* pvk_in_lhs = &lhs;
            physx.PxQuat* pvk_in_q = q;
            physx_PxQuat_const_physx_PxQuat_operator_Minus_physx_PxQuat_(&RetRef, pvk_in_lhs, pvk_in_q);
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxQuat_const_physx_PxQuat_operator_Star_float_(physx.PxQuat* RetRef, physx.PxQuat* pvk_lhs, float pvk_r);
        
        public static physx.PxQuat operator*(physx.PxQuat lhs, float r) {
            physx.PxQuat RetRef;
            physx.PxQuat* pvk_in_lhs = &lhs;
            float pvk_in_r = r;
            physx_PxQuat_const_physx_PxQuat_operator_Star_float_(&RetRef, pvk_in_lhs, pvk_in_r);
            return RetRef;
        }
    }
    
}
