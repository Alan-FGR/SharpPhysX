// Generated by minBND 5.1.94.90 - Â© github.com/Alan-FGR
using System;
using System.Runtime.InteropServices;
using static minBND_pinvokes;

public static unsafe partial class physx {

    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public unsafe partial struct PxQuat {
        [FieldOffset( 0)] public float x;
        [FieldOffset( 4)] public float y;
        [FieldOffset( 8)] public float z;
        [FieldOffset(12)] public float w;

        public static PxQuat Default() {

            PxQuat toInit;
            var pvk_in_this = &toInit;
            void_PxQuat_PxQuatPtr_Ctor(pvk_in_this);
            return toInit;
        }

        public PxQuat(physx.PxIDENTITY r) {

            physx.PxIDENTITY pvk_in_r = r;
            PxQuat toInit;
            var pvk_in_this = &toInit;
            void_PxQuat_PxQuatPtr_Ctor_PxIDENTITY_(pvk_in_this, pvk_in_r);
            this = toInit;
        }

        public PxQuat(float r) {

            float pvk_in_r = r;
            PxQuat toInit;
            var pvk_in_this = &toInit;
            void_PxQuat_PxQuatPtr_Ctor_float_(pvk_in_this, pvk_in_r);
            this = toInit;
        }

        public PxQuat(float nx, float ny, float nz, float nw) {

            float pvk_in_nx = nx;
            float pvk_in_ny = ny;
            float pvk_in_nz = nz;
            float pvk_in_nw = nw;
            PxQuat toInit;
            var pvk_in_this = &toInit;
            void_PxQuat_PxQuatPtr_Ctor_float_float_float_float_(pvk_in_this, pvk_in_nx, pvk_in_ny, pvk_in_nz, pvk_in_nw);
            this = toInit;
        }

        public PxQuat(float angleRadians, physx.PxVec3 unitAxis) : this(angleRadians, (physx.PxVec3*)&unitAxis) {
            //ctor piping;
        }

        public PxQuat(float angleRadians, physx.PxVec3.Ref unitAxis) : this(angleRadians, (physx.PxVec3*)(*((IntPtr*)(&unitAxis)))) {
            //ctor piping;
        }

        public PxQuat(float angleRadians, physx.PxVec3* unitAxis) {

            float pvk_in_angleRadians = angleRadians;
            physx.PxVec3* pvk_in_unitAxis = unitAxis;
            PxQuat toInit;
            var pvk_in_this = &toInit;
            void_PxQuat_PxQuatPtr_Ctor_float_PxVec3_(pvk_in_this, pvk_in_angleRadians, pvk_in_unitAxis);
            this = toInit;
        }

        public PxQuat(physx.PxQuat v) : this((physx.PxQuat*)&v) {
            //ctor piping;
        }

        public PxQuat(physx.PxQuat.Ref v) : this((physx.PxQuat*)(*((IntPtr*)(&v)))) {
            //ctor piping;
        }

        public PxQuat(physx.PxQuat* v) {

            physx.PxQuat* pvk_in_v = v;
            PxQuat toInit;
            var pvk_in_this = &toInit;
            void_PxQuat_PxQuatPtr_Ctor_PxQuat_(pvk_in_this, pvk_in_v);
            this = toInit;
        }

        public PxQuat(physx.PxMat33 m) : this((physx.PxMat33*)&m) {
            //ctor piping;
        }

        public PxQuat(physx.PxMat33.Ref m) : this((physx.PxMat33*)(*((IntPtr*)(&m)))) {
            //ctor piping;
        }

        public PxQuat(physx.PxMat33* m) {

            physx.PxMat33* pvk_in_m = m;
            PxQuat toInit;
            var pvk_in_this = &toInit;
            void_PxQuat_PxQuatPtr_Ctor_PxMat33_(pvk_in_this, pvk_in_m);
            this = toInit;
        }

        public bool isIdentity() {

            fixed (PxQuat* pvk_in_this = &this){
              return bool_const_PxQuat_isIdentityPtr(pvk_in_this);
            }
        }

        public bool isFinite() {

            fixed (PxQuat* pvk_in_this = &this){
              return bool_const_PxQuat_isFinitePtr(pvk_in_this);
            }
        }

        public bool isUnit() {

            fixed (PxQuat* pvk_in_this = &this){
              return bool_const_PxQuat_isUnitPtr(pvk_in_this);
            }
        }

        public bool isSane() {

            fixed (PxQuat* pvk_in_this = &this){
              return bool_const_PxQuat_isSanePtr(pvk_in_this);
            }
        }

        public static bool OpEquals(physx.PxQuat lhs, physx.PxQuat q) {
            return OpEquals(lhs, (physx.PxQuat*)&q);
        }

        public static bool OpEquals(physx.PxQuat lhs, physx.PxQuat.Ref q) {
            return OpEquals(lhs, (physx.PxQuat*)(*((IntPtr*)(&q))));
        }

        public static bool OpEquals(physx.PxQuat lhs, physx.PxQuat* q) {
            physx.PxQuat* pvk_in_lhs = &lhs;
            physx.PxQuat* pvk_in_q = q;
            return bool_const_PxQuat_operator_Ptr_EqualEqual_PxQuat_(pvk_in_lhs, pvk_in_q);
        }

        public void toRadiansAndUnitAxis(float* angle, physx.PxVec3 axis) {
            toRadiansAndUnitAxis(angle, (physx.PxVec3*)&axis);
        }

        public void toRadiansAndUnitAxis(float* angle, physx.PxVec3.Ref axis) {
            toRadiansAndUnitAxis(angle, (physx.PxVec3*)(*((IntPtr*)(&axis))));
        }

        public void toRadiansAndUnitAxis(float* angle, physx.PxVec3* axis) {

            float* pvk_in_angle = angle;
            physx.PxVec3* pvk_in_axis = axis;
            fixed (PxQuat* pvk_in_this = &this){
              void_const_PxQuat_toRadiansAndUnitAxisPtr_float_PxVec3_(pvk_in_this, pvk_in_angle, pvk_in_axis);
            }
        }

        public float getAngle() {

            fixed (PxQuat* pvk_in_this = &this){
              return float_const_PxQuat_getAnglePtr(pvk_in_this);
            }
        }

        public float getAngle(physx.PxQuat q) {
            return getAngle((physx.PxQuat*)&q);
        }

        public float getAngle(physx.PxQuat.Ref q) {
            return getAngle((physx.PxQuat*)(*((IntPtr*)(&q))));
        }

        public float getAngle(physx.PxQuat* q) {

            physx.PxQuat* pvk_in_q = q;
            fixed (PxQuat* pvk_in_this = &this){
              return float_const_PxQuat_getAnglePtr_PxQuat_(pvk_in_this, pvk_in_q);
            }
        }

        public float magnitudeSquared() {

            fixed (PxQuat* pvk_in_this = &this){
              return float_const_PxQuat_magnitudeSquaredPtr(pvk_in_this);
            }
        }

        public float dot(physx.PxQuat v) {
            return dot((physx.PxQuat*)&v);
        }

        public float dot(physx.PxQuat.Ref v) {
            return dot((physx.PxQuat*)(*((IntPtr*)(&v))));
        }

        public float dot(physx.PxQuat* v) {

            physx.PxQuat* pvk_in_v = v;
            fixed (PxQuat* pvk_in_this = &this){
              return float_const_PxQuat_dotPtr_PxQuat_(pvk_in_this, pvk_in_v);
            }
        }

        public physx.PxQuat getNormalized() {
            physx.PxQuat RetRef;

            fixed (PxQuat* pvk_in_this = &this){
              PxQuat_const_PxQuat_getNormalizedPtr(&RetRef, pvk_in_this);
            }
            return RetRef;
        }

        public float magnitude() {

            fixed (PxQuat* pvk_in_this = &this){
              return float_const_PxQuat_magnitudePtr(pvk_in_this);
            }
        }

        public float normalize() {

            fixed (PxQuat* pvk_in_this = &this){
              return float_PxQuat_normalizePtr(pvk_in_this);
            }
        }

        public physx.PxQuat getConjugate() {
            physx.PxQuat RetRef;

            fixed (PxQuat* pvk_in_this = &this){
              PxQuat_const_PxQuat_getConjugatePtr(&RetRef, pvk_in_this);
            }
            return RetRef;
        }

        public physx.PxVec3 getImaginaryPart() {
            physx.PxVec3 RetRef;

            fixed (PxQuat* pvk_in_this = &this){
              PxVec3_const_PxQuat_getImaginaryPartPtr(&RetRef, pvk_in_this);
            }
            return RetRef;
        }

        public physx.PxVec3 getBasisVector0() {
            physx.PxVec3 RetRef;

            fixed (PxQuat* pvk_in_this = &this){
              PxVec3_const_PxQuat_getBasisVector0Ptr(&RetRef, pvk_in_this);
            }
            return RetRef;
        }

        public physx.PxVec3 getBasisVector1() {
            physx.PxVec3 RetRef;

            fixed (PxQuat* pvk_in_this = &this){
              PxVec3_const_PxQuat_getBasisVector1Ptr(&RetRef, pvk_in_this);
            }
            return RetRef;
        }

        public physx.PxVec3 getBasisVector2() {
            physx.PxVec3 RetRef;

            fixed (PxQuat* pvk_in_this = &this){
              PxVec3_const_PxQuat_getBasisVector2Ptr(&RetRef, pvk_in_this);
            }
            return RetRef;
        }

        public physx.PxVec3 rotate(physx.PxVec3 v) {
            return rotate((physx.PxVec3*)&v);
        }

        public physx.PxVec3 rotate(physx.PxVec3.Ref v) {
            return rotate((physx.PxVec3*)(*((IntPtr*)(&v))));
        }

        public physx.PxVec3 rotate(physx.PxVec3* v) {
            physx.PxVec3 RetRef;

            physx.PxVec3* pvk_in_v = v;
            fixed (PxQuat* pvk_in_this = &this){
              PxVec3_const_PxQuat_rotatePtr_PxVec3_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }

        public physx.PxVec3 rotateInv(physx.PxVec3 v) {
            return rotateInv((physx.PxVec3*)&v);
        }

        public physx.PxVec3 rotateInv(physx.PxVec3.Ref v) {
            return rotateInv((physx.PxVec3*)(*((IntPtr*)(&v))));
        }

        public physx.PxVec3 rotateInv(physx.PxVec3* v) {
            physx.PxVec3 RetRef;

            physx.PxVec3* pvk_in_v = v;
            fixed (PxQuat* pvk_in_this = &this){
              PxVec3_const_PxQuat_rotateInvPtr_PxVec3_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }

        public static physx.PxQuat* OpEqual(physx.PxQuat lhs, physx.PxQuat p) {
            return OpEqual(lhs, (physx.PxQuat*)&p);
        }

        public static physx.PxQuat* OpEqual(physx.PxQuat lhs, physx.PxQuat.Ref p) {
            return OpEqual(lhs, (physx.PxQuat*)(*((IntPtr*)(&p))));
        }

        public static physx.PxQuat* OpEqual(physx.PxQuat lhs, physx.PxQuat* p) {
            physx.PxQuat* pvk_in_lhs = &lhs;
            physx.PxQuat* pvk_in_p = p;
            return PxQuat_PxQuat_operator_Ptr_Equal_PxQuat_(pvk_in_lhs, pvk_in_p);
        }

        public static physx.PxQuat* OpStarEqual(physx.PxQuat lhs, physx.PxQuat q) {
            return OpStarEqual(lhs, (physx.PxQuat*)&q);
        }

        public static physx.PxQuat* OpStarEqual(physx.PxQuat lhs, physx.PxQuat.Ref q) {
            return OpStarEqual(lhs, (physx.PxQuat*)(*((IntPtr*)(&q))));
        }

        public static physx.PxQuat* OpStarEqual(physx.PxQuat lhs, physx.PxQuat* q) {
            physx.PxQuat* pvk_in_lhs = &lhs;
            physx.PxQuat* pvk_in_q = q;
            return PxQuat_PxQuat_operator_Ptr_StarEqual_PxQuat_(pvk_in_lhs, pvk_in_q);
        }

        public static physx.PxQuat* OpPlusEqual(physx.PxQuat lhs, physx.PxQuat q) {
            return OpPlusEqual(lhs, (physx.PxQuat*)&q);
        }

        public static physx.PxQuat* OpPlusEqual(physx.PxQuat lhs, physx.PxQuat.Ref q) {
            return OpPlusEqual(lhs, (physx.PxQuat*)(*((IntPtr*)(&q))));
        }

        public static physx.PxQuat* OpPlusEqual(physx.PxQuat lhs, physx.PxQuat* q) {
            physx.PxQuat* pvk_in_lhs = &lhs;
            physx.PxQuat* pvk_in_q = q;
            return PxQuat_PxQuat_operator_Ptr_PlusEqual_PxQuat_(pvk_in_lhs, pvk_in_q);
        }

        public static physx.PxQuat* OpMinusEqual(physx.PxQuat lhs, physx.PxQuat q) {
            return OpMinusEqual(lhs, (physx.PxQuat*)&q);
        }

        public static physx.PxQuat* OpMinusEqual(physx.PxQuat lhs, physx.PxQuat.Ref q) {
            return OpMinusEqual(lhs, (physx.PxQuat*)(*((IntPtr*)(&q))));
        }

        public static physx.PxQuat* OpMinusEqual(physx.PxQuat lhs, physx.PxQuat* q) {
            physx.PxQuat* pvk_in_lhs = &lhs;
            physx.PxQuat* pvk_in_q = q;
            return PxQuat_PxQuat_operator_Ptr_MinusEqual_PxQuat_(pvk_in_lhs, pvk_in_q);
        }

        public static physx.PxQuat* OpStarEqual(physx.PxQuat lhs, float s) {
            physx.PxQuat* pvk_in_lhs = &lhs;
            float pvk_in_s = s;
            return PxQuat_PxQuat_operator_Ptr_StarEqual_floatC(pvk_in_lhs, pvk_in_s);
        }

        public static physx.PxQuat OpMultiply(physx.PxQuat lhs, physx.PxQuat q) {
            return OpMultiply(lhs, (physx.PxQuat*)&q);
        }

        public static physx.PxQuat OpMultiply(physx.PxQuat lhs, physx.PxQuat.Ref q) {
            return OpMultiply(lhs, (physx.PxQuat*)(*((IntPtr*)(&q))));
        }

        public static physx.PxQuat OpMultiply(physx.PxQuat lhs, physx.PxQuat* q) {
            physx.PxQuat RetRef;
            physx.PxQuat* pvk_in_lhs = &lhs;
            physx.PxQuat* pvk_in_q = q;
            PxQuat_const_PxQuat_operator_Ptr_Star_PxQuat_(&RetRef, pvk_in_lhs, pvk_in_q);
            return RetRef;
        }

        public static physx.PxQuat OpPlus(physx.PxQuat lhs, physx.PxQuat q) {
            return OpPlus(lhs, (physx.PxQuat*)&q);
        }

        public static physx.PxQuat OpPlus(physx.PxQuat lhs, physx.PxQuat.Ref q) {
            return OpPlus(lhs, (physx.PxQuat*)(*((IntPtr*)(&q))));
        }

        public static physx.PxQuat OpPlus(physx.PxQuat lhs, physx.PxQuat* q) {
            physx.PxQuat RetRef;
            physx.PxQuat* pvk_in_lhs = &lhs;
            physx.PxQuat* pvk_in_q = q;
            PxQuat_const_PxQuat_operator_Ptr_Plus_PxQuat_(&RetRef, pvk_in_lhs, pvk_in_q);
            return RetRef;
        }

        public static physx.PxQuat OpMinus(physx.PxQuat lhs) {
            physx.PxQuat RetRef;
            physx.PxQuat* pvk_in_lhs = &lhs;
            PxQuat_const_PxQuat_operator_Ptr_Minus(&RetRef, pvk_in_lhs);
            return RetRef;
        }

        public static physx.PxQuat OpMinus(physx.PxQuat lhs, physx.PxQuat q) {
            return OpMinus(lhs, (physx.PxQuat*)&q);
        }

        public static physx.PxQuat OpMinus(physx.PxQuat lhs, physx.PxQuat.Ref q) {
            return OpMinus(lhs, (physx.PxQuat*)(*((IntPtr*)(&q))));
        }

        public static physx.PxQuat OpMinus(physx.PxQuat lhs, physx.PxQuat* q) {
            physx.PxQuat RetRef;
            physx.PxQuat* pvk_in_lhs = &lhs;
            physx.PxQuat* pvk_in_q = q;
            PxQuat_const_PxQuat_operator_Ptr_Minus_PxQuat_(&RetRef, pvk_in_lhs, pvk_in_q);
            return RetRef;
        }

        public static physx.PxQuat OpMultiply(physx.PxQuat lhs, float r) {
            physx.PxQuat RetRef;
            physx.PxQuat* pvk_in_lhs = &lhs;
            float pvk_in_r = r;
            PxQuat_const_PxQuat_operator_Ptr_Star_float_(&RetRef, pvk_in_lhs, pvk_in_r);
            return RetRef;
        }

        public struct Ref {
            private IntPtr nativePtr_;
            public static implicit operator Ref(in physx.PxQuat obj)
            {fixed (void* f = &obj) return new Ref {nativePtr_ = (IntPtr)f};}
        }
        public static bool operator==(physx.PxQuat lhs, physx.PxQuat q) {
            return physx.PxQuat.OpEquals(lhs, (physx.PxQuat*)&q);
        }
        public static bool operator!=(physx.PxQuat lhs, physx.PxQuat q) {
            return !(physx.PxQuat.OpEquals(lhs, (physx.PxQuat*)&q)); // Matching Operator
        }
        public static bool operator==(physx.PxQuat lhs, physx.PxQuat.Ref q) {
            return physx.PxQuat.OpEquals(lhs, (physx.PxQuat*)(*((IntPtr*)(&q))));
        }
        public static bool operator!=(physx.PxQuat lhs, physx.PxQuat.Ref q) {
            return !(physx.PxQuat.OpEquals(lhs, (physx.PxQuat*)(*((IntPtr*)(&q))))); // Matching Operator
        }
        public static bool operator==(physx.PxQuat lhs, physx.PxQuat* q) {
            return physx.PxQuat.OpEquals(lhs, q);
        }
        public static bool operator!=(physx.PxQuat lhs, physx.PxQuat* q) {
            return !(physx.PxQuat.OpEquals(lhs, q)); // Matching Operator
        }
        public static physx.PxQuat operator*(physx.PxQuat lhs, physx.PxQuat q) {
            return physx.PxQuat.OpMultiply(lhs, (physx.PxQuat*)&q);
        }
        public static physx.PxQuat operator*(physx.PxQuat lhs, physx.PxQuat.Ref q) {
            return physx.PxQuat.OpMultiply(lhs, (physx.PxQuat*)(*((IntPtr*)(&q))));
        }
        public static physx.PxQuat operator*(physx.PxQuat lhs, physx.PxQuat* q) {
            return physx.PxQuat.OpMultiply(lhs, q);
        }
        public static physx.PxQuat operator+(physx.PxQuat lhs, physx.PxQuat q) {
            return physx.PxQuat.OpPlus(lhs, (physx.PxQuat*)&q);
        }
        public static physx.PxQuat operator+(physx.PxQuat lhs, physx.PxQuat.Ref q) {
            return physx.PxQuat.OpPlus(lhs, (physx.PxQuat*)(*((IntPtr*)(&q))));
        }
        public static physx.PxQuat operator+(physx.PxQuat lhs, physx.PxQuat* q) {
            return physx.PxQuat.OpPlus(lhs, q);
        }
        public static physx.PxQuat operator-(physx.PxQuat lhs) {
            return physx.PxQuat.OpMinus(lhs);
        }
        public static physx.PxQuat operator-(physx.PxQuat lhs, physx.PxQuat q) {
            return physx.PxQuat.OpMinus(lhs, (physx.PxQuat*)&q);
        }
        public static physx.PxQuat operator-(physx.PxQuat lhs, physx.PxQuat.Ref q) {
            return physx.PxQuat.OpMinus(lhs, (physx.PxQuat*)(*((IntPtr*)(&q))));
        }
        public static physx.PxQuat operator-(physx.PxQuat lhs, physx.PxQuat* q) {
            return physx.PxQuat.OpMinus(lhs, q);
        }
        public static physx.PxQuat operator*(physx.PxQuat lhs, float r) {
            return physx.PxQuat.OpMultiply(lhs, r);
        }
    }
}
