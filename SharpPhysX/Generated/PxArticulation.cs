// Generated by minBND 5.1.78.26 - Â© github.com/Alan-FGR
//DEBUG: UnitNode  - 0
//Unit PxArticulation
using System;
using System.Runtime.InteropServices;

//DEBUG: NamespaceNode physx - 40-277
public static unsafe partial class physx {
    //DEBUG: ClassNode physx::PxArticulationDriveCache - 53-57
    //Interface use count: 0
    //ERRORS OCCURED IN physx::PxArticulationDriveCache
    //Type PxArticulationDriveCache forbidden by user configuration
    
    //DEBUG: ClassNode physx::PxArticulation - 76-270
    //Bases: PxArticulationBasePtr|PxBasePtr
    //Interface use count: 0
    public unsafe partial struct PxArticulationPtr : physx.PxArticulationBasePtr.IPxArticulationBasePtr, physx.PxBasePtr.IPxBasePtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: MethodNode physx::PxArticulation::release - 80
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulation_release(physx.PxArticulationPtr pvk_this);
        
        public void release() {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxArticulationPtr, man: physx.PxArticulationPtr, stg: PtrStruct
            physx.PxArticulationPtr pvk_in_this = this;
            void_physx_PxArticulation_release(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxArticulation::setMaxProjectionIterations - 94
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulation_setMaxProjectionIterations_uint_(physx.PxArticulationPtr pvk_this, uint pvk_iterations);
        
        public void setMaxProjectionIterations(uint iterations) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxArticulationPtr, man: physx.PxArticulationPtr, stg: PtrStruct
            physx.PxArticulationPtr pvk_in_this = this;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_iterations = iterations;
            void_physx_PxArticulation_setMaxProjectionIterations_uint_(pvk_in_this, pvk_in_iterations);
        }
        
        //DEBUG: MethodNode physx::PxArticulation::getMaxProjectionIterations - 104
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxArticulation_getMaxProjectionIterations(physx.PxArticulationPtr pvk_this);
        
        public uint getMaxProjectionIterations() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxArticulationPtr, man: physx.PxArticulationPtr, stg: PtrStruct
            physx.PxArticulationPtr pvk_in_this = this;
            return uint_const_physx_PxArticulation_getMaxProjectionIterations(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxArticulation::setSeparationTolerance - 117
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulation_setSeparationTolerance_float_(physx.PxArticulationPtr pvk_this, float pvk_tolerance);
        
        public void setSeparationTolerance(float tolerance) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxArticulationPtr, man: physx.PxArticulationPtr, stg: PtrStruct
            physx.PxArticulationPtr pvk_in_this = this;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_tolerance = tolerance;
            void_physx_PxArticulation_setSeparationTolerance_float_(pvk_in_this, pvk_in_tolerance);
        }
        
        //DEBUG: MethodNode physx::PxArticulation::getSeparationTolerance - 127
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxArticulation_getSeparationTolerance(physx.PxArticulationPtr pvk_this);
        
        public float getSeparationTolerance() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: PxArticulationPtr, man: physx.PxArticulationPtr, stg: PtrStruct
            physx.PxArticulationPtr pvk_in_this = this;
            return float_const_physx_PxArticulation_getSeparationTolerance(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxArticulation::setInternalDriveIterations - 142
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulation_setInternalDriveIterations_uint_(physx.PxArticulationPtr pvk_this, uint pvk_iterations);
        
        public void setInternalDriveIterations(uint iterations) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxArticulationPtr, man: physx.PxArticulationPtr, stg: PtrStruct
            physx.PxArticulationPtr pvk_in_this = this;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_iterations = iterations;
            void_physx_PxArticulation_setInternalDriveIterations_uint_(pvk_in_this, pvk_in_iterations);
        }
        
        //DEBUG: MethodNode physx::PxArticulation::getInternalDriveIterations - 152
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxArticulation_getInternalDriveIterations(physx.PxArticulationPtr pvk_this);
        
        public uint getInternalDriveIterations() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxArticulationPtr, man: physx.PxArticulationPtr, stg: PtrStruct
            physx.PxArticulationPtr pvk_in_this = this;
            return uint_const_physx_PxArticulation_getInternalDriveIterations(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxArticulation::setExternalDriveIterations - 168
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulation_setExternalDriveIterations_uint_(physx.PxArticulationPtr pvk_this, uint pvk_iterations);
        
        public void setExternalDriveIterations(uint iterations) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxArticulationPtr, man: physx.PxArticulationPtr, stg: PtrStruct
            physx.PxArticulationPtr pvk_in_this = this;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_iterations = iterations;
            void_physx_PxArticulation_setExternalDriveIterations_uint_(pvk_in_this, pvk_in_iterations);
        }
        
        //DEBUG: MethodNode physx::PxArticulation::getExternalDriveIterations - 178
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxArticulation_getExternalDriveIterations(physx.PxArticulationPtr pvk_this);
        
        public uint getExternalDriveIterations() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxArticulationPtr, man: physx.PxArticulationPtr, stg: PtrStruct
            physx.PxArticulationPtr pvk_in_this = this;
            return uint_const_physx_PxArticulation_getExternalDriveIterations(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxArticulation::createDriveCache - 194-195
        //ERRORS OCCURED IN physx::PxArticulation::createDriveCache
        ////Type PxArticulationDriveCachePtr explicitly forbidden by user configuration
        
        //DEBUG: MethodNode physx::PxArticulation::updateDriveCache - 210-212
        //ERRORS OCCURED IN physx::PxArticulation::updateDriveCache
        //////Type PxArticulationDriveCachePtr explicitly forbidden by user configuration
        
        //DEBUG: MethodNode physx::PxArticulation::releaseDriveCache - 221
        //ERRORS OCCURED IN physx::PxArticulation::releaseDriveCache
        //////Type PxArticulationDriveCachePtr explicitly forbidden by user configuration
        
        //DEBUG: MethodNode physx::PxArticulation::applyImpulse - 236-239
        //ERRORS OCCURED IN physx::PxArticulation::applyImpulse
        //////Type PxArticulationDriveCachePtr explicitly forbidden by user configuration
        
        //DEBUG: MethodNode physx::PxArticulation::computeImpulseResponse - 258-263
        //ERRORS OCCURED IN physx::PxArticulation::computeImpulseResponse
        //////Type PxArticulationDriveCachePtr explicitly forbidden by user configuration
        
        //DEBUG: MethodNode physx::PxArticulation::operator= - 76
        //ERRORS OCCURED IN physx::PxArticulation::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        public static implicit operator physx.PxArticulationBasePtr(PxArticulationPtr obj) => *(physx.PxArticulationBasePtr*)&obj;
        public static explicit operator PxArticulationPtr(physx.PxArticulationBasePtr obj) => *(PxArticulationPtr*)&obj;
        public static implicit operator physx.PxBasePtr(PxArticulationPtr obj) => *(physx.PxBasePtr*)&obj;
        public static explicit operator PxArticulationPtr(physx.PxBasePtr obj) => *(PxArticulationPtr*)&obj;
    
        // PIPING
        public physx.PxScenePtr getScene(){return((physx.PxArticulationBasePtr)this).getScene();}
        public void setSolverIterationCounts(uint minPositionIters, uint minVelocityIters=1){((physx.PxArticulationBasePtr)this).setSolverIterationCounts(minPositionIters, minVelocityIters);}
        public void getSolverIterationCounts(uint* minPositionIters, uint* minVelocityIters){((physx.PxArticulationBasePtr)this).getSolverIterationCounts(minPositionIters, minVelocityIters);}
        public bool isSleeping(){return((physx.PxArticulationBasePtr)this).isSleeping();}
        public void setSleepThreshold(float threshold){((physx.PxArticulationBasePtr)this).setSleepThreshold(threshold);}
        public float getSleepThreshold(){return((physx.PxArticulationBasePtr)this).getSleepThreshold();}
        public void setStabilizationThreshold(float threshold){((physx.PxArticulationBasePtr)this).setStabilizationThreshold(threshold);}
        public float getStabilizationThreshold(){return((physx.PxArticulationBasePtr)this).getStabilizationThreshold();}
        public void setWakeCounter(float wakeCounterValue){((physx.PxArticulationBasePtr)this).setWakeCounter(wakeCounterValue);}
        public float getWakeCounter(){return((physx.PxArticulationBasePtr)this).getWakeCounter();}
        public void wakeUp(){((physx.PxArticulationBasePtr)this).wakeUp();}
        public void putToSleep(){((physx.PxArticulationBasePtr)this).putToSleep();}
        public physx.PxArticulationLinkPtr createLink(physx.PxArticulationLinkPtr parent, physx.PxTransform* pose){return((physx.PxArticulationBasePtr)this).createLink(parent, pose);}
        public uint getNbLinks(){return((physx.PxArticulationBasePtr)this).getNbLinks();}
        public uint getLinks(physx.PxArticulationLinkPtr* userBuffer, uint bufferSize, uint startIndex=0){return((physx.PxArticulationBasePtr)this).getLinks(userBuffer, bufferSize, startIndex);}
        public void setName(string name){((physx.PxArticulationBasePtr)this).setName(name);}
        public string getName(){return((physx.PxArticulationBasePtr)this).getName();}
        public physx.PxBounds3 getWorldBounds(float inflation=1.01f){return((physx.PxArticulationBasePtr)this).getWorldBounds(inflation);}
        public physx.PxAggregatePtr getAggregate(){return((physx.PxArticulationBasePtr)this).getAggregate();}
        ////Type PxArticulationImplPtr explicitly forbidden by user configuration
        ////Type PxArticulationImplPtr explicitly forbidden by user configuration
        public physx.PxArticulationBasePtr.Enum getType(){return((physx.PxArticulationBasePtr)this).getType();}
        public physx.PxArticulationJointBasePtr createArticulationJoint(physx.PxArticulationLinkPtr parent, physx.PxTransform* parentFrame, physx.PxArticulationLinkPtr child, physx.PxTransform* childFrame){return((physx.PxArticulationBasePtr)this).createArticulationJoint(parent, parentFrame, child, childFrame);}
        public void releaseArticulationJoint(physx.PxArticulationJointBasePtr joint){((physx.PxArticulationBasePtr)this).releaseArticulationJoint(joint);}
        public string getConcreteTypeName(){return((physx.PxBasePtr)this).getConcreteTypeName();}
        ////################################################################## FIXME
        //Unparsed type ( TODO ): T*
        ////################################################################## FIXME
        //Unparsed type ( TODO ): T*
        public ushort getConcreteType(){return((physx.PxBasePtr)this).getConcreteType();}
        public void setBaseFlag(physx.PxBaseFlagEnum flag, bool value){((physx.PxBasePtr)this).setBaseFlag(flag, value);}
        public void setBaseFlags(PxBaseFlagsPtr inFlags){((physx.PxBasePtr)this).setBaseFlags(inFlags);}
        public PxBaseFlagsPtr getBaseFlags_New(){return((physx.PxBasePtr)this).getBaseFlags_New();}
        public bool isReleasable(){return((physx.PxBasePtr)this).isReleasable();}
    }
    
}
