// Generated by minBND 5.1.90.51 - Â© github.com/Alan-FGR
using System;
using System.Runtime.InteropServices;
using static minBND_pinvokes;

public static unsafe partial class physx {

    //DBG: FunctionNode physx::operator* L337-340
    //Value Converter OpMultiply
    //physx::operator* static physx.PxVec2 OpMultiply(float f, physx.PxVec2 v) will also be bound as member operator
    //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
    //PAR nat: float, man: float, kind: Value
    //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
    public static physx.PxVec2 OpMultiply(float f, physx.PxVec2 v) {
        return OpMultiply(f, (physx.PxVec2*)&v);
    }

    //DBG: FunctionNode physx::operator* L337-340
    //Value Converter OpMultiply
    //physx::operator* static physx.PxVec2 OpMultiply(float f, physx.PxVec2.Ref v) will also be bound as member operator
    //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
    //PAR nat: float, man: float, kind: Value
    //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
    public static physx.PxVec2 OpMultiply(float f, physx.PxVec2.Ref v) {
        return OpMultiply(f, (physx.PxVec2*)(*((IntPtr*)(&v))));
    }

    //DBG: FunctionNode physx::operator* L337-340
    //physx::operator* static physx.PxVec2 OpMultiply(float f, physx.PxVec2* v) will also be bound as member operator
    //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
    //PAR nat: float, man: float, kind: Value
    //PAR nat: physx::PxVec2*, man: physx.PxVec2*, kind: Value
    public static physx.PxVec2 OpMultiply(float f, physx.PxVec2* v) {
        physx.PxVec2 RetRef;
        float pvk_in_f = f;
        physx.PxVec2* pvk_in_v = v;
        PxVec2_operator_Ptr_Star_float_PxVec2_(&RetRef, pvk_in_f, pvk_in_v);
        return RetRef;
    }
    //Subclasses using this: 0

    [StructLayout(LayoutKind.Sequential, Size = 8)]
    public unsafe partial struct PxVec2 {
        public float x;
        public float y;

        //DBG: ClassNode PxVec2 physx::PxVec2 L49-335

        //DBG: DefaultValueCtorNode physx::PxVec2::PxVec2 L55-57
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        public static physx.PxVec2 Default() {
            physx.PxVec2 RetRef;
            Default_PxVec2_(&RetRef);
            return RetRef;
        }

        //DBG: BlittableCtorNode physx::PxVec2::PxVec2 L62-65
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxZERO, man: physx.PxZERO, kind: Value
        public PxVec2(physx.PxZERO r) {

            physx.PxZERO pvk_in_r = r;
            PxVec2 toInit;
            var pvk_in_this = &toInit;
            void_PxVec2_PxVec2Ptr_Ctor_PxZERO_(pvk_in_this, pvk_in_r);
            this = toInit;
        }

        //DBG: BlittableCtorNode physx::PxVec2::PxVec2 L74-76
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public PxVec2(float a) {

            float pvk_in_a = a;
            PxVec2 toInit;
            var pvk_in_this = &toInit;
            void_PxVec2_PxVec2Ptr_Ctor_float_(pvk_in_this, pvk_in_a);
            this = toInit;
        }

        //DBG: BlittableCtorNode physx::PxVec2::PxVec2 L84-86
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        //PAR nat: float, man: float, kind: Value
        public PxVec2(float nx, float ny) {

            float pvk_in_nx = nx;
            float pvk_in_ny = ny;
            PxVec2 toInit;
            var pvk_in_this = &toInit;
            void_PxVec2_PxVec2Ptr_Ctor_float_float_(pvk_in_this, pvk_in_nx, pvk_in_ny);
            this = toInit;
        }

        //DBG: BlittableCtorNode physx::PxVec2::PxVec2 L91-93
        //Value Converter PxVec2
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public PxVec2(physx.PxVec2 v) : this((physx.PxVec2*)&v) {
            //ctor piping;
        }

        //DBG: BlittableCtorNode physx::PxVec2::PxVec2 L91-93
        //Value Converter PxVec2
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public PxVec2(physx.PxVec2.Ref v) : this((physx.PxVec2*)(*((IntPtr*)(&v)))) {
            //ctor piping;
        }

        //DBG: BlittableCtorNode physx::PxVec2::PxVec2 L91-93
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2*, man: physx.PxVec2*, kind: Value
        public PxVec2(physx.PxVec2* v) {

            physx.PxVec2* pvk_in_v = v;
            PxVec2 toInit;
            var pvk_in_this = &toInit;
            void_PxVec2_PxVec2Ptr_Ctor_PxVec2_(pvk_in_this, pvk_in_v);
            this = toInit;
        }

        //DBG: MethodNode physx::PxVec2::operator= L100-105
        //Value Converter OpEqual
        //RET nat: physx::PxVec2*, man: physx.PxVec2*, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static physx.PxVec2* OpEqual(physx.PxVec2 lhs, physx.PxVec2 p) {
            return OpEqual(lhs, (physx.PxVec2*)&p);
        }

        //DBG: MethodNode physx::PxVec2::operator= L100-105
        //Value Converter OpEqual
        //RET nat: physx::PxVec2*, man: physx.PxVec2*, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static physx.PxVec2* OpEqual(physx.PxVec2 lhs, physx.PxVec2.Ref p) {
            return OpEqual(lhs, (physx.PxVec2*)(*((IntPtr*)(&p))));
        }

        //DBG: MethodNode physx::PxVec2::operator= L100-105
        //RET nat: physx::PxVec2*, man: physx.PxVec2*, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2*, man: physx.PxVec2*, kind: Value
        public static physx.PxVec2* OpEqual(physx.PxVec2 lhs, physx.PxVec2* p) {
            physx.PxVec2* pvk_in_lhs = &lhs;
            physx.PxVec2* pvk_in_p = p;
            return PxVec2_PxVec2_operator_Ptr_Equal_PxVec2_(pvk_in_lhs, pvk_in_p);
        }

        //DBG: MethodNode physx::PxVec2::operator[] L110-115
        //RET nat: float*, man: float*, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: int, man: int, kind: Value
        public static float* OpSubscript(physx.PxVec2 lhs, int index) {
            physx.PxVec2* pvk_in_lhs = &lhs;
            int pvk_in_index = index;
            return float_PxVec2_operator_Ptr_Subscript_int_(pvk_in_lhs, pvk_in_index);
        }

        //DBG: MethodNode physx::PxVec2::operator[] L120-125
        //RET nat: float*, man: float*, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: int, man: int, kind: Value
        public static float* OpSubscriptConst(physx.PxVec2 lhs, int index) {
            physx.PxVec2* pvk_in_lhs = &lhs;
            int pvk_in_index = index;
            return float_const_PxVec2_operator_Ptr_Subscript_int_(pvk_in_lhs, pvk_in_index);
        }

        //DBG: MethodNode physx::PxVec2::operator== L130-133
        //Value Converter OpEquals
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static bool OpEquals(physx.PxVec2 lhs, physx.PxVec2 v) {
            return OpEquals(lhs, (physx.PxVec2*)&v);
        }

        //DBG: MethodNode physx::PxVec2::operator== L130-133
        //Value Converter OpEquals
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static bool OpEquals(physx.PxVec2 lhs, physx.PxVec2.Ref v) {
            return OpEquals(lhs, (physx.PxVec2*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec2::operator== L130-133
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2*, man: physx.PxVec2*, kind: Value
        public static bool OpEquals(physx.PxVec2 lhs, physx.PxVec2* v) {
            physx.PxVec2* pvk_in_lhs = &lhs;
            physx.PxVec2* pvk_in_v = v;
            return bool_const_PxVec2_operator_Ptr_EqualEqual_PxVec2_(pvk_in_lhs, pvk_in_v);
        }

        //DBG: MethodNode physx::PxVec2::operator!= L138-141
        //Value Converter OpExclaimEqual
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static bool OpExclaimEqual(physx.PxVec2 lhs, physx.PxVec2 v) {
            return OpExclaimEqual(lhs, (physx.PxVec2*)&v);
        }

        //DBG: MethodNode physx::PxVec2::operator!= L138-141
        //Value Converter OpExclaimEqual
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static bool OpExclaimEqual(physx.PxVec2 lhs, physx.PxVec2.Ref v) {
            return OpExclaimEqual(lhs, (physx.PxVec2*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec2::operator!= L138-141
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2*, man: physx.PxVec2*, kind: Value
        public static bool OpExclaimEqual(physx.PxVec2 lhs, physx.PxVec2* v) {
            physx.PxVec2* pvk_in_lhs = &lhs;
            physx.PxVec2* pvk_in_v = v;
            return bool_const_PxVec2_operator_Ptr_ExclaimEqual_PxVec2_(pvk_in_lhs, pvk_in_v);
        }

        //DBG: MethodNode physx::PxVec2::isZero L146-149
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public bool isZero() {

            fixed (PxVec2* pvk_in_this = &this){
              return bool_const_PxVec2_isZeroPtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec2::isFinite L154-157
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public bool isFinite() {

            fixed (PxVec2* pvk_in_this = &this){
              return bool_const_PxVec2_isFinitePtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec2::isNormalized L162-166
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public bool isNormalized() {

            fixed (PxVec2* pvk_in_this = &this){
              return bool_const_PxVec2_isNormalizedPtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec2::magnitudeSquared L173-176
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public float magnitudeSquared() {

            fixed (PxVec2* pvk_in_this = &this){
              return float_const_PxVec2_magnitudeSquaredPtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec2::magnitude L181-184
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public float magnitude() {

            fixed (PxVec2* pvk_in_this = &this){
              return float_const_PxVec2_magnitudePtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec2::operator- L189-192
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static physx.PxVec2 OpMinus(physx.PxVec2 lhs) {
            physx.PxVec2 RetRef;
            physx.PxVec2* pvk_in_lhs = &lhs;
            PxVec2_const_PxVec2_operator_Ptr_Minus(&RetRef, pvk_in_lhs);
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec2::operator+ L197-200
        //Value Converter OpPlus
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static physx.PxVec2 OpPlus(physx.PxVec2 lhs, physx.PxVec2 v) {
            return OpPlus(lhs, (physx.PxVec2*)&v);
        }

        //DBG: MethodNode physx::PxVec2::operator+ L197-200
        //Value Converter OpPlus
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static physx.PxVec2 OpPlus(physx.PxVec2 lhs, physx.PxVec2.Ref v) {
            return OpPlus(lhs, (physx.PxVec2*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec2::operator+ L197-200
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2*, man: physx.PxVec2*, kind: Value
        public static physx.PxVec2 OpPlus(physx.PxVec2 lhs, physx.PxVec2* v) {
            physx.PxVec2 RetRef;
            physx.PxVec2* pvk_in_lhs = &lhs;
            physx.PxVec2* pvk_in_v = v;
            PxVec2_const_PxVec2_operator_Ptr_Plus_PxVec2_(&RetRef, pvk_in_lhs, pvk_in_v);
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec2::operator- L205-208
        //Value Converter OpMinus
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static physx.PxVec2 OpMinus(physx.PxVec2 lhs, physx.PxVec2 v) {
            return OpMinus(lhs, (physx.PxVec2*)&v);
        }

        //DBG: MethodNode physx::PxVec2::operator- L205-208
        //Value Converter OpMinus
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static physx.PxVec2 OpMinus(physx.PxVec2 lhs, physx.PxVec2.Ref v) {
            return OpMinus(lhs, (physx.PxVec2*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec2::operator- L205-208
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2*, man: physx.PxVec2*, kind: Value
        public static physx.PxVec2 OpMinus(physx.PxVec2 lhs, physx.PxVec2* v) {
            physx.PxVec2 RetRef;
            physx.PxVec2* pvk_in_lhs = &lhs;
            physx.PxVec2* pvk_in_v = v;
            PxVec2_const_PxVec2_operator_Ptr_Minus_PxVec2_(&RetRef, pvk_in_lhs, pvk_in_v);
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec2::operator* L213-216
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public static physx.PxVec2 OpMultiply(physx.PxVec2 lhs, float f) {
            physx.PxVec2 RetRef;
            physx.PxVec2* pvk_in_lhs = &lhs;
            float pvk_in_f = f;
            PxVec2_const_PxVec2_operator_Ptr_Star_float_(&RetRef, pvk_in_lhs, pvk_in_f);
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec2::operator/ L221-225
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public static physx.PxVec2 OpSlash(physx.PxVec2 lhs, float f) {
            physx.PxVec2 RetRef;
            physx.PxVec2* pvk_in_lhs = &lhs;
            float pvk_in_f = f;
            PxVec2_const_PxVec2_operator_Ptr_Slash_float_(&RetRef, pvk_in_lhs, pvk_in_f);
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec2::operator+= L230-235
        //Value Converter OpPlusEqual
        //RET nat: physx::PxVec2*, man: physx.PxVec2*, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static physx.PxVec2* OpPlusEqual(physx.PxVec2 lhs, physx.PxVec2 v) {
            return OpPlusEqual(lhs, (physx.PxVec2*)&v);
        }

        //DBG: MethodNode physx::PxVec2::operator+= L230-235
        //Value Converter OpPlusEqual
        //RET nat: physx::PxVec2*, man: physx.PxVec2*, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static physx.PxVec2* OpPlusEqual(physx.PxVec2 lhs, physx.PxVec2.Ref v) {
            return OpPlusEqual(lhs, (physx.PxVec2*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec2::operator+= L230-235
        //RET nat: physx::PxVec2*, man: physx.PxVec2*, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2*, man: physx.PxVec2*, kind: Value
        public static physx.PxVec2* OpPlusEqual(physx.PxVec2 lhs, physx.PxVec2* v) {
            physx.PxVec2* pvk_in_lhs = &lhs;
            physx.PxVec2* pvk_in_v = v;
            return PxVec2_PxVec2_operator_Ptr_PlusEqual_PxVec2_(pvk_in_lhs, pvk_in_v);
        }

        //DBG: MethodNode physx::PxVec2::operator-= L240-245
        //Value Converter OpMinusEqual
        //RET nat: physx::PxVec2*, man: physx.PxVec2*, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static physx.PxVec2* OpMinusEqual(physx.PxVec2 lhs, physx.PxVec2 v) {
            return OpMinusEqual(lhs, (physx.PxVec2*)&v);
        }

        //DBG: MethodNode physx::PxVec2::operator-= L240-245
        //Value Converter OpMinusEqual
        //RET nat: physx::PxVec2*, man: physx.PxVec2*, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public static physx.PxVec2* OpMinusEqual(physx.PxVec2 lhs, physx.PxVec2.Ref v) {
            return OpMinusEqual(lhs, (physx.PxVec2*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec2::operator-= L240-245
        //RET nat: physx::PxVec2*, man: physx.PxVec2*, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2*, man: physx.PxVec2*, kind: Value
        public static physx.PxVec2* OpMinusEqual(physx.PxVec2 lhs, physx.PxVec2* v) {
            physx.PxVec2* pvk_in_lhs = &lhs;
            physx.PxVec2* pvk_in_v = v;
            return PxVec2_PxVec2_operator_Ptr_MinusEqual_PxVec2_(pvk_in_lhs, pvk_in_v);
        }

        //DBG: MethodNode physx::PxVec2::operator*= L250-255
        //RET nat: physx::PxVec2*, man: physx.PxVec2*, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public static physx.PxVec2* OpStarEqual(physx.PxVec2 lhs, float f) {
            physx.PxVec2* pvk_in_lhs = &lhs;
            float pvk_in_f = f;
            return PxVec2_PxVec2_operator_Ptr_StarEqual_float_(pvk_in_lhs, pvk_in_f);
        }

        //DBG: MethodNode physx::PxVec2::operator/= L259-265
        //RET nat: physx::PxVec2*, man: physx.PxVec2*, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public static physx.PxVec2* OpSlashEqual(physx.PxVec2 lhs, float f) {
            physx.PxVec2* pvk_in_lhs = &lhs;
            float pvk_in_f = f;
            return PxVec2_PxVec2_operator_Ptr_SlashEqual_float_(pvk_in_lhs, pvk_in_f);
        }

        //DBG: MethodNode physx::PxVec2::dot L270-273
        //Value Converter dot
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public float dot(physx.PxVec2 v) {
            return dot((physx.PxVec2*)&v);
        }

        //DBG: MethodNode physx::PxVec2::dot L270-273
        //Value Converter dot
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public float dot(physx.PxVec2.Ref v) {
            return dot((physx.PxVec2*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec2::dot L270-273
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2*, man: physx.PxVec2*, kind: Value
        public float dot(physx.PxVec2* v) {

            physx.PxVec2* pvk_in_v = v;
            fixed (PxVec2* pvk_in_this = &this){
              return float_const_PxVec2_dotPtr_PxVec2_(pvk_in_this, pvk_in_v);
            }
        }

        //DBG: MethodNode physx::PxVec2::getNormalized L277-281
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public physx.PxVec2 getNormalized() {
            physx.PxVec2 RetRef;

            fixed (PxVec2* pvk_in_this = &this){
              PxVec2_const_PxVec2_getNormalizedPtr(&RetRef, pvk_in_this);
            }
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec2::normalize L286-292
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public float normalize() {

            fixed (PxVec2* pvk_in_this = &this){
              return float_PxVec2_normalizePtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec2::multiply L297-300
        //Value Converter multiply
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public physx.PxVec2 multiply(physx.PxVec2 a) {
            return multiply((physx.PxVec2*)&a);
        }

        //DBG: MethodNode physx::PxVec2::multiply L297-300
        //Value Converter multiply
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public physx.PxVec2 multiply(physx.PxVec2.Ref a) {
            return multiply((physx.PxVec2*)(*((IntPtr*)(&a))));
        }

        //DBG: MethodNode physx::PxVec2::multiply L297-300
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2*, man: physx.PxVec2*, kind: Value
        public physx.PxVec2 multiply(physx.PxVec2* a) {
            physx.PxVec2 RetRef;

            physx.PxVec2* pvk_in_a = a;
            fixed (PxVec2* pvk_in_this = &this){
              PxVec2_const_PxVec2_multiplyPtr_PxVec2_(&RetRef, pvk_in_this, pvk_in_a);
            }
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec2::minimum L305-308
        //Value Converter minimum
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public physx.PxVec2 minimum(physx.PxVec2 v) {
            return minimum((physx.PxVec2*)&v);
        }

        //DBG: MethodNode physx::PxVec2::minimum L305-308
        //Value Converter minimum
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public physx.PxVec2 minimum(physx.PxVec2.Ref v) {
            return minimum((physx.PxVec2*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec2::minimum L305-308
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2*, man: physx.PxVec2*, kind: Value
        public physx.PxVec2 minimum(physx.PxVec2* v) {
            physx.PxVec2 RetRef;

            physx.PxVec2* pvk_in_v = v;
            fixed (PxVec2* pvk_in_this = &this){
              PxVec2_const_PxVec2_minimumPtr_PxVec2_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec2::minElement L313-316
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public float minElement() {

            fixed (PxVec2* pvk_in_this = &this){
              return float_const_PxVec2_minElementPtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec2::maximum L321-324
        //Value Converter maximum
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public physx.PxVec2 maximum(physx.PxVec2 v) {
            return maximum((physx.PxVec2*)&v);
        }

        //DBG: MethodNode physx::PxVec2::maximum L321-324
        //Value Converter maximum
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public physx.PxVec2 maximum(physx.PxVec2.Ref v) {
            return maximum((physx.PxVec2*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec2::maximum L321-324
        //RET nat: physx::PxVec2, man: physx.PxVec2, ret: False, kind: Blittable
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        //PAR nat: physx::PxVec2*, man: physx.PxVec2*, kind: Value
        public physx.PxVec2 maximum(physx.PxVec2* v) {
            physx.PxVec2 RetRef;

            physx.PxVec2* pvk_in_v = v;
            fixed (PxVec2* pvk_in_this = &this){
              PxVec2_const_PxVec2_maximumPtr_PxVec2_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec2::maxElement L329-332
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec2, man: physx.PxVec2, kind: Blittable
        public float maxElement() {

            fixed (PxVec2* pvk_in_this = &this){
              return float_const_PxVec2_maxElementPtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec2::~PxVec2 L49
        //ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxVec2::~PxVec2 L49, Destructor

        //REFERENCES
        public struct Ref {
            private IntPtr nativePtr_;
            public static implicit operator Ref(in physx.PxVec2 obj)
            {fixed (void* f = &obj) return new Ref {nativePtr_ = (IntPtr)f};}
        }

        //Operators
        public static bool operator==(physx.PxVec2 lhs, physx.PxVec2 v) {
            return physx.PxVec2.OpEquals(lhs, (physx.PxVec2*)&v);
        }
        public static bool operator==(physx.PxVec2 lhs, physx.PxVec2.Ref v) {
            return physx.PxVec2.OpEquals(lhs, (physx.PxVec2*)(*((IntPtr*)(&v))));
        }
        public static bool operator==(physx.PxVec2 lhs, physx.PxVec2* v) {
            return physx.PxVec2.OpEquals(lhs, v);
        }
        public static bool operator!=(physx.PxVec2 lhs, physx.PxVec2 v) {
            return physx.PxVec2.OpExclaimEqual(lhs, (physx.PxVec2*)&v);
        }
        public static bool operator!=(physx.PxVec2 lhs, physx.PxVec2.Ref v) {
            return physx.PxVec2.OpExclaimEqual(lhs, (physx.PxVec2*)(*((IntPtr*)(&v))));
        }
        public static bool operator!=(physx.PxVec2 lhs, physx.PxVec2* v) {
            return physx.PxVec2.OpExclaimEqual(lhs, v);
        }
        public static physx.PxVec2 operator-(physx.PxVec2 lhs) {
            return physx.PxVec2.OpMinus(lhs);
        }
        public static physx.PxVec2 operator+(physx.PxVec2 lhs, physx.PxVec2 v) {
            return physx.PxVec2.OpPlus(lhs, (physx.PxVec2*)&v);
        }
        public static physx.PxVec2 operator+(physx.PxVec2 lhs, physx.PxVec2.Ref v) {
            return physx.PxVec2.OpPlus(lhs, (physx.PxVec2*)(*((IntPtr*)(&v))));
        }
        public static physx.PxVec2 operator+(physx.PxVec2 lhs, physx.PxVec2* v) {
            return physx.PxVec2.OpPlus(lhs, v);
        }
        public static physx.PxVec2 operator-(physx.PxVec2 lhs, physx.PxVec2 v) {
            return physx.PxVec2.OpMinus(lhs, (physx.PxVec2*)&v);
        }
        public static physx.PxVec2 operator-(physx.PxVec2 lhs, physx.PxVec2.Ref v) {
            return physx.PxVec2.OpMinus(lhs, (physx.PxVec2*)(*((IntPtr*)(&v))));
        }
        public static physx.PxVec2 operator-(physx.PxVec2 lhs, physx.PxVec2* v) {
            return physx.PxVec2.OpMinus(lhs, v);
        }
        public static physx.PxVec2 operator*(physx.PxVec2 lhs, float f) {
            return physx.PxVec2.OpMultiply(lhs, f);
        }
        public static physx.PxVec2 operator/(physx.PxVec2 lhs, float f) {
            return physx.PxVec2.OpSlash(lhs, f);
        }
        public static physx.PxVec2 operator*(float f, physx.PxVec2 v) {
            return physx.OpMultiply(f, (physx.PxVec2*)&v);
        }
        //SKIPPED PARAMETER WITH CONVERSION BUT NO ENCLOSING TYPE
    }
}
