// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
//Unit PxVec2
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    // physx::operator* [static physx.PxVec2 Mult(float f, physx.PxVec2 v)] will be bound as member operator
    
    // physx::operator* [static physx.PxVec2 Mult(float f, physx.PxVec2* v)] will be bound as member operator
    
    public unsafe partial struct PxVec2 {
        public float x;
        public float y;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Default_physx_PxVec2_(physx.PxVec2* RetRef);
        
        public static physx.PxVec2 Default() {
            physx.PxVec2 RetRef;
            Default_physx_PxVec2_(&RetRef);
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec2_PxVec2_Ctor_physx_PxZERO_(physx.PxVec2* pvk_this, physx.PxZERO pvk_r);
        
        public  PxVec2(physx.PxZERO r) {
            physx.PxZERO pvk_in_r = r;
            PxVec2 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec2_PxVec2_Ctor_physx_PxZERO_(pvk_in_this, pvk_in_r);
            this = toInit;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec2_PxVec2_Ctor_float_(physx.PxVec2* pvk_this, float pvk_a);
        
        public  PxVec2(float a) {
            float pvk_in_a = a;
            PxVec2 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec2_PxVec2_Ctor_float_(pvk_in_this, pvk_in_a);
            this = toInit;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec2_PxVec2_Ctor_float_float_(physx.PxVec2* pvk_this, float pvk_nx, float pvk_ny);
        
        public  PxVec2(float nx, float ny) {
            float pvk_in_nx = nx;
            float pvk_in_ny = ny;
            PxVec2 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec2_PxVec2_Ctor_float_float_(pvk_in_this, pvk_in_nx, pvk_in_ny);
            this = toInit;
        }
        
        public  PxVec2(physx.PxVec2 v) : this(&v) {
            //ctor piping;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec2_PxVec2_Ctor_physx_PxVec2_(physx.PxVec2* pvk_this, physx.PxVec2* pvk_v);
        
        public  PxVec2(physx.PxVec2* v) {
            physx.PxVec2* pvk_in_v = v;
            PxVec2 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec2_PxVec2_Ctor_physx_PxVec2_(pvk_in_this, pvk_in_v);
            this = toInit;
        }
        
        public static bool operator==(physx.PxVec2 lhs, physx.PxVec2 v) {
            return lhs==&v;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec2_operator_EqualEqual_physx_PxVec2_(physx.PxVec2* pvk_lhs, physx.PxVec2* pvk_v);
        
        public static bool operator==(physx.PxVec2 lhs, physx.PxVec2* v) {
            physx.PxVec2* pvk_in_lhs = &lhs;
            physx.PxVec2* pvk_in_v = v;
            return bool_const_physx_PxVec2_operator_EqualEqual_physx_PxVec2_(pvk_in_lhs, pvk_in_v);
        }
        
        public static bool operator!=(physx.PxVec2 lhs, physx.PxVec2 v) {
            return lhs!=&v;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec2_operator_ExclaimEqual_physx_PxVec2_(physx.PxVec2* pvk_lhs, physx.PxVec2* pvk_v);
        
        public static bool operator!=(physx.PxVec2 lhs, physx.PxVec2* v) {
            physx.PxVec2* pvk_in_lhs = &lhs;
            physx.PxVec2* pvk_in_v = v;
            return bool_const_physx_PxVec2_operator_ExclaimEqual_physx_PxVec2_(pvk_in_lhs, pvk_in_v);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec2_isZero(physx.PxVec2* pvk_this);
        
        public bool isZero() {
            fixed (PxVec2* pvk_in_this = &this){
                return bool_const_physx_PxVec2_isZero(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec2_isFinite(physx.PxVec2* pvk_this);
        
        public bool isFinite() {
            fixed (PxVec2* pvk_in_this = &this){
                return bool_const_physx_PxVec2_isFinite(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec2_isNormalized(physx.PxVec2* pvk_this);
        
        public bool isNormalized() {
            fixed (PxVec2* pvk_in_this = &this){
                return bool_const_physx_PxVec2_isNormalized(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec2_magnitudeSquared(physx.PxVec2* pvk_this);
        
        public float magnitudeSquared() {
            fixed (PxVec2* pvk_in_this = &this){
                return float_const_physx_PxVec2_magnitudeSquared(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec2_magnitude(physx.PxVec2* pvk_this);
        
        public float magnitude() {
            fixed (PxVec2* pvk_in_this = &this){
                return float_const_physx_PxVec2_magnitude(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_operator_Minus(physx.PxVec2* RetRef, physx.PxVec2* pvk_lhs);
        
        public static physx.PxVec2 operator-(physx.PxVec2 lhs) {
            physx.PxVec2 RetRef;
            physx.PxVec2* pvk_in_lhs = &lhs;
            physx_PxVec2_const_physx_PxVec2_operator_Minus(&RetRef, pvk_in_lhs);
            return RetRef;
        }
        
        public static physx.PxVec2 operator+(physx.PxVec2 lhs, physx.PxVec2 v) {
            return lhs+&v;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_operator_Plus_physx_PxVec2_(physx.PxVec2* RetRef, physx.PxVec2* pvk_lhs, physx.PxVec2* pvk_v);
        
        public static physx.PxVec2 operator+(physx.PxVec2 lhs, physx.PxVec2* v) {
            physx.PxVec2 RetRef;
            physx.PxVec2* pvk_in_lhs = &lhs;
            physx.PxVec2* pvk_in_v = v;
            physx_PxVec2_const_physx_PxVec2_operator_Plus_physx_PxVec2_(&RetRef, pvk_in_lhs, pvk_in_v);
            return RetRef;
        }
        
        public static physx.PxVec2 operator-(physx.PxVec2 lhs, physx.PxVec2 v) {
            return lhs-&v;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_operator_Minus_physx_PxVec2_(physx.PxVec2* RetRef, physx.PxVec2* pvk_lhs, physx.PxVec2* pvk_v);
        
        public static physx.PxVec2 operator-(physx.PxVec2 lhs, physx.PxVec2* v) {
            physx.PxVec2 RetRef;
            physx.PxVec2* pvk_in_lhs = &lhs;
            physx.PxVec2* pvk_in_v = v;
            physx_PxVec2_const_physx_PxVec2_operator_Minus_physx_PxVec2_(&RetRef, pvk_in_lhs, pvk_in_v);
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_operator_Star_float_(physx.PxVec2* RetRef, physx.PxVec2* pvk_lhs, float pvk_f);
        
        public static physx.PxVec2 operator*(physx.PxVec2 lhs, float f) {
            physx.PxVec2 RetRef;
            physx.PxVec2* pvk_in_lhs = &lhs;
            float pvk_in_f = f;
            physx_PxVec2_const_physx_PxVec2_operator_Star_float_(&RetRef, pvk_in_lhs, pvk_in_f);
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_operator_Slash_float_(physx.PxVec2* RetRef, physx.PxVec2* pvk_lhs, float pvk_f);
        
        public static physx.PxVec2 operator/(physx.PxVec2 lhs, float f) {
            physx.PxVec2 RetRef;
            physx.PxVec2* pvk_in_lhs = &lhs;
            float pvk_in_f = f;
            physx_PxVec2_const_physx_PxVec2_operator_Slash_float_(&RetRef, pvk_in_lhs, pvk_in_f);
            return RetRef;
        }
        
        public float dot(physx.PxVec2 v) {
            return dot(&v);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec2_dot_physx_PxVec2_(physx.PxVec2* pvk_this, physx.PxVec2* pvk_v);
        
        public float dot(physx.PxVec2* v) {
            physx.PxVec2* pvk_in_v = v;
            fixed (PxVec2* pvk_in_this = &this){
                return float_const_physx_PxVec2_dot_physx_PxVec2_(pvk_in_this, pvk_in_v);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_getNormalized(physx.PxVec2* RetRef, physx.PxVec2* pvk_this);
        
        public physx.PxVec2 getNormalized() {
            physx.PxVec2 RetRef;
            
            fixed (PxVec2* pvk_in_this = &this){
                physx_PxVec2_const_physx_PxVec2_getNormalized(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_physx_PxVec2_normalize(physx.PxVec2* pvk_this);
        
        public float normalize() {
            fixed (PxVec2* pvk_in_this = &this){
                return float_physx_PxVec2_normalize(pvk_in_this);
            }
        }
        
        public physx.PxVec2 multiply(physx.PxVec2 a) {
            return multiply(&a);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_multiply_physx_PxVec2_(physx.PxVec2* RetRef, physx.PxVec2* pvk_this, physx.PxVec2* pvk_a);
        
        public physx.PxVec2 multiply(physx.PxVec2* a) {
            physx.PxVec2 RetRef;
            
            physx.PxVec2* pvk_in_a = a;
            fixed (PxVec2* pvk_in_this = &this){
                physx_PxVec2_const_physx_PxVec2_multiply_physx_PxVec2_(&RetRef, pvk_in_this, pvk_in_a);
            }
            return RetRef;
        }
        
        public physx.PxVec2 minimum(physx.PxVec2 v) {
            return minimum(&v);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_minimum_physx_PxVec2_(physx.PxVec2* RetRef, physx.PxVec2* pvk_this, physx.PxVec2* pvk_v);
        
        public physx.PxVec2 minimum(physx.PxVec2* v) {
            physx.PxVec2 RetRef;
            
            physx.PxVec2* pvk_in_v = v;
            fixed (PxVec2* pvk_in_this = &this){
                physx_PxVec2_const_physx_PxVec2_minimum_physx_PxVec2_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec2_minElement(physx.PxVec2* pvk_this);
        
        public float minElement() {
            fixed (PxVec2* pvk_in_this = &this){
                return float_const_physx_PxVec2_minElement(pvk_in_this);
            }
        }
        
        public physx.PxVec2 maximum(physx.PxVec2 v) {
            return maximum(&v);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_maximum_physx_PxVec2_(physx.PxVec2* RetRef, physx.PxVec2* pvk_this, physx.PxVec2* pvk_v);
        
        public physx.PxVec2 maximum(physx.PxVec2* v) {
            physx.PxVec2 RetRef;
            
            physx.PxVec2* pvk_in_v = v;
            fixed (PxVec2* pvk_in_this = &this){
                physx_PxVec2_const_physx_PxVec2_maximum_physx_PxVec2_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec2_maxElement(physx.PxVec2* pvk_this);
        
        public float maxElement() {
            fixed (PxVec2* pvk_in_this = &this){
                return float_const_physx_PxVec2_maxElement(pvk_in_this);
            }
        }
        
        public static physx.PxVec2 Mult(float f, physx.PxVec2 v) {
            return Mult(f, &v);
        }
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_physx_operator_Star_float_physx_PxVec2_(physx.PxVec2* RetRef, float pvk_f, physx.PxVec2* pvk_v);
        
        public static physx.PxVec2 Mult(float f, physx.PxVec2* v) {
            physx.PxVec2 RetRef;
            float pvk_in_f = f;
            physx.PxVec2* pvk_in_v = v;
            physx_PxVec2_physx_operator_Star_float_physx_PxVec2_(&RetRef, pvk_in_f, pvk_in_v);
            return RetRef;
        }
    }
    
}
