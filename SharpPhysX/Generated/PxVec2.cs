// Generated by minBND 5.1.78.26 - Â© github.com/Alan-FGR
//DEBUG: UnitNode  - 0
//Unit PxVec2
using System;
using System.Runtime.InteropServices;

//DEBUG: NamespaceNode physx - 40-343
public static unsafe partial class physx {
    //DEBUG: FunctionNode physx::operator* - 337-340
    // physx::operator* [static physx.PxVec2 Mult(float f, physx.PxVec2* v)] will be bound as member operator
    
    //DEBUG: ClassNode physx::PxVec2 - 49-335
    public unsafe partial struct PxVec2{
        public float x;
        public float y;
        
    //DEBUG: DefaulterNode physx::PxVec2::PxVec2 - 55-57
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Default_physx_PxVec2_(physx.PxVec2* RetRef);
        
        public static physx.PxVec2 Default() {
            //RET nat: physx.PxVec2, man: physx.PxVec2, stg: Blittable, ret: False
            physx.PxVec2 RetRef;
            Default_physx_PxVec2_(&RetRef);
            return RetRef;
        }
        
        //DEBUG: BlittableCtorNode physx::PxVec2::PxVec2 - 62-65
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec2_PxVec2_Ctor_physx_PxZERO_(physx.PxVec2* pvk_this, physx.PxZERO pvk_r);
        
        public PxVec2(physx.PxZERO r) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            //PAR nat: physx::PxZERO, man: physx.PxZERO, stg: Value
            physx.PxZERO pvk_in_r = r;
            PxVec2 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec2_PxVec2_Ctor_physx_PxZERO_(pvk_in_this, pvk_in_r);
            this = toInit;
        }
        
        //DEBUG: BlittableCtorNode physx::PxVec2::PxVec2 - 74-76
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec2_PxVec2_Ctor_float_(physx.PxVec2* pvk_this, float pvk_a);
        
        public PxVec2(float a) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            //PAR nat: float, man: float, stg: Value
            float pvk_in_a = a;
            PxVec2 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec2_PxVec2_Ctor_float_(pvk_in_this, pvk_in_a);
            this = toInit;
        }
        
        //DEBUG: BlittableCtorNode physx::PxVec2::PxVec2 - 84-86
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec2_PxVec2_Ctor_float_float_(physx.PxVec2* pvk_this, float pvk_nx, float pvk_ny);
        
        public PxVec2(float nx, float ny) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            //PAR nat: float, man: float, stg: Value
            float pvk_in_nx = nx;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_ny = ny;
            PxVec2 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec2_PxVec2_Ctor_float_float_(pvk_in_this, pvk_in_nx, pvk_in_ny);
            this = toInit;
        }
        
        //DEBUG: BlittableCtorNode physx::PxVec2::PxVec2 - 91-93
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec2_PxVec2_Ctor_physx_PxVec2_(physx.PxVec2* pvk_this, physx.PxVec2* pvk_v);
        
        public PxVec2(physx.PxVec2* v) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            //PAR nat: physx::PxVec2*, man: physx.PxVec2*, stg: Value
            physx.PxVec2* pvk_in_v = v;
            PxVec2 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec2_PxVec2_Ctor_physx_PxVec2_(pvk_in_this, pvk_in_v);
            this = toInit;
        }
        
        //DEBUG: MethodNode physx::PxVec2::operator= - 100-105
        //ERRORS OCCURED IN physx::PxVec2::operator=
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxVec2::operator[] - 110-115
        //ERRORS OCCURED IN physx::PxVec2::operator[]
        //Unbindable Operator: Subscript
        
        //DEBUG: MethodNode physx::PxVec2::operator[] - 120-125
        //ERRORS OCCURED IN physx::PxVec2::operator[]
        //Unbindable Operator: Subscript
        
        //DEBUG: MethodNode physx::PxVec2::operator== - 130-133
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec2_operator_EqualEqual_physx_PxVec2_(physx.PxVec2* pvk_lhs, physx.PxVec2* pvk_v);
        
        public static bool operator==(physx.PxVec2 lhs, physx.PxVec2* v) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            physx.PxVec2* pvk_in_lhs = &lhs;
            //PAR nat: physx::PxVec2*, man: physx.PxVec2*, stg: Value
            physx.PxVec2* pvk_in_v = v;
            return bool_const_physx_PxVec2_operator_EqualEqual_physx_PxVec2_(pvk_in_lhs, pvk_in_v);
        }
        
        //DEBUG: MethodNode physx::PxVec2::operator!= - 138-141
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec2_operator_ExclaimEqual_physx_PxVec2_(physx.PxVec2* pvk_lhs, physx.PxVec2* pvk_v);
        
        public static bool operator!=(physx.PxVec2 lhs, physx.PxVec2* v) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            physx.PxVec2* pvk_in_lhs = &lhs;
            //PAR nat: physx::PxVec2*, man: physx.PxVec2*, stg: Value
            physx.PxVec2* pvk_in_v = v;
            return bool_const_physx_PxVec2_operator_ExclaimEqual_physx_PxVec2_(pvk_in_lhs, pvk_in_v);
        }
        
        //DEBUG: MethodNode physx::PxVec2::isZero - 146-149
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec2_isZero(physx.PxVec2* pvk_this);
        
        public bool isZero() {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            fixed (PxVec2* pvk_in_this = &this){
                return bool_const_physx_PxVec2_isZero(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec2::isFinite - 154-157
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec2_isFinite(physx.PxVec2* pvk_this);
        
        public bool isFinite() {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            fixed (PxVec2* pvk_in_this = &this){
                return bool_const_physx_PxVec2_isFinite(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec2::isNormalized - 162-166
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec2_isNormalized(physx.PxVec2* pvk_this);
        
        public bool isNormalized() {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            fixed (PxVec2* pvk_in_this = &this){
                return bool_const_physx_PxVec2_isNormalized(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec2::magnitudeSquared - 173-176
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec2_magnitudeSquared(physx.PxVec2* pvk_this);
        
        public float magnitudeSquared() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            fixed (PxVec2* pvk_in_this = &this){
                return float_const_physx_PxVec2_magnitudeSquared(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec2::magnitude - 181-184
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec2_magnitude(physx.PxVec2* pvk_this);
        
        public float magnitude() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            fixed (PxVec2* pvk_in_this = &this){
                return float_const_physx_PxVec2_magnitude(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec2::operator- - 189-192
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_operator_Minus(physx.PxVec2* RetRef, physx.PxVec2* pvk_lhs);
        
        public static physx.PxVec2 operator-(physx.PxVec2 lhs) {
            //RET nat: physx.PxVec2, man: physx.PxVec2, stg: Blittable, ret: False
            physx.PxVec2 RetRef;
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            physx.PxVec2* pvk_in_lhs = &lhs;
            physx_PxVec2_const_physx_PxVec2_operator_Minus(&RetRef, pvk_in_lhs);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec2::operator+ - 197-200
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_operator_Plus_physx_PxVec2_(physx.PxVec2* RetRef, physx.PxVec2* pvk_lhs, physx.PxVec2* pvk_v);
        
        public static physx.PxVec2 operator+(physx.PxVec2 lhs, physx.PxVec2* v) {
            //RET nat: physx.PxVec2, man: physx.PxVec2, stg: Blittable, ret: False
            physx.PxVec2 RetRef;
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            physx.PxVec2* pvk_in_lhs = &lhs;
            //PAR nat: physx::PxVec2*, man: physx.PxVec2*, stg: Value
            physx.PxVec2* pvk_in_v = v;
            physx_PxVec2_const_physx_PxVec2_operator_Plus_physx_PxVec2_(&RetRef, pvk_in_lhs, pvk_in_v);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec2::operator- - 205-208
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_operator_Minus_physx_PxVec2_(physx.PxVec2* RetRef, physx.PxVec2* pvk_lhs, physx.PxVec2* pvk_v);
        
        public static physx.PxVec2 operator-(physx.PxVec2 lhs, physx.PxVec2* v) {
            //RET nat: physx.PxVec2, man: physx.PxVec2, stg: Blittable, ret: False
            physx.PxVec2 RetRef;
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            physx.PxVec2* pvk_in_lhs = &lhs;
            //PAR nat: physx::PxVec2*, man: physx.PxVec2*, stg: Value
            physx.PxVec2* pvk_in_v = v;
            physx_PxVec2_const_physx_PxVec2_operator_Minus_physx_PxVec2_(&RetRef, pvk_in_lhs, pvk_in_v);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec2::operator* - 213-216
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_operator_Star_float_(physx.PxVec2* RetRef, physx.PxVec2* pvk_lhs, float pvk_f);
        
        public static physx.PxVec2 operator*(physx.PxVec2 lhs, float f) {
            //RET nat: physx.PxVec2, man: physx.PxVec2, stg: Blittable, ret: False
            physx.PxVec2 RetRef;
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            physx.PxVec2* pvk_in_lhs = &lhs;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_f = f;
            physx_PxVec2_const_physx_PxVec2_operator_Star_float_(&RetRef, pvk_in_lhs, pvk_in_f);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec2::operator/ - 221-225
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_operator_Slash_float_(physx.PxVec2* RetRef, physx.PxVec2* pvk_lhs, float pvk_f);
        
        public static physx.PxVec2 operator/(physx.PxVec2 lhs, float f) {
            //RET nat: physx.PxVec2, man: physx.PxVec2, stg: Blittable, ret: False
            physx.PxVec2 RetRef;
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            physx.PxVec2* pvk_in_lhs = &lhs;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_f = f;
            physx_PxVec2_const_physx_PxVec2_operator_Slash_float_(&RetRef, pvk_in_lhs, pvk_in_f);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec2::operator+= - 230-235
        //ERRORS OCCURED IN physx::PxVec2::operator+=
        //Unbindable Operator: PlusEqual
        
        //DEBUG: MethodNode physx::PxVec2::operator-= - 240-245
        //ERRORS OCCURED IN physx::PxVec2::operator-=
        //Unbindable Operator: MinusEqual
        
        //DEBUG: MethodNode physx::PxVec2::operator*= - 250-255
        //ERRORS OCCURED IN physx::PxVec2::operator*=
        //Unbindable Operator: StarEqual
        
        //DEBUG: MethodNode physx::PxVec2::operator/= - 259-265
        //ERRORS OCCURED IN physx::PxVec2::operator/=
        //Unbindable Operator: SlashEqual
        
        //DEBUG: MethodNode physx::PxVec2::dot - 270-273
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec2_dot_physx_PxVec2_(physx.PxVec2* pvk_this, physx.PxVec2* pvk_v);
        
        public float dot(physx.PxVec2* v) {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            //PAR nat: physx::PxVec2*, man: physx.PxVec2*, stg: Value
            physx.PxVec2* pvk_in_v = v;
            fixed (PxVec2* pvk_in_this = &this){
                return float_const_physx_PxVec2_dot_physx_PxVec2_(pvk_in_this, pvk_in_v);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec2::getNormalized - 277-281
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_getNormalized(physx.PxVec2* RetRef, physx.PxVec2* pvk_this);
        
        public physx.PxVec2 getNormalized() {
            //RET nat: physx.PxVec2, man: physx.PxVec2, stg: Blittable, ret: False
            physx.PxVec2 RetRef;
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            fixed (PxVec2* pvk_in_this = &this){
                physx_PxVec2_const_physx_PxVec2_getNormalized(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec2::normalize - 286-292
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_physx_PxVec2_normalize(physx.PxVec2* pvk_this);
        
        public float normalize() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            fixed (PxVec2* pvk_in_this = &this){
                return float_physx_PxVec2_normalize(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec2::multiply - 297-300
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_multiply_physx_PxVec2_(physx.PxVec2* RetRef, physx.PxVec2* pvk_this, physx.PxVec2* pvk_a);
        
        public physx.PxVec2 multiply(physx.PxVec2* a) {
            //RET nat: physx.PxVec2, man: physx.PxVec2, stg: Blittable, ret: False
            physx.PxVec2 RetRef;
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            //PAR nat: physx::PxVec2*, man: physx.PxVec2*, stg: Value
            physx.PxVec2* pvk_in_a = a;
            fixed (PxVec2* pvk_in_this = &this){
                physx_PxVec2_const_physx_PxVec2_multiply_physx_PxVec2_(&RetRef, pvk_in_this, pvk_in_a);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec2::minimum - 305-308
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_minimum_physx_PxVec2_(physx.PxVec2* RetRef, physx.PxVec2* pvk_this, physx.PxVec2* pvk_v);
        
        public physx.PxVec2 minimum(physx.PxVec2* v) {
            //RET nat: physx.PxVec2, man: physx.PxVec2, stg: Blittable, ret: False
            physx.PxVec2 RetRef;
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            //PAR nat: physx::PxVec2*, man: physx.PxVec2*, stg: Value
            physx.PxVec2* pvk_in_v = v;
            fixed (PxVec2* pvk_in_this = &this){
                physx_PxVec2_const_physx_PxVec2_minimum_physx_PxVec2_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec2::minElement - 313-316
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec2_minElement(physx.PxVec2* pvk_this);
        
        public float minElement() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            fixed (PxVec2* pvk_in_this = &this){
                return float_const_physx_PxVec2_minElement(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec2::maximum - 321-324
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_const_physx_PxVec2_maximum_physx_PxVec2_(physx.PxVec2* RetRef, physx.PxVec2* pvk_this, physx.PxVec2* pvk_v);
        
        public physx.PxVec2 maximum(physx.PxVec2* v) {
            //RET nat: physx.PxVec2, man: physx.PxVec2, stg: Blittable, ret: False
            physx.PxVec2 RetRef;
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            //PAR nat: physx::PxVec2*, man: physx.PxVec2*, stg: Value
            physx.PxVec2* pvk_in_v = v;
            fixed (PxVec2* pvk_in_this = &this){
                physx_PxVec2_const_physx_PxVec2_maximum_physx_PxVec2_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec2::maxElement - 329-332
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec2_maxElement(physx.PxVec2* pvk_this);
        
        public float maxElement() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec2, man: physx.PxVec2, stg: Blittable
            
            fixed (PxVec2* pvk_in_this = &this){
                return float_const_physx_PxVec2_maxElement(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec2::~PxVec2 - 49
        //ERRORS OCCURED IN physx::PxVec2::~PxVec2
        //Implicit Function/Method
        //Destructor
        //DEBUG: ExternalOpNode physx::operator* - 337-340
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec2_physx_operator_Star_float_physx_PxVec2_(physx.PxVec2* RetRef, float pvk_f, physx.PxVec2* pvk_v);
        
        public static physx.PxVec2 Mult(float f, physx.PxVec2* v) {
            //RET nat: physx.PxVec2, man: physx.PxVec2, stg: Blittable, ret: False
            physx.PxVec2 RetRef;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_f = f;
            //PAR nat: physx::PxVec2*, man: physx.PxVec2*, stg: Value
            physx.PxVec2* pvk_in_v = v;
            physx_PxVec2_physx_operator_Star_float_physx_PxVec2_(&RetRef, pvk_in_f, pvk_in_v);
            return RetRef;
        }
    }
    
}
