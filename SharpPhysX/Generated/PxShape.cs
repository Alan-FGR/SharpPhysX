//Generated by MinBinder.
using System;
using System.Runtime.InteropServices;
using PxBaseFlags = System.UInt32;
using PxActorFlags = System.UInt32;

[Flags]
public enum PxShapeFlag : int {
 eSIMULATION_SHAPE				= (1<<0),
 eSCENE_QUERY_SHAPE				= (1<<1),
 eTRIGGER_SHAPE					= (1<<2),
 eVISUALIZATION					= (1<<3),

}

public static partial class physx{
    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxFlags_PxShapeFlag_byte C_OP_Pipe(PxShapeFlag a,PxShapeFlag b);
    public static PxFlags_PxShapeFlag_byte Pipe(PxShapeFlag a,PxShapeFlag b){
        return C_OP_Pipe(a,b);    
    }


    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxFlags_PxShapeFlag_byte C_OP_Amp(PxShapeFlag a,PxShapeFlag b);
    public static PxFlags_PxShapeFlag_byte Amp(PxShapeFlag a,PxShapeFlag b){
        return C_OP_Amp(a,b);    
    }


    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxFlags_PxShapeFlag_byte C_OP_Tilde(PxShapeFlag a);
    public static PxFlags_PxShapeFlag_byte Tilde(PxShapeFlag a){
        return C_OP_Tilde(a);    
    }


}

public partial struct PxShape : IPxBase { // ptr holder

    public ushort getConcreteType() {// base call
        return ((PxBase)this).getConcreteType();
    }
    
    public void setBaseFlag(PxBaseFlag flag, bool value) {// base call
         ((PxBase)this).setBaseFlag(flag, value);
    }
    
    public void setBaseFlags(PxBaseFlags inFlags) {// base call
         ((PxBase)this).setBaseFlags(inFlags);
    }
    
    public PxBaseFlags getBaseFlags() {// base call
        return ((PxBase)this).getBaseFlags();
    }
    
    public bool isReleasable() {// base call
        return ((PxBase)this).isReleasable();
    }
    

    private IntPtr nativePtr_;
    
    public static unsafe implicit operator PxBase(PxShape obj) {// upcast
        return *(PxBase*)&obj;
    }
    
    public static unsafe explicit operator PxShape(PxBase obj) {// downcast
        return *(PxShape*)&obj;
    }
    
    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_release(PxShape cls);
    public void release(){
         C_PxShape_release(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern uint C_CONST_PxShape_getReferenceCount(PxShape cls);
    public uint getReferenceCount(){
        return C_CONST_PxShape_getReferenceCount(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_acquireReference(PxShape cls);
    public void acquireReference(){
         C_PxShape_acquireReference(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxGeometryType C_CONST_PxShape_getGeometryType(PxShape cls);
    public PxGeometryType getGeometryType(){
        return C_CONST_PxShape_getGeometryType(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_setGeometry(PxShape cls,PxGeometry geometry);
    public void setGeometry(PxGeometry geometry){
         C_PxShape_setGeometry(this,geometry);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxGeometryHolder C_CONST_PxShape_getGeometry(PxShape cls);
    public PxGeometryHolder getGeometry(){
        return C_CONST_PxShape_getGeometry(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxRigidActor C_CONST_PxShape_getActor(PxShape cls);
    public PxRigidActor getActor(){
        return C_CONST_PxShape_getActor(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_setLocalPose(PxShape cls,PxTransform pose);
    public void setLocalPose(PxTransform pose){
         C_PxShape_setLocalPose(this,pose);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxTransform C_CONST_PxShape_getLocalPose(PxShape cls);
    public PxTransform getLocalPose(){
        return C_CONST_PxShape_getLocalPose(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_setSimulationFilterData(PxShape cls,PxFilterData data);
    public void setSimulationFilterData(PxFilterData data){
         C_PxShape_setSimulationFilterData(this,data);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxFilterData C_CONST_PxShape_getSimulationFilterData(PxShape cls);
    public PxFilterData getSimulationFilterData(){
        return C_CONST_PxShape_getSimulationFilterData(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_setQueryFilterData(PxShape cls,PxFilterData data);
    public void setQueryFilterData(PxFilterData data){
         C_PxShape_setQueryFilterData(this,data);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxFilterData C_CONST_PxShape_getQueryFilterData(PxShape cls);
    public PxFilterData getQueryFilterData(){
        return C_CONST_PxShape_getQueryFilterData(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_setMaterials(PxShape cls,PxMaterialPtrPtr materials,ushort materialCount);
    public void setMaterials(PxMaterialPtrPtr materials,ushort materialCount){
         C_PxShape_setMaterials(this,materials,materialCount);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern ushort C_CONST_PxShape_getNbMaterials(PxShape cls);
    public ushort getNbMaterials(){
        return C_CONST_PxShape_getNbMaterials(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern uint C_CONST_PxShape_getMaterials(PxShape cls,PxMaterialPtrPtr userBuffer,uint bufferSize,uint startIndex);
    public uint getMaterials(PxMaterialPtrPtr userBuffer,uint bufferSize,uint startIndex){
        return C_CONST_PxShape_getMaterials(this,userBuffer,bufferSize,startIndex);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxMaterial C_CONST_PxShape_getMaterialFromInternalFaceIndex(PxShape cls,uint faceIndex);
    public PxMaterial getMaterialFromInternalFaceIndex(uint faceIndex){
        return C_CONST_PxShape_getMaterialFromInternalFaceIndex(this,faceIndex);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_setContactOffset(PxShape cls,float contactOffset);
    public void setContactOffset(float contactOffset){
         C_PxShape_setContactOffset(this,contactOffset);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern float C_CONST_PxShape_getContactOffset(PxShape cls);
    public float getContactOffset(){
        return C_CONST_PxShape_getContactOffset(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_setRestOffset(PxShape cls,float restOffset);
    public void setRestOffset(float restOffset){
         C_PxShape_setRestOffset(this,restOffset);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern float C_CONST_PxShape_getRestOffset(PxShape cls);
    public float getRestOffset(){
        return C_CONST_PxShape_getRestOffset(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_setTorsionalPatchRadius(PxShape cls,float radius);
    public void setTorsionalPatchRadius(float radius){
         C_PxShape_setTorsionalPatchRadius(this,radius);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern float C_CONST_PxShape_getTorsionalPatchRadius(PxShape cls);
    public float getTorsionalPatchRadius(){
        return C_CONST_PxShape_getTorsionalPatchRadius(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_setMinTorsionalPatchRadius(PxShape cls,float radius);
    public void setMinTorsionalPatchRadius(float radius){
         C_PxShape_setMinTorsionalPatchRadius(this,radius);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern float C_CONST_PxShape_getMinTorsionalPatchRadius(PxShape cls);
    public float getMinTorsionalPatchRadius(){
        return C_CONST_PxShape_getMinTorsionalPatchRadius(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_setFlag(PxShape cls,PxShapeFlag flag,bool value);
    public void setFlag(PxShapeFlag flag,bool value){
         C_PxShape_setFlag(this,flag,value);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_setFlags(PxShape cls,PxShapeFlags inFlags);
    public void setFlags(PxShapeFlags inFlags){
         C_PxShape_setFlags(this,inFlags);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxShapeFlags C_CONST_PxShape_getFlags(PxShape cls);
    public PxShapeFlags getFlags(){
        return C_CONST_PxShape_getFlags(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxShape_isExclusive(PxShape cls);
    public bool isExclusive(){
        return C_CONST_PxShape_isExclusive(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxShape_setName(PxShape cls,string name);
    public void setName(string name){
         C_PxShape_setName(this,name);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern string C_CONST_PxShape_getName(PxShape cls);
    public string getName(){
        return C_CONST_PxShape_getName(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern string C_CONST_PxShape_getConcreteTypeName(PxShape cls);
    public string getConcreteTypeName(){
        return C_CONST_PxShape_getConcreteTypeName(this);    
    }


}
