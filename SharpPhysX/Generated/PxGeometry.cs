// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
//Unit PxGeometry
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    public enum PxGeometryTypeEnum : int {
        eSPHERE = 0,                     // eSPHERE
        ePLANE = 1,                      // ePLANE
        eCAPSULE = 2,                    // eCAPSULE
        eBOX = 3,                        // eBOX
        eCONVEXMESH = 4,                 // eCONVEXMESH
        eTRIANGLEMESH = 5,               // eTRIANGLEMESH
        eHEIGHTFIELD = 6,                // eHEIGHTFIELD
        eGEOMETRY_COUNT = 7,             // eGEOMETRY_COUNT
        eINVALID = -1,                   // eINVALID = -1
    }
    
    public unsafe partial struct PxGeometryPtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxGeometryPtr(PxGeometryPtr ptr);
        
        public static void Free(PxGeometryPtr ptr){
            Freer_physx_PxGeometryPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxGeometryPtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxGeometryTypeEnum physx_PxGeometryTypeEnum_const_physx_PxGeometry_getType(physx.PxGeometryPtr pvk_this);
        
        public physx.PxGeometryTypeEnum getType() {
            physx.PxGeometryPtr pvk_in_this = this;
            return physx_PxGeometryTypeEnum_const_physx_PxGeometry_getType(pvk_in_this);
        }
    
    
    
        public unsafe interface IPxGeometryPtr {
            physx.PxGeometryTypeEnum getType();
        }
    }
    
}
