// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
//Unit PxArticulationJoint
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    // physx::operator| [static PxFlags_physx_PxArticulationAxisEnum_bytePtr Pipe_New(physx.PxArticulationAxisEnum a, physx.PxArticulationAxisEnum b)] will be bound as member operator
    
    // physx::operator& [static PxFlags_physx_PxArticulationAxisEnum_bytePtr Amp_New(physx.PxArticulationAxisEnum a, physx.PxArticulationAxisEnum b)] will be bound as member operator
    
    // physx::operator~ [static PxFlags_physx_PxArticulationAxisEnum_bytePtr Tilde_New(physx.PxArticulationAxisEnum a)] will be bound as member operator
    
    // physx::operator| [static PxArticulationMotionsPtr Pipe_New(physx.PxArticulationMotionEnum a, physx.PxArticulationMotionEnum b)] will be bound as member operator
    
    // physx::operator& [static PxArticulationMotionsPtr Amp_New(physx.PxArticulationMotionEnum a, physx.PxArticulationMotionEnum b)] will be bound as member operator
    
    // physx::operator~ [static PxArticulationMotionsPtr Tilde_New(physx.PxArticulationMotionEnum a)] will be bound as member operator
    
    public enum PxArticulationJointDriveTypeEnum : int {
        eTARGET = 0, // eTARGET = 0
        eERROR = 1,  // eERROR = 1
    }
    
    public enum PxArticulationAxisEnum : int {
        eTWIST = 0,  // eTWIST = 0
        eSWING1 = 1, // eSWING1 = 1
        eSWING2 = 2, // eSWING2 = 2
        eX = 3,      // eX = 3
        eY = 4,      // eY = 4
        eZ = 5,      // eZ = 5
        eCOUNT = 6,  // eCOUNT = 6
    }
    
    public enum PxArticulationMotionEnum : int {
        eLOCKED = 0,  // eLOCKED = 0
        eLIMITED = 1, // eLIMITED = 1
        eFREE = 2,    // eFREE = 2
    }
    
    public enum PxArticulationJointTypeEnum : int {
        ePRISMATIC = 0, // ePRISMATIC = 0
        eREVOLUTE = 1,  // eREVOLUTE = 1
        eSPHERICAL = 2, // eSPHERICAL = 2
        eFIX = 3,       // eFIX = 3
        eUNDEFINED = 4, // eUNDEFINED = 4
    }
    
    public unsafe partial struct PxArticulationJointBasePtr : physx.PxBasePtr.IPxBasePtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxArticulationLinkPtr physx_PxArticulationLinkPtr_const_physx_PxArticulationJointBase_getParentArticulationLink(physx.PxArticulationJointBasePtr pvk_this);
        
        public physx.PxArticulationLinkPtr getParentArticulationLink() {
            physx.PxArticulationJointBasePtr pvk_in_this = this;
            return physx_PxArticulationLinkPtr_const_physx_PxArticulationJointBase_getParentArticulationLink(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJointBase_setParentPose_physx_PxTransformPtr_(physx.PxArticulationJointBasePtr pvk_this, physx.PxTransformPtr pvk_pose);
        
        public void setParentPose(physx.PxTransformPtr pose) {
            physx.PxArticulationJointBasePtr pvk_in_this = this;
            physx.PxTransformPtr pvk_in_pose = pose;
            void_physx_PxArticulationJointBase_setParentPose_physx_PxTransformPtr_(pvk_in_this, pvk_in_pose);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxTransformPtr physx_PxTransformPtr_const_physx_PxArticulationJointBase_getParentPose(physx.PxArticulationJointBasePtr pvk_this);
        
        public physx.PxTransformPtr getParentPose_New() {
            physx.PxArticulationJointBasePtr pvk_in_this = this;
            return physx_PxTransformPtr_const_physx_PxArticulationJointBase_getParentPose(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxArticulationLinkPtr physx_PxArticulationLinkPtr_const_physx_PxArticulationJointBase_getChildArticulationLink(physx.PxArticulationJointBasePtr pvk_this);
        
        public physx.PxArticulationLinkPtr getChildArticulationLink() {
            physx.PxArticulationJointBasePtr pvk_in_this = this;
            return physx_PxArticulationLinkPtr_const_physx_PxArticulationJointBase_getChildArticulationLink(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJointBase_setChildPose_physx_PxTransformPtr_(physx.PxArticulationJointBasePtr pvk_this, physx.PxTransformPtr pvk_pose);
        
        public void setChildPose(physx.PxTransformPtr pose) {
            physx.PxArticulationJointBasePtr pvk_in_this = this;
            physx.PxTransformPtr pvk_in_pose = pose;
            void_physx_PxArticulationJointBase_setChildPose_physx_PxTransformPtr_(pvk_in_this, pvk_in_pose);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxTransformPtr physx_PxTransformPtr_const_physx_PxArticulationJointBase_getChildPose(physx.PxArticulationJointBasePtr pvk_this);
        
        public physx.PxTransformPtr getChildPose_New() {
            physx.PxArticulationJointBasePtr pvk_in_this = this;
            return physx_PxTransformPtr_const_physx_PxArticulationJointBase_getChildPose(pvk_in_this);
        }
        public static implicit operator physx.PxBasePtr(PxArticulationJointBasePtr obj) => *(physx.PxBasePtr*)&obj;
        public static explicit operator PxArticulationJointBasePtr(physx.PxBasePtr obj) => *(PxArticulationJointBasePtr*)&obj;
    
        // PIPING
        public void release(){((physx.PxBasePtr)this).release();}
        public string getConcreteTypeName(){return((physx.PxBasePtr)this).getConcreteTypeName();}
        public ushort getConcreteType(){return((physx.PxBasePtr)this).getConcreteType();}
        public void setBaseFlag(physx.PxBaseFlagEnum flag, bool value){((physx.PxBasePtr)this).setBaseFlag(flag, value);}
        public void setBaseFlags(PxBaseFlagsPtr inFlags){((physx.PxBasePtr)this).setBaseFlags(inFlags);}
        public PxBaseFlagsPtr getBaseFlags_New(){return((physx.PxBasePtr)this).getBaseFlags_New();}
        public bool isReleasable(){return((physx.PxBasePtr)this).isReleasable();}
    
        public unsafe interface IPxArticulationJointBasePtr {
            physx.PxArticulationLinkPtr getParentArticulationLink();
            void setParentPose(physx.PxTransformPtr pose);
            physx.PxTransformPtr getParentPose_New();
            physx.PxArticulationLinkPtr getChildArticulationLink();
            void setChildPose(physx.PxTransformPtr pose);
            physx.PxTransformPtr getChildPose_New();
            //////Type PxArticulationJointImplPtr explicitly forbidden by user configuration | physx.PxArticulationJointImplPtr getImpl();
            //////Type PxArticulationJointImplPtr explicitly forbidden by user configuration | physx.PxArticulationJointImplPtr getImplConst();
        }
    }
    
    public unsafe partial struct PxArticulationJointPtr : physx.PxArticulationJointBasePtr.IPxArticulationJointBasePtr, physx.PxBasePtr.IPxBasePtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setTargetOrientation_physx_PxQuatPtr_(physx.PxArticulationJointPtr pvk_this, physx.PxQuatPtr pvk_orientation);
        
        public void setTargetOrientation(physx.PxQuatPtr orientation) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            physx.PxQuatPtr pvk_in_orientation = orientation;
            void_physx_PxArticulationJoint_setTargetOrientation_physx_PxQuatPtr_(pvk_in_this, pvk_in_orientation);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxQuatPtr physx_PxQuatPtr_const_physx_PxArticulationJoint_getTargetOrientation(physx.PxArticulationJointPtr pvk_this);
        
        public physx.PxQuatPtr getTargetOrientation_New() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return physx_PxQuatPtr_const_physx_PxArticulationJoint_getTargetOrientation(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setTargetVelocity_physx_PxVec3Ptr_(physx.PxArticulationJointPtr pvk_this, physx.PxVec3Ptr pvk_velocity);
        
        public void setTargetVelocity(physx.PxVec3Ptr velocity) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_velocity = velocity;
            void_physx_PxArticulationJoint_setTargetVelocity_physx_PxVec3Ptr_(pvk_in_this, pvk_in_velocity);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3Ptr physx_PxVec3Ptr_const_physx_PxArticulationJoint_getTargetVelocity(physx.PxArticulationJointPtr pvk_this);
        
        public physx.PxVec3Ptr getTargetVelocity_New() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return physx_PxVec3Ptr_const_physx_PxArticulationJoint_getTargetVelocity(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setDriveType_physx_PxArticulationJointDriveTypeEnum_(physx.PxArticulationJointPtr pvk_this, physx.PxArticulationJointDriveTypeEnum pvk_driveType);
        
        public void setDriveType(physx.PxArticulationJointDriveTypeEnum driveType) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            physx.PxArticulationJointDriveTypeEnum pvk_in_driveType = driveType;
            void_physx_PxArticulationJoint_setDriveType_physx_PxArticulationJointDriveTypeEnum_(pvk_in_this, pvk_in_driveType);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxArticulationJointDriveTypeEnum physx_PxArticulationJointDriveTypeEnum_const_physx_PxArticulationJoint_getDriveType(physx.PxArticulationJointPtr pvk_this);
        
        public physx.PxArticulationJointDriveTypeEnum getDriveType() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return physx_PxArticulationJointDriveTypeEnum_const_physx_PxArticulationJoint_getDriveType(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setStiffness_float_(physx.PxArticulationJointPtr pvk_this, float pvk_spring);
        
        public void setStiffness(float spring) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            float pvk_in_spring = spring;
            void_physx_PxArticulationJoint_setStiffness_float_(pvk_in_this, pvk_in_spring);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxArticulationJoint_getStiffness(physx.PxArticulationJointPtr pvk_this);
        
        public float getStiffness() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return float_const_physx_PxArticulationJoint_getStiffness(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setDamping_float_(physx.PxArticulationJointPtr pvk_this, float pvk_damping);
        
        public void setDamping(float damping) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            float pvk_in_damping = damping;
            void_physx_PxArticulationJoint_setDamping_float_(pvk_in_this, pvk_in_damping);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxArticulationJoint_getDamping(physx.PxArticulationJointPtr pvk_this);
        
        public float getDamping() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return float_const_physx_PxArticulationJoint_getDamping(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setInternalCompliance_float_(physx.PxArticulationJointPtr pvk_this, float pvk_compliance);
        
        public void setInternalCompliance(float compliance) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            float pvk_in_compliance = compliance;
            void_physx_PxArticulationJoint_setInternalCompliance_float_(pvk_in_this, pvk_in_compliance);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxArticulationJoint_getInternalCompliance(physx.PxArticulationJointPtr pvk_this);
        
        public float getInternalCompliance() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return float_const_physx_PxArticulationJoint_getInternalCompliance(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setExternalCompliance_float_(physx.PxArticulationJointPtr pvk_this, float pvk_compliance);
        
        public void setExternalCompliance(float compliance) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            float pvk_in_compliance = compliance;
            void_physx_PxArticulationJoint_setExternalCompliance_float_(pvk_in_this, pvk_in_compliance);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxArticulationJoint_getExternalCompliance(physx.PxArticulationJointPtr pvk_this);
        
        public float getExternalCompliance() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return float_const_physx_PxArticulationJoint_getExternalCompliance(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setSwingLimit_float_float_(physx.PxArticulationJointPtr pvk_this, float pvk_zLimit, float pvk_yLimit);
        
        public void setSwingLimit(float zLimit, float yLimit) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            float pvk_in_zLimit = zLimit;
            float pvk_in_yLimit = yLimit;
            void_physx_PxArticulationJoint_setSwingLimit_float_float_(pvk_in_this, pvk_in_zLimit, pvk_in_yLimit);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_const_physx_PxArticulationJoint_getSwingLimit_float_float_(physx.PxArticulationJointPtr pvk_this, float* pvk_zLimit, float* pvk_yLimit);
        
        public void getSwingLimit(float* zLimit, float* yLimit) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            float* pvk_in_zLimit = zLimit;
            float* pvk_in_yLimit = yLimit;
            void_const_physx_PxArticulationJoint_getSwingLimit_float_float_(pvk_in_this, pvk_in_zLimit, pvk_in_yLimit);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setTangentialStiffness_float_(physx.PxArticulationJointPtr pvk_this, float pvk_spring);
        
        public void setTangentialStiffness(float spring) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            float pvk_in_spring = spring;
            void_physx_PxArticulationJoint_setTangentialStiffness_float_(pvk_in_this, pvk_in_spring);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxArticulationJoint_getTangentialStiffness(physx.PxArticulationJointPtr pvk_this);
        
        public float getTangentialStiffness() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return float_const_physx_PxArticulationJoint_getTangentialStiffness(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setTangentialDamping_float_(physx.PxArticulationJointPtr pvk_this, float pvk_damping);
        
        public void setTangentialDamping(float damping) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            float pvk_in_damping = damping;
            void_physx_PxArticulationJoint_setTangentialDamping_float_(pvk_in_this, pvk_in_damping);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxArticulationJoint_getTangentialDamping(physx.PxArticulationJointPtr pvk_this);
        
        public float getTangentialDamping() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return float_const_physx_PxArticulationJoint_getTangentialDamping(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setSwingLimitContactDistance_float_(physx.PxArticulationJointPtr pvk_this, float pvk_contactDistance);
        
        public void setSwingLimitContactDistance(float contactDistance) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            float pvk_in_contactDistance = contactDistance;
            void_physx_PxArticulationJoint_setSwingLimitContactDistance_float_(pvk_in_this, pvk_in_contactDistance);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxArticulationJoint_getSwingLimitContactDistance(physx.PxArticulationJointPtr pvk_this);
        
        public float getSwingLimitContactDistance() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return float_const_physx_PxArticulationJoint_getSwingLimitContactDistance(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setSwingLimitEnabled_bool_(physx.PxArticulationJointPtr pvk_this, bool pvk_enabled);
        
        public void setSwingLimitEnabled(bool enabled) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            bool pvk_in_enabled = enabled;
            void_physx_PxArticulationJoint_setSwingLimitEnabled_bool_(pvk_in_this, pvk_in_enabled);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxArticulationJoint_getSwingLimitEnabled(physx.PxArticulationJointPtr pvk_this);
        
        public bool getSwingLimitEnabled() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return bool_const_physx_PxArticulationJoint_getSwingLimitEnabled(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setTwistLimit_float_float_(physx.PxArticulationJointPtr pvk_this, float pvk_lower, float pvk_upper);
        
        public void setTwistLimit(float lower, float upper) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            float pvk_in_lower = lower;
            float pvk_in_upper = upper;
            void_physx_PxArticulationJoint_setTwistLimit_float_float_(pvk_in_this, pvk_in_lower, pvk_in_upper);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_const_physx_PxArticulationJoint_getTwistLimit_float_float_(physx.PxArticulationJointPtr pvk_this, float* pvk_lower, float* pvk_upper);
        
        public void getTwistLimit(float* lower, float* upper) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            float* pvk_in_lower = lower;
            float* pvk_in_upper = upper;
            void_const_physx_PxArticulationJoint_getTwistLimit_float_float_(pvk_in_this, pvk_in_lower, pvk_in_upper);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setTwistLimitEnabled_bool_(physx.PxArticulationJointPtr pvk_this, bool pvk_enabled);
        
        public void setTwistLimitEnabled(bool enabled) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            bool pvk_in_enabled = enabled;
            void_physx_PxArticulationJoint_setTwistLimitEnabled_bool_(pvk_in_this, pvk_in_enabled);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxArticulationJoint_getTwistLimitEnabled(physx.PxArticulationJointPtr pvk_this);
        
        public bool getTwistLimitEnabled() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return bool_const_physx_PxArticulationJoint_getTwistLimitEnabled(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxArticulationJoint_setTwistLimitContactDistance_float_(physx.PxArticulationJointPtr pvk_this, float pvk_contactDistance);
        
        public void setTwistLimitContactDistance(float contactDistance) {
            physx.PxArticulationJointPtr pvk_in_this = this;
            float pvk_in_contactDistance = contactDistance;
            void_physx_PxArticulationJoint_setTwistLimitContactDistance_float_(pvk_in_this, pvk_in_contactDistance);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxArticulationJoint_getTwistLimitContactDistance(physx.PxArticulationJointPtr pvk_this);
        
        public float getTwistLimitContactDistance() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return float_const_physx_PxArticulationJoint_getTwistLimitContactDistance(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern string string_const_physx_PxArticulationJoint_getConcreteTypeName(physx.PxArticulationJointPtr pvk_this);
        
        public string getConcreteTypeName() {
            physx.PxArticulationJointPtr pvk_in_this = this;
            return string_const_physx_PxArticulationJoint_getConcreteTypeName(pvk_in_this);
        }
        public static implicit operator physx.PxArticulationJointBasePtr(PxArticulationJointPtr obj) => *(physx.PxArticulationJointBasePtr*)&obj;
        public static explicit operator PxArticulationJointPtr(physx.PxArticulationJointBasePtr obj) => *(PxArticulationJointPtr*)&obj;
        public static implicit operator physx.PxBasePtr(PxArticulationJointPtr obj) => *(physx.PxBasePtr*)&obj;
        public static explicit operator PxArticulationJointPtr(physx.PxBasePtr obj) => *(PxArticulationJointPtr*)&obj;
    
        // PIPING
        public physx.PxArticulationLinkPtr getParentArticulationLink(){return((physx.PxArticulationJointBasePtr)this).getParentArticulationLink();}
        public void setParentPose(physx.PxTransformPtr pose){((physx.PxArticulationJointBasePtr)this).setParentPose(pose);}
        public physx.PxTransformPtr getParentPose_New(){return((physx.PxArticulationJointBasePtr)this).getParentPose_New();}
        public physx.PxArticulationLinkPtr getChildArticulationLink(){return((physx.PxArticulationJointBasePtr)this).getChildArticulationLink();}
        public void setChildPose(physx.PxTransformPtr pose){((physx.PxArticulationJointBasePtr)this).setChildPose(pose);}
        public physx.PxTransformPtr getChildPose_New(){return((physx.PxArticulationJointBasePtr)this).getChildPose_New();}
        public void release(){((physx.PxBasePtr)this).release();}
        public ushort getConcreteType(){return((physx.PxBasePtr)this).getConcreteType();}
        public void setBaseFlag(physx.PxBaseFlagEnum flag, bool value){((physx.PxBasePtr)this).setBaseFlag(flag, value);}
        public void setBaseFlags(PxBaseFlagsPtr inFlags){((physx.PxBasePtr)this).setBaseFlags(inFlags);}
        public PxBaseFlagsPtr getBaseFlags_New(){return((physx.PxBasePtr)this).getBaseFlags_New();}
        public bool isReleasable(){return((physx.PxBasePtr)this).isReleasable();}
    }
    
}
