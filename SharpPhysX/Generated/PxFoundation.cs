//Generated by MinBinder.
using System;
using System.Runtime.InteropServices;

public static partial class {
    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxFoundation C_PxCreateFoundation(PxU32 version,PxAllocatorCallback allocator,PxErrorCallback errorCallback);
    public static PxFoundation PxCreateFoundation(PxU32 version,PxAllocatorCallback allocator,PxErrorCallback errorCallback){
        return C_PxCreateFoundation(version,allocator,errorCallback);    
    }


    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxFoundation C_REF_PxGetFoundation();
    public static PxFoundation PxGetFoundation(){
        return C_REF_PxGetFoundation();    
    }


    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxProfilerCallback C_PxGetProfilerCallback();
    public static PxProfilerCallback PxGetProfilerCallback(){
        return C_PxGetProfilerCallback();    
    }


    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxSetProfilerCallback(PxProfilerCallback profiler);
    public static void PxSetProfilerCallback(PxProfilerCallback profiler){
        return C_PxSetProfilerCallback(profiler);    
    }


}

public partial struct PxFoundation {

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxFoundation_release(PxFoundation cls);
    public void release(){
        return C_PxFoundation_release(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxErrorCallback C_PxFoundation_getErrorCallback(PxFoundation cls);
    public PxErrorCallback getErrorCallback(){
        return C_PxFoundation_getErrorCallback(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxFoundation_setErrorLevel(PxFoundation cls,Enum mask);
    public void setErrorLevel(Enum mask){
        return C_PxFoundation_setErrorLevel(this,mask);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern Enum C_CONST_PxFoundation_getErrorLevel(PxFoundation cls);
    public Enum getErrorLevel(){
        return C_CONST_PxFoundation_getErrorLevel(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxAllocatorCallback C_PxFoundation_getAllocatorCallback(PxFoundation cls);
    public PxAllocatorCallback getAllocatorCallback(){
        return C_PxFoundation_getAllocatorCallback(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxFoundation_getReportAllocationNames(PxFoundation cls);
    public bool getReportAllocationNames(){
        return C_CONST_PxFoundation_getReportAllocationNames(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxFoundation_setReportAllocationNames(PxFoundation cls,bool value);
    public void setReportAllocationNames(bool value){
        return C_PxFoundation_setReportAllocationNames(this,value);    
    }


}
public partial struct PxProfilerCallback {


}
