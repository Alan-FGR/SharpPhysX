// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
//Unit PxSceneDesc
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    // physx::operator| [static PxSceneFlagsPtr Pipe_New(physx.PxSceneFlagEnum a, physx.PxSceneFlagEnum b)] will be bound as member operator
    
    // physx::operator& [static PxSceneFlagsPtr Amp_New(physx.PxSceneFlagEnum a, physx.PxSceneFlagEnum b)] will be bound as member operator
    
    // physx::operator~ [static PxSceneFlagsPtr Tilde_New(physx.PxSceneFlagEnum a)] will be bound as member operator
    
    public enum PxPruningStructureTypeEnum : int {
        eNONE = 0,              // eNONE
        eDYNAMIC_AABB_TREE = 1, // eDYNAMIC_AABB_TREE
        eSTATIC_AABB_TREE = 2,  // eSTATIC_AABB_TREE
        eLAST = 3,              // eLAST
    }
    
    public enum PxSceneQueryUpdateModeEnum : int {
        eBUILD_ENABLED_COMMIT_ENABLED = 0,   // eBUILD_ENABLED_COMMIT_ENABLED
        eBUILD_ENABLED_COMMIT_DISABLED = 1,  // eBUILD_ENABLED_COMMIT_DISABLED
        eBUILD_DISABLED_COMMIT_DISABLED = 2, // eBUILD_DISABLED_COMMIT_DISABLED
    }
    
    public enum PxFrictionTypeEnum : int {
        ePATCH = 0,           // ePATCH
        eONE_DIRECTIONAL = 1, // eONE_DIRECTIONAL
        eTWO_DIRECTIONAL = 2, // eTWO_DIRECTIONAL
        eFRICTION_COUNT = 3,  // eFRICTION_COUNT
    }
    
    public enum PxSolverTypeEnum : int {
        ePGS = 0, // ePGS
        eTGS = 1, // eTGS
    }
    
    public enum PxSceneFlagEnum : int {
        eENABLE_ACTIVE_ACTORS = 1,                     // eENABLE_ACTIVE_ACTORS = (1<<0)
        eENABLE_CCD = 2,                               // eENABLE_CCD = (1<<1)
        eDISABLE_CCD_RESWEEP = 4,                      // eDISABLE_CCD_RESWEEP = (1<<2)
        eADAPTIVE_FORCE = 8,                           // eADAPTIVE_FORCE = (1<<3)
        eENABLE_KINEMATIC_STATIC_PAIRS = 16,           // eENABLE_KINEMATIC_STATIC_PAIRS PX_DEPRECATED = (1<<4)
        eENABLE_KINEMATIC_PAIRS = 32,                  // eENABLE_KINEMATIC_PAIRS PX_DEPRECATED = (1<<5)
        eENABLE_PCM = 64,                              // eENABLE_PCM = (1 << 6)
        eDISABLE_CONTACT_REPORT_BUFFER_RESIZE = 128,   // eDISABLE_CONTACT_REPORT_BUFFER_RESIZE = (1 << 7)
        eDISABLE_CONTACT_CACHE = 256,                  // eDISABLE_CONTACT_CACHE = (1 << 8)
        eREQUIRE_RW_LOCK = 512,                        // eREQUIRE_RW_LOCK = (1 << 9)
        eENABLE_STABILIZATION = 1024,                  // eENABLE_STABILIZATION = (1 << 10)
        eENABLE_AVERAGE_POINT = 2048,                  // eENABLE_AVERAGE_POINT = (1 << 11)
        eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS = 4096, // eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS = (1 << 12)
        eENABLE_GPU_DYNAMICS = 8192,                   // eENABLE_GPU_DYNAMICS = (1 << 13)
        eENABLE_ENHANCED_DETERMINISM = 16384,          // eENABLE_ENHANCED_DETERMINISM = (1<<14)
        eENABLE_FRICTION_EVERY_ITERATION = 32768,      // eENABLE_FRICTION_EVERY_ITERATION = (1 << 15)
        eMUTABLE_FLAGS = 4097,                         // eMUTABLE_FLAGS = eENABLE_ACTIVE_ACTORS|eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS
    }
    
    public unsafe partial struct PxSceneLimitsPtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxSceneLimitsPtr(PxSceneLimitsPtr ptr);
        
        public static void Free(PxSceneLimitsPtr ptr){
            Freer_physx_PxSceneLimitsPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxSceneLimitsPtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxSceneLimitsPtr Ctor_physx_PxSceneLimitsPtr_();
        
        public static physx.PxSceneLimitsPtr New() {
            return Ctor_physx_PxSceneLimitsPtr_();
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneLimits_GET_maxNbActors(PxSceneLimitsPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneLimits_SET_maxNbActors(PxSceneLimitsPtr cls, uint value);
        
        public uint maxNbActors {
            get => PxSceneLimits_GET_maxNbActors(this);
            set => PxSceneLimits_SET_maxNbActors(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneLimits_GET_maxNbBodies(PxSceneLimitsPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneLimits_SET_maxNbBodies(PxSceneLimitsPtr cls, uint value);
        
        public uint maxNbBodies {
            get => PxSceneLimits_GET_maxNbBodies(this);
            set => PxSceneLimits_SET_maxNbBodies(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneLimits_GET_maxNbStaticShapes(PxSceneLimitsPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneLimits_SET_maxNbStaticShapes(PxSceneLimitsPtr cls, uint value);
        
        public uint maxNbStaticShapes {
            get => PxSceneLimits_GET_maxNbStaticShapes(this);
            set => PxSceneLimits_SET_maxNbStaticShapes(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneLimits_GET_maxNbDynamicShapes(PxSceneLimitsPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneLimits_SET_maxNbDynamicShapes(PxSceneLimitsPtr cls, uint value);
        
        public uint maxNbDynamicShapes {
            get => PxSceneLimits_GET_maxNbDynamicShapes(this);
            set => PxSceneLimits_SET_maxNbDynamicShapes(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneLimits_GET_maxNbAggregates(PxSceneLimitsPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneLimits_SET_maxNbAggregates(PxSceneLimitsPtr cls, uint value);
        
        public uint maxNbAggregates {
            get => PxSceneLimits_GET_maxNbAggregates(this);
            set => PxSceneLimits_SET_maxNbAggregates(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneLimits_GET_maxNbConstraints(PxSceneLimitsPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneLimits_SET_maxNbConstraints(PxSceneLimitsPtr cls, uint value);
        
        public uint maxNbConstraints {
            get => PxSceneLimits_GET_maxNbConstraints(this);
            set => PxSceneLimits_SET_maxNbConstraints(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneLimits_GET_maxNbRegions(PxSceneLimitsPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneLimits_SET_maxNbRegions(PxSceneLimitsPtr cls, uint value);
        
        public uint maxNbRegions {
            get => PxSceneLimits_GET_maxNbRegions(this);
            set => PxSceneLimits_SET_maxNbRegions(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneLimits_GET_maxNbBroadPhaseOverlaps(PxSceneLimitsPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneLimits_SET_maxNbBroadPhaseOverlaps(PxSceneLimitsPtr cls, uint value);
        
        public uint maxNbBroadPhaseOverlaps {
            get => PxSceneLimits_GET_maxNbBroadPhaseOverlaps(this);
            set => PxSceneLimits_SET_maxNbBroadPhaseOverlaps(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxSceneLimits_setToDefault(physx.PxSceneLimitsPtr pvk_this);
        
        public void setToDefault() {
            physx.PxSceneLimitsPtr pvk_in_this = this;
            void_physx_PxSceneLimits_setToDefault(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxSceneLimits_isValid(physx.PxSceneLimitsPtr pvk_this);
        
        public bool isValid() {
            physx.PxSceneLimitsPtr pvk_in_this = this;
            return bool_const_physx_PxSceneLimits_isValid(pvk_in_this);
        }
    }
    
    public unsafe partial struct PxgDynamicsMemoryConfigPtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxgDynamicsMemoryConfigPtr(PxgDynamicsMemoryConfigPtr ptr);
        
        public static void Free(PxgDynamicsMemoryConfigPtr ptr){
            Freer_physx_PxgDynamicsMemoryConfigPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxgDynamicsMemoryConfigPtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxgDynamicsMemoryConfigPtr Ctor_physx_PxgDynamicsMemoryConfigPtr_();
        
        public static physx.PxgDynamicsMemoryConfigPtr New() {
            return Ctor_physx_PxgDynamicsMemoryConfigPtr_();
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxgDynamicsMemoryConfig_GET_constraintBufferCapacity(PxgDynamicsMemoryConfigPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxgDynamicsMemoryConfig_SET_constraintBufferCapacity(PxgDynamicsMemoryConfigPtr cls, uint value);
        
        public uint constraintBufferCapacity {
            get => PxgDynamicsMemoryConfig_GET_constraintBufferCapacity(this);
            set => PxgDynamicsMemoryConfig_SET_constraintBufferCapacity(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxgDynamicsMemoryConfig_GET_contactBufferCapacity(PxgDynamicsMemoryConfigPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxgDynamicsMemoryConfig_SET_contactBufferCapacity(PxgDynamicsMemoryConfigPtr cls, uint value);
        
        public uint contactBufferCapacity {
            get => PxgDynamicsMemoryConfig_GET_contactBufferCapacity(this);
            set => PxgDynamicsMemoryConfig_SET_contactBufferCapacity(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxgDynamicsMemoryConfig_GET_tempBufferCapacity(PxgDynamicsMemoryConfigPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxgDynamicsMemoryConfig_SET_tempBufferCapacity(PxgDynamicsMemoryConfigPtr cls, uint value);
        
        public uint tempBufferCapacity {
            get => PxgDynamicsMemoryConfig_GET_tempBufferCapacity(this);
            set => PxgDynamicsMemoryConfig_SET_tempBufferCapacity(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxgDynamicsMemoryConfig_GET_contactStreamSize(PxgDynamicsMemoryConfigPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxgDynamicsMemoryConfig_SET_contactStreamSize(PxgDynamicsMemoryConfigPtr cls, uint value);
        
        public uint contactStreamSize {
            get => PxgDynamicsMemoryConfig_GET_contactStreamSize(this);
            set => PxgDynamicsMemoryConfig_SET_contactStreamSize(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxgDynamicsMemoryConfig_GET_patchStreamSize(PxgDynamicsMemoryConfigPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxgDynamicsMemoryConfig_SET_patchStreamSize(PxgDynamicsMemoryConfigPtr cls, uint value);
        
        public uint patchStreamSize {
            get => PxgDynamicsMemoryConfig_GET_patchStreamSize(this);
            set => PxgDynamicsMemoryConfig_SET_patchStreamSize(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxgDynamicsMemoryConfig_GET_forceStreamCapacity(PxgDynamicsMemoryConfigPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxgDynamicsMemoryConfig_SET_forceStreamCapacity(PxgDynamicsMemoryConfigPtr cls, uint value);
        
        public uint forceStreamCapacity {
            get => PxgDynamicsMemoryConfig_GET_forceStreamCapacity(this);
            set => PxgDynamicsMemoryConfig_SET_forceStreamCapacity(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxgDynamicsMemoryConfig_GET_heapCapacity(PxgDynamicsMemoryConfigPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxgDynamicsMemoryConfig_SET_heapCapacity(PxgDynamicsMemoryConfigPtr cls, uint value);
        
        public uint heapCapacity {
            get => PxgDynamicsMemoryConfig_GET_heapCapacity(this);
            set => PxgDynamicsMemoryConfig_SET_heapCapacity(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxgDynamicsMemoryConfig_GET_foundLostPairsCapacity(PxgDynamicsMemoryConfigPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxgDynamicsMemoryConfig_SET_foundLostPairsCapacity(PxgDynamicsMemoryConfigPtr cls, uint value);
        
        public uint foundLostPairsCapacity {
            get => PxgDynamicsMemoryConfig_GET_foundLostPairsCapacity(this);
            set => PxgDynamicsMemoryConfig_SET_foundLostPairsCapacity(this, value);
        }
    }
    
    public unsafe partial struct PxSceneDescPtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxSceneDescPtr(PxSceneDescPtr ptr);
        
        public static void Free(PxSceneDescPtr ptr){
            Freer_physx_PxSceneDescPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxSceneDescPtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxSceneDescPtr Ctor_physx_PxSceneDescPtr_physx_PxTolerancesScalePtr(physx.PxTolerancesScalePtr pvk_scale);
        
        public static physx.PxSceneDescPtr New(physx.PxTolerancesScalePtr scale) {
            physx.PxTolerancesScalePtr pvk_in_scale = scale;
            return Ctor_physx_PxSceneDescPtr_physx_PxTolerancesScalePtr(pvk_in_scale);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3Ptr PxSceneDesc_GET_gravity(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_gravity(PxSceneDescPtr cls, physx.PxVec3Ptr value);
        
        public physx.PxVec3Ptr gravity {
            get => PxSceneDesc_GET_gravity(this);
            set => PxSceneDesc_SET_gravity(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr PxSceneDesc_GET_filterShaderData(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_filterShaderData(PxSceneDescPtr cls, IntPtr value);
        
        public IntPtr filterShaderData {
            get => PxSceneDesc_GET_filterShaderData(this);
            set => PxSceneDesc_SET_filterShaderData(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneDesc_GET_filterShaderDataSize(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_filterShaderDataSize(PxSceneDescPtr cls, uint value);
        
        public uint filterShaderDataSize {
            get => PxSceneDesc_GET_filterShaderDataSize(this);
            set => PxSceneDesc_SET_filterShaderDataSize(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxSimulationFilterShader PxSceneDesc_GET_filterShader(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_filterShader(PxSceneDescPtr cls, PxSimulationFilterShader value);
        
        public PxSimulationFilterShader filterShader {
            get => PxSceneDesc_GET_filterShader(this);
            set => PxSceneDesc_SET_filterShader(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxSimulationFilterCallbackPtr PxSceneDesc_GET_filterCallback(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_filterCallback(PxSceneDescPtr cls, physx.PxSimulationFilterCallbackPtr value);
        
        public physx.PxSimulationFilterCallbackPtr filterCallback {
            get => PxSceneDesc_GET_filterCallback(this);
            set => PxSceneDesc_SET_filterCallback(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxPairFilteringModeEnum PxSceneDesc_GET_kineKineFilteringMode(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_kineKineFilteringMode(PxSceneDescPtr cls, physx.PxPairFilteringModeEnum value);
        
        public physx.PxPairFilteringModeEnum kineKineFilteringMode {
            get => PxSceneDesc_GET_kineKineFilteringMode(this);
            set => PxSceneDesc_SET_kineKineFilteringMode(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxPairFilteringModeEnum PxSceneDesc_GET_staticKineFilteringMode(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_staticKineFilteringMode(PxSceneDescPtr cls, physx.PxPairFilteringModeEnum value);
        
        public physx.PxPairFilteringModeEnum staticKineFilteringMode {
            get => PxSceneDesc_GET_staticKineFilteringMode(this);
            set => PxSceneDesc_SET_staticKineFilteringMode(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxBroadPhaseTypeEnum PxSceneDesc_GET_broadPhaseType(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_broadPhaseType(PxSceneDescPtr cls, physx.PxBroadPhaseTypeEnum value);
        
        public physx.PxBroadPhaseTypeEnum broadPhaseType {
            get => PxSceneDesc_GET_broadPhaseType(this);
            set => PxSceneDesc_SET_broadPhaseType(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxBroadPhaseCallbackPtr PxSceneDesc_GET_broadPhaseCallback(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_broadPhaseCallback(PxSceneDescPtr cls, physx.PxBroadPhaseCallbackPtr value);
        
        public physx.PxBroadPhaseCallbackPtr broadPhaseCallback {
            get => PxSceneDesc_GET_broadPhaseCallback(this);
            set => PxSceneDesc_SET_broadPhaseCallback(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxSceneLimitsPtr PxSceneDesc_GET_limits(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_limits(PxSceneDescPtr cls, physx.PxSceneLimitsPtr value);
        
        public physx.PxSceneLimitsPtr limits {
            get => PxSceneDesc_GET_limits(this);
            set => PxSceneDesc_SET_limits(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxFrictionTypeEnum PxSceneDesc_GET_frictionType(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_frictionType(PxSceneDescPtr cls, physx.PxFrictionTypeEnum value);
        
        public physx.PxFrictionTypeEnum frictionType {
            get => PxSceneDesc_GET_frictionType(this);
            set => PxSceneDesc_SET_frictionType(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxSolverTypeEnum PxSceneDesc_GET_solverType(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_solverType(PxSceneDescPtr cls, physx.PxSolverTypeEnum value);
        
        public physx.PxSolverTypeEnum solverType {
            get => PxSceneDesc_GET_solverType(this);
            set => PxSceneDesc_SET_solverType(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxSceneDesc_GET_bounceThresholdVelocity(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_bounceThresholdVelocity(PxSceneDescPtr cls, float value);
        
        public float bounceThresholdVelocity {
            get => PxSceneDesc_GET_bounceThresholdVelocity(this);
            set => PxSceneDesc_SET_bounceThresholdVelocity(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxSceneDesc_GET_frictionOffsetThreshold(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_frictionOffsetThreshold(PxSceneDescPtr cls, float value);
        
        public float frictionOffsetThreshold {
            get => PxSceneDesc_GET_frictionOffsetThreshold(this);
            set => PxSceneDesc_SET_frictionOffsetThreshold(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxSceneDesc_GET_ccdMaxSeparation(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_ccdMaxSeparation(PxSceneDescPtr cls, float value);
        
        public float ccdMaxSeparation {
            get => PxSceneDesc_GET_ccdMaxSeparation(this);
            set => PxSceneDesc_SET_ccdMaxSeparation(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxSceneDesc_GET_solverOffsetSlop(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_solverOffsetSlop(PxSceneDescPtr cls, float value);
        
        public float solverOffsetSlop {
            get => PxSceneDesc_GET_solverOffsetSlop(this);
            set => PxSceneDesc_SET_solverOffsetSlop(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxSceneFlagsPtr PxSceneDesc_GET_flags(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_flags(PxSceneDescPtr cls, PxSceneFlagsPtr value);
        
        public PxSceneFlagsPtr flags {
            get => PxSceneDesc_GET_flags(this);
            set => PxSceneDesc_SET_flags(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxCpuDispatcherPtr PxSceneDesc_GET_cpuDispatcher(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_cpuDispatcher(PxSceneDescPtr cls, physx.PxCpuDispatcherPtr value);
        
        public physx.PxCpuDispatcherPtr cpuDispatcher {
            get => PxSceneDesc_GET_cpuDispatcher(this);
            set => PxSceneDesc_SET_cpuDispatcher(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxGpuDispatcherPtr PxSceneDesc_GET_gpuDispatcher(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_gpuDispatcher(PxSceneDescPtr cls, physx.PxGpuDispatcherPtr value);
        
        public physx.PxGpuDispatcherPtr gpuDispatcher {
            get => PxSceneDesc_GET_gpuDispatcher(this);
            set => PxSceneDesc_SET_gpuDispatcher(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxPruningStructureTypeEnum PxSceneDesc_GET_staticStructure(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_staticStructure(PxSceneDescPtr cls, physx.PxPruningStructureTypeEnum value);
        
        public physx.PxPruningStructureTypeEnum staticStructure {
            get => PxSceneDesc_GET_staticStructure(this);
            set => PxSceneDesc_SET_staticStructure(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxPruningStructureTypeEnum PxSceneDesc_GET_dynamicStructure(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_dynamicStructure(PxSceneDescPtr cls, physx.PxPruningStructureTypeEnum value);
        
        public physx.PxPruningStructureTypeEnum dynamicStructure {
            get => PxSceneDesc_GET_dynamicStructure(this);
            set => PxSceneDesc_SET_dynamicStructure(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneDesc_GET_dynamicTreeRebuildRateHint(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_dynamicTreeRebuildRateHint(PxSceneDescPtr cls, uint value);
        
        public uint dynamicTreeRebuildRateHint {
            get => PxSceneDesc_GET_dynamicTreeRebuildRateHint(this);
            set => PxSceneDesc_SET_dynamicTreeRebuildRateHint(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxSceneQueryUpdateModeEnum PxSceneDesc_GET_sceneQueryUpdateMode(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_sceneQueryUpdateMode(PxSceneDescPtr cls, physx.PxSceneQueryUpdateModeEnum value);
        
        public physx.PxSceneQueryUpdateModeEnum sceneQueryUpdateMode {
            get => PxSceneDesc_GET_sceneQueryUpdateMode(this);
            set => PxSceneDesc_SET_sceneQueryUpdateMode(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr PxSceneDesc_GET_userData(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_userData(PxSceneDescPtr cls, IntPtr value);
        
        public IntPtr userData {
            get => PxSceneDesc_GET_userData(this);
            set => PxSceneDesc_SET_userData(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneDesc_GET_solverBatchSize(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_solverBatchSize(PxSceneDescPtr cls, uint value);
        
        public uint solverBatchSize {
            get => PxSceneDesc_GET_solverBatchSize(this);
            set => PxSceneDesc_SET_solverBatchSize(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneDesc_GET_nbContactDataBlocks(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_nbContactDataBlocks(PxSceneDescPtr cls, uint value);
        
        public uint nbContactDataBlocks {
            get => PxSceneDesc_GET_nbContactDataBlocks(this);
            set => PxSceneDesc_SET_nbContactDataBlocks(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneDesc_GET_maxNbContactDataBlocks(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_maxNbContactDataBlocks(PxSceneDescPtr cls, uint value);
        
        public uint maxNbContactDataBlocks {
            get => PxSceneDesc_GET_maxNbContactDataBlocks(this);
            set => PxSceneDesc_SET_maxNbContactDataBlocks(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxSceneDesc_GET_maxBiasCoefficient(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_maxBiasCoefficient(PxSceneDescPtr cls, float value);
        
        public float maxBiasCoefficient {
            get => PxSceneDesc_GET_maxBiasCoefficient(this);
            set => PxSceneDesc_SET_maxBiasCoefficient(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneDesc_GET_contactReportStreamBufferSize(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_contactReportStreamBufferSize(PxSceneDescPtr cls, uint value);
        
        public uint contactReportStreamBufferSize {
            get => PxSceneDesc_GET_contactReportStreamBufferSize(this);
            set => PxSceneDesc_SET_contactReportStreamBufferSize(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneDesc_GET_ccdMaxPasses(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_ccdMaxPasses(PxSceneDescPtr cls, uint value);
        
        public uint ccdMaxPasses {
            get => PxSceneDesc_GET_ccdMaxPasses(this);
            set => PxSceneDesc_SET_ccdMaxPasses(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxSceneDesc_GET_wakeCounterResetValue(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_wakeCounterResetValue(PxSceneDescPtr cls, float value);
        
        public float wakeCounterResetValue {
            get => PxSceneDesc_GET_wakeCounterResetValue(this);
            set => PxSceneDesc_SET_wakeCounterResetValue(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxBounds3Ptr PxSceneDesc_GET_sanityBounds(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_sanityBounds(PxSceneDescPtr cls, physx.PxBounds3Ptr value);
        
        public physx.PxBounds3Ptr sanityBounds {
            get => PxSceneDesc_GET_sanityBounds(this);
            set => PxSceneDesc_SET_sanityBounds(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxgDynamicsMemoryConfigPtr PxSceneDesc_GET_gpuDynamicsConfig(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_gpuDynamicsConfig(PxSceneDescPtr cls, physx.PxgDynamicsMemoryConfigPtr value);
        
        public physx.PxgDynamicsMemoryConfigPtr gpuDynamicsConfig {
            get => PxSceneDesc_GET_gpuDynamicsConfig(this);
            set => PxSceneDesc_SET_gpuDynamicsConfig(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneDesc_GET_gpuMaxNumPartitions(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_gpuMaxNumPartitions(PxSceneDescPtr cls, uint value);
        
        public uint gpuMaxNumPartitions {
            get => PxSceneDesc_GET_gpuMaxNumPartitions(this);
            set => PxSceneDesc_SET_gpuMaxNumPartitions(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSceneDesc_GET_gpuComputeVersion(PxSceneDescPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSceneDesc_SET_gpuComputeVersion(PxSceneDescPtr cls, uint value);
        
        public uint gpuComputeVersion {
            get => PxSceneDesc_GET_gpuComputeVersion(this);
            set => PxSceneDesc_SET_gpuComputeVersion(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxSceneDesc_setToDefault_physx_PxTolerancesScalePtr_(physx.PxSceneDescPtr pvk_this, physx.PxTolerancesScalePtr pvk_scale);
        
        public void setToDefault(physx.PxTolerancesScalePtr scale) {
            physx.PxSceneDescPtr pvk_in_this = this;
            physx.PxTolerancesScalePtr pvk_in_scale = scale;
            void_physx_PxSceneDesc_setToDefault_physx_PxTolerancesScalePtr_(pvk_in_this, pvk_in_scale);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxSceneDesc_isValid(physx.PxSceneDescPtr pvk_this);
        
        public bool isValid() {
            physx.PxSceneDescPtr pvk_in_this = this;
            return bool_const_physx_PxSceneDesc_isValid(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxTolerancesScalePtr physx_PxTolerancesScalePtr_const_physx_PxSceneDesc_getTolerancesScale(physx.PxSceneDescPtr pvk_this);
        
        public physx.PxTolerancesScalePtr getTolerancesScale() {
            physx.PxSceneDescPtr pvk_in_this = this;
            return physx_PxTolerancesScalePtr_const_physx_PxSceneDesc_getTolerancesScale(pvk_in_this);
        }
    }
    
}
