// Generated by minBND 5.1.93.2 - Â© github.com/Alan-FGR
using System;
using System.Runtime.InteropServices;
using static minBND_pinvokes;

public static unsafe partial class physx {

    public static physx.PxSceneFlagsPtr OpPipe_New(physx.PxSceneFlagEnum a, physx.PxSceneFlagEnum b) {
        physx.PxSceneFlagEnum pvk_in_a = a;
        physx.PxSceneFlagEnum pvk_in_b = b;
        return PxSceneFlagsPtr_operator_Ptr_Pipe_PxSceneFlagEnum_PxSceneFlagEnum_(pvk_in_a, pvk_in_b);
    }

    public static physx.PxSceneFlagsPtr OpAnd_New(physx.PxSceneFlagEnum a, physx.PxSceneFlagEnum b) {
        physx.PxSceneFlagEnum pvk_in_a = a;
        physx.PxSceneFlagEnum pvk_in_b = b;
        return PxSceneFlagsPtr_operator_Ptr_Amp_PxSceneFlagEnum_PxSceneFlagEnum_(pvk_in_a, pvk_in_b);
    }

    public static physx.PxSceneFlagsPtr OpTilde_New(physx.PxSceneFlagEnum a) {
        physx.PxSceneFlagEnum pvk_in_a = a;
        return PxSceneFlagsPtr_operator_Ptr_Tilde_PxSceneFlagEnum_(pvk_in_a);
    }

    public enum PxPruningStructureTypeEnum : int {
        eNONE = 0,              // eNONE
        eDYNAMIC_AABB_TREE = 1, // eDYNAMIC_AABB_TREE
        eSTATIC_AABB_TREE = 2,  // eSTATIC_AABB_TREE
        eLAST = 3,              // eLAST
    }

    public enum PxSceneQueryUpdateModeEnum : int {
        eBUILD_ENABLED_COMMIT_ENABLED = 0,   // eBUILD_ENABLED_COMMIT_ENABLED
        eBUILD_ENABLED_COMMIT_DISABLED = 1,  // eBUILD_ENABLED_COMMIT_DISABLED
        eBUILD_DISABLED_COMMIT_DISABLED = 2, // eBUILD_DISABLED_COMMIT_DISABLED
    }

    public enum PxFrictionTypeEnum : int {
        ePATCH = 0,           // ePATCH
        eONE_DIRECTIONAL = 1, // eONE_DIRECTIONAL
        eTWO_DIRECTIONAL = 2, // eTWO_DIRECTIONAL
        eFRICTION_COUNT = 3,  // eFRICTION_COUNT
    }

    public enum PxSolverTypeEnum : int {
        ePGS = 0, // ePGS
        eTGS = 1, // eTGS
    }

    public enum PxSceneFlagEnum : int {
        eENABLE_ACTIVE_ACTORS = 1,                     // eENABLE_ACTIVE_ACTORS = (1<<0)
        eENABLE_CCD = 2,                               // eENABLE_CCD = (1<<1)
        eDISABLE_CCD_RESWEEP = 4,                      // eDISABLE_CCD_RESWEEP = (1<<2)
        eADAPTIVE_FORCE = 8,                           // eADAPTIVE_FORCE = (1<<3)
        eENABLE_KINEMATIC_STATIC_PAIRS = 16,           // eENABLE_KINEMATIC_STATIC_PAIRS PX_DEPRECATED = (1<<4)
        eENABLE_KINEMATIC_PAIRS = 32,                  // eENABLE_KINEMATIC_PAIRS PX_DEPRECATED = (1<<5)
        eENABLE_PCM = 64,                              // eENABLE_PCM = (1 << 6)
        eDISABLE_CONTACT_REPORT_BUFFER_RESIZE = 128,   // eDISABLE_CONTACT_REPORT_BUFFER_RESIZE = (1 << 7)
        eDISABLE_CONTACT_CACHE = 256,                  // eDISABLE_CONTACT_CACHE = (1 << 8)
        eREQUIRE_RW_LOCK = 512,                        // eREQUIRE_RW_LOCK = (1 << 9)
        eENABLE_STABILIZATION = 1024,                  // eENABLE_STABILIZATION = (1 << 10)
        eENABLE_AVERAGE_POINT = 2048,                  // eENABLE_AVERAGE_POINT = (1 << 11)
        eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS = 4096, // eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS = (1 << 12)
        eENABLE_GPU_DYNAMICS = 8192,                   // eENABLE_GPU_DYNAMICS = (1 << 13)
        eENABLE_ENHANCED_DETERMINISM = 16384,          // eENABLE_ENHANCED_DETERMINISM = (1<<14)
        eENABLE_FRICTION_EVERY_ITERATION = 32768,      // eENABLE_FRICTION_EVERY_ITERATION = (1 << 15)
        eMUTABLE_FLAGS = 4097,                         // eMUTABLE_FLAGS = eENABLE_ACTIVE_ACTORS|eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS
    }

    public unsafe partial struct PxSceneLimitsPtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxSceneLimitsPtr ptr){
            Freer_physx_PxSceneLimitsPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxSceneLimitsPtr(this);
        }

        public static physx.PxSceneLimitsPtr New() {
            return Ctor_PxSceneLimitsPtr_();
        }

        public uint maxNbActors {
            get => PxSceneLimitsPtr_GET_maxNbActors(this);
            set => PxSceneLimitsPtr_SET_maxNbActors(this, value);
        }

        public uint maxNbBodies {
            get => PxSceneLimitsPtr_GET_maxNbBodies(this);
            set => PxSceneLimitsPtr_SET_maxNbBodies(this, value);
        }

        public uint maxNbStaticShapes {
            get => PxSceneLimitsPtr_GET_maxNbStaticShapes(this);
            set => PxSceneLimitsPtr_SET_maxNbStaticShapes(this, value);
        }

        public uint maxNbDynamicShapes {
            get => PxSceneLimitsPtr_GET_maxNbDynamicShapes(this);
            set => PxSceneLimitsPtr_SET_maxNbDynamicShapes(this, value);
        }

        public uint maxNbAggregates {
            get => PxSceneLimitsPtr_GET_maxNbAggregates(this);
            set => PxSceneLimitsPtr_SET_maxNbAggregates(this, value);
        }

        public uint maxNbConstraints {
            get => PxSceneLimitsPtr_GET_maxNbConstraints(this);
            set => PxSceneLimitsPtr_SET_maxNbConstraints(this, value);
        }

        public uint maxNbRegions {
            get => PxSceneLimitsPtr_GET_maxNbRegions(this);
            set => PxSceneLimitsPtr_SET_maxNbRegions(this, value);
        }

        public uint maxNbBroadPhaseOverlaps {
            get => PxSceneLimitsPtr_GET_maxNbBroadPhaseOverlaps(this);
            set => PxSceneLimitsPtr_SET_maxNbBroadPhaseOverlaps(this, value);
        }

        public void setToDefault() {
            physx.PxSceneLimitsPtr pvk_in_this = this;
            void_PxSceneLimitsPtr_setToDefaultPtr(pvk_in_this);
        }

        public bool isValid() {
            physx.PxSceneLimitsPtr pvk_in_this = this;
            return bool_const_PxSceneLimitsPtr_isValidPtr(pvk_in_this);
        }

    }

    public unsafe partial struct PxgDynamicsMemoryConfigPtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxgDynamicsMemoryConfigPtr ptr){
            Freer_physx_PxgDynamicsMemoryConfigPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxgDynamicsMemoryConfigPtr(this);
        }

        public static physx.PxgDynamicsMemoryConfigPtr New() {
            return Ctor_PxgDynamicsMemoryConfigPtr_();
        }

        public uint constraintBufferCapacity {
            get => PxgDynamicsMemoryConfigPtr_GET_constraintBufferCapacity(this);
            set => PxgDynamicsMemoryConfigPtr_SET_constraintBufferCapacity(this, value);
        }

        public uint contactBufferCapacity {
            get => PxgDynamicsMemoryConfigPtr_GET_contactBufferCapacity(this);
            set => PxgDynamicsMemoryConfigPtr_SET_contactBufferCapacity(this, value);
        }

        public uint tempBufferCapacity {
            get => PxgDynamicsMemoryConfigPtr_GET_tempBufferCapacity(this);
            set => PxgDynamicsMemoryConfigPtr_SET_tempBufferCapacity(this, value);
        }

        public uint contactStreamSize {
            get => PxgDynamicsMemoryConfigPtr_GET_contactStreamSize(this);
            set => PxgDynamicsMemoryConfigPtr_SET_contactStreamSize(this, value);
        }

        public uint patchStreamSize {
            get => PxgDynamicsMemoryConfigPtr_GET_patchStreamSize(this);
            set => PxgDynamicsMemoryConfigPtr_SET_patchStreamSize(this, value);
        }

        public uint forceStreamCapacity {
            get => PxgDynamicsMemoryConfigPtr_GET_forceStreamCapacity(this);
            set => PxgDynamicsMemoryConfigPtr_SET_forceStreamCapacity(this, value);
        }

        public uint heapCapacity {
            get => PxgDynamicsMemoryConfigPtr_GET_heapCapacity(this);
            set => PxgDynamicsMemoryConfigPtr_SET_heapCapacity(this, value);
        }

        public uint foundLostPairsCapacity {
            get => PxgDynamicsMemoryConfigPtr_GET_foundLostPairsCapacity(this);
            set => PxgDynamicsMemoryConfigPtr_SET_foundLostPairsCapacity(this, value);
        }

    }

    public unsafe partial struct PxSceneDescPtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxSceneDescPtr ptr){
            Freer_physx_PxSceneDescPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxSceneDescPtr(this);
        }

        public static physx.PxSceneDescPtr New(physx.PxTolerancesScale* scale) {
            physx.PxTolerancesScale* pvk_in_scale = scale;
            return Ctor_PxSceneDescPtr_PxTolerancesScale_(pvk_in_scale);
        }

        public static physx.PxSceneDescPtr New(physx.PxTolerancesScale scale) {
            return New((physx.PxTolerancesScale*)&scale);
        }

        public static physx.PxSceneDescPtr New(physx.PxTolerancesScale.Ref scale) {
            return New((physx.PxTolerancesScale*)(*((IntPtr*)(&scale))));
        }

        public physx.PxVec3 gravity {
            get { physx.PxVec3 GetRetRef; PxSceneDescPtr_GET_gravity(this, &GetRetRef); return GetRetRef; }
            set => PxSceneDescPtr_SET_gravity(this, value);
        }

        public IntPtr filterShaderData {
            get => PxSceneDescPtr_GET_filterShaderData(this);
            set => PxSceneDescPtr_SET_filterShaderData(this, value);
        }

        public uint filterShaderDataSize {
            get => PxSceneDescPtr_GET_filterShaderDataSize(this);
            set => PxSceneDescPtr_SET_filterShaderDataSize(this, value);
        }

        public PxSimulationFilterShader filterShader {
            get => PxSceneDescPtr_GET_filterShader(this);
            set => PxSceneDescPtr_SET_filterShader(this, value);
        }

        public physx.PxSimulationFilterCallbackPtr filterCallback {
            get => PxSceneDescPtr_GET_filterCallback(this);
            set => PxSceneDescPtr_SET_filterCallback(this, value);
        }

        public physx.PxPairFilteringModeEnum kineKineFilteringMode {
            get => PxSceneDescPtr_GET_kineKineFilteringMode(this);
            set => PxSceneDescPtr_SET_kineKineFilteringMode(this, value);
        }

        public physx.PxPairFilteringModeEnum staticKineFilteringMode {
            get => PxSceneDescPtr_GET_staticKineFilteringMode(this);
            set => PxSceneDescPtr_SET_staticKineFilteringMode(this, value);
        }

        public physx.PxBroadPhaseTypeEnum broadPhaseType {
            get => PxSceneDescPtr_GET_broadPhaseType(this);
            set => PxSceneDescPtr_SET_broadPhaseType(this, value);
        }

        public physx.PxBroadPhaseCallbackPtr broadPhaseCallback {
            get => PxSceneDescPtr_GET_broadPhaseCallback(this);
            set => PxSceneDescPtr_SET_broadPhaseCallback(this, value);
        }

        public physx.PxSceneLimitsPtr limits {
            get => PxSceneDescPtr_GET_limits(this);
            set => PxSceneDescPtr_SET_limits(this, value);
        }

        public physx.PxFrictionTypeEnum frictionType {
            get => PxSceneDescPtr_GET_frictionType(this);
            set => PxSceneDescPtr_SET_frictionType(this, value);
        }

        public physx.PxSolverTypeEnum solverType {
            get => PxSceneDescPtr_GET_solverType(this);
            set => PxSceneDescPtr_SET_solverType(this, value);
        }

        public float bounceThresholdVelocity {
            get => PxSceneDescPtr_GET_bounceThresholdVelocity(this);
            set => PxSceneDescPtr_SET_bounceThresholdVelocity(this, value);
        }

        public float frictionOffsetThreshold {
            get => PxSceneDescPtr_GET_frictionOffsetThreshold(this);
            set => PxSceneDescPtr_SET_frictionOffsetThreshold(this, value);
        }

        public float ccdMaxSeparation {
            get => PxSceneDescPtr_GET_ccdMaxSeparation(this);
            set => PxSceneDescPtr_SET_ccdMaxSeparation(this, value);
        }

        public float solverOffsetSlop {
            get => PxSceneDescPtr_GET_solverOffsetSlop(this);
            set => PxSceneDescPtr_SET_solverOffsetSlop(this, value);
        }

        public physx.PxSceneFlagsPtr flags {
            get => PxSceneDescPtr_GET_flags(this);
            set => PxSceneDescPtr_SET_flags(this, value);
        }

        public physx.PxCpuDispatcherPtr cpuDispatcher {
            get => PxSceneDescPtr_GET_cpuDispatcher(this);
            set => PxSceneDescPtr_SET_cpuDispatcher(this, value);
        }

        public physx.PxGpuDispatcherPtr gpuDispatcher {
            get => PxSceneDescPtr_GET_gpuDispatcher(this);
            set => PxSceneDescPtr_SET_gpuDispatcher(this, value);
        }

        public physx.PxPruningStructureTypeEnum staticStructure {
            get => PxSceneDescPtr_GET_staticStructure(this);
            set => PxSceneDescPtr_SET_staticStructure(this, value);
        }

        public physx.PxPruningStructureTypeEnum dynamicStructure {
            get => PxSceneDescPtr_GET_dynamicStructure(this);
            set => PxSceneDescPtr_SET_dynamicStructure(this, value);
        }

        public uint dynamicTreeRebuildRateHint {
            get => PxSceneDescPtr_GET_dynamicTreeRebuildRateHint(this);
            set => PxSceneDescPtr_SET_dynamicTreeRebuildRateHint(this, value);
        }

        public physx.PxSceneQueryUpdateModeEnum sceneQueryUpdateMode {
            get => PxSceneDescPtr_GET_sceneQueryUpdateMode(this);
            set => PxSceneDescPtr_SET_sceneQueryUpdateMode(this, value);
        }

        public IntPtr userData {
            get => PxSceneDescPtr_GET_userData(this);
            set => PxSceneDescPtr_SET_userData(this, value);
        }

        public uint solverBatchSize {
            get => PxSceneDescPtr_GET_solverBatchSize(this);
            set => PxSceneDescPtr_SET_solverBatchSize(this, value);
        }

        public uint nbContactDataBlocks {
            get => PxSceneDescPtr_GET_nbContactDataBlocks(this);
            set => PxSceneDescPtr_SET_nbContactDataBlocks(this, value);
        }

        public uint maxNbContactDataBlocks {
            get => PxSceneDescPtr_GET_maxNbContactDataBlocks(this);
            set => PxSceneDescPtr_SET_maxNbContactDataBlocks(this, value);
        }

        public float maxBiasCoefficient {
            get => PxSceneDescPtr_GET_maxBiasCoefficient(this);
            set => PxSceneDescPtr_SET_maxBiasCoefficient(this, value);
        }

        public uint contactReportStreamBufferSize {
            get => PxSceneDescPtr_GET_contactReportStreamBufferSize(this);
            set => PxSceneDescPtr_SET_contactReportStreamBufferSize(this, value);
        }

        public uint ccdMaxPasses {
            get => PxSceneDescPtr_GET_ccdMaxPasses(this);
            set => PxSceneDescPtr_SET_ccdMaxPasses(this, value);
        }

        public float wakeCounterResetValue {
            get => PxSceneDescPtr_GET_wakeCounterResetValue(this);
            set => PxSceneDescPtr_SET_wakeCounterResetValue(this, value);
        }

        public physx.PxBounds3 sanityBounds {
            get { physx.PxBounds3 GetRetRef; PxSceneDescPtr_GET_sanityBounds(this, &GetRetRef); return GetRetRef; }
            set => PxSceneDescPtr_SET_sanityBounds(this, value);
        }

        public physx.PxgDynamicsMemoryConfigPtr gpuDynamicsConfig {
            get => PxSceneDescPtr_GET_gpuDynamicsConfig(this);
            set => PxSceneDescPtr_SET_gpuDynamicsConfig(this, value);
        }

        public uint gpuMaxNumPartitions {
            get => PxSceneDescPtr_GET_gpuMaxNumPartitions(this);
            set => PxSceneDescPtr_SET_gpuMaxNumPartitions(this, value);
        }

        public uint gpuComputeVersion {
            get => PxSceneDescPtr_GET_gpuComputeVersion(this);
            set => PxSceneDescPtr_SET_gpuComputeVersion(this, value);
        }

        public void setToDefault(physx.PxTolerancesScale* scale) {
            physx.PxSceneDescPtr pvk_in_this = this;
            physx.PxTolerancesScale* pvk_in_scale = scale;
            void_PxSceneDescPtr_setToDefaultPtr_PxTolerancesScale_(pvk_in_this, pvk_in_scale);
        }

        public bool isValid() {
            physx.PxSceneDescPtr pvk_in_this = this;
            return bool_const_PxSceneDescPtr_isValidPtr(pvk_in_this);
        }

        public physx.PxTolerancesScale* getTolerancesScale() {
            physx.PxSceneDescPtr pvk_in_this = this;
            return PxTolerancesScale_const_PxSceneDescPtr_getTolerancesScalePtr(pvk_in_this);
        }

        public void setToDefault(physx.PxTolerancesScale scale) {
            setToDefault((physx.PxTolerancesScale*)&scale);
        }

        public void setToDefault(physx.PxTolerancesScale.Ref scale) {
            setToDefault((physx.PxTolerancesScale*)(*((IntPtr*)(&scale))));
        }
    }

}
