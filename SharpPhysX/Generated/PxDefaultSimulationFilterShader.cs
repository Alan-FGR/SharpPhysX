// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
//Unit PxDefaultSimulationFilterShader
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxFilterFlagsPtr PxFilterFlagsPtr_physx_PxDefaultSimulationFilterShader_uint_physx_PxFilterDataPtr_uint_physx_PxFilterDataPtr_PxPairFlagsPtr_IntPtr_uint_(uint pvk_attributes0, physx.PxFilterDataPtr pvk_filterData0, uint pvk_attributes1, physx.PxFilterDataPtr pvk_filterData1, PxPairFlagsPtr pvk_pairFlags, IntPtr pvk_constantBlock, uint pvk_constantBlockSize);
    
    public static PxFilterFlagsPtr PxDefaultSimulationFilterShader_New(uint attributes0, physx.PxFilterDataPtr filterData0, uint attributes1, physx.PxFilterDataPtr filterData1, PxPairFlagsPtr pairFlags, IntPtr constantBlock, uint constantBlockSize) {
        uint pvk_in_attributes0 = attributes0;
        physx.PxFilterDataPtr pvk_in_filterData0 = filterData0;
        uint pvk_in_attributes1 = attributes1;
        physx.PxFilterDataPtr pvk_in_filterData1 = filterData1;
        PxPairFlagsPtr pvk_in_pairFlags = pairFlags;
        IntPtr pvk_in_constantBlock = constantBlock;
        uint pvk_in_constantBlockSize = constantBlockSize;
        return PxFilterFlagsPtr_physx_PxDefaultSimulationFilterShader_uint_physx_PxFilterDataPtr_uint_physx_PxFilterDataPtr_PxPairFlagsPtr_IntPtr_uint_(pvk_in_attributes0, pvk_in_filterData0, pvk_in_attributes1, pvk_in_filterData1, pvk_in_pairFlags, pvk_in_constantBlock, pvk_in_constantBlockSize);
    }
    
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool bool_physx_PxGetGroupCollisionFlag_ushort_ushortCC(ushort pvk_group1, ushort pvk_group2);
    
    public static bool PxGetGroupCollisionFlag(ushort group1, ushort group2) {
        ushort pvk_in_group1 = group1;
        ushort pvk_in_group2 = group2;
        return bool_physx_PxGetGroupCollisionFlag_ushort_ushortCC(pvk_in_group1, pvk_in_group2);
    }
    
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void void_physx_PxSetGroupCollisionFlag_ushort_ushort_boolCCC(ushort pvk_group1, ushort pvk_group2, bool pvk_enable);
    
    public static void PxSetGroupCollisionFlag(ushort group1, ushort group2, bool enable) {
        ushort pvk_in_group1 = group1;
        ushort pvk_in_group2 = group2;
        bool pvk_in_enable = enable;
        void_physx_PxSetGroupCollisionFlag_ushort_ushort_boolCCC(pvk_in_group1, pvk_in_group2, pvk_in_enable);
    }
    
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern ushort ushort_physx_PxGetGroup_physx_PxActorPtr_(physx.PxActorPtr pvk_actor);
    
    public static ushort PxGetGroup(physx.PxActorPtr actor) {
        physx.PxActorPtr pvk_in_actor = actor;
        return ushort_physx_PxGetGroup_physx_PxActorPtr_(pvk_in_actor);
    }
    
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void void_physx_PxSetGroup_physx_PxActorPtr_ushort_C(physx.PxActorPtr pvk_actor, ushort pvk_collisionGroup);
    
    public static void PxSetGroup(physx.PxActorPtr actor, ushort collisionGroup) {
        physx.PxActorPtr pvk_in_actor = actor;
        ushort pvk_in_collisionGroup = collisionGroup;
        void_physx_PxSetGroup_physx_PxActorPtr_ushort_C(pvk_in_actor, pvk_in_collisionGroup);
    }
    
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void void_physx_PxGetFilterOps_physx_PxFilterOpEnum_physx_PxFilterOpEnum_physx_PxFilterOpEnum_(physx.PxFilterOpEnum* pvk_op0, physx.PxFilterOpEnum* pvk_op1, physx.PxFilterOpEnum* pvk_op2);
    
    public static void PxGetFilterOps(physx.PxFilterOpEnum* op0, physx.PxFilterOpEnum* op1, physx.PxFilterOpEnum* op2) {
        physx.PxFilterOpEnum* pvk_in_op0 = op0;
        physx.PxFilterOpEnum* pvk_in_op1 = op1;
        physx.PxFilterOpEnum* pvk_in_op2 = op2;
        void_physx_PxGetFilterOps_physx_PxFilterOpEnum_physx_PxFilterOpEnum_physx_PxFilterOpEnum_(pvk_in_op0, pvk_in_op1, pvk_in_op2);
    }
    
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void void_physx_PxSetFilterOps_physx_PxFilterOpEnum_physx_PxFilterOpEnum_physx_PxFilterOpEnum_(physx.PxFilterOpEnum* pvk_op0, physx.PxFilterOpEnum* pvk_op1, physx.PxFilterOpEnum* pvk_op2);
    
    public static void PxSetFilterOps(physx.PxFilterOpEnum* op0, physx.PxFilterOpEnum* op1, physx.PxFilterOpEnum* op2) {
        physx.PxFilterOpEnum* pvk_in_op0 = op0;
        physx.PxFilterOpEnum* pvk_in_op1 = op1;
        physx.PxFilterOpEnum* pvk_in_op2 = op2;
        void_physx_PxSetFilterOps_physx_PxFilterOpEnum_physx_PxFilterOpEnum_physx_PxFilterOpEnum_(pvk_in_op0, pvk_in_op1, pvk_in_op2);
    }
    
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool bool_physx_PxGetFilterBool();
    
    public static bool PxGetFilterBool() {
        return bool_physx_PxGetFilterBool();
    }
    
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void void_physx_PxSetFilterBool_boolC(bool pvk_enable);
    
    public static void PxSetFilterBool(bool enable) {
        bool pvk_in_enable = enable;
        void_physx_PxSetFilterBool_boolC(pvk_in_enable);
    }
    
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void void_physx_PxGetFilterConstants_physx_PxGroupsMaskPtr_physx_PxGroupsMaskPtr_(physx.PxGroupsMaskPtr pvk_c0, physx.PxGroupsMaskPtr pvk_c1);
    
    public static void PxGetFilterConstants(physx.PxGroupsMaskPtr c0, physx.PxGroupsMaskPtr c1) {
        physx.PxGroupsMaskPtr pvk_in_c0 = c0;
        physx.PxGroupsMaskPtr pvk_in_c1 = c1;
        void_physx_PxGetFilterConstants_physx_PxGroupsMaskPtr_physx_PxGroupsMaskPtr_(pvk_in_c0, pvk_in_c1);
    }
    
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void void_physx_PxSetFilterConstants_physx_PxGroupsMaskPtr_physx_PxGroupsMaskPtr_(physx.PxGroupsMaskPtr pvk_c0, physx.PxGroupsMaskPtr pvk_c1);
    
    public static void PxSetFilterConstants(physx.PxGroupsMaskPtr c0, physx.PxGroupsMaskPtr c1) {
        physx.PxGroupsMaskPtr pvk_in_c0 = c0;
        physx.PxGroupsMaskPtr pvk_in_c1 = c1;
        void_physx_PxSetFilterConstants_physx_PxGroupsMaskPtr_physx_PxGroupsMaskPtr_(pvk_in_c0, pvk_in_c1);
    }
    
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern physx.PxGroupsMaskPtr physx_PxGroupsMaskPtr_physx_PxGetGroupsMask_physx_PxActorPtr_(physx.PxActorPtr pvk_actor);
    
    public static physx.PxGroupsMaskPtr PxGetGroupsMask_New(physx.PxActorPtr actor) {
        physx.PxActorPtr pvk_in_actor = actor;
        return physx_PxGroupsMaskPtr_physx_PxGetGroupsMask_physx_PxActorPtr_(pvk_in_actor);
    }
    
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void void_physx_PxSetGroupsMask_physx_PxActorPtr_physx_PxGroupsMaskPtr_(physx.PxActorPtr pvk_actor, physx.PxGroupsMaskPtr pvk_mask);
    
    public static void PxSetGroupsMask(physx.PxActorPtr actor, physx.PxGroupsMaskPtr mask) {
        physx.PxActorPtr pvk_in_actor = actor;
        physx.PxGroupsMaskPtr pvk_in_mask = mask;
        void_physx_PxSetGroupsMask_physx_PxActorPtr_physx_PxGroupsMaskPtr_(pvk_in_actor, pvk_in_mask);
    }
    
    public unsafe partial struct PxGroupsMaskPtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxGroupsMaskPtr(PxGroupsMaskPtr ptr);
        
        public static void Free(PxGroupsMaskPtr ptr){
            Freer_physx_PxGroupsMaskPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxGroupsMaskPtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxGroupsMaskPtr Ctor_physx_PxGroupsMaskPtr_();
        
        public static physx.PxGroupsMaskPtr New() {
            return Ctor_physx_PxGroupsMaskPtr_();
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern ushort PxGroupsMask_GET_bits0(PxGroupsMaskPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxGroupsMask_SET_bits0(PxGroupsMaskPtr cls, ushort value);
        
        public ushort bits0 {
            get => PxGroupsMask_GET_bits0(this);
            set => PxGroupsMask_SET_bits0(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern ushort PxGroupsMask_GET_bits1(PxGroupsMaskPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxGroupsMask_SET_bits1(PxGroupsMaskPtr cls, ushort value);
        
        public ushort bits1 {
            get => PxGroupsMask_GET_bits1(this);
            set => PxGroupsMask_SET_bits1(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern ushort PxGroupsMask_GET_bits2(PxGroupsMaskPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxGroupsMask_SET_bits2(PxGroupsMaskPtr cls, ushort value);
        
        public ushort bits2 {
            get => PxGroupsMask_GET_bits2(this);
            set => PxGroupsMask_SET_bits2(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern ushort PxGroupsMask_GET_bits3(PxGroupsMaskPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxGroupsMask_SET_bits3(PxGroupsMaskPtr cls, ushort value);
        
        public ushort bits3 {
            get => PxGroupsMask_GET_bits3(this);
            set => PxGroupsMask_SET_bits3(this, value);
        }
    }
    
    public enum PxFilterOpEnum : int {
        PX_FILTEROP_AND = 0,      // PX_FILTEROP_AND
        PX_FILTEROP_OR = 1,       // PX_FILTEROP_OR
        PX_FILTEROP_XOR = 2,      // PX_FILTEROP_XOR
        PX_FILTEROP_NAND = 3,     // PX_FILTEROP_NAND
        PX_FILTEROP_NOR = 4,      // PX_FILTEROP_NOR
        PX_FILTEROP_NXOR = 5,     // PX_FILTEROP_NXOR
        PX_FILTEROP_SWAP_AND = 6, // PX_FILTEROP_SWAP_AND
    }
    
}
