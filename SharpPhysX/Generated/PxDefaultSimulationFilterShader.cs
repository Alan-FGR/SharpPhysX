// Generated by minBND 5.1.91.1 - Â© github.com/Alan-FGR
using System;
using System.Runtime.InteropServices;
using static minBND_pinvokes;

public static unsafe partial class physx {

    public static physx.PxFilterFlagsPtr PxDefaultSimulationFilterShader_New(uint attributes0, physx.PxFilterDataPtr filterData0, uint attributes1, physx.PxFilterDataPtr filterData1, physx.PxPairFlagsPtr pairFlags, IntPtr constantBlock, uint constantBlockSize) {
        uint pvk_in_attributes0 = attributes0;
        physx.PxFilterDataPtr pvk_in_filterData0 = filterData0;
        uint pvk_in_attributes1 = attributes1;
        physx.PxFilterDataPtr pvk_in_filterData1 = filterData1;
        physx.PxPairFlagsPtr pvk_in_pairFlags = pairFlags;
        IntPtr pvk_in_constantBlock = constantBlock;
        uint pvk_in_constantBlockSize = constantBlockSize;
        return PxFilterFlagsPtr_PxDefaultSimulationFilterShaderPtr_uint_PxFilterDataPtr_uint_PxFilterDataPtr_PxPairFlagsPtr_IntPtr_uint_(pvk_in_attributes0, pvk_in_filterData0, pvk_in_attributes1, pvk_in_filterData1, pvk_in_pairFlags, pvk_in_constantBlock, pvk_in_constantBlockSize);
    }

    public static bool PxGetGroupCollisionFlag(ushort group1, ushort group2) {
        ushort pvk_in_group1 = group1;
        ushort pvk_in_group2 = group2;
        return bool_PxGetGroupCollisionFlagPtr_ushort_ushortCC(pvk_in_group1, pvk_in_group2);
    }

    public static void PxSetGroupCollisionFlag(ushort group1, ushort group2, bool enable) {
        ushort pvk_in_group1 = group1;
        ushort pvk_in_group2 = group2;
        bool pvk_in_enable = enable;
        void_PxSetGroupCollisionFlagPtr_ushort_ushort_boolCCC(pvk_in_group1, pvk_in_group2, pvk_in_enable);
    }

    public static ushort PxGetGroup(physx.PxActorPtr actor) {
        physx.PxActorPtr pvk_in_actor = actor;
        return ushort_PxGetGroupPtr_PxActorPtr_(pvk_in_actor);
    }

    public static void PxSetGroup(physx.PxActorPtr actor, ushort collisionGroup) {
        physx.PxActorPtr pvk_in_actor = actor;
        ushort pvk_in_collisionGroup = collisionGroup;
        void_PxSetGroupPtr_PxActorPtr_ushort_C(pvk_in_actor, pvk_in_collisionGroup);
    }

    public static void PxGetFilterOps(physx.PxFilterOpEnum* op0, physx.PxFilterOpEnum* op1, physx.PxFilterOpEnum* op2) {
        physx.PxFilterOpEnum* pvk_in_op0 = op0;
        physx.PxFilterOpEnum* pvk_in_op1 = op1;
        physx.PxFilterOpEnum* pvk_in_op2 = op2;
        void_PxGetFilterOpsPtr_PxFilterOpEnum_PxFilterOpEnum_PxFilterOpEnum_(pvk_in_op0, pvk_in_op1, pvk_in_op2);
    }

    public static void PxSetFilterOps(physx.PxFilterOpEnum* op0, physx.PxFilterOpEnum* op1, physx.PxFilterOpEnum* op2) {
        physx.PxFilterOpEnum* pvk_in_op0 = op0;
        physx.PxFilterOpEnum* pvk_in_op1 = op1;
        physx.PxFilterOpEnum* pvk_in_op2 = op2;
        void_PxSetFilterOpsPtr_PxFilterOpEnum_PxFilterOpEnum_PxFilterOpEnum_(pvk_in_op0, pvk_in_op1, pvk_in_op2);
    }

    public static bool PxGetFilterBool() {
        return bool_PxGetFilterBoolPtr();
    }

    public static void PxSetFilterBool(bool enable) {
        bool pvk_in_enable = enable;
        void_PxSetFilterBoolPtr_boolC(pvk_in_enable);
    }

    public static void PxGetFilterConstants(physx.PxGroupsMaskPtr c0, physx.PxGroupsMaskPtr c1) {
        physx.PxGroupsMaskPtr pvk_in_c0 = c0;
        physx.PxGroupsMaskPtr pvk_in_c1 = c1;
        void_PxGetFilterConstantsPtr_PxGroupsMaskPtr_PxGroupsMaskPtr_(pvk_in_c0, pvk_in_c1);
    }

    public static void PxSetFilterConstants(physx.PxGroupsMaskPtr c0, physx.PxGroupsMaskPtr c1) {
        physx.PxGroupsMaskPtr pvk_in_c0 = c0;
        physx.PxGroupsMaskPtr pvk_in_c1 = c1;
        void_PxSetFilterConstantsPtr_PxGroupsMaskPtr_PxGroupsMaskPtr_(pvk_in_c0, pvk_in_c1);
    }

    public static physx.PxGroupsMaskPtr PxGetGroupsMask_New(physx.PxActorPtr actor) {
        physx.PxActorPtr pvk_in_actor = actor;
        return PxGroupsMaskPtr_PxGetGroupsMaskPtr_PxActorPtr_(pvk_in_actor);
    }

    public static void PxSetGroupsMask(physx.PxActorPtr actor, physx.PxGroupsMaskPtr mask) {
        physx.PxActorPtr pvk_in_actor = actor;
        physx.PxGroupsMaskPtr pvk_in_mask = mask;
        void_PxSetGroupsMaskPtr_PxActorPtr_PxGroupsMaskPtr_(pvk_in_actor, pvk_in_mask);
    }

    public unsafe partial struct PxGroupsMaskPtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxGroupsMaskPtr ptr){
            Freer_physx_PxGroupsMaskPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxGroupsMaskPtr(this);
        }

        public static physx.PxGroupsMaskPtr New() {
            return Ctor_PxGroupsMaskPtr_();
        }

        public ushort bits0 {
            get => PxGroupsMaskPtr_GET_bits0(this);
            set => PxGroupsMaskPtr_SET_bits0(this, value);
        }

        public ushort bits1 {
            get => PxGroupsMaskPtr_GET_bits1(this);
            set => PxGroupsMaskPtr_SET_bits1(this, value);
        }

        public ushort bits2 {
            get => PxGroupsMaskPtr_GET_bits2(this);
            set => PxGroupsMaskPtr_SET_bits2(this, value);
        }

        public ushort bits3 {
            get => PxGroupsMaskPtr_GET_bits3(this);
            set => PxGroupsMaskPtr_SET_bits3(this, value);
        }

    }

    public enum PxFilterOpEnum : int {
        PX_FILTEROP_AND = 0,      // PX_FILTEROP_AND
        PX_FILTEROP_OR = 1,       // PX_FILTEROP_OR
        PX_FILTEROP_XOR = 2,      // PX_FILTEROP_XOR
        PX_FILTEROP_NAND = 3,     // PX_FILTEROP_NAND
        PX_FILTEROP_NOR = 4,      // PX_FILTEROP_NOR
        PX_FILTEROP_NXOR = 5,     // PX_FILTEROP_NXOR
        PX_FILTEROP_SWAP_AND = 6, // PX_FILTEROP_SWAP_AND
    }
}
