// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
//Unit PxBase
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    // physx::operator| [static PxBaseFlagsPtr Pipe_New(physx.PxBaseFlagEnum a, physx.PxBaseFlagEnum b)] will be bound as member operator
    
    // physx::operator& [static PxBaseFlagsPtr Amp_New(physx.PxBaseFlagEnum a, physx.PxBaseFlagEnum b)] will be bound as member operator
    
    // physx::operator~ [static PxBaseFlagsPtr Tilde_New(physx.PxBaseFlagEnum a)] will be bound as member operator
    
    public enum PxBaseFlagEnum : int {
        eOWNS_MEMORY = 1,   // eOWNS_MEMORY = (1<<0)
        eIS_RELEASABLE = 2, // eIS_RELEASABLE = (1<<1)
    }
    
    public unsafe partial struct PxBasePtr {
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxBase_release(physx.PxBasePtr pvk_this);
        
        public void release() {
            physx.PxBasePtr pvk_in_this = this;
            void_physx_PxBase_release(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern string string_const_physx_PxBase_getConcreteTypeName(physx.PxBasePtr pvk_this);
        
        public string getConcreteTypeName() {
            physx.PxBasePtr pvk_in_this = this;
            return string_const_physx_PxBase_getConcreteTypeName(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern ushort ushort_const_physx_PxBase_getConcreteType(physx.PxBasePtr pvk_this);
        
        public ushort getConcreteType() {
            physx.PxBasePtr pvk_in_this = this;
            return ushort_const_physx_PxBase_getConcreteType(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxBase_setBaseFlag_physx_PxBaseFlagEnum_bool_(physx.PxBasePtr pvk_this, physx.PxBaseFlagEnum pvk_flag, bool pvk_value);
        
        public void setBaseFlag(physx.PxBaseFlagEnum flag, bool value) {
            physx.PxBasePtr pvk_in_this = this;
            physx.PxBaseFlagEnum pvk_in_flag = flag;
            bool pvk_in_value = value;
            void_physx_PxBase_setBaseFlag_physx_PxBaseFlagEnum_bool_(pvk_in_this, pvk_in_flag, pvk_in_value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxBase_setBaseFlags_PxBaseFlagsPtr_(physx.PxBasePtr pvk_this, PxBaseFlagsPtr pvk_inFlags);
        
        public void setBaseFlags(PxBaseFlagsPtr inFlags) {
            physx.PxBasePtr pvk_in_this = this;
            PxBaseFlagsPtr pvk_in_inFlags = inFlags;
            void_physx_PxBase_setBaseFlags_PxBaseFlagsPtr_(pvk_in_this, pvk_in_inFlags);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxBaseFlagsPtr PxBaseFlagsPtr_const_physx_PxBase_getBaseFlags(physx.PxBasePtr pvk_this);
        
        public PxBaseFlagsPtr getBaseFlags_New() {
            physx.PxBasePtr pvk_in_this = this;
            return PxBaseFlagsPtr_const_physx_PxBase_getBaseFlags(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxBase_isReleasable(physx.PxBasePtr pvk_this);
        
        public bool isReleasable() {
            physx.PxBasePtr pvk_in_this = this;
            return bool_const_physx_PxBase_isReleasable(pvk_in_this);
        }
    
    
    
        public unsafe interface IPxBasePtr {
            void release();
            string getConcreteTypeName();
            //////################################################################## FIXME
            //Unparsed type ( TODO ): T* | UNPARSED* is();
            //////################################################################## FIXME
            //Unparsed type ( TODO ): T* | UNPARSED* isConst();
            ushort getConcreteType();
            void setBaseFlag(physx.PxBaseFlagEnum flag, bool value);
            void setBaseFlags(PxBaseFlagsPtr inFlags);
            PxBaseFlagsPtr getBaseFlags_New();
            bool isReleasable();
        }
    }
    
}
