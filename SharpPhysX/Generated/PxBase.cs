//Generated by MinBinder.
using System;
using System.Runtime.InteropServices;

public enum PxBaseFlag {
 eOWNS_MEMORY			= (1<<0),
 eIS_RELEASABLE			= (1<<1),

}
public partial class PxBase {
    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxBase_release(PxBase cls);
    public void release(){
        return C_PxBase_release(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern string C_CONST_PxBase_getConcreteTypeName(PxBase cls);
    public string getConcreteTypeName(){
        return C_CONST_PxBase_getConcreteTypeName(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern Ptr C_PxBase_is(PxBase cls);
    public Ptr is(){
        return C_PxBase_is(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern Ptr C_CONST_PxBase_is(PxBase cls);
    public Ptr is(){
        return C_CONST_PxBase_is(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxType C_CONST_PxBase_getConcreteType(PxBase cls);
    public PxType getConcreteType(){
        return C_CONST_PxBase_getConcreteType(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxBase_setBaseFlag(PxBase cls,Enum flag,bool value);
    public void setBaseFlag(Enum flag,bool value){
        return C_PxBase_setBaseFlag(this,flag,value);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern void C_PxBase_setBaseFlags(PxBase cls,PxBaseFlags inFlags);
    public void setBaseFlags(PxBaseFlags inFlags){
        return C_PxBase_setBaseFlags(this,inFlags);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxBaseFlags C_CONST_PxBase_getBaseFlags(PxBase cls);
    public PxBaseFlags getBaseFlags(){
        return C_CONST_PxBase_getBaseFlags(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxBase_isReleasable(PxBase cls);
    public bool isReleasable(){
        return C_CONST_PxBase_isReleasable(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxBase C_PxBase_PxBase(PxType concreteType,PxBaseFlags baseFlags);
    public unsafe PxBase(PxType concreteType,PxBaseFlags baseFlags){
        var _new = C_PxBase_PxBase(concreteType,baseFlags);        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxBase C_PxBase_PxBase(PxBaseFlags baseFlags);
    public unsafe PxBase(PxBaseFlags baseFlags){
        var _new = C_PxBase_PxBase(baseFlags);        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxBase_isKindOf(PxBase cls,string superClass);
    public bool isKindOf(string superClass){
        return C_CONST_PxBase_isKindOf(this,superClass);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxBase_typeMatch(PxBase cls);
    public bool typeMatch(){
        return C_CONST_PxBase_typeMatch(this);    
    }


}
public partial struct PxBaseFlag {


}
