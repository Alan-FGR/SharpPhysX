//Generated by MinBinder.
using System;
using System.Runtime.InteropServices;
using PxBaseFlags = System.UInt32;
using PxActorFlags = System.UInt32;

public partial struct PxMeshScale { // blittable


    public PxVec3 scale;
    public PxQuat rotation;

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxMeshScale C_PxMeshScale_PxMeshScale(float r);
    public unsafe PxMeshScale(float r){
        var _new = C_PxMeshScale_PxMeshScale(r);        
        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxMeshScale C_PxMeshScale_PxMeshScale_2(PxVec3 s);
    public unsafe PxMeshScale(PxVec3 s){
        var _new = C_PxMeshScale_PxMeshScale_2(s);        
        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxMeshScale C_PxMeshScale_PxMeshScale_3(PxVec3 s,PxQuat r);
    public unsafe PxMeshScale(PxVec3 s,PxQuat r){
        var _new = C_PxMeshScale_PxMeshScale_3(s,r);        
        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxMeshScale_isIdentity(PxMeshScale cls);
    public bool isIdentity(){
        return C_CONST_PxMeshScale_isIdentity(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxMeshScale C_CONST_PxMeshScale_getInverse(PxMeshScale cls);
    public PxMeshScale getInverse(){
        return C_CONST_PxMeshScale_getInverse(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxMat33 C_CONST_PxMeshScale_toMat33(PxMeshScale cls);
    public PxMat33 toMat33(){
        return C_CONST_PxMeshScale_toMat33(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxMeshScale_hasNegativeDeterminant(PxMeshScale cls);
    public bool hasNegativeDeterminant(){
        return C_CONST_PxMeshScale_hasNegativeDeterminant(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxMeshScale_transform(PxMeshScale cls,PxVec3 v);
    public PxVec3 transform(PxVec3 v){
        return C_CONST_PxMeshScale_transform(this,v);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxMeshScale_isValidForTriangleMesh(PxMeshScale cls);
    public bool isValidForTriangleMesh(){
        return C_CONST_PxMeshScale_isValidForTriangleMesh(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxMeshScale_isValidForConvexMesh(PxMeshScale cls);
    public bool isValidForConvexMesh(){
        return C_CONST_PxMeshScale_isValidForConvexMesh(this);    
    }


}
