// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
//Unit PxBitAndData
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    public unsafe partial struct PxBitAndBytePtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_PxBitAndBytePtr(PxBitAndBytePtr ptr);
        
        public static void Free(PxBitAndBytePtr ptr){
            Freer_PxBitAndBytePtr(ptr);
        }
        public void Free(){
            Freer_PxBitAndBytePtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxBitAndBytePtr Ctor_PxBitAndBytePtr_physx_PxEMPTY(physx.PxEMPTY pvk__);
        
        public static PxBitAndBytePtr New(physx.PxEMPTY _) {
            physx.PxEMPTY pvk_in__ = _;
            return Ctor_PxBitAndBytePtr_physx_PxEMPTY(pvk_in__);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxBitAndBytePtr Ctor_PxBitAndBytePtr_();
        
        public static PxBitAndBytePtr New() {
            return Ctor_PxBitAndBytePtr_();
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxBitAndBytePtr Ctor_PxBitAndBytePtr_byte_bool(byte pvk_data, bool pvk_bit);
        
        public static PxBitAndBytePtr New(byte data, bool bit=false) {
            byte pvk_in_data = data;
            bool pvk_in_bit = bit;
            return Ctor_PxBitAndBytePtr_byte_bool(pvk_in_data, pvk_in_bit);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxBitAndBytePtr Ctor_PxBitAndBytePtr_byte(byte pvk_data);
        
        public static PxBitAndBytePtr New(byte data) {
            byte pvk_in_data = data;
            return Ctor_PxBitAndBytePtr_byte(pvk_in_data);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxBitAndDataT_byte_setBit(PxBitAndBytePtr pvk_this);
        
        public void setBit() {
            PxBitAndBytePtr pvk_in_this = this;
            void_physx_PxBitAndDataT_byte_setBit(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxBitAndDataT_byte_clearBit(PxBitAndBytePtr pvk_this);
        
        public void clearBit() {
            PxBitAndBytePtr pvk_in_this = this;
            void_physx_PxBitAndDataT_byte_clearBit(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern byte byte_const_physx_PxBitAndDataT_byte_isBitSet(PxBitAndBytePtr pvk_this);
        
        public byte isBitSet() {
            PxBitAndBytePtr pvk_in_this = this;
            return byte_const_physx_PxBitAndDataT_byte_isBitSet(pvk_in_this);
        }
    }
    public unsafe partial struct PxBitAndWordPtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_PxBitAndWordPtr(PxBitAndWordPtr ptr);
        
        public static void Free(PxBitAndWordPtr ptr){
            Freer_PxBitAndWordPtr(ptr);
        }
        public void Free(){
            Freer_PxBitAndWordPtr(this);
        }
    }
    public unsafe partial struct PxBitAndDwordPtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_PxBitAndDwordPtr(PxBitAndDwordPtr ptr);
        
        public static void Free(PxBitAndDwordPtr ptr){
            Freer_PxBitAndDwordPtr(ptr);
        }
        public void Free(){
            Freer_PxBitAndDwordPtr(this);
        }
    }
    
}
