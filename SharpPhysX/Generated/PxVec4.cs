// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
//Unit PxVec4
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    // physx::operator* [static physx.PxVec4 Mult(float f, physx.PxVec4 v)] will be bound as member operator
    
    // physx::operator* [static physx.PxVec4 Mult(float f, physx.PxVec4* v)] will be bound as member operator
    
    public unsafe partial struct PxVec4 {
        public float x;
        public float y;
        public float z;
        public float w;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Default_physx_PxVec4_(physx.PxVec4* RetRef);
        
        public static physx.PxVec4 Default() {
            physx.PxVec4 RetRef;
            Default_physx_PxVec4_(&RetRef);
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec4_PxVec4_Ctor_physx_PxZERO_(physx.PxVec4* pvk_this, physx.PxZERO pvk_r);
        
        public  PxVec4(physx.PxZERO r) {
            physx.PxZERO pvk_in_r = r;
            PxVec4 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec4_PxVec4_Ctor_physx_PxZERO_(pvk_in_this, pvk_in_r);
            this = toInit;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec4_PxVec4_Ctor_float_(physx.PxVec4* pvk_this, float pvk_a);
        
        public  PxVec4(float a) {
            float pvk_in_a = a;
            PxVec4 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec4_PxVec4_Ctor_float_(pvk_in_this, pvk_in_a);
            this = toInit;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec4_PxVec4_Ctor_float_float_float_float_(physx.PxVec4* pvk_this, float pvk_nx, float pvk_ny, float pvk_nz, float pvk_nw);
        
        public  PxVec4(float nx, float ny, float nz, float nw) {
            float pvk_in_nx = nx;
            float pvk_in_ny = ny;
            float pvk_in_nz = nz;
            float pvk_in_nw = nw;
            PxVec4 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec4_PxVec4_Ctor_float_float_float_float_(pvk_in_this, pvk_in_nx, pvk_in_ny, pvk_in_nz, pvk_in_nw);
            this = toInit;
        }
        
        public  PxVec4(physx.PxVec3 v, float nw) : this(&v, nw) {
            //ctor piping;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec4_PxVec4_Ctor_physx_PxVec3_float_(physx.PxVec4* pvk_this, physx.PxVec3* pvk_v, float pvk_nw);
        
        public  PxVec4(physx.PxVec3* v, float nw) {
            physx.PxVec3* pvk_in_v = v;
            float pvk_in_nw = nw;
            PxVec4 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec4_PxVec4_Ctor_physx_PxVec3_float_(pvk_in_this, pvk_in_v, pvk_in_nw);
            this = toInit;
        }
        
        public  PxVec4(physx.PxVec4 v) : this(&v) {
            //ctor piping;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec4_PxVec4_Ctor_physx_PxVec4_(physx.PxVec4* pvk_this, physx.PxVec4* pvk_v);
        
        public  PxVec4(physx.PxVec4* v) {
            physx.PxVec4* pvk_in_v = v;
            PxVec4 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec4_PxVec4_Ctor_physx_PxVec4_(pvk_in_this, pvk_in_v);
            this = toInit;
        }
        
        public static bool operator==(physx.PxVec4 lhs, physx.PxVec4 v) {
            return lhs==&v;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec4_operator_EqualEqual_physx_PxVec4_(physx.PxVec4* pvk_lhs, physx.PxVec4* pvk_v);
        
        public static bool operator==(physx.PxVec4 lhs, physx.PxVec4* v) {
            physx.PxVec4* pvk_in_lhs = &lhs;
            physx.PxVec4* pvk_in_v = v;
            return bool_const_physx_PxVec4_operator_EqualEqual_physx_PxVec4_(pvk_in_lhs, pvk_in_v);
        }
        
        public static bool operator!=(physx.PxVec4 lhs, physx.PxVec4 v) {
            return lhs!=&v;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec4_operator_ExclaimEqual_physx_PxVec4_(physx.PxVec4* pvk_lhs, physx.PxVec4* pvk_v);
        
        public static bool operator!=(physx.PxVec4 lhs, physx.PxVec4* v) {
            physx.PxVec4* pvk_in_lhs = &lhs;
            physx.PxVec4* pvk_in_v = v;
            return bool_const_physx_PxVec4_operator_ExclaimEqual_physx_PxVec4_(pvk_in_lhs, pvk_in_v);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec4_isZero(physx.PxVec4* pvk_this);
        
        public bool isZero() {
            fixed (PxVec4* pvk_in_this = &this){
                return bool_const_physx_PxVec4_isZero(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec4_isFinite(physx.PxVec4* pvk_this);
        
        public bool isFinite() {
            fixed (PxVec4* pvk_in_this = &this){
                return bool_const_physx_PxVec4_isFinite(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec4_isNormalized(physx.PxVec4* pvk_this);
        
        public bool isNormalized() {
            fixed (PxVec4* pvk_in_this = &this){
                return bool_const_physx_PxVec4_isNormalized(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec4_magnitudeSquared(physx.PxVec4* pvk_this);
        
        public float magnitudeSquared() {
            fixed (PxVec4* pvk_in_this = &this){
                return float_const_physx_PxVec4_magnitudeSquared(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec4_magnitude(physx.PxVec4* pvk_this);
        
        public float magnitude() {
            fixed (PxVec4* pvk_in_this = &this){
                return float_const_physx_PxVec4_magnitude(pvk_in_this);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec4_const_physx_PxVec4_operator_Minus(physx.PxVec4* RetRef, physx.PxVec4* pvk_lhs);
        
        public static physx.PxVec4 operator-(physx.PxVec4 lhs) {
            physx.PxVec4 RetRef;
            physx.PxVec4* pvk_in_lhs = &lhs;
            physx_PxVec4_const_physx_PxVec4_operator_Minus(&RetRef, pvk_in_lhs);
            return RetRef;
        }
        
        public static physx.PxVec4 operator+(physx.PxVec4 lhs, physx.PxVec4 v) {
            return lhs+&v;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec4_const_physx_PxVec4_operator_Plus_physx_PxVec4_(physx.PxVec4* RetRef, physx.PxVec4* pvk_lhs, physx.PxVec4* pvk_v);
        
        public static physx.PxVec4 operator+(physx.PxVec4 lhs, physx.PxVec4* v) {
            physx.PxVec4 RetRef;
            physx.PxVec4* pvk_in_lhs = &lhs;
            physx.PxVec4* pvk_in_v = v;
            physx_PxVec4_const_physx_PxVec4_operator_Plus_physx_PxVec4_(&RetRef, pvk_in_lhs, pvk_in_v);
            return RetRef;
        }
        
        public static physx.PxVec4 operator-(physx.PxVec4 lhs, physx.PxVec4 v) {
            return lhs-&v;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec4_const_physx_PxVec4_operator_Minus_physx_PxVec4_(physx.PxVec4* RetRef, physx.PxVec4* pvk_lhs, physx.PxVec4* pvk_v);
        
        public static physx.PxVec4 operator-(physx.PxVec4 lhs, physx.PxVec4* v) {
            physx.PxVec4 RetRef;
            physx.PxVec4* pvk_in_lhs = &lhs;
            physx.PxVec4* pvk_in_v = v;
            physx_PxVec4_const_physx_PxVec4_operator_Minus_physx_PxVec4_(&RetRef, pvk_in_lhs, pvk_in_v);
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec4_const_physx_PxVec4_operator_Star_float_(physx.PxVec4* RetRef, physx.PxVec4* pvk_lhs, float pvk_f);
        
        public static physx.PxVec4 operator*(physx.PxVec4 lhs, float f) {
            physx.PxVec4 RetRef;
            physx.PxVec4* pvk_in_lhs = &lhs;
            float pvk_in_f = f;
            physx_PxVec4_const_physx_PxVec4_operator_Star_float_(&RetRef, pvk_in_lhs, pvk_in_f);
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec4_const_physx_PxVec4_operator_Slash_float_(physx.PxVec4* RetRef, physx.PxVec4* pvk_lhs, float pvk_f);
        
        public static physx.PxVec4 operator/(physx.PxVec4 lhs, float f) {
            physx.PxVec4 RetRef;
            physx.PxVec4* pvk_in_lhs = &lhs;
            float pvk_in_f = f;
            physx_PxVec4_const_physx_PxVec4_operator_Slash_float_(&RetRef, pvk_in_lhs, pvk_in_f);
            return RetRef;
        }
        
        public float dot(physx.PxVec4 v) {
            return dot(&v);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec4_dot_physx_PxVec4_(physx.PxVec4* pvk_this, physx.PxVec4* pvk_v);
        
        public float dot(physx.PxVec4* v) {
            physx.PxVec4* pvk_in_v = v;
            fixed (PxVec4* pvk_in_this = &this){
                return float_const_physx_PxVec4_dot_physx_PxVec4_(pvk_in_this, pvk_in_v);
            }
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec4_const_physx_PxVec4_getNormalized(physx.PxVec4* RetRef, physx.PxVec4* pvk_this);
        
        public physx.PxVec4 getNormalized() {
            physx.PxVec4 RetRef;
            
            fixed (PxVec4* pvk_in_this = &this){
                physx_PxVec4_const_physx_PxVec4_getNormalized(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_physx_PxVec4_normalize(physx.PxVec4* pvk_this);
        
        public float normalize() {
            fixed (PxVec4* pvk_in_this = &this){
                return float_physx_PxVec4_normalize(pvk_in_this);
            }
        }
        
        public physx.PxVec4 multiply(physx.PxVec4 a) {
            return multiply(&a);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec4_const_physx_PxVec4_multiply_physx_PxVec4_(physx.PxVec4* RetRef, physx.PxVec4* pvk_this, physx.PxVec4* pvk_a);
        
        public physx.PxVec4 multiply(physx.PxVec4* a) {
            physx.PxVec4 RetRef;
            
            physx.PxVec4* pvk_in_a = a;
            fixed (PxVec4* pvk_in_this = &this){
                physx_PxVec4_const_physx_PxVec4_multiply_physx_PxVec4_(&RetRef, pvk_in_this, pvk_in_a);
            }
            return RetRef;
        }
        
        public physx.PxVec4 minimum(physx.PxVec4 v) {
            return minimum(&v);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec4_const_physx_PxVec4_minimum_physx_PxVec4_(physx.PxVec4* RetRef, physx.PxVec4* pvk_this, physx.PxVec4* pvk_v);
        
        public physx.PxVec4 minimum(physx.PxVec4* v) {
            physx.PxVec4 RetRef;
            
            physx.PxVec4* pvk_in_v = v;
            fixed (PxVec4* pvk_in_this = &this){
                physx_PxVec4_const_physx_PxVec4_minimum_physx_PxVec4_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }
        
        public physx.PxVec4 maximum(physx.PxVec4 v) {
            return maximum(&v);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec4_const_physx_PxVec4_maximum_physx_PxVec4_(physx.PxVec4* RetRef, physx.PxVec4* pvk_this, physx.PxVec4* pvk_v);
        
        public physx.PxVec4 maximum(physx.PxVec4* v) {
            physx.PxVec4 RetRef;
            
            physx.PxVec4* pvk_in_v = v;
            fixed (PxVec4* pvk_in_this = &this){
                physx_PxVec4_const_physx_PxVec4_maximum_physx_PxVec4_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxVec4_getXYZ(physx.PxVec3* RetRef, physx.PxVec4* pvk_this);
        
        public physx.PxVec3 getXYZ() {
            physx.PxVec3 RetRef;
            
            fixed (PxVec4* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxVec4_getXYZ(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec4_setZero(physx.PxVec4* pvk_this);
        
        public void setZero() {
            fixed (PxVec4* pvk_in_this = &this){
                void_physx_PxVec4_setZero(pvk_in_this);
            }
        }
        
        public static physx.PxVec4 Mult(float f, physx.PxVec4 v) {
            return Mult(f, &v);
        }
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec4_physx_operator_Star_float_physx_PxVec4_(physx.PxVec4* RetRef, float pvk_f, physx.PxVec4* pvk_v);
        
        public static physx.PxVec4 Mult(float f, physx.PxVec4* v) {
            physx.PxVec4 RetRef;
            float pvk_in_f = f;
            physx.PxVec4* pvk_in_v = v;
            physx_PxVec4_physx_operator_Star_float_physx_PxVec4_(&RetRef, pvk_in_f, pvk_in_v);
            return RetRef;
        }
    }
    
}
