// Generated by minBND 5.1.90.51 - Â© github.com/Alan-FGR
using System;
using System.Runtime.InteropServices;
using static minBND_pinvokes;

public static unsafe partial class physx {

    //DBG: FunctionNode physx::operator* L366-369
    //Value Converter OpMultiply
    //physx::operator* static physx.PxVec4 OpMultiply(float f, physx.PxVec4 v) will also be bound as member operator
    //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
    //PAR nat: float, man: float, kind: Value
    //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
    public static physx.PxVec4 OpMultiply(float f, physx.PxVec4 v) {
        return OpMultiply(f, (physx.PxVec4*)&v);
    }

    //DBG: FunctionNode physx::operator* L366-369
    //Value Converter OpMultiply
    //physx::operator* static physx.PxVec4 OpMultiply(float f, physx.PxVec4.Ref v) will also be bound as member operator
    //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
    //PAR nat: float, man: float, kind: Value
    //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
    public static physx.PxVec4 OpMultiply(float f, physx.PxVec4.Ref v) {
        return OpMultiply(f, (physx.PxVec4*)(*((IntPtr*)(&v))));
    }

    //DBG: FunctionNode physx::operator* L366-369
    //physx::operator* static physx.PxVec4 OpMultiply(float f, physx.PxVec4* v) will also be bound as member operator
    //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
    //PAR nat: float, man: float, kind: Value
    //PAR nat: physx::PxVec4*, man: physx.PxVec4*, kind: Value
    public static physx.PxVec4 OpMultiply(float f, physx.PxVec4* v) {
        physx.PxVec4 RetRef;
        float pvk_in_f = f;
        physx.PxVec4* pvk_in_v = v;
        PxVec4_operator_Ptr_Star_float_PxVec4_(&RetRef, pvk_in_f, pvk_in_v);
        return RetRef;
    }
    //Subclasses using this: 0

    [StructLayout(LayoutKind.Sequential, Size = 16)]
    public unsafe partial struct PxVec4 {
        public float x;
        public float y;
        public float z;
        public float w;

        //DBG: ClassNode PxVec4 physx::PxVec4 L49-364

        //DBG: DefaultValueCtorNode physx::PxVec4::PxVec4 L55-57
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        public static physx.PxVec4 Default() {
            physx.PxVec4 RetRef;
            Default_PxVec4_(&RetRef);
            return RetRef;
        }

        //DBG: BlittableCtorNode physx::PxVec4::PxVec4 L62-65
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxZERO, man: physx.PxZERO, kind: Value
        public PxVec4(physx.PxZERO r) {

            physx.PxZERO pvk_in_r = r;
            PxVec4 toInit;
            var pvk_in_this = &toInit;
            void_PxVec4_PxVec4Ptr_Ctor_PxZERO_(pvk_in_this, pvk_in_r);
            this = toInit;
        }

        //DBG: BlittableCtorNode physx::PxVec4::PxVec4 L74-76
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public PxVec4(float a) {

            float pvk_in_a = a;
            PxVec4 toInit;
            var pvk_in_this = &toInit;
            void_PxVec4_PxVec4Ptr_Ctor_float_(pvk_in_this, pvk_in_a);
            this = toInit;
        }

        //DBG: BlittableCtorNode physx::PxVec4::PxVec4 L86-88
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        //PAR nat: float, man: float, kind: Value
        //PAR nat: float, man: float, kind: Value
        //PAR nat: float, man: float, kind: Value
        public PxVec4(float nx, float ny, float nz, float nw) {

            float pvk_in_nx = nx;
            float pvk_in_ny = ny;
            float pvk_in_nz = nz;
            float pvk_in_nw = nw;
            PxVec4 toInit;
            var pvk_in_this = &toInit;
            void_PxVec4_PxVec4Ptr_Ctor_float_float_float_float_(pvk_in_this, pvk_in_nx, pvk_in_ny, pvk_in_nz, pvk_in_nw);
            this = toInit;
        }

        //DBG: BlittableCtorNode physx::PxVec4::PxVec4 L96-98
        //Value Converter PxVec4
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public PxVec4(physx.PxVec3 v, float nw) : this((physx.PxVec3*)&v, nw) {
            //ctor piping;
        }

        //DBG: BlittableCtorNode physx::PxVec4::PxVec4 L96-98
        //Value Converter PxVec4
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public PxVec4(physx.PxVec3.Ref v, float nw) : this((physx.PxVec3*)(*((IntPtr*)(&v))), nw) {
            //ctor piping;
        }

        //DBG: BlittableCtorNode physx::PxVec4::PxVec4 L96-98
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: float, man: float, kind: Value
        public PxVec4(physx.PxVec3* v, float nw) {

            physx.PxVec3* pvk_in_v = v;
            float pvk_in_nw = nw;
            PxVec4 toInit;
            var pvk_in_this = &toInit;
            void_PxVec4_PxVec4Ptr_Ctor_PxVec3_float_(pvk_in_this, pvk_in_v, pvk_in_nw);
            this = toInit;
        }

        //DBG: BlittableCtorNode physx::PxVec4::PxVec4 L105-107

        //DBG: BlittableCtorNode physx::PxVec4::PxVec4 L112-114
        //Value Converter PxVec4
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public PxVec4(physx.PxVec4 v) : this((physx.PxVec4*)&v) {
            //ctor piping;
        }

        //DBG: BlittableCtorNode physx::PxVec4::PxVec4 L112-114
        //Value Converter PxVec4
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public PxVec4(physx.PxVec4.Ref v) : this((physx.PxVec4*)(*((IntPtr*)(&v)))) {
            //ctor piping;
        }

        //DBG: BlittableCtorNode physx::PxVec4::PxVec4 L112-114
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4*, man: physx.PxVec4*, kind: Value
        public PxVec4(physx.PxVec4* v) {

            physx.PxVec4* pvk_in_v = v;
            PxVec4 toInit;
            var pvk_in_this = &toInit;
            void_PxVec4_PxVec4Ptr_Ctor_PxVec4_(pvk_in_this, pvk_in_v);
            this = toInit;
        }

        //DBG: MethodNode physx::PxVec4::operator= L121-128
        //Value Converter OpEqual
        //RET nat: physx::PxVec4*, man: physx.PxVec4*, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static physx.PxVec4* OpEqual(physx.PxVec4 lhs, physx.PxVec4 p) {
            return OpEqual(lhs, (physx.PxVec4*)&p);
        }

        //DBG: MethodNode physx::PxVec4::operator= L121-128
        //Value Converter OpEqual
        //RET nat: physx::PxVec4*, man: physx.PxVec4*, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static physx.PxVec4* OpEqual(physx.PxVec4 lhs, physx.PxVec4.Ref p) {
            return OpEqual(lhs, (physx.PxVec4*)(*((IntPtr*)(&p))));
        }

        //DBG: MethodNode physx::PxVec4::operator= L121-128
        //RET nat: physx::PxVec4*, man: physx.PxVec4*, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4*, man: physx.PxVec4*, kind: Value
        public static physx.PxVec4* OpEqual(physx.PxVec4 lhs, physx.PxVec4* p) {
            physx.PxVec4* pvk_in_lhs = &lhs;
            physx.PxVec4* pvk_in_p = p;
            return PxVec4_PxVec4_operator_Ptr_Equal_PxVec4_(pvk_in_lhs, pvk_in_p);
        }

        //DBG: MethodNode physx::PxVec4::operator[] L133-138
        //RET nat: float*, man: float*, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: unsigned int, man: uint, kind: Value
        public static float* OpSubscript(physx.PxVec4 lhs, uint index) {
            physx.PxVec4* pvk_in_lhs = &lhs;
            uint pvk_in_index = index;
            return float_PxVec4_operator_Ptr_Subscript_uint_(pvk_in_lhs, pvk_in_index);
        }

        //DBG: MethodNode physx::PxVec4::operator[] L143-148
        //RET nat: float*, man: float*, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: unsigned int, man: uint, kind: Value
        public static float* OpSubscriptConst(physx.PxVec4 lhs, uint index) {
            physx.PxVec4* pvk_in_lhs = &lhs;
            uint pvk_in_index = index;
            return float_const_PxVec4_operator_Ptr_Subscript_uint_(pvk_in_lhs, pvk_in_index);
        }

        //DBG: MethodNode physx::PxVec4::operator== L153-156
        //Value Converter OpEquals
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static bool OpEquals(physx.PxVec4 lhs, physx.PxVec4 v) {
            return OpEquals(lhs, (physx.PxVec4*)&v);
        }

        //DBG: MethodNode physx::PxVec4::operator== L153-156
        //Value Converter OpEquals
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static bool OpEquals(physx.PxVec4 lhs, physx.PxVec4.Ref v) {
            return OpEquals(lhs, (physx.PxVec4*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec4::operator== L153-156
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4*, man: physx.PxVec4*, kind: Value
        public static bool OpEquals(physx.PxVec4 lhs, physx.PxVec4* v) {
            physx.PxVec4* pvk_in_lhs = &lhs;
            physx.PxVec4* pvk_in_v = v;
            return bool_const_PxVec4_operator_Ptr_EqualEqual_PxVec4_(pvk_in_lhs, pvk_in_v);
        }

        //DBG: MethodNode physx::PxVec4::operator!= L161-164
        //Value Converter OpExclaimEqual
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static bool OpExclaimEqual(physx.PxVec4 lhs, physx.PxVec4 v) {
            return OpExclaimEqual(lhs, (physx.PxVec4*)&v);
        }

        //DBG: MethodNode physx::PxVec4::operator!= L161-164
        //Value Converter OpExclaimEqual
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static bool OpExclaimEqual(physx.PxVec4 lhs, physx.PxVec4.Ref v) {
            return OpExclaimEqual(lhs, (physx.PxVec4*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec4::operator!= L161-164
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4*, man: physx.PxVec4*, kind: Value
        public static bool OpExclaimEqual(physx.PxVec4 lhs, physx.PxVec4* v) {
            physx.PxVec4* pvk_in_lhs = &lhs;
            physx.PxVec4* pvk_in_v = v;
            return bool_const_PxVec4_operator_Ptr_ExclaimEqual_PxVec4_(pvk_in_lhs, pvk_in_v);
        }

        //DBG: MethodNode physx::PxVec4::isZero L169-172
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public bool isZero() {

            fixed (PxVec4* pvk_in_this = &this){
              return bool_const_PxVec4_isZeroPtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec4::isFinite L177-180
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public bool isFinite() {

            fixed (PxVec4* pvk_in_this = &this){
              return bool_const_PxVec4_isFinitePtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec4::isNormalized L185-189
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public bool isNormalized() {

            fixed (PxVec4* pvk_in_this = &this){
              return bool_const_PxVec4_isNormalizedPtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec4::magnitudeSquared L196-199
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public float magnitudeSquared() {

            fixed (PxVec4* pvk_in_this = &this){
              return float_const_PxVec4_magnitudeSquaredPtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec4::magnitude L204-207
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public float magnitude() {

            fixed (PxVec4* pvk_in_this = &this){
              return float_const_PxVec4_magnitudePtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec4::operator- L212-215
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static physx.PxVec4 OpMinus(physx.PxVec4 lhs) {
            physx.PxVec4 RetRef;
            physx.PxVec4* pvk_in_lhs = &lhs;
            PxVec4_const_PxVec4_operator_Ptr_Minus(&RetRef, pvk_in_lhs);
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec4::operator+ L220-223
        //Value Converter OpPlus
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static physx.PxVec4 OpPlus(physx.PxVec4 lhs, physx.PxVec4 v) {
            return OpPlus(lhs, (physx.PxVec4*)&v);
        }

        //DBG: MethodNode physx::PxVec4::operator+ L220-223
        //Value Converter OpPlus
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static physx.PxVec4 OpPlus(physx.PxVec4 lhs, physx.PxVec4.Ref v) {
            return OpPlus(lhs, (physx.PxVec4*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec4::operator+ L220-223
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4*, man: physx.PxVec4*, kind: Value
        public static physx.PxVec4 OpPlus(physx.PxVec4 lhs, physx.PxVec4* v) {
            physx.PxVec4 RetRef;
            physx.PxVec4* pvk_in_lhs = &lhs;
            physx.PxVec4* pvk_in_v = v;
            PxVec4_const_PxVec4_operator_Ptr_Plus_PxVec4_(&RetRef, pvk_in_lhs, pvk_in_v);
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec4::operator- L228-231
        //Value Converter OpMinus
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static physx.PxVec4 OpMinus(physx.PxVec4 lhs, physx.PxVec4 v) {
            return OpMinus(lhs, (physx.PxVec4*)&v);
        }

        //DBG: MethodNode physx::PxVec4::operator- L228-231
        //Value Converter OpMinus
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static physx.PxVec4 OpMinus(physx.PxVec4 lhs, physx.PxVec4.Ref v) {
            return OpMinus(lhs, (physx.PxVec4*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec4::operator- L228-231
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4*, man: physx.PxVec4*, kind: Value
        public static physx.PxVec4 OpMinus(physx.PxVec4 lhs, physx.PxVec4* v) {
            physx.PxVec4 RetRef;
            physx.PxVec4* pvk_in_lhs = &lhs;
            physx.PxVec4* pvk_in_v = v;
            PxVec4_const_PxVec4_operator_Ptr_Minus_PxVec4_(&RetRef, pvk_in_lhs, pvk_in_v);
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec4::operator* L237-240
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public static physx.PxVec4 OpMultiply(physx.PxVec4 lhs, float f) {
            physx.PxVec4 RetRef;
            physx.PxVec4* pvk_in_lhs = &lhs;
            float pvk_in_f = f;
            PxVec4_const_PxVec4_operator_Ptr_Star_float_(&RetRef, pvk_in_lhs, pvk_in_f);
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec4::operator/ L245-249
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public static physx.PxVec4 OpSlash(physx.PxVec4 lhs, float f) {
            physx.PxVec4 RetRef;
            physx.PxVec4* pvk_in_lhs = &lhs;
            float pvk_in_f = f;
            PxVec4_const_PxVec4_operator_Ptr_Slash_float_(&RetRef, pvk_in_lhs, pvk_in_f);
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec4::operator+= L254-261
        //Value Converter OpPlusEqual
        //RET nat: physx::PxVec4*, man: physx.PxVec4*, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static physx.PxVec4* OpPlusEqual(physx.PxVec4 lhs, physx.PxVec4 v) {
            return OpPlusEqual(lhs, (physx.PxVec4*)&v);
        }

        //DBG: MethodNode physx::PxVec4::operator+= L254-261
        //Value Converter OpPlusEqual
        //RET nat: physx::PxVec4*, man: physx.PxVec4*, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static physx.PxVec4* OpPlusEqual(physx.PxVec4 lhs, physx.PxVec4.Ref v) {
            return OpPlusEqual(lhs, (physx.PxVec4*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec4::operator+= L254-261
        //RET nat: physx::PxVec4*, man: physx.PxVec4*, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4*, man: physx.PxVec4*, kind: Value
        public static physx.PxVec4* OpPlusEqual(physx.PxVec4 lhs, physx.PxVec4* v) {
            physx.PxVec4* pvk_in_lhs = &lhs;
            physx.PxVec4* pvk_in_v = v;
            return PxVec4_PxVec4_operator_Ptr_PlusEqual_PxVec4_(pvk_in_lhs, pvk_in_v);
        }

        //DBG: MethodNode physx::PxVec4::operator-= L266-273
        //Value Converter OpMinusEqual
        //RET nat: physx::PxVec4*, man: physx.PxVec4*, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static physx.PxVec4* OpMinusEqual(physx.PxVec4 lhs, physx.PxVec4 v) {
            return OpMinusEqual(lhs, (physx.PxVec4*)&v);
        }

        //DBG: MethodNode physx::PxVec4::operator-= L266-273
        //Value Converter OpMinusEqual
        //RET nat: physx::PxVec4*, man: physx.PxVec4*, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public static physx.PxVec4* OpMinusEqual(physx.PxVec4 lhs, physx.PxVec4.Ref v) {
            return OpMinusEqual(lhs, (physx.PxVec4*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec4::operator-= L266-273
        //RET nat: physx::PxVec4*, man: physx.PxVec4*, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4*, man: physx.PxVec4*, kind: Value
        public static physx.PxVec4* OpMinusEqual(physx.PxVec4 lhs, physx.PxVec4* v) {
            physx.PxVec4* pvk_in_lhs = &lhs;
            physx.PxVec4* pvk_in_v = v;
            return PxVec4_PxVec4_operator_Ptr_MinusEqual_PxVec4_(pvk_in_lhs, pvk_in_v);
        }

        //DBG: MethodNode physx::PxVec4::operator*= L278-285
        //RET nat: physx::PxVec4*, man: physx.PxVec4*, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public static physx.PxVec4* OpStarEqual(physx.PxVec4 lhs, float f) {
            physx.PxVec4* pvk_in_lhs = &lhs;
            float pvk_in_f = f;
            return PxVec4_PxVec4_operator_Ptr_StarEqual_float_(pvk_in_lhs, pvk_in_f);
        }

        //DBG: MethodNode physx::PxVec4::operator/= L289-297
        //RET nat: physx::PxVec4*, man: physx.PxVec4*, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public static physx.PxVec4* OpSlashEqual(physx.PxVec4 lhs, float f) {
            physx.PxVec4* pvk_in_lhs = &lhs;
            float pvk_in_f = f;
            return PxVec4_PxVec4_operator_Ptr_SlashEqual_float_(pvk_in_lhs, pvk_in_f);
        }

        //DBG: MethodNode physx::PxVec4::dot L302-305
        //Value Converter dot
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public float dot(physx.PxVec4 v) {
            return dot((physx.PxVec4*)&v);
        }

        //DBG: MethodNode physx::PxVec4::dot L302-305
        //Value Converter dot
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public float dot(physx.PxVec4.Ref v) {
            return dot((physx.PxVec4*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec4::dot L302-305
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4*, man: physx.PxVec4*, kind: Value
        public float dot(physx.PxVec4* v) {

            physx.PxVec4* pvk_in_v = v;
            fixed (PxVec4* pvk_in_this = &this){
              return float_const_PxVec4_dotPtr_PxVec4_(pvk_in_this, pvk_in_v);
            }
        }

        //DBG: MethodNode physx::PxVec4::getNormalized L309-313
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public physx.PxVec4 getNormalized() {
            physx.PxVec4 RetRef;

            fixed (PxVec4* pvk_in_this = &this){
              PxVec4_const_PxVec4_getNormalizedPtr(&RetRef, pvk_in_this);
            }
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec4::normalize L318-324
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public float normalize() {

            fixed (PxVec4* pvk_in_this = &this){
              return float_PxVec4_normalizePtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec4::multiply L329-332
        //Value Converter multiply
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public physx.PxVec4 multiply(physx.PxVec4 a) {
            return multiply((physx.PxVec4*)&a);
        }

        //DBG: MethodNode physx::PxVec4::multiply L329-332
        //Value Converter multiply
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public physx.PxVec4 multiply(physx.PxVec4.Ref a) {
            return multiply((physx.PxVec4*)(*((IntPtr*)(&a))));
        }

        //DBG: MethodNode physx::PxVec4::multiply L329-332
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4*, man: physx.PxVec4*, kind: Value
        public physx.PxVec4 multiply(physx.PxVec4* a) {
            physx.PxVec4 RetRef;

            physx.PxVec4* pvk_in_a = a;
            fixed (PxVec4* pvk_in_this = &this){
              PxVec4_const_PxVec4_multiplyPtr_PxVec4_(&RetRef, pvk_in_this, pvk_in_a);
            }
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec4::minimum L337-340
        //Value Converter minimum
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public physx.PxVec4 minimum(physx.PxVec4 v) {
            return minimum((physx.PxVec4*)&v);
        }

        //DBG: MethodNode physx::PxVec4::minimum L337-340
        //Value Converter minimum
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public physx.PxVec4 minimum(physx.PxVec4.Ref v) {
            return minimum((physx.PxVec4*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec4::minimum L337-340
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4*, man: physx.PxVec4*, kind: Value
        public physx.PxVec4 minimum(physx.PxVec4* v) {
            physx.PxVec4 RetRef;

            physx.PxVec4* pvk_in_v = v;
            fixed (PxVec4* pvk_in_this = &this){
              PxVec4_const_PxVec4_minimumPtr_PxVec4_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec4::maximum L345-348
        //Value Converter maximum
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public physx.PxVec4 maximum(physx.PxVec4 v) {
            return maximum((physx.PxVec4*)&v);
        }

        //DBG: MethodNode physx::PxVec4::maximum L345-348
        //Value Converter maximum
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public physx.PxVec4 maximum(physx.PxVec4.Ref v) {
            return maximum((physx.PxVec4*)(*((IntPtr*)(&v))));
        }

        //DBG: MethodNode physx::PxVec4::maximum L345-348
        //RET nat: physx::PxVec4, man: physx.PxVec4, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        //PAR nat: physx::PxVec4*, man: physx.PxVec4*, kind: Value
        public physx.PxVec4 maximum(physx.PxVec4* v) {
            physx.PxVec4 RetRef;

            physx.PxVec4* pvk_in_v = v;
            fixed (PxVec4* pvk_in_this = &this){
              PxVec4_const_PxVec4_maximumPtr_PxVec4_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec4::getXYZ L350-353
        //RET nat: physx::PxVec3, man: physx.PxVec3, ret: False, kind: Blittable
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public physx.PxVec3 getXYZ() {
            physx.PxVec3 RetRef;

            fixed (PxVec4* pvk_in_this = &this){
              PxVec3_const_PxVec4_getXYZPtr(&RetRef, pvk_in_this);
            }
            return RetRef;
        }

        //DBG: MethodNode physx::PxVec4::setZero L358-361
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxVec4, man: physx.PxVec4, kind: Blittable
        public void setZero() {

            fixed (PxVec4* pvk_in_this = &this){
              void_PxVec4_setZeroPtr(pvk_in_this);
            }
        }

        //DBG: MethodNode physx::PxVec4::~PxVec4 L49
        //ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxVec4::~PxVec4 L49, Destructor

        //REFERENCES
        public struct Ref {
            private IntPtr nativePtr_;
            public static implicit operator Ref(in physx.PxVec4 obj)
            {fixed (void* f = &obj) return new Ref {nativePtr_ = (IntPtr)f};}
        }

        //Operators
        public static bool operator==(physx.PxVec4 lhs, physx.PxVec4 v) {
            return physx.PxVec4.OpEquals(lhs, (physx.PxVec4*)&v);
        }
        public static bool operator==(physx.PxVec4 lhs, physx.PxVec4.Ref v) {
            return physx.PxVec4.OpEquals(lhs, (physx.PxVec4*)(*((IntPtr*)(&v))));
        }
        public static bool operator==(physx.PxVec4 lhs, physx.PxVec4* v) {
            return physx.PxVec4.OpEquals(lhs, v);
        }
        public static bool operator!=(physx.PxVec4 lhs, physx.PxVec4 v) {
            return physx.PxVec4.OpExclaimEqual(lhs, (physx.PxVec4*)&v);
        }
        public static bool operator!=(physx.PxVec4 lhs, physx.PxVec4.Ref v) {
            return physx.PxVec4.OpExclaimEqual(lhs, (physx.PxVec4*)(*((IntPtr*)(&v))));
        }
        public static bool operator!=(physx.PxVec4 lhs, physx.PxVec4* v) {
            return physx.PxVec4.OpExclaimEqual(lhs, v);
        }
        public static physx.PxVec4 operator-(physx.PxVec4 lhs) {
            return physx.PxVec4.OpMinus(lhs);
        }
        public static physx.PxVec4 operator+(physx.PxVec4 lhs, physx.PxVec4 v) {
            return physx.PxVec4.OpPlus(lhs, (physx.PxVec4*)&v);
        }
        public static physx.PxVec4 operator+(physx.PxVec4 lhs, physx.PxVec4.Ref v) {
            return physx.PxVec4.OpPlus(lhs, (physx.PxVec4*)(*((IntPtr*)(&v))));
        }
        public static physx.PxVec4 operator+(physx.PxVec4 lhs, physx.PxVec4* v) {
            return physx.PxVec4.OpPlus(lhs, v);
        }
        public static physx.PxVec4 operator-(physx.PxVec4 lhs, physx.PxVec4 v) {
            return physx.PxVec4.OpMinus(lhs, (physx.PxVec4*)&v);
        }
        public static physx.PxVec4 operator-(physx.PxVec4 lhs, physx.PxVec4.Ref v) {
            return physx.PxVec4.OpMinus(lhs, (physx.PxVec4*)(*((IntPtr*)(&v))));
        }
        public static physx.PxVec4 operator-(physx.PxVec4 lhs, physx.PxVec4* v) {
            return physx.PxVec4.OpMinus(lhs, v);
        }
        public static physx.PxVec4 operator*(physx.PxVec4 lhs, float f) {
            return physx.PxVec4.OpMultiply(lhs, f);
        }
        public static physx.PxVec4 operator/(physx.PxVec4 lhs, float f) {
            return physx.PxVec4.OpSlash(lhs, f);
        }
        public static physx.PxVec4 operator*(float f, physx.PxVec4 v) {
            return physx.OpMultiply(f, (physx.PxVec4*)&v);
        }
        //SKIPPED PARAMETER WITH CONVERSION BUT NO ENCLOSING TYPE
    }
}
