// Generated by minBND 5.1.91.1 - Â© github.com/Alan-FGR
using System;
using System.Runtime.InteropServices;
using static minBND_pinvokes;

public static unsafe partial class physx {

    public static physx.PxHitFlagsPtr OpPipe_New(physx.PxHitFlagEnum a, physx.PxHitFlagEnum b) {
        physx.PxHitFlagEnum pvk_in_a = a;
        physx.PxHitFlagEnum pvk_in_b = b;
        return PxHitFlagsPtr_operator_Ptr_Pipe_PxHitFlagEnum_PxHitFlagEnum_(pvk_in_a, pvk_in_b);
    }

    public static physx.PxHitFlagsPtr OpAnd_New(physx.PxHitFlagEnum a, physx.PxHitFlagEnum b) {
        physx.PxHitFlagEnum pvk_in_a = a;
        physx.PxHitFlagEnum pvk_in_b = b;
        return PxHitFlagsPtr_operator_Ptr_Amp_PxHitFlagEnum_PxHitFlagEnum_(pvk_in_a, pvk_in_b);
    }

    public static physx.PxHitFlagsPtr OpTilde_New(physx.PxHitFlagEnum a) {
        physx.PxHitFlagEnum pvk_in_a = a;
        return PxHitFlagsPtr_operator_Ptr_Tilde_PxHitFlagEnum_(pvk_in_a);
    }

    public unsafe partial struct PxRaycastCallbackPtr : physx.PxRaycastCallbackPtr.IPxRaycastCallbackPtr {
        private System.IntPtr nativePtr_;

        public physx.PxRaycastHitPtr block {
            get => PxRaycastCallbackPtr_GET_block(this);
            set => PxRaycastCallbackPtr_SET_block(this, value);
        }

        public bool hasBlock {
            get => PxRaycastCallbackPtr_GET_hasBlock(this);
            set => PxRaycastCallbackPtr_SET_hasBlock(this, value);
        }

        public physx.PxRaycastHitPtr touches {
            get => PxRaycastCallbackPtr_GET_touches(this);
            set => PxRaycastCallbackPtr_SET_touches(this, value);
        }

        public uint maxNbTouches {
            get => PxRaycastCallbackPtr_GET_maxNbTouches(this);
            set => PxRaycastCallbackPtr_SET_maxNbTouches(this, value);
        }

        public uint nbTouches {
            get => PxRaycastCallbackPtr_GET_nbTouches(this);
            set => PxRaycastCallbackPtr_SET_nbTouches(this, value);
        }

        public bool processTouches(physx.PxRaycastHitPtr buffer, uint nbHits) {
            physx.PxRaycastCallbackPtr pvk_in_this = this;
            physx.PxRaycastHitPtr pvk_in_buffer = buffer;
            uint pvk_in_nbHits = nbHits;
            return bool_PxRaycastCallbackPtr_processTouchesPtr_PxRaycastHitPtr_uint_(pvk_in_this, pvk_in_buffer, pvk_in_nbHits);
        }

        public void finalizeQuery() {
            physx.PxRaycastCallbackPtr pvk_in_this = this;
            void_PxRaycastCallbackPtr_finalizeQueryPtr(pvk_in_this);
        }

        public bool hasAnyHits() {
            physx.PxRaycastCallbackPtr pvk_in_this = this;
            return bool_PxRaycastCallbackPtr_hasAnyHitsPtr(pvk_in_this);
        }

        public unsafe interface IPxRaycastCallbackPtr {
            physx.PxRaycastHitPtr block {get;set;}
            bool hasBlock {get;set;}
            physx.PxRaycastHitPtr touches {get;set;}
            uint maxNbTouches {get;set;}
            uint nbTouches {get;set;}
            bool processTouches(physx.PxRaycastHitPtr buffer, uint nbHits);
            void finalizeQuery();
            bool hasAnyHits();
        }
    }

    public unsafe partial struct PxSweepCallbackPtr : physx.PxSweepCallbackPtr.IPxSweepCallbackPtr {
        private System.IntPtr nativePtr_;

        public physx.PxSweepHitPtr block {
            get => PxSweepCallbackPtr_GET_block(this);
            set => PxSweepCallbackPtr_SET_block(this, value);
        }

        public bool hasBlock {
            get => PxSweepCallbackPtr_GET_hasBlock(this);
            set => PxSweepCallbackPtr_SET_hasBlock(this, value);
        }

        public physx.PxSweepHitPtr touches {
            get => PxSweepCallbackPtr_GET_touches(this);
            set => PxSweepCallbackPtr_SET_touches(this, value);
        }

        public uint maxNbTouches {
            get => PxSweepCallbackPtr_GET_maxNbTouches(this);
            set => PxSweepCallbackPtr_SET_maxNbTouches(this, value);
        }

        public uint nbTouches {
            get => PxSweepCallbackPtr_GET_nbTouches(this);
            set => PxSweepCallbackPtr_SET_nbTouches(this, value);
        }

        public bool processTouches(physx.PxSweepHitPtr buffer, uint nbHits) {
            physx.PxSweepCallbackPtr pvk_in_this = this;
            physx.PxSweepHitPtr pvk_in_buffer = buffer;
            uint pvk_in_nbHits = nbHits;
            return bool_PxSweepCallbackPtr_processTouchesPtr_PxSweepHitPtr_uint_(pvk_in_this, pvk_in_buffer, pvk_in_nbHits);
        }

        public void finalizeQuery() {
            physx.PxSweepCallbackPtr pvk_in_this = this;
            void_PxSweepCallbackPtr_finalizeQueryPtr(pvk_in_this);
        }

        public bool hasAnyHits() {
            physx.PxSweepCallbackPtr pvk_in_this = this;
            return bool_PxSweepCallbackPtr_hasAnyHitsPtr(pvk_in_this);
        }

        public unsafe interface IPxSweepCallbackPtr {
            physx.PxSweepHitPtr block {get;set;}
            bool hasBlock {get;set;}
            physx.PxSweepHitPtr touches {get;set;}
            uint maxNbTouches {get;set;}
            uint nbTouches {get;set;}
            bool processTouches(physx.PxSweepHitPtr buffer, uint nbHits);
            void finalizeQuery();
            bool hasAnyHits();
        }
    }

    public unsafe partial struct PxOverlapCallbackPtr : physx.PxOverlapCallbackPtr.IPxOverlapCallbackPtr {
        private System.IntPtr nativePtr_;

        public physx.PxOverlapHitPtr block {
            get => PxOverlapCallbackPtr_GET_block(this);
            set => PxOverlapCallbackPtr_SET_block(this, value);
        }

        public bool hasBlock {
            get => PxOverlapCallbackPtr_GET_hasBlock(this);
            set => PxOverlapCallbackPtr_SET_hasBlock(this, value);
        }

        public physx.PxOverlapHitPtr touches {
            get => PxOverlapCallbackPtr_GET_touches(this);
            set => PxOverlapCallbackPtr_SET_touches(this, value);
        }

        public uint maxNbTouches {
            get => PxOverlapCallbackPtr_GET_maxNbTouches(this);
            set => PxOverlapCallbackPtr_SET_maxNbTouches(this, value);
        }

        public uint nbTouches {
            get => PxOverlapCallbackPtr_GET_nbTouches(this);
            set => PxOverlapCallbackPtr_SET_nbTouches(this, value);
        }

        public bool processTouches(physx.PxOverlapHitPtr buffer, uint nbHits) {
            physx.PxOverlapCallbackPtr pvk_in_this = this;
            physx.PxOverlapHitPtr pvk_in_buffer = buffer;
            uint pvk_in_nbHits = nbHits;
            return bool_PxOverlapCallbackPtr_processTouchesPtr_PxOverlapHitPtr_uint_(pvk_in_this, pvk_in_buffer, pvk_in_nbHits);
        }

        public void finalizeQuery() {
            physx.PxOverlapCallbackPtr pvk_in_this = this;
            void_PxOverlapCallbackPtr_finalizeQueryPtr(pvk_in_this);
        }

        public bool hasAnyHits() {
            physx.PxOverlapCallbackPtr pvk_in_this = this;
            return bool_PxOverlapCallbackPtr_hasAnyHitsPtr(pvk_in_this);
        }

        public unsafe interface IPxOverlapCallbackPtr {
            physx.PxOverlapHitPtr block {get;set;}
            bool hasBlock {get;set;}
            physx.PxOverlapHitPtr touches {get;set;}
            uint maxNbTouches {get;set;}
            uint nbTouches {get;set;}
            bool processTouches(physx.PxOverlapHitPtr buffer, uint nbHits);
            void finalizeQuery();
            bool hasAnyHits();
        }
    }

    public unsafe partial struct PxRaycastBufferPtr : physx.PxRaycastCallbackPtr.IPxRaycastCallbackPtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxRaycastBufferPtr ptr){
            Freer_physx_PxRaycastBufferPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxRaycastBufferPtr(this);
        }

        public static physx.PxRaycastBufferPtr New(physx.PxRaycastHitPtr aTouches=default(physx.PxRaycastHitPtr), uint aMaxNbTouches=0) {
            physx.PxRaycastHitPtr pvk_in_aTouches = aTouches;
            uint pvk_in_aMaxNbTouches = aMaxNbTouches;
            return Ctor_PxRaycastBufferPtr_PxRaycastHitPtr_uint(pvk_in_aTouches, pvk_in_aMaxNbTouches);
        }

        public static physx.PxRaycastBufferPtr New() {
            return Ctor_PxRaycastBufferPtr_();
        }

        public static physx.PxRaycastBufferPtr New(physx.PxRaycastHitPtr aTouches=default(physx.PxRaycastHitPtr)) {
            physx.PxRaycastHitPtr pvk_in_aTouches = aTouches;
            return Ctor_PxRaycastBufferPtr_PxRaycastHitPtr(pvk_in_aTouches);
        }

        public uint getNbAnyHits() {
            physx.PxRaycastBufferPtr pvk_in_this = this;
            return uint_const_PxRaycastBufferPtr_getNbAnyHitsPtr(pvk_in_this);
        }

        public physx.PxRaycastHitPtr getAnyHit(uint index) {
            physx.PxRaycastBufferPtr pvk_in_this = this;
            uint pvk_in_index = index;
            return PxRaycastHitPtr_const_PxRaycastBufferPtr_getAnyHitPtr_uintC(pvk_in_this, pvk_in_index);
        }

        public uint getNbTouches() {
            physx.PxRaycastBufferPtr pvk_in_this = this;
            return uint_const_PxRaycastBufferPtr_getNbTouchesPtr(pvk_in_this);
        }

        public physx.PxRaycastHitPtr getTouches() {
            physx.PxRaycastBufferPtr pvk_in_this = this;
            return PxRaycastHitPtr_const_PxRaycastBufferPtr_getTouchesPtr(pvk_in_this);
        }

        public physx.PxRaycastHitPtr getTouch(uint index) {
            physx.PxRaycastBufferPtr pvk_in_this = this;
            uint pvk_in_index = index;
            return PxRaycastHitPtr_const_PxRaycastBufferPtr_getTouchPtr_uintC(pvk_in_this, pvk_in_index);
        }

        public uint getMaxNbTouches() {
            physx.PxRaycastBufferPtr pvk_in_this = this;
            return uint_const_PxRaycastBufferPtr_getMaxNbTouchesPtr(pvk_in_this);
        }

        public static implicit operator physx.PxRaycastCallbackPtr(PxRaycastBufferPtr obj) => *(physx.PxRaycastCallbackPtr*)&obj;
        public static explicit operator PxRaycastBufferPtr(physx.PxRaycastCallbackPtr obj) => *(PxRaycastBufferPtr*)&obj;

        public physx.PxRaycastHitPtr block {
            get => PxRaycastCallbackPtr_GET_block(this);
            set => PxRaycastCallbackPtr_SET_block(this, value);
        }

        public bool hasBlock {
            get => PxRaycastCallbackPtr_GET_hasBlock(this);
            set => PxRaycastCallbackPtr_SET_hasBlock(this, value);
        }

        public physx.PxRaycastHitPtr touches {
            get => PxRaycastCallbackPtr_GET_touches(this);
            set => PxRaycastCallbackPtr_SET_touches(this, value);
        }

        public uint maxNbTouches {
            get => PxRaycastCallbackPtr_GET_maxNbTouches(this);
            set => PxRaycastCallbackPtr_SET_maxNbTouches(this, value);
        }

        public uint nbTouches {
            get => PxRaycastCallbackPtr_GET_nbTouches(this);
            set => PxRaycastCallbackPtr_SET_nbTouches(this, value);
        }

        public bool processTouches(physx.PxRaycastHitPtr buffer, uint nbHits){return((physx.PxRaycastCallbackPtr)this).processTouches(buffer, nbHits);}
        public void finalizeQuery(){((physx.PxRaycastCallbackPtr)this).finalizeQuery();}
        public bool hasAnyHits(){return((physx.PxRaycastCallbackPtr)this).hasAnyHits();}
    }

    public unsafe partial struct PxOverlapBufferPtr : physx.PxOverlapCallbackPtr.IPxOverlapCallbackPtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxOverlapBufferPtr ptr){
            Freer_physx_PxOverlapBufferPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxOverlapBufferPtr(this);
        }

        public static physx.PxOverlapBufferPtr New(physx.PxOverlapHitPtr aTouches=default(physx.PxOverlapHitPtr), uint aMaxNbTouches=0) {
            physx.PxOverlapHitPtr pvk_in_aTouches = aTouches;
            uint pvk_in_aMaxNbTouches = aMaxNbTouches;
            return Ctor_PxOverlapBufferPtr_PxOverlapHitPtr_uint(pvk_in_aTouches, pvk_in_aMaxNbTouches);
        }

        public static physx.PxOverlapBufferPtr New() {
            return Ctor_PxOverlapBufferPtr_();
        }

        public static physx.PxOverlapBufferPtr New(physx.PxOverlapHitPtr aTouches=default(physx.PxOverlapHitPtr)) {
            physx.PxOverlapHitPtr pvk_in_aTouches = aTouches;
            return Ctor_PxOverlapBufferPtr_PxOverlapHitPtr(pvk_in_aTouches);
        }

        public uint getNbAnyHits() {
            physx.PxOverlapBufferPtr pvk_in_this = this;
            return uint_const_PxOverlapBufferPtr_getNbAnyHitsPtr(pvk_in_this);
        }

        public physx.PxOverlapHitPtr getAnyHit(uint index) {
            physx.PxOverlapBufferPtr pvk_in_this = this;
            uint pvk_in_index = index;
            return PxOverlapHitPtr_const_PxOverlapBufferPtr_getAnyHitPtr_uintC(pvk_in_this, pvk_in_index);
        }

        public uint getNbTouches() {
            physx.PxOverlapBufferPtr pvk_in_this = this;
            return uint_const_PxOverlapBufferPtr_getNbTouchesPtr(pvk_in_this);
        }

        public physx.PxOverlapHitPtr getTouches() {
            physx.PxOverlapBufferPtr pvk_in_this = this;
            return PxOverlapHitPtr_const_PxOverlapBufferPtr_getTouchesPtr(pvk_in_this);
        }

        public physx.PxOverlapHitPtr getTouch(uint index) {
            physx.PxOverlapBufferPtr pvk_in_this = this;
            uint pvk_in_index = index;
            return PxOverlapHitPtr_const_PxOverlapBufferPtr_getTouchPtr_uintC(pvk_in_this, pvk_in_index);
        }

        public uint getMaxNbTouches() {
            physx.PxOverlapBufferPtr pvk_in_this = this;
            return uint_const_PxOverlapBufferPtr_getMaxNbTouchesPtr(pvk_in_this);
        }

        public static implicit operator physx.PxOverlapCallbackPtr(PxOverlapBufferPtr obj) => *(physx.PxOverlapCallbackPtr*)&obj;
        public static explicit operator PxOverlapBufferPtr(physx.PxOverlapCallbackPtr obj) => *(PxOverlapBufferPtr*)&obj;

        public physx.PxOverlapHitPtr block {
            get => PxOverlapCallbackPtr_GET_block(this);
            set => PxOverlapCallbackPtr_SET_block(this, value);
        }

        public bool hasBlock {
            get => PxOverlapCallbackPtr_GET_hasBlock(this);
            set => PxOverlapCallbackPtr_SET_hasBlock(this, value);
        }

        public physx.PxOverlapHitPtr touches {
            get => PxOverlapCallbackPtr_GET_touches(this);
            set => PxOverlapCallbackPtr_SET_touches(this, value);
        }

        public uint maxNbTouches {
            get => PxOverlapCallbackPtr_GET_maxNbTouches(this);
            set => PxOverlapCallbackPtr_SET_maxNbTouches(this, value);
        }

        public uint nbTouches {
            get => PxOverlapCallbackPtr_GET_nbTouches(this);
            set => PxOverlapCallbackPtr_SET_nbTouches(this, value);
        }

        public bool processTouches(physx.PxOverlapHitPtr buffer, uint nbHits){return((physx.PxOverlapCallbackPtr)this).processTouches(buffer, nbHits);}
        public void finalizeQuery(){((physx.PxOverlapCallbackPtr)this).finalizeQuery();}
        public bool hasAnyHits(){return((physx.PxOverlapCallbackPtr)this).hasAnyHits();}
    }

    public unsafe partial struct PxSweepBufferPtr : physx.PxSweepCallbackPtr.IPxSweepCallbackPtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxSweepBufferPtr ptr){
            Freer_physx_PxSweepBufferPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxSweepBufferPtr(this);
        }

        public static physx.PxSweepBufferPtr New(physx.PxSweepHitPtr aTouches=default(physx.PxSweepHitPtr), uint aMaxNbTouches=0) {
            physx.PxSweepHitPtr pvk_in_aTouches = aTouches;
            uint pvk_in_aMaxNbTouches = aMaxNbTouches;
            return Ctor_PxSweepBufferPtr_PxSweepHitPtr_uint(pvk_in_aTouches, pvk_in_aMaxNbTouches);
        }

        public static physx.PxSweepBufferPtr New() {
            return Ctor_PxSweepBufferPtr_();
        }

        public static physx.PxSweepBufferPtr New(physx.PxSweepHitPtr aTouches=default(physx.PxSweepHitPtr)) {
            physx.PxSweepHitPtr pvk_in_aTouches = aTouches;
            return Ctor_PxSweepBufferPtr_PxSweepHitPtr(pvk_in_aTouches);
        }

        public uint getNbAnyHits() {
            physx.PxSweepBufferPtr pvk_in_this = this;
            return uint_const_PxSweepBufferPtr_getNbAnyHitsPtr(pvk_in_this);
        }

        public physx.PxSweepHitPtr getAnyHit(uint index) {
            physx.PxSweepBufferPtr pvk_in_this = this;
            uint pvk_in_index = index;
            return PxSweepHitPtr_const_PxSweepBufferPtr_getAnyHitPtr_uintC(pvk_in_this, pvk_in_index);
        }

        public uint getNbTouches() {
            physx.PxSweepBufferPtr pvk_in_this = this;
            return uint_const_PxSweepBufferPtr_getNbTouchesPtr(pvk_in_this);
        }

        public physx.PxSweepHitPtr getTouches() {
            physx.PxSweepBufferPtr pvk_in_this = this;
            return PxSweepHitPtr_const_PxSweepBufferPtr_getTouchesPtr(pvk_in_this);
        }

        public physx.PxSweepHitPtr getTouch(uint index) {
            physx.PxSweepBufferPtr pvk_in_this = this;
            uint pvk_in_index = index;
            return PxSweepHitPtr_const_PxSweepBufferPtr_getTouchPtr_uintC(pvk_in_this, pvk_in_index);
        }

        public uint getMaxNbTouches() {
            physx.PxSweepBufferPtr pvk_in_this = this;
            return uint_const_PxSweepBufferPtr_getMaxNbTouchesPtr(pvk_in_this);
        }

        public static implicit operator physx.PxSweepCallbackPtr(PxSweepBufferPtr obj) => *(physx.PxSweepCallbackPtr*)&obj;
        public static explicit operator PxSweepBufferPtr(physx.PxSweepCallbackPtr obj) => *(PxSweepBufferPtr*)&obj;

        public physx.PxSweepHitPtr block {
            get => PxSweepCallbackPtr_GET_block(this);
            set => PxSweepCallbackPtr_SET_block(this, value);
        }

        public bool hasBlock {
            get => PxSweepCallbackPtr_GET_hasBlock(this);
            set => PxSweepCallbackPtr_SET_hasBlock(this, value);
        }

        public physx.PxSweepHitPtr touches {
            get => PxSweepCallbackPtr_GET_touches(this);
            set => PxSweepCallbackPtr_SET_touches(this, value);
        }

        public uint maxNbTouches {
            get => PxSweepCallbackPtr_GET_maxNbTouches(this);
            set => PxSweepCallbackPtr_SET_maxNbTouches(this, value);
        }

        public uint nbTouches {
            get => PxSweepCallbackPtr_GET_nbTouches(this);
            set => PxSweepCallbackPtr_SET_nbTouches(this, value);
        }

        public bool processTouches(physx.PxSweepHitPtr buffer, uint nbHits){return((physx.PxSweepCallbackPtr)this).processTouches(buffer, nbHits);}
        public void finalizeQuery(){((physx.PxSweepCallbackPtr)this).finalizeQuery();}
        public bool hasAnyHits(){return((physx.PxSweepCallbackPtr)this).hasAnyHits();}
    }

    public enum PxHitFlagEnum : int {
        ePOSITION = 1,                   // ePOSITION = (1<<0)
        eNORMAL = 2,                     // eNORMAL = (1<<1)
        eUV = 8,                         // eUV = (1<<3)
        eASSUME_NO_INITIAL_OVERLAP = 16, // eASSUME_NO_INITIAL_OVERLAP = (1<<4)
        eMESH_MULTIPLE = 32,             // eMESH_MULTIPLE = (1<<5)
        eMESH_ANY = 64,                  // eMESH_ANY = (1<<6)
        eMESH_BOTH_SIDES = 128,          // eMESH_BOTH_SIDES = (1<<7)
        ePRECISE_SWEEP = 256,            // ePRECISE_SWEEP = (1<<8)
        eMTD = 512,                      // eMTD = (1<<9)
        eFACE_INDEX = 1024,              // eFACE_INDEX = (1<<10)
        eDEFAULT = 1027,                 // eDEFAULT = ePOSITION|eNORMAL|eFACE_INDEX
        eMODIFIABLE_FLAGS = 432,         // eMODIFIABLE_FLAGS = eMESH_MULTIPLE|eMESH_BOTH_SIDES|eASSUME_NO_INITIAL_OVERLAP|ePRECISE_SWEEP
    }

    public unsafe partial struct PxActorShapePtr : physx.PxActorShapePtr.IPxActorShapePtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxActorShapePtr ptr){
            Freer_physx_PxActorShapePtr(ptr);
        }
        public void Free(){
            Freer_physx_PxActorShapePtr(this);
        }

        public static physx.PxActorShapePtr New() {
            return Ctor_PxActorShapePtr_();
        }

        public static physx.PxActorShapePtr New(physx.PxRigidActorPtr a, physx.PxShapePtr s) {
            physx.PxRigidActorPtr pvk_in_a = a;
            physx.PxShapePtr pvk_in_s = s;
            return Ctor_PxActorShapePtr_PxRigidActorPtr_PxShapePtr(pvk_in_a, pvk_in_s);
        }

        public physx.PxRigidActorPtr actor {
            get => PxActorShapePtr_GET_actor(this);
            set => PxActorShapePtr_SET_actor(this, value);
        }

        public physx.PxShapePtr shape {
            get => PxActorShapePtr_GET_shape(this);
            set => PxActorShapePtr_SET_shape(this, value);
        }

        public unsafe interface IPxActorShapePtr {
            physx.PxRigidActorPtr actor {get;set;}
            physx.PxShapePtr shape {get;set;}
        }
    }

    public unsafe partial struct PxQueryHitPtr : physx.PxQueryHitPtr.IPxQueryHitPtr, physx.PxActorShapePtr.IPxActorShapePtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxQueryHitPtr ptr){
            Freer_physx_PxQueryHitPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxQueryHitPtr(this);
        }

        public static physx.PxQueryHitPtr New() {
            return Ctor_PxQueryHitPtr_();
        }

        public uint faceIndex {
            get => PxQueryHitPtr_GET_faceIndex(this);
            set => PxQueryHitPtr_SET_faceIndex(this, value);
        }

        public static implicit operator physx.PxActorShapePtr(PxQueryHitPtr obj) => *(physx.PxActorShapePtr*)&obj;
        public static explicit operator PxQueryHitPtr(physx.PxActorShapePtr obj) => *(PxQueryHitPtr*)&obj;

        public physx.PxRigidActorPtr actor {
            get => PxActorShapePtr_GET_actor(this);
            set => PxActorShapePtr_SET_actor(this, value);
        }

        public physx.PxShapePtr shape {
            get => PxActorShapePtr_GET_shape(this);
            set => PxActorShapePtr_SET_shape(this, value);
        }

        public unsafe interface IPxQueryHitPtr {
            uint faceIndex {get;set;}
        }
    }

    public unsafe partial struct PxLocationHitPtr : physx.PxLocationHitPtr.IPxLocationHitPtr, physx.PxQueryHitPtr.IPxQueryHitPtr, physx.PxActorShapePtr.IPxActorShapePtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxLocationHitPtr ptr){
            Freer_physx_PxLocationHitPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxLocationHitPtr(this);
        }

        public static physx.PxLocationHitPtr New() {
            return Ctor_PxLocationHitPtr_();
        }

        public physx.PxHitFlagsPtr flags {
            get => PxLocationHitPtr_GET_flags(this);
            set => PxLocationHitPtr_SET_flags(this, value);
        }

        public physx.PxVec3 position {
            get { physx.PxVec3 GetRetRef; PxLocationHitPtr_GET_position(this, &GetRetRef); return GetRetRef; }
            set => PxLocationHitPtr_SET_position(this, value);
        }

        public physx.PxVec3 normal {
            get { physx.PxVec3 GetRetRef; PxLocationHitPtr_GET_normal(this, &GetRetRef); return GetRetRef; }
            set => PxLocationHitPtr_SET_normal(this, value);
        }

        public float distance {
            get => PxLocationHitPtr_GET_distance(this);
            set => PxLocationHitPtr_SET_distance(this, value);
        }

        public bool hadInitialOverlap() {
            physx.PxLocationHitPtr pvk_in_this = this;
            return bool_const_PxLocationHitPtr_hadInitialOverlapPtr(pvk_in_this);
        }

        public static implicit operator physx.PxQueryHitPtr(PxLocationHitPtr obj) => *(physx.PxQueryHitPtr*)&obj;
        public static explicit operator PxLocationHitPtr(physx.PxQueryHitPtr obj) => *(PxLocationHitPtr*)&obj;
        public static implicit operator physx.PxActorShapePtr(PxLocationHitPtr obj) => *(physx.PxActorShapePtr*)&obj;
        public static explicit operator PxLocationHitPtr(physx.PxActorShapePtr obj) => *(PxLocationHitPtr*)&obj;

        public uint faceIndex {
            get => PxQueryHitPtr_GET_faceIndex(this);
            set => PxQueryHitPtr_SET_faceIndex(this, value);
        }

        public physx.PxRigidActorPtr actor {
            get => PxActorShapePtr_GET_actor(this);
            set => PxActorShapePtr_SET_actor(this, value);
        }

        public physx.PxShapePtr shape {
            get => PxActorShapePtr_GET_shape(this);
            set => PxActorShapePtr_SET_shape(this, value);
        }

        public unsafe interface IPxLocationHitPtr {
            physx.PxHitFlagsPtr flags {get;set;}
            physx.PxVec3 position {get;set;}
            physx.PxVec3 normal {get;set;}
            float distance {get;set;}
            bool hadInitialOverlap();
        }
    }

    public unsafe partial struct PxRaycastHitPtr : physx.PxLocationHitPtr.IPxLocationHitPtr, physx.PxQueryHitPtr.IPxQueryHitPtr, physx.PxActorShapePtr.IPxActorShapePtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxRaycastHitPtr ptr){
            Freer_physx_PxRaycastHitPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxRaycastHitPtr(this);
        }

        public static physx.PxRaycastHitPtr New() {
            return Ctor_PxRaycastHitPtr_();
        }

        public float u {
            get => PxRaycastHitPtr_GET_u(this);
            set => PxRaycastHitPtr_SET_u(this, value);
        }

        public float v {
            get => PxRaycastHitPtr_GET_v(this);
            set => PxRaycastHitPtr_SET_v(this, value);
        }

        public static implicit operator physx.PxLocationHitPtr(PxRaycastHitPtr obj) => *(physx.PxLocationHitPtr*)&obj;
        public static explicit operator PxRaycastHitPtr(physx.PxLocationHitPtr obj) => *(PxRaycastHitPtr*)&obj;
        public static implicit operator physx.PxQueryHitPtr(PxRaycastHitPtr obj) => *(physx.PxQueryHitPtr*)&obj;
        public static explicit operator PxRaycastHitPtr(physx.PxQueryHitPtr obj) => *(PxRaycastHitPtr*)&obj;
        public static implicit operator physx.PxActorShapePtr(PxRaycastHitPtr obj) => *(physx.PxActorShapePtr*)&obj;
        public static explicit operator PxRaycastHitPtr(physx.PxActorShapePtr obj) => *(PxRaycastHitPtr*)&obj;

        public physx.PxHitFlagsPtr flags {
            get => PxLocationHitPtr_GET_flags(this);
            set => PxLocationHitPtr_SET_flags(this, value);
        }

        public physx.PxVec3 position {
            get { physx.PxVec3 GetRetRef; PxLocationHitPtr_GET_position(this, &GetRetRef); return GetRetRef; }
            set => PxLocationHitPtr_SET_position(this, value);
        }

        public physx.PxVec3 normal {
            get { physx.PxVec3 GetRetRef; PxLocationHitPtr_GET_normal(this, &GetRetRef); return GetRetRef; }
            set => PxLocationHitPtr_SET_normal(this, value);
        }

        public float distance {
            get => PxLocationHitPtr_GET_distance(this);
            set => PxLocationHitPtr_SET_distance(this, value);
        }

        public uint faceIndex {
            get => PxQueryHitPtr_GET_faceIndex(this);
            set => PxQueryHitPtr_SET_faceIndex(this, value);
        }

        public physx.PxRigidActorPtr actor {
            get => PxActorShapePtr_GET_actor(this);
            set => PxActorShapePtr_SET_actor(this, value);
        }

        public physx.PxShapePtr shape {
            get => PxActorShapePtr_GET_shape(this);
            set => PxActorShapePtr_SET_shape(this, value);
        }

        public bool hadInitialOverlap(){return((physx.PxLocationHitPtr)this).hadInitialOverlap();}
    }

    public unsafe partial struct PxOverlapHitPtr : physx.PxQueryHitPtr.IPxQueryHitPtr, physx.PxActorShapePtr.IPxActorShapePtr {
        private System.IntPtr nativePtr_;

        public static physx.PxOverlapHitPtr New(){
            return Newer_physx_PxOverlapHitPtr();
        }
        public static void Free(physx.PxOverlapHitPtr ptr){
            Freer_physx_PxOverlapHitPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxOverlapHitPtr(this);
        }

        public uint padTo16Bytes {
            get => PxOverlapHitPtr_GET_padTo16Bytes(this);
            set => PxOverlapHitPtr_SET_padTo16Bytes(this, value);
        }

        public static implicit operator physx.PxQueryHitPtr(PxOverlapHitPtr obj) => *(physx.PxQueryHitPtr*)&obj;
        public static explicit operator PxOverlapHitPtr(physx.PxQueryHitPtr obj) => *(PxOverlapHitPtr*)&obj;
        public static implicit operator physx.PxActorShapePtr(PxOverlapHitPtr obj) => *(physx.PxActorShapePtr*)&obj;
        public static explicit operator PxOverlapHitPtr(physx.PxActorShapePtr obj) => *(PxOverlapHitPtr*)&obj;

        public uint faceIndex {
            get => PxQueryHitPtr_GET_faceIndex(this);
            set => PxQueryHitPtr_SET_faceIndex(this, value);
        }

        public physx.PxRigidActorPtr actor {
            get => PxActorShapePtr_GET_actor(this);
            set => PxActorShapePtr_SET_actor(this, value);
        }

        public physx.PxShapePtr shape {
            get => PxActorShapePtr_GET_shape(this);
            set => PxActorShapePtr_SET_shape(this, value);
        }
    }

    public unsafe partial struct PxSweepHitPtr : physx.PxLocationHitPtr.IPxLocationHitPtr, physx.PxQueryHitPtr.IPxQueryHitPtr, physx.PxActorShapePtr.IPxActorShapePtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxSweepHitPtr ptr){
            Freer_physx_PxSweepHitPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxSweepHitPtr(this);
        }

        public static physx.PxSweepHitPtr New() {
            return Ctor_PxSweepHitPtr_();
        }

        public uint padTo16Bytes {
            get => PxSweepHitPtr_GET_padTo16Bytes(this);
            set => PxSweepHitPtr_SET_padTo16Bytes(this, value);
        }

        public static implicit operator physx.PxLocationHitPtr(PxSweepHitPtr obj) => *(physx.PxLocationHitPtr*)&obj;
        public static explicit operator PxSweepHitPtr(physx.PxLocationHitPtr obj) => *(PxSweepHitPtr*)&obj;
        public static implicit operator physx.PxQueryHitPtr(PxSweepHitPtr obj) => *(physx.PxQueryHitPtr*)&obj;
        public static explicit operator PxSweepHitPtr(physx.PxQueryHitPtr obj) => *(PxSweepHitPtr*)&obj;
        public static implicit operator physx.PxActorShapePtr(PxSweepHitPtr obj) => *(physx.PxActorShapePtr*)&obj;
        public static explicit operator PxSweepHitPtr(physx.PxActorShapePtr obj) => *(PxSweepHitPtr*)&obj;

        public physx.PxHitFlagsPtr flags {
            get => PxLocationHitPtr_GET_flags(this);
            set => PxLocationHitPtr_SET_flags(this, value);
        }

        public physx.PxVec3 position {
            get { physx.PxVec3 GetRetRef; PxLocationHitPtr_GET_position(this, &GetRetRef); return GetRetRef; }
            set => PxLocationHitPtr_SET_position(this, value);
        }

        public physx.PxVec3 normal {
            get { physx.PxVec3 GetRetRef; PxLocationHitPtr_GET_normal(this, &GetRetRef); return GetRetRef; }
            set => PxLocationHitPtr_SET_normal(this, value);
        }

        public float distance {
            get => PxLocationHitPtr_GET_distance(this);
            set => PxLocationHitPtr_SET_distance(this, value);
        }

        public uint faceIndex {
            get => PxQueryHitPtr_GET_faceIndex(this);
            set => PxQueryHitPtr_SET_faceIndex(this, value);
        }

        public physx.PxRigidActorPtr actor {
            get => PxActorShapePtr_GET_actor(this);
            set => PxActorShapePtr_SET_actor(this, value);
        }

        public physx.PxShapePtr shape {
            get => PxActorShapePtr_GET_shape(this);
            set => PxActorShapePtr_SET_shape(this, value);
        }

        public bool hadInitialOverlap(){return((physx.PxLocationHitPtr)this).hadInitialOverlap();}
    }

}
