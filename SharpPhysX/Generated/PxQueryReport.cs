// Generated by minBND 5.1.78.26 - Â© github.com/Alan-FGR
//DEBUG: UnitNode  - 0
//Unit PxQueryReport
using System;
using System.Runtime.InteropServices;

//DEBUG: NamespaceNode physx - 41-386
public static unsafe partial class physx {
    //DEBUG: FunctionNode physx::operator| - 94
    // physx::operator| [static PxHitFlagsPtr Pipe_New(physx.PxHitFlagEnum a, physx.PxHitFlagEnum b)] will be bound as member operator
    
    //DEBUG: FunctionNode physx::operator& - 94
    // physx::operator& [static PxHitFlagsPtr Amp_New(physx.PxHitFlagEnum a, physx.PxHitFlagEnum b)] will be bound as member operator
    
    //DEBUG: FunctionNode physx::operator~ - 94
    // physx::operator~ [static PxHitFlagsPtr Tilde_New(physx.PxHitFlagEnum a)] will be bound as member operator
    
    //DEBUG: ClassNode physx::PxHitCallback - 232-293
    //Type PxHitCallback is template class, adding templated class node
    public unsafe partial struct PxRaycastCallbackPtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxRaycastHit> - -1
        //Field: block - 234-234
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxRaycastHitPtr PxHitCallback_GET_block(PxRaycastCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_block(PxRaycastCallbackPtr cls, physx.PxRaycastHitPtr value);
        
        public physx.PxRaycastHitPtr block {
            get => PxHitCallback_GET_block(this);
            set => PxHitCallback_SET_block(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxRaycastHit> - -1
        //Field: hasBlock - 235-235
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool PxHitCallback_GET_hasBlock(PxRaycastCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_hasBlock(PxRaycastCallbackPtr cls, bool value);
        
        public bool hasBlock {
            get => PxHitCallback_GET_hasBlock(this);
            set => PxHitCallback_SET_hasBlock(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxRaycastHit> - -1
        //Field: touches - 237-237
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxRaycastHitPtr PxHitCallback_GET_touches(PxRaycastCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_touches(PxRaycastCallbackPtr cls, physx.PxRaycastHitPtr value);
        
        public physx.PxRaycastHitPtr touches {
            get => PxHitCallback_GET_touches(this);
            set => PxHitCallback_SET_touches(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxRaycastHit> - -1
        //Field: maxNbTouches - 243-243
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxHitCallback_GET_maxNbTouches(PxRaycastCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_maxNbTouches(PxRaycastCallbackPtr cls, uint value);
        
        public uint maxNbTouches {
            get => PxHitCallback_GET_maxNbTouches(this);
            set => PxHitCallback_SET_maxNbTouches(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxRaycastHit> - -1
        //Field: nbTouches - 248-248
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxHitCallback_GET_nbTouches(PxRaycastCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_nbTouches(PxRaycastCallbackPtr cls, uint value);
        
        public uint nbTouches {
            get => PxHitCallback_GET_nbTouches(this);
            set => PxHitCallback_SET_nbTouches(this, value);
        }
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxRaycastHit>::processTouches - 285
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxHitCallback_global_SharpPhysX_physx_PxRaycastHit_processTouches_physx_PxRaycastHitPtr_uint_(PxRaycastCallbackPtr pvk_this, physx.PxRaycastHitPtr pvk_buffer, uint pvk_nbHits);
        
        public bool processTouches(physx.PxRaycastHitPtr buffer, uint nbHits) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRaycastCallbackPtr, man: PxRaycastCallbackPtr, stg: PtrStruct
            PxRaycastCallbackPtr pvk_in_this = this;
            //PAR nat: PxRaycastHitPtr, man: physx.PxRaycastHitPtr, stg: PtrStruct
            physx.PxRaycastHitPtr pvk_in_buffer = buffer;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_nbHits = nbHits;
            return bool_physx_PxHitCallback_global_SharpPhysX_physx_PxRaycastHit_processTouches_physx_PxRaycastHitPtr_uint_(pvk_in_this, pvk_in_buffer, pvk_in_nbHits);
        }
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxRaycastHit>::finalizeQuery - 287
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxHitCallback_global_SharpPhysX_physx_PxRaycastHit_finalizeQuery(PxRaycastCallbackPtr pvk_this);
        
        public void finalizeQuery() {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRaycastCallbackPtr, man: PxRaycastCallbackPtr, stg: PtrStruct
            PxRaycastCallbackPtr pvk_in_this = this;
            void_physx_PxHitCallback_global_SharpPhysX_physx_PxRaycastHit_finalizeQuery(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxRaycastHit>::~PxHitCallback - 289
        //ERRORS OCCURED IN physx::PxHitCallback<global::SharpPhysX.physx.PxRaycastHit>::~PxHitCallback
        //Destructor
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxRaycastHit>::hasAnyHits - 292
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxHitCallback_global_SharpPhysX_physx_PxRaycastHit_hasAnyHits(PxRaycastCallbackPtr pvk_this);
        
        public bool hasAnyHits() {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRaycastCallbackPtr, man: PxRaycastCallbackPtr, stg: PtrStruct
            PxRaycastCallbackPtr pvk_in_this = this;
            return bool_physx_PxHitCallback_global_SharpPhysX_physx_PxRaycastHit_hasAnyHits(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxRaycastHit>::operator= - 232
        //ERRORS OCCURED IN physx::PxHitCallback<global::SharpPhysX.physx.PxRaycastHit>::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
    }
    public unsafe partial struct PxSweepCallbackPtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxSweepHit> - -1
        //Field: block - 234-234
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxSweepHitPtr PxHitCallback_GET_block(PxSweepCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_block(PxSweepCallbackPtr cls, physx.PxSweepHitPtr value);
        
        public physx.PxSweepHitPtr block {
            get => PxHitCallback_GET_block(this);
            set => PxHitCallback_SET_block(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxSweepHit> - -1
        //Field: hasBlock - 235-235
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool PxHitCallback_GET_hasBlock(PxSweepCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_hasBlock(PxSweepCallbackPtr cls, bool value);
        
        public bool hasBlock {
            get => PxHitCallback_GET_hasBlock(this);
            set => PxHitCallback_SET_hasBlock(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxSweepHit> - -1
        //Field: touches - 237-237
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxSweepHitPtr PxHitCallback_GET_touches(PxSweepCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_touches(PxSweepCallbackPtr cls, physx.PxSweepHitPtr value);
        
        public physx.PxSweepHitPtr touches {
            get => PxHitCallback_GET_touches(this);
            set => PxHitCallback_SET_touches(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxSweepHit> - -1
        //Field: maxNbTouches - 243-243
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxHitCallback_GET_maxNbTouches(PxSweepCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_maxNbTouches(PxSweepCallbackPtr cls, uint value);
        
        public uint maxNbTouches {
            get => PxHitCallback_GET_maxNbTouches(this);
            set => PxHitCallback_SET_maxNbTouches(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxSweepHit> - -1
        //Field: nbTouches - 248-248
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxHitCallback_GET_nbTouches(PxSweepCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_nbTouches(PxSweepCallbackPtr cls, uint value);
        
        public uint nbTouches {
            get => PxHitCallback_GET_nbTouches(this);
            set => PxHitCallback_SET_nbTouches(this, value);
        }
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxSweepHit>::processTouches - 285
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxHitCallback_global_SharpPhysX_physx_PxSweepHit_processTouches_physx_PxSweepHitPtr_uint_(PxSweepCallbackPtr pvk_this, physx.PxSweepHitPtr pvk_buffer, uint pvk_nbHits);
        
        public bool processTouches(physx.PxSweepHitPtr buffer, uint nbHits) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxSweepCallbackPtr, man: PxSweepCallbackPtr, stg: PtrStruct
            PxSweepCallbackPtr pvk_in_this = this;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_buffer = buffer;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_nbHits = nbHits;
            return bool_physx_PxHitCallback_global_SharpPhysX_physx_PxSweepHit_processTouches_physx_PxSweepHitPtr_uint_(pvk_in_this, pvk_in_buffer, pvk_in_nbHits);
        }
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxSweepHit>::finalizeQuery - 287
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxHitCallback_global_SharpPhysX_physx_PxSweepHit_finalizeQuery(PxSweepCallbackPtr pvk_this);
        
        public void finalizeQuery() {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxSweepCallbackPtr, man: PxSweepCallbackPtr, stg: PtrStruct
            PxSweepCallbackPtr pvk_in_this = this;
            void_physx_PxHitCallback_global_SharpPhysX_physx_PxSweepHit_finalizeQuery(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxSweepHit>::~PxHitCallback - 289
        //ERRORS OCCURED IN physx::PxHitCallback<global::SharpPhysX.physx.PxSweepHit>::~PxHitCallback
        //Destructor
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxSweepHit>::hasAnyHits - 292
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxHitCallback_global_SharpPhysX_physx_PxSweepHit_hasAnyHits(PxSweepCallbackPtr pvk_this);
        
        public bool hasAnyHits() {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxSweepCallbackPtr, man: PxSweepCallbackPtr, stg: PtrStruct
            PxSweepCallbackPtr pvk_in_this = this;
            return bool_physx_PxHitCallback_global_SharpPhysX_physx_PxSweepHit_hasAnyHits(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxSweepHit>::operator= - 232
        //ERRORS OCCURED IN physx::PxHitCallback<global::SharpPhysX.physx.PxSweepHit>::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
    }
    public unsafe partial struct PxOverlapCallbackPtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxOverlapHit> - -1
        //Field: block - 234-234
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxOverlapHitPtr PxHitCallback_GET_block(PxOverlapCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_block(PxOverlapCallbackPtr cls, physx.PxOverlapHitPtr value);
        
        public physx.PxOverlapHitPtr block {
            get => PxHitCallback_GET_block(this);
            set => PxHitCallback_SET_block(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxOverlapHit> - -1
        //Field: hasBlock - 235-235
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool PxHitCallback_GET_hasBlock(PxOverlapCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_hasBlock(PxOverlapCallbackPtr cls, bool value);
        
        public bool hasBlock {
            get => PxHitCallback_GET_hasBlock(this);
            set => PxHitCallback_SET_hasBlock(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxOverlapHit> - -1
        //Field: touches - 237-237
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxOverlapHitPtr PxHitCallback_GET_touches(PxOverlapCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_touches(PxOverlapCallbackPtr cls, physx.PxOverlapHitPtr value);
        
        public physx.PxOverlapHitPtr touches {
            get => PxHitCallback_GET_touches(this);
            set => PxHitCallback_SET_touches(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxOverlapHit> - -1
        //Field: maxNbTouches - 243-243
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxHitCallback_GET_maxNbTouches(PxOverlapCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_maxNbTouches(PxOverlapCallbackPtr cls, uint value);
        
        public uint maxNbTouches {
            get => PxHitCallback_GET_maxNbTouches(this);
            set => PxHitCallback_SET_maxNbTouches(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxHitCallback<global::SharpPhysX.physx.PxOverlapHit> - -1
        //Field: nbTouches - 248-248
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxHitCallback_GET_nbTouches(PxOverlapCallbackPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxHitCallback_SET_nbTouches(PxOverlapCallbackPtr cls, uint value);
        
        public uint nbTouches {
            get => PxHitCallback_GET_nbTouches(this);
            set => PxHitCallback_SET_nbTouches(this, value);
        }
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxOverlapHit>::processTouches - 285
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxHitCallback_global_SharpPhysX_physx_PxOverlapHit_processTouches_physx_PxOverlapHitPtr_uint_(PxOverlapCallbackPtr pvk_this, physx.PxOverlapHitPtr pvk_buffer, uint pvk_nbHits);
        
        public bool processTouches(physx.PxOverlapHitPtr buffer, uint nbHits) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxOverlapCallbackPtr, man: PxOverlapCallbackPtr, stg: PtrStruct
            PxOverlapCallbackPtr pvk_in_this = this;
            //PAR nat: PxOverlapHitPtr, man: physx.PxOverlapHitPtr, stg: PtrStruct
            physx.PxOverlapHitPtr pvk_in_buffer = buffer;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_nbHits = nbHits;
            return bool_physx_PxHitCallback_global_SharpPhysX_physx_PxOverlapHit_processTouches_physx_PxOverlapHitPtr_uint_(pvk_in_this, pvk_in_buffer, pvk_in_nbHits);
        }
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxOverlapHit>::finalizeQuery - 287
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxHitCallback_global_SharpPhysX_physx_PxOverlapHit_finalizeQuery(PxOverlapCallbackPtr pvk_this);
        
        public void finalizeQuery() {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxOverlapCallbackPtr, man: PxOverlapCallbackPtr, stg: PtrStruct
            PxOverlapCallbackPtr pvk_in_this = this;
            void_physx_PxHitCallback_global_SharpPhysX_physx_PxOverlapHit_finalizeQuery(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxOverlapHit>::~PxHitCallback - 289
        //ERRORS OCCURED IN physx::PxHitCallback<global::SharpPhysX.physx.PxOverlapHit>::~PxHitCallback
        //Destructor
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxOverlapHit>::hasAnyHits - 292
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxHitCallback_global_SharpPhysX_physx_PxOverlapHit_hasAnyHits(PxOverlapCallbackPtr pvk_this);
        
        public bool hasAnyHits() {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxOverlapCallbackPtr, man: PxOverlapCallbackPtr, stg: PtrStruct
            PxOverlapCallbackPtr pvk_in_this = this;
            return bool_physx_PxHitCallback_global_SharpPhysX_physx_PxOverlapHit_hasAnyHits(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitCallback<global::SharpPhysX.physx.PxOverlapHit>::operator= - 232
        //ERRORS OCCURED IN physx::PxHitCallback<global::SharpPhysX.physx.PxOverlapHit>::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
    }
    
    //DEBUG: ClassNode physx::PxHitBuffer - 310-340
    //Type PxHitBuffer is template class, adding templated class node
    public unsafe partial struct PxRaycastBufferPtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: NewerFreerNode physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit> - -1
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_PxRaycastBufferPtr(PxRaycastBufferPtr ptr);
        
        public static void Free(PxRaycastBufferPtr ptr){
            Freer_PxRaycastBufferPtr(ptr);
        }
        public void Free(){
            Freer_PxRaycastBufferPtr(this);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::PxHitBuffer - 322
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxRaycastBufferPtr Ctor_PxRaycastBufferPtr_physx_PxRaycastHitPtr_uint(physx.PxRaycastHitPtr pvk_aTouches, uint pvk_aMaxNbTouches);
        
        public static PxRaycastBufferPtr New(physx.PxRaycastHitPtr aTouches=default(physx.PxRaycastHitPtr), uint aMaxNbTouches=0) {
            //RET nat: PxRaycastBufferPtr, man: PxRaycastBufferPtr, stg: PtrStruct, ret: True
            //PAR nat: PxRaycastHitPtr, man: physx.PxRaycastHitPtr, stg: PtrStruct
            physx.PxRaycastHitPtr pvk_in_aTouches = aTouches;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_aMaxNbTouches = aMaxNbTouches;
            return Ctor_PxRaycastBufferPtr_physx_PxRaycastHitPtr_uint(pvk_in_aTouches, pvk_in_aMaxNbTouches);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::PxHitBuffer - 322
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxRaycastBufferPtr Ctor_PxRaycastBufferPtr_physx_PxRaycastHitPtr(physx.PxRaycastHitPtr pvk_aTouches);
        
        public static PxRaycastBufferPtr New(physx.PxRaycastHitPtr aTouches=default(physx.PxRaycastHitPtr)) {
            //RET nat: PxRaycastBufferPtr, man: PxRaycastBufferPtr, stg: PtrStruct, ret: True
            //PAR nat: PxRaycastHitPtr, man: physx.PxRaycastHitPtr, stg: PtrStruct
            physx.PxRaycastHitPtr pvk_in_aTouches = aTouches;
            return Ctor_PxRaycastBufferPtr_physx_PxRaycastHitPtr(pvk_in_aTouches);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::PxHitBuffer - 322
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxRaycastBufferPtr Ctor_PxRaycastBufferPtr_();
        
        public static PxRaycastBufferPtr New() {
            //RET nat: PxRaycastBufferPtr, man: PxRaycastBufferPtr, stg: PtrStruct, ret: True
            return Ctor_PxRaycastBufferPtr_();
        }
        
        //DEBUG: PtrStructCtorNode physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::PxHitBuffer - 310
        //ERRORS OCCURED IN physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::PxHitBuffer
        //Implicit Function/Method
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::getNbAnyHits - 325
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxRaycastHit_getNbAnyHits(PxRaycastBufferPtr pvk_this);
        
        public uint getNbAnyHits() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxRaycastBufferPtr, man: PxRaycastBufferPtr, stg: PtrStruct
            PxRaycastBufferPtr pvk_in_this = this;
            return uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxRaycastHit_getNbAnyHits(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::getAnyHit - 327
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxRaycastHitPtr physx_PxRaycastHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxRaycastHit_getAnyHit_uintC(PxRaycastBufferPtr pvk_this, uint pvk_index);
        
        public physx.PxRaycastHitPtr getAnyHit(uint index) {
            //RET nat: physx.PxRaycastHitPtr, man: physx.PxRaycastHitPtr, stg: PtrStruct, ret: True
            //PAR nat: PxRaycastBufferPtr, man: PxRaycastBufferPtr, stg: PtrStruct
            PxRaycastBufferPtr pvk_in_this = this;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_index = index;
            return physx_PxRaycastHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxRaycastHit_getAnyHit_uintC(pvk_in_this, pvk_in_index);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::getNbTouches - 330
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxRaycastHit_getNbTouches(PxRaycastBufferPtr pvk_this);
        
        public uint getNbTouches() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxRaycastBufferPtr, man: PxRaycastBufferPtr, stg: PtrStruct
            PxRaycastBufferPtr pvk_in_this = this;
            return uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxRaycastHit_getNbTouches(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::getTouches - 331
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxRaycastHitPtr physx_PxRaycastHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxRaycastHit_getTouches(PxRaycastBufferPtr pvk_this);
        
        public physx.PxRaycastHitPtr getTouches() {
            //RET nat: physx.PxRaycastHitPtr, man: physx.PxRaycastHitPtr, stg: PtrStruct, ret: True
            //PAR nat: PxRaycastBufferPtr, man: PxRaycastBufferPtr, stg: PtrStruct
            PxRaycastBufferPtr pvk_in_this = this;
            return physx_PxRaycastHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxRaycastHit_getTouches(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::getTouch - 332
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxRaycastHitPtr physx_PxRaycastHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxRaycastHit_getTouch_uintC(PxRaycastBufferPtr pvk_this, uint pvk_index);
        
        public physx.PxRaycastHitPtr getTouch(uint index) {
            //RET nat: physx.PxRaycastHitPtr, man: physx.PxRaycastHitPtr, stg: PtrStruct, ret: True
            //PAR nat: PxRaycastBufferPtr, man: PxRaycastBufferPtr, stg: PtrStruct
            PxRaycastBufferPtr pvk_in_this = this;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_index = index;
            return physx_PxRaycastHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxRaycastHit_getTouch_uintC(pvk_in_this, pvk_in_index);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::getMaxNbTouches - 333
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxRaycastHit_getMaxNbTouches(PxRaycastBufferPtr pvk_this);
        
        public uint getMaxNbTouches() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxRaycastBufferPtr, man: PxRaycastBufferPtr, stg: PtrStruct
            PxRaycastBufferPtr pvk_in_this = this;
            return uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxRaycastHit_getMaxNbTouches(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::~PxHitBuffer - 335
        //ERRORS OCCURED IN physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::~PxHitBuffer
        //Destructor
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::operator= - 310
        //ERRORS OCCURED IN physx::PxHitBuffer<global::SharpPhysX.physx.PxRaycastHit>::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
    }
    public unsafe partial struct PxOverlapBufferPtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: NewerFreerNode physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit> - -1
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_PxOverlapBufferPtr(PxOverlapBufferPtr ptr);
        
        public static void Free(PxOverlapBufferPtr ptr){
            Freer_PxOverlapBufferPtr(ptr);
        }
        public void Free(){
            Freer_PxOverlapBufferPtr(this);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::PxHitBuffer - 322
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxOverlapBufferPtr Ctor_PxOverlapBufferPtr_physx_PxOverlapHitPtr_uint(physx.PxOverlapHitPtr pvk_aTouches, uint pvk_aMaxNbTouches);
        
        public static PxOverlapBufferPtr New(physx.PxOverlapHitPtr aTouches=default(physx.PxOverlapHitPtr), uint aMaxNbTouches=0) {
            //RET nat: PxOverlapBufferPtr, man: PxOverlapBufferPtr, stg: PtrStruct, ret: True
            //PAR nat: PxOverlapHitPtr, man: physx.PxOverlapHitPtr, stg: PtrStruct
            physx.PxOverlapHitPtr pvk_in_aTouches = aTouches;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_aMaxNbTouches = aMaxNbTouches;
            return Ctor_PxOverlapBufferPtr_physx_PxOverlapHitPtr_uint(pvk_in_aTouches, pvk_in_aMaxNbTouches);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::PxHitBuffer - 322
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxOverlapBufferPtr Ctor_PxOverlapBufferPtr_physx_PxOverlapHitPtr(physx.PxOverlapHitPtr pvk_aTouches);
        
        public static PxOverlapBufferPtr New(physx.PxOverlapHitPtr aTouches=default(physx.PxOverlapHitPtr)) {
            //RET nat: PxOverlapBufferPtr, man: PxOverlapBufferPtr, stg: PtrStruct, ret: True
            //PAR nat: PxOverlapHitPtr, man: physx.PxOverlapHitPtr, stg: PtrStruct
            physx.PxOverlapHitPtr pvk_in_aTouches = aTouches;
            return Ctor_PxOverlapBufferPtr_physx_PxOverlapHitPtr(pvk_in_aTouches);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::PxHitBuffer - 322
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxOverlapBufferPtr Ctor_PxOverlapBufferPtr_();
        
        public static PxOverlapBufferPtr New() {
            //RET nat: PxOverlapBufferPtr, man: PxOverlapBufferPtr, stg: PtrStruct, ret: True
            return Ctor_PxOverlapBufferPtr_();
        }
        
        //DEBUG: PtrStructCtorNode physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::PxHitBuffer - 310
        //ERRORS OCCURED IN physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::PxHitBuffer
        //Implicit Function/Method
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::getNbAnyHits - 325
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxOverlapHit_getNbAnyHits(PxOverlapBufferPtr pvk_this);
        
        public uint getNbAnyHits() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxOverlapBufferPtr, man: PxOverlapBufferPtr, stg: PtrStruct
            PxOverlapBufferPtr pvk_in_this = this;
            return uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxOverlapHit_getNbAnyHits(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::getAnyHit - 327
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxOverlapHitPtr physx_PxOverlapHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxOverlapHit_getAnyHit_uintC(PxOverlapBufferPtr pvk_this, uint pvk_index);
        
        public physx.PxOverlapHitPtr getAnyHit(uint index) {
            //RET nat: physx.PxOverlapHitPtr, man: physx.PxOverlapHitPtr, stg: PtrStruct, ret: True
            //PAR nat: PxOverlapBufferPtr, man: PxOverlapBufferPtr, stg: PtrStruct
            PxOverlapBufferPtr pvk_in_this = this;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_index = index;
            return physx_PxOverlapHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxOverlapHit_getAnyHit_uintC(pvk_in_this, pvk_in_index);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::getNbTouches - 330
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxOverlapHit_getNbTouches(PxOverlapBufferPtr pvk_this);
        
        public uint getNbTouches() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxOverlapBufferPtr, man: PxOverlapBufferPtr, stg: PtrStruct
            PxOverlapBufferPtr pvk_in_this = this;
            return uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxOverlapHit_getNbTouches(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::getTouches - 331
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxOverlapHitPtr physx_PxOverlapHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxOverlapHit_getTouches(PxOverlapBufferPtr pvk_this);
        
        public physx.PxOverlapHitPtr getTouches() {
            //RET nat: physx.PxOverlapHitPtr, man: physx.PxOverlapHitPtr, stg: PtrStruct, ret: True
            //PAR nat: PxOverlapBufferPtr, man: PxOverlapBufferPtr, stg: PtrStruct
            PxOverlapBufferPtr pvk_in_this = this;
            return physx_PxOverlapHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxOverlapHit_getTouches(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::getTouch - 332
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxOverlapHitPtr physx_PxOverlapHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxOverlapHit_getTouch_uintC(PxOverlapBufferPtr pvk_this, uint pvk_index);
        
        public physx.PxOverlapHitPtr getTouch(uint index) {
            //RET nat: physx.PxOverlapHitPtr, man: physx.PxOverlapHitPtr, stg: PtrStruct, ret: True
            //PAR nat: PxOverlapBufferPtr, man: PxOverlapBufferPtr, stg: PtrStruct
            PxOverlapBufferPtr pvk_in_this = this;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_index = index;
            return physx_PxOverlapHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxOverlapHit_getTouch_uintC(pvk_in_this, pvk_in_index);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::getMaxNbTouches - 333
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxOverlapHit_getMaxNbTouches(PxOverlapBufferPtr pvk_this);
        
        public uint getMaxNbTouches() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxOverlapBufferPtr, man: PxOverlapBufferPtr, stg: PtrStruct
            PxOverlapBufferPtr pvk_in_this = this;
            return uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxOverlapHit_getMaxNbTouches(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::~PxHitBuffer - 335
        //ERRORS OCCURED IN physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::~PxHitBuffer
        //Destructor
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::operator= - 310
        //ERRORS OCCURED IN physx::PxHitBuffer<global::SharpPhysX.physx.PxOverlapHit>::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
    }
    public unsafe partial struct PxSweepBufferPtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: NewerFreerNode physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit> - -1
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_PxSweepBufferPtr(PxSweepBufferPtr ptr);
        
        public static void Free(PxSweepBufferPtr ptr){
            Freer_PxSweepBufferPtr(ptr);
        }
        public void Free(){
            Freer_PxSweepBufferPtr(this);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::PxHitBuffer - 322
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxSweepBufferPtr Ctor_PxSweepBufferPtr_physx_PxSweepHitPtr_uint(physx.PxSweepHitPtr pvk_aTouches, uint pvk_aMaxNbTouches);
        
        public static PxSweepBufferPtr New(physx.PxSweepHitPtr aTouches=default(physx.PxSweepHitPtr), uint aMaxNbTouches=0) {
            //RET nat: PxSweepBufferPtr, man: PxSweepBufferPtr, stg: PtrStruct, ret: True
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_aTouches = aTouches;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_aMaxNbTouches = aMaxNbTouches;
            return Ctor_PxSweepBufferPtr_physx_PxSweepHitPtr_uint(pvk_in_aTouches, pvk_in_aMaxNbTouches);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::PxHitBuffer - 322
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxSweepBufferPtr Ctor_PxSweepBufferPtr_physx_PxSweepHitPtr(physx.PxSweepHitPtr pvk_aTouches);
        
        public static PxSweepBufferPtr New(physx.PxSweepHitPtr aTouches=default(physx.PxSweepHitPtr)) {
            //RET nat: PxSweepBufferPtr, man: PxSweepBufferPtr, stg: PtrStruct, ret: True
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_aTouches = aTouches;
            return Ctor_PxSweepBufferPtr_physx_PxSweepHitPtr(pvk_in_aTouches);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::PxHitBuffer - 322
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxSweepBufferPtr Ctor_PxSweepBufferPtr_();
        
        public static PxSweepBufferPtr New() {
            //RET nat: PxSweepBufferPtr, man: PxSweepBufferPtr, stg: PtrStruct, ret: True
            return Ctor_PxSweepBufferPtr_();
        }
        
        //DEBUG: PtrStructCtorNode physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::PxHitBuffer - 310
        //ERRORS OCCURED IN physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::PxHitBuffer
        //Implicit Function/Method
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::getNbAnyHits - 325
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxSweepHit_getNbAnyHits(PxSweepBufferPtr pvk_this);
        
        public uint getNbAnyHits() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxSweepBufferPtr, man: PxSweepBufferPtr, stg: PtrStruct
            PxSweepBufferPtr pvk_in_this = this;
            return uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxSweepHit_getNbAnyHits(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::getAnyHit - 327
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxSweepHitPtr physx_PxSweepHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxSweepHit_getAnyHit_uintC(PxSweepBufferPtr pvk_this, uint pvk_index);
        
        public physx.PxSweepHitPtr getAnyHit(uint index) {
            //RET nat: physx.PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct, ret: True
            //PAR nat: PxSweepBufferPtr, man: PxSweepBufferPtr, stg: PtrStruct
            PxSweepBufferPtr pvk_in_this = this;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_index = index;
            return physx_PxSweepHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxSweepHit_getAnyHit_uintC(pvk_in_this, pvk_in_index);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::getNbTouches - 330
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxSweepHit_getNbTouches(PxSweepBufferPtr pvk_this);
        
        public uint getNbTouches() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxSweepBufferPtr, man: PxSweepBufferPtr, stg: PtrStruct
            PxSweepBufferPtr pvk_in_this = this;
            return uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxSweepHit_getNbTouches(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::getTouches - 331
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxSweepHitPtr physx_PxSweepHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxSweepHit_getTouches(PxSweepBufferPtr pvk_this);
        
        public physx.PxSweepHitPtr getTouches() {
            //RET nat: physx.PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct, ret: True
            //PAR nat: PxSweepBufferPtr, man: PxSweepBufferPtr, stg: PtrStruct
            PxSweepBufferPtr pvk_in_this = this;
            return physx_PxSweepHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxSweepHit_getTouches(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::getTouch - 332
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxSweepHitPtr physx_PxSweepHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxSweepHit_getTouch_uintC(PxSweepBufferPtr pvk_this, uint pvk_index);
        
        public physx.PxSweepHitPtr getTouch(uint index) {
            //RET nat: physx.PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct, ret: True
            //PAR nat: PxSweepBufferPtr, man: PxSweepBufferPtr, stg: PtrStruct
            PxSweepBufferPtr pvk_in_this = this;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_index = index;
            return physx_PxSweepHitPtr_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxSweepHit_getTouch_uintC(pvk_in_this, pvk_in_index);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::getMaxNbTouches - 333
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxSweepHit_getMaxNbTouches(PxSweepBufferPtr pvk_this);
        
        public uint getMaxNbTouches() {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxSweepBufferPtr, man: PxSweepBufferPtr, stg: PtrStruct
            PxSweepBufferPtr pvk_in_this = this;
            return uint_const_physx_PxHitBuffer_global_SharpPhysX_physx_PxSweepHit_getMaxNbTouches(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::~PxHitBuffer - 335
        //ERRORS OCCURED IN physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::~PxHitBuffer
        //Destructor
        
        //DEBUG: MethodNode physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::operator= - 310
        //ERRORS OCCURED IN physx::PxHitBuffer<global::SharpPhysX.physx.PxSweepHit>::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
    }
    
    //DEBUG: ClassNode physx::PxHitFlag - 61-86
    //DEBUG: EnumNode physx::PxHitFlag::Enum - 63-85
    public enum PxHitFlagEnum : int {
        ePOSITION = 1,                   // ePOSITION = (1<<0)
        eNORMAL = 2,                     // eNORMAL = (1<<1)
        eUV = 8,                         // eUV = (1<<3)
        eASSUME_NO_INITIAL_OVERLAP = 16, // eASSUME_NO_INITIAL_OVERLAP = (1<<4)
        eMESH_MULTIPLE = 32,             // eMESH_MULTIPLE = (1<<5)
        eMESH_ANY = 64,                  // eMESH_ANY = (1<<6)
        eMESH_BOTH_SIDES = 128,          // eMESH_BOTH_SIDES = (1<<7)
        ePRECISE_SWEEP = 256,            // ePRECISE_SWEEP = (1<<8)
        eMTD = 512,                      // eMTD = (1<<9)
        eFACE_INDEX = 1024,              // eFACE_INDEX = (1<<10)
        eDEFAULT = 1027,                 // eDEFAULT = ePOSITION|eNORMAL|eFACE_INDEX
        eMODIFIABLE_FLAGS = 432,         // eMODIFIABLE_FLAGS = eMESH_MULTIPLE|eMESH_BOTH_SIDES|eASSUME_NO_INITIAL_OVERLAP|ePRECISE_SWEEP
    }
    
    //DEBUG: ClassNode physx::PxActorShape - 103-110
    //Interface use count: 5
    public unsafe partial struct PxActorShapePtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: NewerFreerNode physx::PxActorShape - 103-110
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxActorShapePtr(PxActorShapePtr ptr);
        
        public static void Free(PxActorShapePtr ptr){
            Freer_physx_PxActorShapePtr(ptr);
        }
        public void Free(){
            Freer_physx_PxActorShapePtr(this);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxActorShape::PxActorShape - 105
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxActorShapePtr Ctor_physx_PxActorShapePtr_();
        
        public static physx.PxActorShapePtr New() {
            //RET nat: physx.PxActorShapePtr, man: physx.PxActorShapePtr, stg: PtrStruct, ret: True
            return Ctor_physx_PxActorShapePtr_();
        }
        
        //DEBUG: PtrStructCtorNode physx::PxActorShape::PxActorShape - 106
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxActorShapePtr Ctor_physx_PxActorShapePtr_physx_PxRigidActorPtr_physx_PxShapePtr(physx.PxRigidActorPtr pvk_a, physx.PxShapePtr pvk_s);
        
        public static physx.PxActorShapePtr New(physx.PxRigidActorPtr a, physx.PxShapePtr s) {
            //RET nat: physx.PxActorShapePtr, man: physx.PxActorShapePtr, stg: PtrStruct, ret: True
            //PAR nat: PxRigidActorPtr, man: physx.PxRigidActorPtr, stg: PtrStruct
            physx.PxRigidActorPtr pvk_in_a = a;
            //PAR nat: PxShapePtr, man: physx.PxShapePtr, stg: PtrStruct
            physx.PxShapePtr pvk_in_s = s;
            return Ctor_physx_PxActorShapePtr_physx_PxRigidActorPtr_physx_PxShapePtr(pvk_in_a, pvk_in_s);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxActorShape::PxActorShape - 103
        //ERRORS OCCURED IN physx::PxActorShape::PxActorShape
        //Implicit Function/Method
        
        //DEBUG: PtrStructCtorNode physx::PxActorShape::PxActorShape - 103
        //ERRORS OCCURED IN physx::PxActorShape::PxActorShape
        //Implicit Function/Method
        
        //DEBUG: GetterSetterNode physx::PxActorShape - 103-110
        //Field: actor - 108-108
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxRigidActorPtr PxActorShape_GET_actor(PxActorShapePtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxActorShape_SET_actor(PxActorShapePtr cls, physx.PxRigidActorPtr value);
        
        public physx.PxRigidActorPtr actor {
            get => PxActorShape_GET_actor(this);
            set => PxActorShape_SET_actor(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxActorShape - 103-110
        //Field: shape - 109-109
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxShapePtr PxActorShape_GET_shape(PxActorShapePtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxActorShape_SET_shape(PxActorShapePtr cls, physx.PxShapePtr value);
        
        public physx.PxShapePtr shape {
            get => PxActorShape_GET_shape(this);
            set => PxActorShape_SET_shape(this, value);
        }
        
        //DEBUG: MethodNode physx::PxActorShape::~PxActorShape - 103
        //ERRORS OCCURED IN physx::PxActorShape::~PxActorShape
        //Implicit Function/Method
        //Destructor
        
        //DEBUG: MethodNode physx::PxActorShape::operator= - 103
        //ERRORS OCCURED IN physx::PxActorShape::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxActorShape::operator= - 103
        //ERRORS OCCURED IN physx::PxActorShape::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
    }
    
    //DEBUG: ClassNode physx::PxQueryHit - 116-129
    //Bases: PxActorShapePtr
    //Interface use count: 4
    public unsafe partial struct PxQueryHitPtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: NewerFreerNode physx::PxQueryHit - 116-129
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxQueryHitPtr(PxQueryHitPtr ptr);
        
        public static void Free(PxQueryHitPtr ptr){
            Freer_physx_PxQueryHitPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxQueryHitPtr(this);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxQueryHit::PxQueryHit - 118
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxQueryHitPtr Ctor_physx_PxQueryHitPtr_();
        
        public static physx.PxQueryHitPtr New() {
            //RET nat: physx.PxQueryHitPtr, man: physx.PxQueryHitPtr, stg: PtrStruct, ret: True
            return Ctor_physx_PxQueryHitPtr_();
        }
        
        //DEBUG: PtrStructCtorNode physx::PxQueryHit::PxQueryHit - 116
        //ERRORS OCCURED IN physx::PxQueryHit::PxQueryHit
        //Implicit Function/Method
        
        //DEBUG: PtrStructCtorNode physx::PxQueryHit::PxQueryHit - 116
        //ERRORS OCCURED IN physx::PxQueryHit::PxQueryHit
        //Implicit Function/Method
        
        //DEBUG: GetterSetterNode physx::PxQueryHit - 116-129
        //Field: faceIndex - 128-128
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxQueryHit_GET_faceIndex(PxQueryHitPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxQueryHit_SET_faceIndex(PxQueryHitPtr cls, uint value);
        
        public uint faceIndex {
            get => PxQueryHit_GET_faceIndex(this);
            set => PxQueryHit_SET_faceIndex(this, value);
        }
        
        //DEBUG: MethodNode physx::PxQueryHit::~PxQueryHit - 116
        //ERRORS OCCURED IN physx::PxQueryHit::~PxQueryHit
        //Implicit Function/Method
        //Destructor
        
        //DEBUG: MethodNode physx::PxQueryHit::operator= - 116
        //ERRORS OCCURED IN physx::PxQueryHit::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxQueryHit::operator= - 116
        //ERRORS OCCURED IN physx::PxQueryHit::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        public static implicit operator physx.PxActorShapePtr(PxQueryHitPtr obj) => *(physx.PxActorShapePtr*)&obj;
        public static explicit operator PxQueryHitPtr(physx.PxActorShapePtr obj) => *(PxQueryHitPtr*)&obj;
    }
    
    //DEBUG: ClassNode physx::PxLocationHit - 137-159
    //Bases: PxQueryHitPtr|PxActorShapePtr
    //Interface use count: 2
    public unsafe partial struct PxLocationHitPtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: NewerFreerNode physx::PxLocationHit - 137-159
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxLocationHitPtr(PxLocationHitPtr ptr);
        
        public static void Free(PxLocationHitPtr ptr){
            Freer_physx_PxLocationHitPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxLocationHitPtr(this);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxLocationHit::PxLocationHit - 139
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxLocationHitPtr Ctor_physx_PxLocationHitPtr_();
        
        public static physx.PxLocationHitPtr New() {
            //RET nat: physx.PxLocationHitPtr, man: physx.PxLocationHitPtr, stg: PtrStruct, ret: True
            return Ctor_physx_PxLocationHitPtr_();
        }
        
        //DEBUG: PtrStructCtorNode physx::PxLocationHit::PxLocationHit - 137
        //ERRORS OCCURED IN physx::PxLocationHit::PxLocationHit
        //Implicit Function/Method
        
        //DEBUG: PtrStructCtorNode physx::PxLocationHit::PxLocationHit - 137
        //ERRORS OCCURED IN physx::PxLocationHit::PxLocationHit
        //Implicit Function/Method
        
        //DEBUG: GetterSetterNode physx::PxLocationHit - 137-159
        //Field: flags - 150-150
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxHitFlagsPtr PxLocationHit_GET_flags(PxLocationHitPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxLocationHit_SET_flags(PxLocationHitPtr cls, PxHitFlagsPtr value);
        
        public PxHitFlagsPtr flags {
            get => PxLocationHit_GET_flags(this);
            set => PxLocationHit_SET_flags(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxLocationHit - 137-159
        //Field: position - 151-151
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxLocationHit_GET_position(PxLocationHitPtr cls, physx.PxVec3* GetRetRef);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxLocationHit_SET_position(PxLocationHitPtr cls, physx.PxVec3 value);
        
        public physx.PxVec3 position {
            get { physx.PxVec3 GetRetRef; PxLocationHit_GET_position(this, &GetRetRef); return GetRetRef; }
            set => PxLocationHit_SET_position(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxLocationHit - 137-159
        //Field: normal - 152-152
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxLocationHit_GET_normal(PxLocationHitPtr cls, physx.PxVec3* GetRetRef);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxLocationHit_SET_normal(PxLocationHitPtr cls, physx.PxVec3 value);
        
        public physx.PxVec3 normal {
            get { physx.PxVec3 GetRetRef; PxLocationHit_GET_normal(this, &GetRetRef); return GetRetRef; }
            set => PxLocationHit_SET_normal(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxLocationHit - 137-159
        //Field: distance - 158-158
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxLocationHit_GET_distance(PxLocationHitPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxLocationHit_SET_distance(PxLocationHitPtr cls, float value);
        
        public float distance {
            get => PxLocationHit_GET_distance(this);
            set => PxLocationHit_SET_distance(this, value);
        }
        
        //DEBUG: MethodNode physx::PxLocationHit::hadInitialOverlap - 147
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxLocationHit_hadInitialOverlap(physx.PxLocationHitPtr pvk_this);
        
        public bool hadInitialOverlap() {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxLocationHitPtr, man: physx.PxLocationHitPtr, stg: PtrStruct
            physx.PxLocationHitPtr pvk_in_this = this;
            return bool_const_physx_PxLocationHit_hadInitialOverlap(pvk_in_this);
        }
        
        //DEBUG: MethodNode physx::PxLocationHit::operator= - 137
        //ERRORS OCCURED IN physx::PxLocationHit::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxLocationHit::operator= - 137
        //ERRORS OCCURED IN physx::PxLocationHit::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxLocationHit::~PxLocationHit - 137
        //ERRORS OCCURED IN physx::PxLocationHit::~PxLocationHit
        //Implicit Function/Method
        //Destructor
        public static implicit operator physx.PxQueryHitPtr(PxLocationHitPtr obj) => *(physx.PxQueryHitPtr*)&obj;
        public static explicit operator PxLocationHitPtr(physx.PxQueryHitPtr obj) => *(PxLocationHitPtr*)&obj;
        public static implicit operator physx.PxActorShapePtr(PxLocationHitPtr obj) => *(physx.PxActorShapePtr*)&obj;
        public static explicit operator PxLocationHitPtr(physx.PxActorShapePtr obj) => *(PxLocationHitPtr*)&obj;
    
    
        public unsafe interface IPxLocationHitPtr {
            bool hadInitialOverlap();
        }
    }
    
    //DEBUG: ClassNode physx::PxRaycastHit - 173-183
    //Bases: PxLocationHitPtr|PxQueryHitPtr|PxActorShapePtr
    //Interface use count: 0
    public unsafe partial struct PxRaycastHitPtr : physx.PxLocationHitPtr.IPxLocationHitPtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: NewerFreerNode physx::PxRaycastHit - 173-183
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxRaycastHitPtr(PxRaycastHitPtr ptr);
        
        public static void Free(PxRaycastHitPtr ptr){
            Freer_physx_PxRaycastHitPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxRaycastHitPtr(this);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxRaycastHit::PxRaycastHit - 175
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxRaycastHitPtr Ctor_physx_PxRaycastHitPtr_();
        
        public static physx.PxRaycastHitPtr New() {
            //RET nat: physx.PxRaycastHitPtr, man: physx.PxRaycastHitPtr, stg: PtrStruct, ret: True
            return Ctor_physx_PxRaycastHitPtr_();
        }
        
        //DEBUG: PtrStructCtorNode physx::PxRaycastHit::PxRaycastHit - 173
        //ERRORS OCCURED IN physx::PxRaycastHit::PxRaycastHit
        //Implicit Function/Method
        
        //DEBUG: PtrStructCtorNode physx::PxRaycastHit::PxRaycastHit - 173
        //ERRORS OCCURED IN physx::PxRaycastHit::PxRaycastHit
        //Implicit Function/Method
        
        //DEBUG: GetterSetterNode physx::PxRaycastHit - 173-183
        //Field: u - 179-179
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxRaycastHit_GET_u(PxRaycastHitPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxRaycastHit_SET_u(PxRaycastHitPtr cls, float value);
        
        public float u {
            get => PxRaycastHit_GET_u(this);
            set => PxRaycastHit_SET_u(this, value);
        }
        
        //DEBUG: GetterSetterNode physx::PxRaycastHit - 173-183
        //Field: v - 179-179
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxRaycastHit_GET_v(PxRaycastHitPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxRaycastHit_SET_v(PxRaycastHitPtr cls, float value);
        
        public float v {
            get => PxRaycastHit_GET_v(this);
            set => PxRaycastHit_SET_v(this, value);
        }
        
        //DEBUG: MethodNode physx::PxRaycastHit::operator= - 173
        //ERRORS OCCURED IN physx::PxRaycastHit::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxRaycastHit::operator= - 173
        //ERRORS OCCURED IN physx::PxRaycastHit::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxRaycastHit::~PxRaycastHit - 173
        //ERRORS OCCURED IN physx::PxRaycastHit::~PxRaycastHit
        //Implicit Function/Method
        //Destructor
        public static implicit operator physx.PxLocationHitPtr(PxRaycastHitPtr obj) => *(physx.PxLocationHitPtr*)&obj;
        public static explicit operator PxRaycastHitPtr(physx.PxLocationHitPtr obj) => *(PxRaycastHitPtr*)&obj;
        public static implicit operator physx.PxQueryHitPtr(PxRaycastHitPtr obj) => *(physx.PxQueryHitPtr*)&obj;
        public static explicit operator PxRaycastHitPtr(physx.PxQueryHitPtr obj) => *(PxRaycastHitPtr*)&obj;
        public static implicit operator physx.PxActorShapePtr(PxRaycastHitPtr obj) => *(physx.PxActorShapePtr*)&obj;
        public static explicit operator PxRaycastHitPtr(physx.PxActorShapePtr obj) => *(PxRaycastHitPtr*)&obj;
    
        // PIPING
        public bool hadInitialOverlap(){return((physx.PxLocationHitPtr)this).hadInitialOverlap();}
    }
    
    //DEBUG: ClassNode physx::PxOverlapHit - 191
    //Bases: PxQueryHitPtr|PxActorShapePtr
    //Interface use count: 0
    public unsafe partial struct PxOverlapHitPtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: NewerFreerNode physx::PxOverlapHit - 191
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxOverlapHitPtr Newer_physx_PxOverlapHitPtr();
        
        public static PxOverlapHitPtr New(){
            return Newer_physx_PxOverlapHitPtr();
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxOverlapHitPtr(PxOverlapHitPtr ptr);
        
        public static void Free(PxOverlapHitPtr ptr){
            Freer_physx_PxOverlapHitPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxOverlapHitPtr(this);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxOverlapHit::PxOverlapHit - 191
        //ERRORS OCCURED IN physx::PxOverlapHit::PxOverlapHit
        //Implicit Function/Method
        
        //DEBUG: PtrStructCtorNode physx::PxOverlapHit::PxOverlapHit - 191
        //ERRORS OCCURED IN physx::PxOverlapHit::PxOverlapHit
        //Implicit Function/Method
        
        //DEBUG: PtrStructCtorNode physx::PxOverlapHit::PxOverlapHit - 191
        //ERRORS OCCURED IN physx::PxOverlapHit::PxOverlapHit
        //Implicit Function/Method
        
        //DEBUG: GetterSetterNode physx::PxOverlapHit - 191
        //Field: padTo16Bytes - 191-191
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxOverlapHit_GET_padTo16Bytes(PxOverlapHitPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxOverlapHit_SET_padTo16Bytes(PxOverlapHitPtr cls, uint value);
        
        public uint padTo16Bytes {
            get => PxOverlapHit_GET_padTo16Bytes(this);
            set => PxOverlapHit_SET_padTo16Bytes(this, value);
        }
        
        //DEBUG: MethodNode physx::PxOverlapHit::operator= - 191
        //ERRORS OCCURED IN physx::PxOverlapHit::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxOverlapHit::operator= - 191
        //ERRORS OCCURED IN physx::PxOverlapHit::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxOverlapHit::~PxOverlapHit - 191
        //ERRORS OCCURED IN physx::PxOverlapHit::~PxOverlapHit
        //Implicit Function/Method
        //Destructor
        public static implicit operator physx.PxQueryHitPtr(PxOverlapHitPtr obj) => *(physx.PxQueryHitPtr*)&obj;
        public static explicit operator PxOverlapHitPtr(physx.PxQueryHitPtr obj) => *(PxOverlapHitPtr*)&obj;
        public static implicit operator physx.PxActorShapePtr(PxOverlapHitPtr obj) => *(physx.PxActorShapePtr*)&obj;
        public static explicit operator PxOverlapHitPtr(physx.PxActorShapePtr obj) => *(PxOverlapHitPtr*)&obj;
    }
    
    //DEBUG: ClassNode physx::PxSweepHit - 199-204
    //Bases: PxLocationHitPtr|PxQueryHitPtr|PxActorShapePtr
    //Interface use count: 0
    public unsafe partial struct PxSweepHitPtr : physx.PxLocationHitPtr.IPxLocationHitPtr{
        private System.IntPtr nativePtr_;
        
    //DEBUG: NewerFreerNode physx::PxSweepHit - 199-204
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxSweepHitPtr(PxSweepHitPtr ptr);
        
        public static void Free(PxSweepHitPtr ptr){
            Freer_physx_PxSweepHitPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxSweepHitPtr(this);
        }
        
        //DEBUG: PtrStructCtorNode physx::PxSweepHit::PxSweepHit - 201
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxSweepHitPtr Ctor_physx_PxSweepHitPtr_();
        
        public static physx.PxSweepHitPtr New() {
            //RET nat: physx.PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct, ret: True
            return Ctor_physx_PxSweepHitPtr_();
        }
        
        //DEBUG: PtrStructCtorNode physx::PxSweepHit::PxSweepHit - 199
        //ERRORS OCCURED IN physx::PxSweepHit::PxSweepHit
        //Implicit Function/Method
        
        //DEBUG: PtrStructCtorNode physx::PxSweepHit::PxSweepHit - 199
        //ERRORS OCCURED IN physx::PxSweepHit::PxSweepHit
        //Implicit Function/Method
        
        //DEBUG: GetterSetterNode physx::PxSweepHit - 199-204
        //Field: padTo16Bytes - 203-203
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint PxSweepHit_GET_padTo16Bytes(PxSweepHitPtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxSweepHit_SET_padTo16Bytes(PxSweepHitPtr cls, uint value);
        
        public uint padTo16Bytes {
            get => PxSweepHit_GET_padTo16Bytes(this);
            set => PxSweepHit_SET_padTo16Bytes(this, value);
        }
        
        //DEBUG: MethodNode physx::PxSweepHit::operator= - 199
        //ERRORS OCCURED IN physx::PxSweepHit::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxSweepHit::operator= - 199
        //ERRORS OCCURED IN physx::PxSweepHit::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxSweepHit::~PxSweepHit - 199
        //ERRORS OCCURED IN physx::PxSweepHit::~PxSweepHit
        //Implicit Function/Method
        //Destructor
        public static implicit operator physx.PxLocationHitPtr(PxSweepHitPtr obj) => *(physx.PxLocationHitPtr*)&obj;
        public static explicit operator PxSweepHitPtr(physx.PxLocationHitPtr obj) => *(PxSweepHitPtr*)&obj;
        public static implicit operator physx.PxQueryHitPtr(PxSweepHitPtr obj) => *(physx.PxQueryHitPtr*)&obj;
        public static explicit operator PxSweepHitPtr(physx.PxQueryHitPtr obj) => *(PxSweepHitPtr*)&obj;
        public static implicit operator physx.PxActorShapePtr(PxSweepHitPtr obj) => *(physx.PxActorShapePtr*)&obj;
        public static explicit operator PxSweepHitPtr(physx.PxActorShapePtr obj) => *(PxSweepHitPtr*)&obj;
    
        // PIPING
        public bool hadInitialOverlap(){return((physx.PxLocationHitPtr)this).hadInitialOverlap();}
    }
    
    //DEBUG: DeclNode physx::PxHitCallback - 231-293
    // TODO DeclNode.GenBinding()
    
    //DEBUG: DeclNode physx::PxHitBuffer - 309-340
    // TODO DeclNode.GenBinding()
    
    //DEBUG: DeclNode physx::PxRaycastBufferN - 362-367
    // TODO DeclNode.GenBinding()
    
    //DEBUG: DeclNode physx::PxOverlapBufferN - 370-375
    // TODO DeclNode.GenBinding()
    
    //DEBUG: DeclNode physx::PxSweepBufferN - 378-383
    // TODO DeclNode.GenBinding()
    
    //DEBUG: DeclNode physx::PxAgain - 215
    // TODO DeclNode.GenBinding()
    
    //DEBUG: DeclNode physx::PxHitFlags - 94
    // TODO DeclNode.GenBinding()
    
    //DEBUG: DeclNode physx::PxRaycastCallback - 344
    // TODO DeclNode.GenBinding()
    
    //DEBUG: DeclNode physx::PxSweepCallback - 350
    // TODO DeclNode.GenBinding()
    
    //DEBUG: DeclNode physx::PxOverlapCallback - 347
    // TODO DeclNode.GenBinding()
    
    //DEBUG: DeclNode physx::PxRaycastBuffer - 353
    // TODO DeclNode.GenBinding()
    
    //DEBUG: DeclNode physx::PxOverlapBuffer - 356
    // TODO DeclNode.GenBinding()
    
    //DEBUG: DeclNode physx::PxSweepBuffer - 359
    // TODO DeclNode.GenBinding()
    
}
