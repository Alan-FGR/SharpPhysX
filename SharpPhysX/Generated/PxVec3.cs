// Generated by minBND 5.1.78.26 - Â© github.com/Alan-FGR
//DEBUG: UnitNode  - 0
//Unit PxVec3
using System;
using System.Runtime.InteropServices;

//DEBUG: NamespaceNode physx - 40-390
public static unsafe partial class physx {
    //DEBUG: FunctionNode physx::operator* - 384-387
    // physx::operator* [static physx.PxVec3 Mult(float f, physx.PxVec3* v)] will be bound as member operator
    
    //DEBUG: ClassNode physx::PxVec3 - 49-382
    public unsafe partial struct PxVec3{
        public float x;
        public float y;
        public float z;
        
    //DEBUG: DefaulterNode physx::PxVec3::PxVec3 - 55-57
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Default_physx_PxVec3_(physx.PxVec3* RetRef);
        
        public static physx.PxVec3 Default() {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            Default_physx_PxVec3_(&RetRef);
            return RetRef;
        }
        
        //DEBUG: BlittableCtorNode physx::PxVec3::PxVec3 - 62-65
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec3_PxVec3_Ctor_physx_PxZERO_(physx.PxVec3* pvk_this, physx.PxZERO pvk_r);
        
        public PxVec3(physx.PxZERO r) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            //PAR nat: physx::PxZERO, man: physx.PxZERO, stg: Value
            physx.PxZERO pvk_in_r = r;
            PxVec3 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec3_PxVec3_Ctor_physx_PxZERO_(pvk_in_this, pvk_in_r);
            this = toInit;
        }
        
        //DEBUG: BlittableCtorNode physx::PxVec3::PxVec3 - 74-76
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec3_PxVec3_Ctor_float_(physx.PxVec3* pvk_this, float pvk_a);
        
        public PxVec3(float a) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            //PAR nat: float, man: float, stg: Value
            float pvk_in_a = a;
            PxVec3 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec3_PxVec3_Ctor_float_(pvk_in_this, pvk_in_a);
            this = toInit;
        }
        
        //DEBUG: BlittableCtorNode physx::PxVec3::PxVec3 - 85-87
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec3_PxVec3_Ctor_float_float_float_(physx.PxVec3* pvk_this, float pvk_nx, float pvk_ny, float pvk_nz);
        
        public PxVec3(float nx, float ny, float nz) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            //PAR nat: float, man: float, stg: Value
            float pvk_in_nx = nx;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_ny = ny;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_nz = nz;
            PxVec3 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec3_PxVec3_Ctor_float_float_float_(pvk_in_this, pvk_in_nx, pvk_in_ny, pvk_in_nz);
            this = toInit;
        }
        
        //DEBUG: BlittableCtorNode physx::PxVec3::PxVec3 - 92-94
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxVec3_PxVec3_Ctor_physx_PxVec3_(physx.PxVec3* pvk_this, physx.PxVec3* pvk_v);
        
        public PxVec3(physx.PxVec3* v) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_v = v;
            PxVec3 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxVec3_PxVec3_Ctor_physx_PxVec3_(pvk_in_this, pvk_in_v);
            this = toInit;
        }
        
        //DEBUG: MethodNode physx::PxVec3::operator= - 101-107
        //ERRORS OCCURED IN physx::PxVec3::operator=
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxVec3::operator[] - 112-117
        //ERRORS OCCURED IN physx::PxVec3::operator[]
        //Unbindable Operator: Subscript
        
        //DEBUG: MethodNode physx::PxVec3::operator[] - 122-127
        //ERRORS OCCURED IN physx::PxVec3::operator[]
        //Unbindable Operator: Subscript
        
        //DEBUG: MethodNode physx::PxVec3::operator== - 132-135
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec3_operator_EqualEqual_physx_PxVec3_(physx.PxVec3* pvk_lhs, physx.PxVec3* pvk_v);
        
        public static bool operator==(physx.PxVec3 lhs, physx.PxVec3* v) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            physx.PxVec3* pvk_in_lhs = &lhs;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_v = v;
            return bool_const_physx_PxVec3_operator_EqualEqual_physx_PxVec3_(pvk_in_lhs, pvk_in_v);
        }
        
        //DEBUG: MethodNode physx::PxVec3::operator!= - 140-143
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec3_operator_ExclaimEqual_physx_PxVec3_(physx.PxVec3* pvk_lhs, physx.PxVec3* pvk_v);
        
        public static bool operator!=(physx.PxVec3 lhs, physx.PxVec3* v) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            physx.PxVec3* pvk_in_lhs = &lhs;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_v = v;
            return bool_const_physx_PxVec3_operator_ExclaimEqual_physx_PxVec3_(pvk_in_lhs, pvk_in_v);
        }
        
        //DEBUG: MethodNode physx::PxVec3::isZero - 148-151
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec3_isZero(physx.PxVec3* pvk_this);
        
        public bool isZero() {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            fixed (PxVec3* pvk_in_this = &this){
                return bool_const_physx_PxVec3_isZero(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec3::isFinite - 156-159
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec3_isFinite(physx.PxVec3* pvk_this);
        
        public bool isFinite() {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            fixed (PxVec3* pvk_in_this = &this){
                return bool_const_physx_PxVec3_isFinite(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec3::isNormalized - 164-168
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxVec3_isNormalized(physx.PxVec3* pvk_this);
        
        public bool isNormalized() {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            fixed (PxVec3* pvk_in_this = &this){
                return bool_const_physx_PxVec3_isNormalized(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec3::magnitudeSquared - 175-178
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec3_magnitudeSquared(physx.PxVec3* pvk_this);
        
        public float magnitudeSquared() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            fixed (PxVec3* pvk_in_this = &this){
                return float_const_physx_PxVec3_magnitudeSquared(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec3::magnitude - 183-186
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec3_magnitude(physx.PxVec3* pvk_this);
        
        public float magnitude() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            fixed (PxVec3* pvk_in_this = &this){
                return float_const_physx_PxVec3_magnitude(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec3::operator- - 191-194
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxVec3_operator_Minus(physx.PxVec3* RetRef, physx.PxVec3* pvk_lhs);
        
        public static physx.PxVec3 operator-(physx.PxVec3 lhs) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            physx.PxVec3* pvk_in_lhs = &lhs;
            physx_PxVec3_const_physx_PxVec3_operator_Minus(&RetRef, pvk_in_lhs);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec3::operator+ - 199-202
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxVec3_operator_Plus_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxVec3* pvk_lhs, physx.PxVec3* pvk_v);
        
        public static physx.PxVec3 operator+(physx.PxVec3 lhs, physx.PxVec3* v) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            physx.PxVec3* pvk_in_lhs = &lhs;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_v = v;
            physx_PxVec3_const_physx_PxVec3_operator_Plus_physx_PxVec3_(&RetRef, pvk_in_lhs, pvk_in_v);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec3::operator- - 207-210
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxVec3_operator_Minus_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxVec3* pvk_lhs, physx.PxVec3* pvk_v);
        
        public static physx.PxVec3 operator-(physx.PxVec3 lhs, physx.PxVec3* v) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            physx.PxVec3* pvk_in_lhs = &lhs;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_v = v;
            physx_PxVec3_const_physx_PxVec3_operator_Minus_physx_PxVec3_(&RetRef, pvk_in_lhs, pvk_in_v);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec3::operator* - 215-218
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxVec3_operator_Star_float_(physx.PxVec3* RetRef, physx.PxVec3* pvk_lhs, float pvk_f);
        
        public static physx.PxVec3 operator*(physx.PxVec3 lhs, float f) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            physx.PxVec3* pvk_in_lhs = &lhs;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_f = f;
            physx_PxVec3_const_physx_PxVec3_operator_Star_float_(&RetRef, pvk_in_lhs, pvk_in_f);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec3::operator/ - 223-227
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxVec3_operator_Slash_float_(physx.PxVec3* RetRef, physx.PxVec3* pvk_lhs, float pvk_f);
        
        public static physx.PxVec3 operator/(physx.PxVec3 lhs, float f) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            physx.PxVec3* pvk_in_lhs = &lhs;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_f = f;
            physx_PxVec3_const_physx_PxVec3_operator_Slash_float_(&RetRef, pvk_in_lhs, pvk_in_f);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec3::operator+= - 232-238
        //ERRORS OCCURED IN physx::PxVec3::operator+=
        //Unbindable Operator: PlusEqual
        
        //DEBUG: MethodNode physx::PxVec3::operator-= - 243-249
        //ERRORS OCCURED IN physx::PxVec3::operator-=
        //Unbindable Operator: MinusEqual
        
        //DEBUG: MethodNode physx::PxVec3::operator*= - 254-260
        //ERRORS OCCURED IN physx::PxVec3::operator*=
        //Unbindable Operator: StarEqual
        
        //DEBUG: MethodNode physx::PxVec3::operator/= - 264-271
        //ERRORS OCCURED IN physx::PxVec3::operator/=
        //Unbindable Operator: SlashEqual
        
        //DEBUG: MethodNode physx::PxVec3::dot - 276-279
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec3_dot_physx_PxVec3_(physx.PxVec3* pvk_this, physx.PxVec3* pvk_v);
        
        public float dot(physx.PxVec3* v) {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_v = v;
            fixed (PxVec3* pvk_in_this = &this){
                return float_const_physx_PxVec3_dot_physx_PxVec3_(pvk_in_this, pvk_in_v);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec3::cross - 284-287
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxVec3_cross_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxVec3* pvk_this, physx.PxVec3* pvk_v);
        
        public physx.PxVec3 cross(physx.PxVec3* v) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_v = v;
            fixed (PxVec3* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxVec3_cross_physx_PxVec3_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec3::getNormalized - 291-295
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxVec3_getNormalized(physx.PxVec3* RetRef, physx.PxVec3* pvk_this);
        
        public physx.PxVec3 getNormalized() {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            fixed (PxVec3* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxVec3_getNormalized(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec3::normalize - 300-306
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_physx_PxVec3_normalize(physx.PxVec3* pvk_this);
        
        public float normalize() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            fixed (PxVec3* pvk_in_this = &this){
                return float_physx_PxVec3_normalize(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec3::normalizeSafe - 312-319
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_physx_PxVec3_normalizeSafe(physx.PxVec3* pvk_this);
        
        public float normalizeSafe() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            fixed (PxVec3* pvk_in_this = &this){
                return float_physx_PxVec3_normalizeSafe(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec3::normalizeFast - 325-331
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_physx_PxVec3_normalizeFast(physx.PxVec3* pvk_this);
        
        public float normalizeFast() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            fixed (PxVec3* pvk_in_this = &this){
                return float_physx_PxVec3_normalizeFast(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec3::multiply - 336-339
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxVec3_multiply_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxVec3* pvk_this, physx.PxVec3* pvk_a);
        
        public physx.PxVec3 multiply(physx.PxVec3* a) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_a = a;
            fixed (PxVec3* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxVec3_multiply_physx_PxVec3_(&RetRef, pvk_in_this, pvk_in_a);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec3::minimum - 344-347
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxVec3_minimum_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxVec3* pvk_this, physx.PxVec3* pvk_v);
        
        public physx.PxVec3 minimum(physx.PxVec3* v) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_v = v;
            fixed (PxVec3* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxVec3_minimum_physx_PxVec3_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec3::minElement - 352-355
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec3_minElement(physx.PxVec3* pvk_this);
        
        public float minElement() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            fixed (PxVec3* pvk_in_this = &this){
                return float_const_physx_PxVec3_minElement(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec3::maximum - 360-363
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxVec3_maximum_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxVec3* pvk_this, physx.PxVec3* pvk_v);
        
        public physx.PxVec3 maximum(physx.PxVec3* v) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_v = v;
            fixed (PxVec3* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxVec3_maximum_physx_PxVec3_(&RetRef, pvk_in_this, pvk_in_v);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec3::maxElement - 368-371
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxVec3_maxElement(physx.PxVec3* pvk_this);
        
        public float maxElement() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            fixed (PxVec3* pvk_in_this = &this){
                return float_const_physx_PxVec3_maxElement(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxVec3::abs - 376-379
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxVec3_abs(physx.PxVec3* RetRef, physx.PxVec3* pvk_this);
        
        public physx.PxVec3 abs() {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxVec3, man: physx.PxVec3, stg: Blittable
            
            fixed (PxVec3* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxVec3_abs(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxVec3::~PxVec3 - 49
        //ERRORS OCCURED IN physx::PxVec3::~PxVec3
        //Implicit Function/Method
        //Destructor
        //DEBUG: ExternalOpNode physx::operator* - 384-387
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_physx_operator_Star_float_physx_PxVec3_(physx.PxVec3* RetRef, float pvk_f, physx.PxVec3* pvk_v);
        
        public static physx.PxVec3 Mult(float f, physx.PxVec3* v) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_f = f;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_v = v;
            physx_PxVec3_physx_operator_Star_float_physx_PxVec3_(&RetRef, pvk_in_f, pvk_in_v);
            return RetRef;
        }
    }
    
}
