//Generated by MinBinder.
using System;
using System.Runtime.InteropServices;

public static partial class physx{
    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_OP_Star(float f,PxVec3 v);
    public static PxVec3 Star(float f,PxVec3 v){
        return C_OP_Star(f,v);    
    }


}

public partial struct PxVec3 {
    public float x;
    public float y;
    public float z;

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_PxVec3_PxVec3(physx r);
    public unsafe PxVec3(physx r){
        var _new = C_PxVec3_PxVec3(r);        
        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_PxVec3_PxVec3(float a);
    public unsafe PxVec3(float a){
        var _new = C_PxVec3_PxVec3(a);        
        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_PxVec3_PxVec3(float nx,float ny,float nz);
    public unsafe PxVec3(float nx,float ny,float nz){
        var _new = C_PxVec3_PxVec3(nx,ny,nz);        
        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_PxVec3_PxVec3(PxVec3 v);
    public unsafe PxVec3(PxVec3 v){
        var _new = C_PxVec3_PxVec3(v);        
        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxVec3_OP_EqualEqual(PxVec3 cls,PxVec3 v);
    public static bool operator==(PxVec3 cls,PxVec3 v){
        return C_CONST_PxVec3_OP_EqualEqual(cls,v);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxVec3_OP_ExclaimEqual(PxVec3 cls,PxVec3 v);
    public static bool operator!=(PxVec3 cls,PxVec3 v){
        return C_CONST_PxVec3_OP_ExclaimEqual(cls,v);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxVec3_isZero(PxVec3 cls);
    public bool isZero(){
        return C_CONST_PxVec3_isZero(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxVec3_isFinite(PxVec3 cls);
    public bool isFinite(){
        return C_CONST_PxVec3_isFinite(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxVec3_isNormalized(PxVec3 cls);
    public bool isNormalized(){
        return C_CONST_PxVec3_isNormalized(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern float C_CONST_PxVec3_magnitudeSquared(PxVec3 cls);
    public float magnitudeSquared(){
        return C_CONST_PxVec3_magnitudeSquared(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern float C_CONST_PxVec3_magnitude(PxVec3 cls);
    public float magnitude(){
        return C_CONST_PxVec3_magnitude(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxVec3_OP_Minus(PxVec3 cls);
    public static PxVec3 Minus(PxVec3 cls){
        return C_CONST_PxVec3_OP_Minus(cls);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxVec3_OP_Plus(PxVec3 cls,PxVec3 v);
    public static PxVec3 operator+(PxVec3 cls,PxVec3 v){
        return C_CONST_PxVec3_OP_Plus(cls,v);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxVec3_OP_Minus(PxVec3 cls,PxVec3 v);
    public static PxVec3 operator-(PxVec3 cls,PxVec3 v){
        return C_CONST_PxVec3_OP_Minus(cls,v);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxVec3_OP_Star(PxVec3 cls,float f);
    public static PxVec3 Star(PxVec3 cls,float f){
        return C_CONST_PxVec3_OP_Star(cls,f);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxVec3_OP_Slash(PxVec3 cls,float f);
    public static PxVec3 Slash(PxVec3 cls,float f){
        return C_CONST_PxVec3_OP_Slash(cls,f);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern float C_CONST_PxVec3_dot(PxVec3 cls,PxVec3 v);
    public float dot(PxVec3 v){
        return C_CONST_PxVec3_dot(this,v);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxVec3_cross(PxVec3 cls,PxVec3 v);
    public PxVec3 cross(PxVec3 v){
        return C_CONST_PxVec3_cross(this,v);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxVec3_getNormalized(PxVec3 cls);
    public PxVec3 getNormalized(){
        return C_CONST_PxVec3_getNormalized(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern float C_PxVec3_normalize(PxVec3 cls);
    public float normalize(){
        return C_PxVec3_normalize(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern float C_PxVec3_normalizeSafe(PxVec3 cls);
    public float normalizeSafe(){
        return C_PxVec3_normalizeSafe(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern float C_PxVec3_normalizeFast(PxVec3 cls);
    public float normalizeFast(){
        return C_PxVec3_normalizeFast(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxVec3_multiply(PxVec3 cls,PxVec3 a);
    public PxVec3 multiply(PxVec3 a){
        return C_CONST_PxVec3_multiply(this,a);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxVec3_minimum(PxVec3 cls,PxVec3 v);
    public PxVec3 minimum(PxVec3 v){
        return C_CONST_PxVec3_minimum(this,v);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern float C_CONST_PxVec3_minElement(PxVec3 cls);
    public float minElement(){
        return C_CONST_PxVec3_minElement(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxVec3_maximum(PxVec3 cls,PxVec3 v);
    public PxVec3 maximum(PxVec3 v){
        return C_CONST_PxVec3_maximum(this,v);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern float C_CONST_PxVec3_maxElement(PxVec3 cls);
    public float maxElement(){
        return C_CONST_PxVec3_maxElement(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxVec3_abs(PxVec3 cls);
    public PxVec3 abs(){
        return C_CONST_PxVec3_abs(this);    
    }


}
