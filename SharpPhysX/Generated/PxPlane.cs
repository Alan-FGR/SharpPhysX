// Generated by minBND 5.1.90.51 - Â© github.com/Alan-FGR
using System;
using System.Runtime.InteropServices;
using static minBND_pinvokes;

public static unsafe partial class physx {
    //Subclasses using this: 0

    [StructLayout(LayoutKind.Sequential, Size = 16)]
    public unsafe partial struct PxPlane {
        public physx.PxVec3 n;
        public float d;

        //DBG: ClassNode PxPlane physx::PxPlane L50-138

        //DBG: DefaultValueCtorNode physx::PxPlane::PxPlane L56-58
        //RET nat: physx::PxPlane, man: physx.PxPlane, ret: False, kind: Blittable
        public static physx.PxPlane Default() {
            physx.PxPlane RetRef;
            Default_PxPlane_(&RetRef);
            return RetRef;
        }

        //DBG: BlittableCtorNode physx::PxPlane::PxPlane L63-65
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        //PAR nat: float, man: float, kind: Value
        //PAR nat: float, man: float, kind: Value
        //PAR nat: float, man: float, kind: Value
        public PxPlane(float nx, float ny, float nz, float distance) {

            float pvk_in_nx = nx;
            float pvk_in_ny = ny;
            float pvk_in_nz = nz;
            float pvk_in_distance = distance;
            PxPlane toInit;
            var pvk_in_this = &toInit;
            void_PxPlane_PxPlanePtr_Ctor_float_float_float_float_(pvk_in_this, pvk_in_nx, pvk_in_ny, pvk_in_nz, pvk_in_distance);
            this = toInit;
        }

        //DBG: BlittableCtorNode physx::PxPlane::PxPlane L70-72
        //Value Converter PxPlane
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public PxPlane(physx.PxVec3 normal, float distance) : this((physx.PxVec3*)&normal, distance) {
            //ctor piping;
        }

        //DBG: BlittableCtorNode physx::PxPlane::PxPlane L70-72
        //Value Converter PxPlane
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: float, man: float, kind: Value
        public PxPlane(physx.PxVec3.Ref normal, float distance) : this((physx.PxVec3*)(*((IntPtr*)(&normal))), distance) {
            //ctor piping;
        }

        //DBG: BlittableCtorNode physx::PxPlane::PxPlane L70-72
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: float, man: float, kind: Value
        public PxPlane(physx.PxVec3* normal, float distance) {

            physx.PxVec3* pvk_in_normal = normal;
            float pvk_in_distance = distance;
            PxPlane toInit;
            var pvk_in_this = &toInit;
            void_PxPlane_PxPlanePtr_Ctor_PxVec3_float_(pvk_in_this, pvk_in_normal, pvk_in_distance);
            this = toInit;
        }

        //DBG: BlittableCtorNode physx::PxPlane::PxPlane L77-80
        //Value Converter PxPlane
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public PxPlane(physx.PxVec3 point, physx.PxVec3 normal) : this((physx.PxVec3*)&point, (physx.PxVec3*)&normal) {
            //ctor piping;
        }

        //DBG: BlittableCtorNode physx::PxPlane::PxPlane L77-80
        //Value Converter PxPlane
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public PxPlane(physx.PxVec3.Ref point, physx.PxVec3.Ref normal) : this((physx.PxVec3*)(*((IntPtr*)(&point))), (physx.PxVec3*)(*((IntPtr*)(&normal)))) {
            //ctor piping;
        }

        //DBG: BlittableCtorNode physx::PxPlane::PxPlane L77-80
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        public PxPlane(physx.PxVec3* point, physx.PxVec3* normal) {

            physx.PxVec3* pvk_in_point = point;
            physx.PxVec3* pvk_in_normal = normal;
            PxPlane toInit;
            var pvk_in_this = &toInit;
            void_PxPlane_PxPlanePtr_Ctor_PxVec3_PxVec3_(pvk_in_this, pvk_in_point, pvk_in_normal);
            this = toInit;
        }

        //DBG: BlittableCtorNode physx::PxPlane::PxPlane L85-89
        //Value Converter PxPlane
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public PxPlane(physx.PxVec3 p0, physx.PxVec3 p1, physx.PxVec3 p2) : this((physx.PxVec3*)&p0, (physx.PxVec3*)&p1, (physx.PxVec3*)&p2) {
            //ctor piping;
        }

        //DBG: BlittableCtorNode physx::PxPlane::PxPlane L85-89
        //Value Converter PxPlane
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public PxPlane(physx.PxVec3.Ref p0, physx.PxVec3.Ref p1, physx.PxVec3.Ref p2) : this((physx.PxVec3*)(*((IntPtr*)(&p0))), (physx.PxVec3*)(*((IntPtr*)(&p1))), (physx.PxVec3*)(*((IntPtr*)(&p2)))) {
            //ctor piping;
        }

        //DBG: BlittableCtorNode physx::PxPlane::PxPlane L85-89
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        public PxPlane(physx.PxVec3* p0, physx.PxVec3* p1, physx.PxVec3* p2) {

            physx.PxVec3* pvk_in_p0 = p0;
            physx.PxVec3* pvk_in_p1 = p1;
            physx.PxVec3* pvk_in_p2 = p2;
            PxPlane toInit;
            var pvk_in_this = &toInit;
            void_PxPlane_PxPlanePtr_Ctor_PxVec3_PxVec3_PxVec3_(pvk_in_this, pvk_in_p0, pvk_in_p1, pvk_in_p2);
            this = toInit;
        }

        //DBG: MethodNode physx::PxPlane::operator== L94-97
        //Value Converter OpEquals
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        public static bool OpEquals(physx.PxPlane lhs, physx.PxPlane p) {
            return OpEquals(lhs, (physx.PxPlane*)&p);
        }

        //DBG: MethodNode physx::PxPlane::operator== L94-97
        //Value Converter OpEquals
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        public static bool OpEquals(physx.PxPlane lhs, physx.PxPlane.Ref p) {
            return OpEquals(lhs, (physx.PxPlane*)(*((IntPtr*)(&p))));
        }

        //DBG: MethodNode physx::PxPlane::operator== L94-97
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxPlane*, man: physx.PxPlane*, kind: Value
        public static bool OpEquals(physx.PxPlane lhs, physx.PxPlane* p) {
            physx.PxPlane* pvk_in_lhs = &lhs;
            physx.PxPlane* pvk_in_p = p;
            return bool_const_PxPlane_operator_Ptr_EqualEqual_PxPlane_(pvk_in_lhs, pvk_in_p);
        }

        //DBG: MethodNode physx::PxPlane::distance L99-102
        //Value Converter distance
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public float distance(physx.PxVec3 p) {
            return distance((physx.PxVec3*)&p);
        }

        //DBG: MethodNode physx::PxPlane::distance L99-102
        //Value Converter distance
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public float distance(physx.PxVec3.Ref p) {
            return distance((physx.PxVec3*)(*((IntPtr*)(&p))));
        }

        //DBG: MethodNode physx::PxPlane::distance L99-102
        //RET nat: float, man: float, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        public float distance(physx.PxVec3* p) {

            physx.PxVec3* pvk_in_p = p;
            fixed (PxPlane* pvk_in_this = &this){
              return float_const_PxPlane_distancePtr_PxVec3_(pvk_in_this, pvk_in_p);
            }
        }

        //DBG: MethodNode physx::PxPlane::contains L104-107
        //Value Converter contains
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public bool contains(physx.PxVec3 p) {
            return contains((physx.PxVec3*)&p);
        }

        //DBG: MethodNode physx::PxPlane::contains L104-107
        //Value Converter contains
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public bool contains(physx.PxVec3.Ref p) {
            return contains((physx.PxVec3*)(*((IntPtr*)(&p))));
        }

        //DBG: MethodNode physx::PxPlane::contains L104-107
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        public bool contains(physx.PxVec3* p) {

            physx.PxVec3* pvk_in_p = p;
            fixed (PxPlane* pvk_in_this = &this){
              return bool_const_PxPlane_containsPtr_PxVec3_(pvk_in_this, pvk_in_p);
            }
        }

        //DBG: MethodNode physx::PxPlane::project L112-115
        //Value Converter project
        //RET nat: physx::PxVec3, man: physx.PxVec3, ret: False, kind: Blittable
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public physx.PxVec3 project(physx.PxVec3 p) {
            return project((physx.PxVec3*)&p);
        }

        //DBG: MethodNode physx::PxPlane::project L112-115
        //Value Converter project
        //RET nat: physx::PxVec3, man: physx.PxVec3, ret: False, kind: Blittable
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3, man: physx.PxVec3, kind: Blittable
        public physx.PxVec3 project(physx.PxVec3.Ref p) {
            return project((physx.PxVec3*)(*((IntPtr*)(&p))));
        }

        //DBG: MethodNode physx::PxPlane::project L112-115
        //RET nat: physx::PxVec3, man: physx.PxVec3, ret: False, kind: Blittable
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        //PAR nat: physx::PxVec3*, man: physx.PxVec3*, kind: Value
        public physx.PxVec3 project(physx.PxVec3* p) {
            physx.PxVec3 RetRef;

            physx.PxVec3* pvk_in_p = p;
            fixed (PxPlane* pvk_in_this = &this){
              PxVec3_const_PxPlane_projectPtr_PxVec3_(&RetRef, pvk_in_this, pvk_in_p);
            }
            return RetRef;
        }

        //DBG: MethodNode physx::PxPlane::pointInPlane L120-123
        //RET nat: physx::PxVec3, man: physx.PxVec3, ret: False, kind: Blittable
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        public physx.PxVec3 pointInPlane() {
            physx.PxVec3 RetRef;

            fixed (PxPlane* pvk_in_this = &this){
              PxVec3_const_PxPlane_pointInPlanePtr(&RetRef, pvk_in_this);
            }
            return RetRef;
        }

        //DBG: MethodNode physx::PxPlane::normalize L129-134
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: physx::PxPlane, man: physx.PxPlane, kind: Blittable
        public void normalize() {

            fixed (PxPlane* pvk_in_this = &this){
              void_PxPlane_normalizePtr(pvk_in_this);
            }
        }

        //DBG: BlittableCtorNode physx::PxPlane::PxPlane L50
        //ERRORS in BlittableCtorNode: Skipping Implicit BlittableCtorNode physx::PxPlane::PxPlane L50

        //DBG: BlittableCtorNode physx::PxPlane::PxPlane L50
        //ERRORS in BlittableCtorNode: Skipping Implicit BlittableCtorNode physx::PxPlane::PxPlane L50

        //DBG: MethodNode physx::PxPlane::operator= L50
        //ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxPlane::operator= L50

        //DBG: MethodNode physx::PxPlane::~PxPlane L50
        //ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxPlane::~PxPlane L50, Destructor

        //DBG: MethodNode physx::PxPlane::operator= L50
        //ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxPlane::operator= L50

        //REFERENCES
        public struct Ref {
            private IntPtr nativePtr_;
            public static implicit operator Ref(in physx.PxPlane obj)
            {fixed (void* f = &obj) return new Ref {nativePtr_ = (IntPtr)f};}
        }

        //Operators
        public static bool operator==(physx.PxPlane lhs, physx.PxPlane p) {
            return physx.PxPlane.OpEquals(lhs, (physx.PxPlane*)&p);
        }
        public static bool operator!=(physx.PxPlane lhs, physx.PxPlane p) {
            return !(physx.PxPlane.OpEquals(lhs, (physx.PxPlane*)&p)); // Matching Operator
        }
        public static bool operator==(physx.PxPlane lhs, physx.PxPlane.Ref p) {
            return physx.PxPlane.OpEquals(lhs, (physx.PxPlane*)(*((IntPtr*)(&p))));
        }
        public static bool operator!=(physx.PxPlane lhs, physx.PxPlane.Ref p) {
            return !(physx.PxPlane.OpEquals(lhs, (physx.PxPlane*)(*((IntPtr*)(&p))))); // Matching Operator
        }
        public static bool operator==(physx.PxPlane lhs, physx.PxPlane* p) {
            return physx.PxPlane.OpEquals(lhs, p);
        }
        public static bool operator!=(physx.PxPlane lhs, physx.PxPlane* p) {
            return !(physx.PxPlane.OpEquals(lhs, p)); // Matching Operator
        }
    }
}
