// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
//Unit PxPlane
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    public unsafe partial struct PxPlanePtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Freer_physx_PxPlanePtr(PxPlanePtr ptr);
        
        public static void Free(PxPlanePtr ptr){
            Freer_physx_PxPlanePtr(ptr);
        }
        public void Free(){
            Freer_physx_PxPlanePtr(this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxPlanePtr Ctor_physx_PxPlanePtr_();
        
        public static physx.PxPlanePtr New() {
            return Ctor_physx_PxPlanePtr_();
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxPlanePtr Ctor_physx_PxPlanePtr_float_float_float_float(float pvk_nx, float pvk_ny, float pvk_nz, float pvk_distance);
        
        public static physx.PxPlanePtr New(float nx, float ny, float nz, float distance) {
            float pvk_in_nx = nx;
            float pvk_in_ny = ny;
            float pvk_in_nz = nz;
            float pvk_in_distance = distance;
            return Ctor_physx_PxPlanePtr_float_float_float_float(pvk_in_nx, pvk_in_ny, pvk_in_nz, pvk_in_distance);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxPlanePtr Ctor_physx_PxPlanePtr_physx_PxVec3Ptr_float(physx.PxVec3Ptr pvk_normal, float pvk_distance);
        
        public static physx.PxPlanePtr New(physx.PxVec3Ptr normal, float distance) {
            physx.PxVec3Ptr pvk_in_normal = normal;
            float pvk_in_distance = distance;
            return Ctor_physx_PxPlanePtr_physx_PxVec3Ptr_float(pvk_in_normal, pvk_in_distance);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxPlanePtr Ctor_physx_PxPlanePtr_physx_PxVec3Ptr_physx_PxVec3Ptr(physx.PxVec3Ptr pvk_point, physx.PxVec3Ptr pvk_normal);
        
        public static physx.PxPlanePtr New(physx.PxVec3Ptr point, physx.PxVec3Ptr normal) {
            physx.PxVec3Ptr pvk_in_point = point;
            physx.PxVec3Ptr pvk_in_normal = normal;
            return Ctor_physx_PxPlanePtr_physx_PxVec3Ptr_physx_PxVec3Ptr(pvk_in_point, pvk_in_normal);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxPlanePtr Ctor_physx_PxPlanePtr_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxVec3Ptr(physx.PxVec3Ptr pvk_p0, physx.PxVec3Ptr pvk_p1, physx.PxVec3Ptr pvk_p2);
        
        public static physx.PxPlanePtr New(physx.PxVec3Ptr p0, physx.PxVec3Ptr p1, physx.PxVec3Ptr p2) {
            physx.PxVec3Ptr pvk_in_p0 = p0;
            physx.PxVec3Ptr pvk_in_p1 = p1;
            physx.PxVec3Ptr pvk_in_p2 = p2;
            return Ctor_physx_PxPlanePtr_physx_PxVec3Ptr_physx_PxVec3Ptr_physx_PxVec3Ptr(pvk_in_p0, pvk_in_p1, pvk_in_p2);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3Ptr PxPlane_GET_n(PxPlanePtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxPlane_SET_n(PxPlanePtr cls, physx.PxVec3Ptr value);
        
        public physx.PxVec3Ptr n {
            get => PxPlane_GET_n(this);
            set => PxPlane_SET_n(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float PxPlane_GET_d(PxPlanePtr cls);
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void PxPlane_SET_d(PxPlanePtr cls, float value);
        
        public float d {
            get => PxPlane_GET_d(this);
            set => PxPlane_SET_d(this, value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxPlane_operator_EqualEqual_physx_PxPlanePtr_(physx.PxPlanePtr pvk_lhs, physx.PxPlanePtr pvk_p);
        
        public static bool operator==(physx.PxPlanePtr lhs, physx.PxPlanePtr p) {
            physx.PxPlanePtr pvk_in_lhs = lhs;
            physx.PxPlanePtr pvk_in_p = p;
            return bool_const_physx_PxPlane_operator_EqualEqual_physx_PxPlanePtr_(pvk_in_lhs, pvk_in_p);
        }
        public static bool operator!=(physx.PxPlanePtr lhs, physx.PxPlanePtr p){return !(lhs==p);} // Generated Matching Operator
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxPlane_distance_physx_PxVec3Ptr_(physx.PxPlanePtr pvk_this, physx.PxVec3Ptr pvk_p);
        
        public float distance(physx.PxVec3Ptr p) {
            physx.PxPlanePtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_p = p;
            return float_const_physx_PxPlane_distance_physx_PxVec3Ptr_(pvk_in_this, pvk_in_p);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxPlane_contains_physx_PxVec3Ptr_(physx.PxPlanePtr pvk_this, physx.PxVec3Ptr pvk_p);
        
        public bool contains(physx.PxVec3Ptr p) {
            physx.PxPlanePtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_p = p;
            return bool_const_physx_PxPlane_contains_physx_PxVec3Ptr_(pvk_in_this, pvk_in_p);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3Ptr physx_PxVec3Ptr_const_physx_PxPlane_project_physx_PxVec3Ptr_(physx.PxPlanePtr pvk_this, physx.PxVec3Ptr pvk_p);
        
        public physx.PxVec3Ptr project_New(physx.PxVec3Ptr p) {
            physx.PxPlanePtr pvk_in_this = this;
            physx.PxVec3Ptr pvk_in_p = p;
            return physx_PxVec3Ptr_const_physx_PxPlane_project_physx_PxVec3Ptr_(pvk_in_this, pvk_in_p);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxVec3Ptr physx_PxVec3Ptr_const_physx_PxPlane_pointInPlane(physx.PxPlanePtr pvk_this);
        
        public physx.PxVec3Ptr pointInPlane_New() {
            physx.PxPlanePtr pvk_in_this = this;
            return physx_PxVec3Ptr_const_physx_PxPlane_pointInPlane(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxPlane_normalize(physx.PxPlanePtr pvk_this);
        
        public void normalize() {
            physx.PxPlanePtr pvk_in_this = this;
            void_physx_PxPlane_normalize(pvk_in_this);
        }
    }
    
}
