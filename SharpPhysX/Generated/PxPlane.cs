// Generated by minBND 5.1.81.43 - Â© github.com/Alan-FGR
//Unit PxPlane
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    public unsafe partial struct PxPlane {
        public physx.PxVec3 n;
        public float d;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Default_physx_PxPlane_(physx.PxPlane* RetRef);
        
        public static physx.PxPlane Default() {
            physx.PxPlane RetRef;
            Default_physx_PxPlane_(&RetRef);
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxPlane_PxPlane_Ctor_float_float_float_float_(physx.PxPlane* pvk_this, float pvk_nx, float pvk_ny, float pvk_nz, float pvk_distance);
        
        public  PxPlane(float nx, float ny, float nz, float distance) {
            float pvk_in_nx = nx;
            float pvk_in_ny = ny;
            float pvk_in_nz = nz;
            float pvk_in_distance = distance;
            PxPlane toInit;
            var pvk_in_this = &toInit;
            void_physx_PxPlane_PxPlane_Ctor_float_float_float_float_(pvk_in_this, pvk_in_nx, pvk_in_ny, pvk_in_nz, pvk_in_distance);
            this = toInit;
        }
        
        public  PxPlane(physx.PxVec3 normal, float distance) : this(&normal, distance) {
            //ctor piping;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxPlane_PxPlane_Ctor_physx_PxVec3_float_(physx.PxPlane* pvk_this, physx.PxVec3* pvk_normal, float pvk_distance);
        
        public  PxPlane(physx.PxVec3* normal, float distance) {
            physx.PxVec3* pvk_in_normal = normal;
            float pvk_in_distance = distance;
            PxPlane toInit;
            var pvk_in_this = &toInit;
            void_physx_PxPlane_PxPlane_Ctor_physx_PxVec3_float_(pvk_in_this, pvk_in_normal, pvk_in_distance);
            this = toInit;
        }
        
        public  PxPlane(physx.PxVec3 point, physx.PxVec3 normal) : this(&point, &normal) {
            //ctor piping;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxPlane_PxPlane_Ctor_physx_PxVec3_physx_PxVec3_(physx.PxPlane* pvk_this, physx.PxVec3* pvk_point, physx.PxVec3* pvk_normal);
        
        public  PxPlane(physx.PxVec3* point, physx.PxVec3* normal) {
            physx.PxVec3* pvk_in_point = point;
            physx.PxVec3* pvk_in_normal = normal;
            PxPlane toInit;
            var pvk_in_this = &toInit;
            void_physx_PxPlane_PxPlane_Ctor_physx_PxVec3_physx_PxVec3_(pvk_in_this, pvk_in_point, pvk_in_normal);
            this = toInit;
        }
        
        public  PxPlane(physx.PxVec3 p0, physx.PxVec3 p1, physx.PxVec3 p2) : this(&p0, &p1, &p2) {
            //ctor piping;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxPlane_PxPlane_Ctor_physx_PxVec3_physx_PxVec3_physx_PxVec3_(physx.PxPlane* pvk_this, physx.PxVec3* pvk_p0, physx.PxVec3* pvk_p1, physx.PxVec3* pvk_p2);
        
        public  PxPlane(physx.PxVec3* p0, physx.PxVec3* p1, physx.PxVec3* p2) {
            physx.PxVec3* pvk_in_p0 = p0;
            physx.PxVec3* pvk_in_p1 = p1;
            physx.PxVec3* pvk_in_p2 = p2;
            PxPlane toInit;
            var pvk_in_this = &toInit;
            void_physx_PxPlane_PxPlane_Ctor_physx_PxVec3_physx_PxVec3_physx_PxVec3_(pvk_in_this, pvk_in_p0, pvk_in_p1, pvk_in_p2);
            this = toInit;
        }
        
        public static bool operator==(physx.PxPlane lhs, physx.PxPlane p) {
            return lhs==&p;
        }
        
        public static bool operator!=(physx.PxPlane lhs, physx.PxPlane p){return !(lhs==p);} // Generated Matching Operator
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxPlane_operator_EqualEqual_physx_PxPlane_(physx.PxPlane* pvk_lhs, physx.PxPlane* pvk_p);
        
        public static bool operator==(physx.PxPlane lhs, physx.PxPlane* p) {
            physx.PxPlane* pvk_in_lhs = &lhs;
            physx.PxPlane* pvk_in_p = p;
            return bool_const_physx_PxPlane_operator_EqualEqual_physx_PxPlane_(pvk_in_lhs, pvk_in_p);
        }
        public static bool operator!=(physx.PxPlane lhs, physx.PxPlane* p){return !(lhs==p);} // Generated Matching Operator
        
        public float distance(physx.PxVec3 p) {
            return distance(&p);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxPlane_distance_physx_PxVec3_(physx.PxPlane* pvk_this, physx.PxVec3* pvk_p);
        
        public float distance(physx.PxVec3* p) {
            physx.PxVec3* pvk_in_p = p;
            fixed (PxPlane* pvk_in_this = &this){
                return float_const_physx_PxPlane_distance_physx_PxVec3_(pvk_in_this, pvk_in_p);
            }
        }
        
        public bool contains(physx.PxVec3 p) {
            return contains(&p);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxPlane_contains_physx_PxVec3_(physx.PxPlane* pvk_this, physx.PxVec3* pvk_p);
        
        public bool contains(physx.PxVec3* p) {
            physx.PxVec3* pvk_in_p = p;
            fixed (PxPlane* pvk_in_this = &this){
                return bool_const_physx_PxPlane_contains_physx_PxVec3_(pvk_in_this, pvk_in_p);
            }
        }
        
        public physx.PxVec3 project(physx.PxVec3 p) {
            return project(&p);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxPlane_project_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxPlane* pvk_this, physx.PxVec3* pvk_p);
        
        public physx.PxVec3 project(physx.PxVec3* p) {
            physx.PxVec3 RetRef;
            
            physx.PxVec3* pvk_in_p = p;
            fixed (PxPlane* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxPlane_project_physx_PxVec3_(&RetRef, pvk_in_this, pvk_in_p);
            }
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxPlane_pointInPlane(physx.PxVec3* RetRef, physx.PxPlane* pvk_this);
        
        public physx.PxVec3 pointInPlane() {
            physx.PxVec3 RetRef;
            
            fixed (PxPlane* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxPlane_pointInPlane(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxPlane_normalize(physx.PxPlane* pvk_this);
        
        public void normalize() {
            fixed (PxPlane* pvk_in_this = &this){
                void_physx_PxPlane_normalize(pvk_in_this);
            }
        }
    }
    
}
