// Generated by minBND 5.1.90.51 - Â© github.com/Alan-FGR
using System;
using System.Runtime.InteropServices;
public static unsafe partial class minBND_pinvokes {

//DBG: FunctionNode physx::operator| L64
//physx::operator| static physx.PxRigidDynamicLockFlagsPtr OpPipe_New(physx.PxRigidDynamicLockFlagEnum a, physx.PxRigidDynamicLockFlagEnum b) will also be bound as member operator
//RET nat: PxRigidDynamicLockFlagsPtr, man: physx.PxRigidDynamicLockFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxRigidDynamicLockFlag::Enum, man: physx.PxRigidDynamicLockFlagEnum, kind: Value
//PAR nat: physx::PxRigidDynamicLockFlag::Enum, man: physx.PxRigidDynamicLockFlagEnum, kind: Value
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern physx.PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_operator_Ptr_Pipe_PxRigidDynamicLockFlagEnum_PxRigidDynamicLockFlagEnum_(physx.PxRigidDynamicLockFlagEnum pvk_a, physx.PxRigidDynamicLockFlagEnum pvk_b);

//DBG: FunctionNode physx::operator& L64
//physx::operator& static physx.PxRigidDynamicLockFlagsPtr OpAnd_New(physx.PxRigidDynamicLockFlagEnum a, physx.PxRigidDynamicLockFlagEnum b) will also be bound as member operator
//RET nat: PxRigidDynamicLockFlagsPtr, man: physx.PxRigidDynamicLockFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxRigidDynamicLockFlag::Enum, man: physx.PxRigidDynamicLockFlagEnum, kind: Value
//PAR nat: physx::PxRigidDynamicLockFlag::Enum, man: physx.PxRigidDynamicLockFlagEnum, kind: Value
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern physx.PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_operator_Ptr_Amp_PxRigidDynamicLockFlagEnum_PxRigidDynamicLockFlagEnum_(physx.PxRigidDynamicLockFlagEnum pvk_a, physx.PxRigidDynamicLockFlagEnum pvk_b);

//DBG: FunctionNode physx::operator~ L64
//physx::operator~ static physx.PxRigidDynamicLockFlagsPtr OpTilde_New(physx.PxRigidDynamicLockFlagEnum a) will also be bound as member operator
//RET nat: PxRigidDynamicLockFlagsPtr, man: physx.PxRigidDynamicLockFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: physx::PxRigidDynamicLockFlag::Enum, man: physx.PxRigidDynamicLockFlagEnum, kind: Value
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern physx.PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_operator_Ptr_Tilde_PxRigidDynamicLockFlagEnum_(physx.PxRigidDynamicLockFlagEnum pvk_a);

//DBG: ClassNode PxRigidDynamicLockFlag physx::PxRigidDynamicLockFlag L50-61
//Subclasses using this: 0

//DBG: ClassNode PxRigidDynamic physx::PxRigidDynamic L83-381Bases: PxRigidBodyPtr|PxRigidActorPtr|PxActorPtr|PxBasePtr

//DBG: MethodNode physx::PxRigidDynamic::setKinematicTarget L117
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxTransform*, man: physx.PxTransform*, kind: Value
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern void void_PxRigidDynamicPtr_setKinematicTargetPtr_PxTransform_(physx.PxRigidDynamicPtr pvk_this, physx.PxTransform* pvk_destination);

//DBG: MethodNode physx::PxRigidDynamic::getKinematicTarget L127
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxTransform*, man: physx.PxTransform*, kind: Value
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern bool bool_const_PxRigidDynamicPtr_getKinematicTargetPtr_PxTransform_(physx.PxRigidDynamicPtr pvk_this, physx.PxTransform* pvk_target);

//DBG: MethodNode physx::PxRigidDynamic::isSleeping L168
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern bool bool_const_PxRigidDynamicPtr_isSleepingPtr(physx.PxRigidDynamicPtr pvk_this);

//DBG: MethodNode physx::PxRigidDynamic::setSleepThreshold L182
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern void void_PxRigidDynamicPtr_setSleepThresholdPtr_float_(physx.PxRigidDynamicPtr pvk_this, float pvk_threshold);

//DBG: MethodNode physx::PxRigidDynamic::getSleepThreshold L191
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern float float_const_PxRigidDynamicPtr_getSleepThresholdPtr(physx.PxRigidDynamicPtr pvk_this);

//DBG: MethodNode physx::PxRigidDynamic::setStabilizationThreshold L206
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern void void_PxRigidDynamicPtr_setStabilizationThresholdPtr_float_(physx.PxRigidDynamicPtr pvk_this, float pvk_threshold);

//DBG: MethodNode physx::PxRigidDynamic::getStabilizationThreshold L217
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern float float_const_PxRigidDynamicPtr_getStabilizationThresholdPtr(physx.PxRigidDynamicPtr pvk_this);

//DBG: MethodNode physx::PxRigidDynamic::getRigidDynamicLockFlags L229
//RET nat: PxRigidDynamicLockFlagsPtr, man: physx.PxRigidDynamicLockFlagsPtr, ret: True, kind: PtrStruct
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern physx.PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_const_PxRigidDynamicPtr_getRigidDynamicLockFlagsPtr(physx.PxRigidDynamicPtr pvk_this);

//DBG: MethodNode physx::PxRigidDynamic::setRigidDynamicLockFlag L244
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxRigidDynamicLockFlag::Enum, man: physx.PxRigidDynamicLockFlagEnum, kind: Value
//PAR nat: bool, man: bool, kind: Value
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern void void_PxRigidDynamicPtr_setRigidDynamicLockFlagPtr_PxRigidDynamicLockFlagEnum_bool_(physx.PxRigidDynamicPtr pvk_this, physx.PxRigidDynamicLockFlagEnum pvk_flag, bool pvk_value);

//DBG: MethodNode physx::PxRigidDynamic::setRigidDynamicLockFlags L245
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxRigidDynamicLockFlagsPtr, man: physx.PxRigidDynamicLockFlagsPtr, kind: PtrStruct
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern void void_PxRigidDynamicPtr_setRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagsPtr_(physx.PxRigidDynamicPtr pvk_this, physx.PxRigidDynamicLockFlagsPtr pvk_flags);

//DBG: MethodNode physx::PxRigidDynamic::setWakeCounter L269
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern void void_PxRigidDynamicPtr_setWakeCounterPtr_float_(physx.PxRigidDynamicPtr pvk_this, float pvk_wakeCounterValue);

//DBG: MethodNode physx::PxRigidDynamic::getWakeCounter L278
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern float float_const_PxRigidDynamicPtr_getWakeCounterPtr(physx.PxRigidDynamicPtr pvk_this);

//DBG: MethodNode physx::PxRigidDynamic::wakeUp L294
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern void void_PxRigidDynamicPtr_wakeUpPtr(physx.PxRigidDynamicPtr pvk_this);

//DBG: MethodNode physx::PxRigidDynamic::putToSleep L310
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern void void_PxRigidDynamicPtr_putToSleepPtr(physx.PxRigidDynamicPtr pvk_this);

//DBG: MethodNode physx::PxRigidDynamic::setSolverIterationCounts L332
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxU32, man: uint, kind: Value
//PAR nat: PxU32, man: uint, kind: Value
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern void void_PxRigidDynamicPtr_setSolverIterationCountsPtr_uint_uint_(physx.PxRigidDynamicPtr pvk_this, uint pvk_minPositionIters, uint pvk_minVelocityIters);

//DBG: MethodNode physx::PxRigidDynamic::getSolverIterationCounts L339
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxU32*, man: uint*, kind: Value
//PAR nat: PxU32*, man: uint*, kind: Value
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern void void_const_PxRigidDynamicPtr_getSolverIterationCountsPtr_uint_uint_(physx.PxRigidDynamicPtr pvk_this, uint* pvk_minPositionIters, uint* pvk_minVelocityIters);

//DBG: MethodNode physx::PxRigidDynamic::getContactReportThreshold L360
//RET nat: PxReal, man: float, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern float float_const_PxRigidDynamicPtr_getContactReportThresholdPtr(physx.PxRigidDynamicPtr pvk_this);

//DBG: MethodNode physx::PxRigidDynamic::setContactReportThreshold L371
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxReal, man: float, kind: Value
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern void void_PxRigidDynamicPtr_setContactReportThresholdPtr_float_(physx.PxRigidDynamicPtr pvk_this, float pvk_threshold);

//DBG: MethodNode physx::PxRigidDynamic::getConcreteTypeName L373
//RET nat: char*, man: string, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern string string_const_PxRigidDynamicPtr_getConcreteTypeNamePtr(physx.PxRigidDynamicPtr pvk_this);

//DBG: MethodNode physx::PxRigidDynamic::operator= L83
//ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxRigidDynamic::operator= L83

//DBG: MethodNode physx::PxRigidDynamic::setKinematicTarget L117
//Value Converter setKinematicTarget
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable

//DBG: MethodNode physx::PxRigidDynamic::setKinematicTarget L117
//Value Converter setKinematicTarget
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable

//DBG: MethodNode physx::PxRigidDynamic::getKinematicTarget L127
//Value Converter getKinematicTarget
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable

//DBG: MethodNode physx::PxRigidDynamic::getKinematicTarget L127
//Value Converter getKinematicTarget
//RET nat: bool, man: bool, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: physx::PxTransform, man: physx.PxTransform, kind: Blittable

//DBG: MethodNode physx::PxRigidDynamic::setSolverIterationCounts L332
//RET nat: void, man: void, ret: True, kind: Value
//PAR nat: PxRigidDynamicPtr, man: physx.PxRigidDynamicPtr, kind: PtrStruct
//PAR nat: PxU32, man: uint, kind: Value
[DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
internal static extern void void_PxRigidDynamicPtr_setSolverIterationCountsPtr_uint_(physx.PxRigidDynamicPtr pvk_this, uint pvk_minPositionIters);

//DBG: Field: userData - 314-314
//PIPING
//Skipping: SKIPPING! MethodNode physx::PxBase::is L101 is | 
//Skipping: SKIPPING! MethodNode physx::PxBase::is L111 isConst | 

//Operators

//DBG: DeclNode PxRigidDynamicLockFlags physx::PxRigidDynamicLockFlags L63
}
