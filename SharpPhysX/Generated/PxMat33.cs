// Generated by minBND 5.1.78.26 - Â© github.com/Alan-FGR
//DEBUG: UnitNode  - 0
//Unit PxMat33
using System;
using System.Runtime.InteropServices;

//DEBUG: NamespaceNode physx - 40-392
public static unsafe partial class physx {
    //DEBUG: FunctionNode physx::operator* - 259
    //ERRORS OCCURED IN physx::operator*
    //Signature of physx::operator* - PxMat33 operator*(float, const PxMat33&) forbidden in configuration
    
    //DEBUG: ClassNode physx::PxMat33 - 90-354
    public unsafe partial struct PxMat33{
        public physx.PxVec3 column0;
        public physx.PxVec3 column1;
        public physx.PxVec3 column2;
        
    //DEBUG: DeclNode physx::PxMat33 - 259
        // TODO DeclNode.GenBinding()
        
        //DEBUG: DefaulterNode physx::PxMat33::PxMat33 - 94-96
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void Default_physx_PxMat33_(physx.PxMat33* RetRef);
        
        public static physx.PxMat33 Default() {
            //RET nat: physx.PxMat33, man: physx.PxMat33, stg: Blittable, ret: False
            physx.PxMat33 RetRef;
            Default_physx_PxMat33_(&RetRef);
            return RetRef;
        }
        
        //DEBUG: BlittableCtorNode physx::PxMat33::PxMat33 - 99-103
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxMat33_PxMat33_Ctor_physx_PxIDENTITY_(physx.PxMat33* pvk_this, physx.PxIDENTITY pvk_r);
        
        public PxMat33(physx.PxIDENTITY r) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            
            //PAR nat: physx::PxIDENTITY, man: physx.PxIDENTITY, stg: Value
            physx.PxIDENTITY pvk_in_r = r;
            PxMat33 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxMat33_PxMat33_Ctor_physx_PxIDENTITY_(pvk_in_this, pvk_in_r);
            this = toInit;
        }
        
        //DEBUG: BlittableCtorNode physx::PxMat33::PxMat33 - 106-109
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxMat33_PxMat33_Ctor_physx_PxZERO_(physx.PxMat33* pvk_this, physx.PxZERO pvk_r);
        
        public PxMat33(physx.PxZERO r) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            
            //PAR nat: physx::PxZERO, man: physx.PxZERO, stg: Value
            physx.PxZERO pvk_in_r = r;
            PxMat33 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxMat33_PxMat33_Ctor_physx_PxZERO_(pvk_in_this, pvk_in_r);
            this = toInit;
        }
        
        //DEBUG: BlittableCtorNode physx::PxMat33::PxMat33 - 112-115
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxMat33_PxMat33_Ctor_physx_PxVec3_physx_PxVec3_physx_PxVec3_(physx.PxMat33* pvk_this, physx.PxVec3* pvk_col0, physx.PxVec3* pvk_col1, physx.PxVec3* pvk_col2);
        
        public PxMat33(physx.PxVec3* col0, physx.PxVec3* col1, physx.PxVec3* col2) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_col0 = col0;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_col1 = col1;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_col2 = col2;
            PxMat33 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxMat33_PxMat33_Ctor_physx_PxVec3_physx_PxVec3_physx_PxVec3_(pvk_in_this, pvk_in_col0, pvk_in_col1, pvk_in_col2);
            this = toInit;
        }
        
        //DEBUG: BlittableCtorNode physx::PxMat33::PxMat33 - 118-121
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxMat33_PxMat33_Ctor_float_(physx.PxMat33* pvk_this, float pvk_r);
        
        public PxMat33(float r) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            
            //PAR nat: float, man: float, stg: Value
            float pvk_in_r = r;
            PxMat33 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxMat33_PxMat33_Ctor_float_(pvk_in_this, pvk_in_r);
            this = toInit;
        }
        
        //DEBUG: BlittableCtorNode physx::PxMat33::PxMat33 - 124-129
        //ERRORS OCCURED IN physx::PxMat33::PxMat33
        //////################################################################## FIXME
        //Unparsed type ( TODO ): float[]
        
        //DEBUG: BlittableCtorNode physx::PxMat33::PxMat33 - 132-158
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxMat33_PxMat33_Ctor_physx_PxQuat_(physx.PxMat33* pvk_this, physx.PxQuat* pvk_q);
        
        public PxMat33(physx.PxQuat* q) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            
            //PAR nat: physx::PxQuat*, man: physx.PxQuat*, stg: Value
            physx.PxQuat* pvk_in_q = q;
            PxMat33 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxMat33_PxMat33_Ctor_physx_PxQuat_(pvk_in_this, pvk_in_q);
            this = toInit;
        }
        
        //DEBUG: BlittableCtorNode physx::PxMat33::PxMat33 - 161-164
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxMat33_PxMat33_Ctor_physx_PxMat33_(physx.PxMat33* pvk_this, physx.PxMat33* pvk_other);
        
        public PxMat33(physx.PxMat33* other) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            
            //PAR nat: physx::PxMat33*, man: physx.PxMat33*, stg: Value
            physx.PxMat33* pvk_in_other = other;
            PxMat33 toInit;
            var pvk_in_this = &toInit;
            void_physx_PxMat33_PxMat33_Ctor_physx_PxMat33_(pvk_in_this, pvk_in_other);
            this = toInit;
        }
        
        //DEBUG: MethodNode physx::PxMat33::operator= - 167-173
        //ERRORS OCCURED IN physx::PxMat33::operator=
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxMat33::createDiagonal - 176-179
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxMat33_physx_PxMat33_createDiagonal_physx_PxVec3_(physx.PxMat33* RetRef, physx.PxMat33* pvk_this, physx.PxVec3* pvk_d);
        
        public physx.PxMat33 createDiagonal(physx.PxVec3* d) {
            //RET nat: physx.PxMat33, man: physx.PxMat33, stg: Blittable, ret: False
            physx.PxMat33 RetRef;
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_d = d;
            fixed (PxMat33* pvk_in_this = &this){
                physx_PxMat33_physx_PxMat33_createDiagonal_physx_PxVec3_(&RetRef, pvk_in_this, pvk_in_d);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxMat33::operator== - 184-187
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxMat33_operator_EqualEqual_physx_PxMat33_(physx.PxMat33* pvk_lhs, physx.PxMat33* pvk_m);
        
        public static bool operator==(physx.PxMat33 lhs, physx.PxMat33* m) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            physx.PxMat33* pvk_in_lhs = &lhs;
            //PAR nat: physx::PxMat33*, man: physx.PxMat33*, stg: Value
            physx.PxMat33* pvk_in_m = m;
            return bool_const_physx_PxMat33_operator_EqualEqual_physx_PxMat33_(pvk_in_lhs, pvk_in_m);
        }
        public static bool operator!=(physx.PxMat33 lhs, physx.PxMat33* m){return !(lhs==m);} // Generated Matching Operator
        
        //DEBUG: MethodNode physx::PxMat33::getTranspose - 190-197
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxMat33_const_physx_PxMat33_getTranspose(physx.PxMat33* RetRef, physx.PxMat33* pvk_this);
        
        public physx.PxMat33 getTranspose() {
            //RET nat: physx.PxMat33, man: physx.PxMat33, stg: Blittable, ret: False
            physx.PxMat33 RetRef;
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            
            fixed (PxMat33* pvk_in_this = &this){
                physx_PxMat33_const_physx_PxMat33_getTranspose(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxMat33::getInverse - 200-227
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxMat33_const_physx_PxMat33_getInverse(physx.PxMat33* RetRef, physx.PxMat33* pvk_this);
        
        public physx.PxMat33 getInverse() {
            //RET nat: physx.PxMat33, man: physx.PxMat33, stg: Blittable, ret: False
            physx.PxMat33 RetRef;
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            
            fixed (PxMat33* pvk_in_this = &this){
                physx_PxMat33_const_physx_PxMat33_getInverse(&RetRef, pvk_in_this);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxMat33::getDeterminant - 230-233
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxMat33_getDeterminant(physx.PxMat33* pvk_this);
        
        public float getDeterminant() {
            //RET nat: float, man: float, stg: Value, ret: True
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            
            fixed (PxMat33* pvk_in_this = &this){
                return float_const_physx_PxMat33_getDeterminant(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxMat33::operator- - 236-239
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxMat33_const_physx_PxMat33_operator_Minus(physx.PxMat33* RetRef, physx.PxMat33* pvk_lhs);
        
        public static physx.PxMat33 operator-(physx.PxMat33 lhs) {
            //RET nat: physx.PxMat33, man: physx.PxMat33, stg: Blittable, ret: False
            physx.PxMat33 RetRef;
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            physx.PxMat33* pvk_in_lhs = &lhs;
            physx_PxMat33_const_physx_PxMat33_operator_Minus(&RetRef, pvk_in_lhs);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxMat33::operator+ - 242-245
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxMat33_const_physx_PxMat33_operator_Plus_physx_PxMat33_(physx.PxMat33* RetRef, physx.PxMat33* pvk_lhs, physx.PxMat33* pvk_other);
        
        public static physx.PxMat33 operator+(physx.PxMat33 lhs, physx.PxMat33* other) {
            //RET nat: physx.PxMat33, man: physx.PxMat33, stg: Blittable, ret: False
            physx.PxMat33 RetRef;
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            physx.PxMat33* pvk_in_lhs = &lhs;
            //PAR nat: physx::PxMat33*, man: physx.PxMat33*, stg: Value
            physx.PxMat33* pvk_in_other = other;
            physx_PxMat33_const_physx_PxMat33_operator_Plus_physx_PxMat33_(&RetRef, pvk_in_lhs, pvk_in_other);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxMat33::operator- - 248-251
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxMat33_const_physx_PxMat33_operator_Minus_physx_PxMat33_(physx.PxMat33* RetRef, physx.PxMat33* pvk_lhs, physx.PxMat33* pvk_other);
        
        public static physx.PxMat33 operator-(physx.PxMat33 lhs, physx.PxMat33* other) {
            //RET nat: physx.PxMat33, man: physx.PxMat33, stg: Blittable, ret: False
            physx.PxMat33 RetRef;
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            physx.PxMat33* pvk_in_lhs = &lhs;
            //PAR nat: physx::PxMat33*, man: physx.PxMat33*, stg: Value
            physx.PxMat33* pvk_in_other = other;
            physx_PxMat33_const_physx_PxMat33_operator_Minus_physx_PxMat33_(&RetRef, pvk_in_lhs, pvk_in_other);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxMat33::operator* - 254-257
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxMat33_const_physx_PxMat33_operator_Star_float_(physx.PxMat33* RetRef, physx.PxMat33* pvk_lhs, float pvk_scalar);
        
        public static physx.PxMat33 operator*(physx.PxMat33 lhs, float scalar) {
            //RET nat: physx.PxMat33, man: physx.PxMat33, stg: Blittable, ret: False
            physx.PxMat33 RetRef;
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            physx.PxMat33* pvk_in_lhs = &lhs;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_scalar = scalar;
            physx_PxMat33_const_physx_PxMat33_operator_Star_float_(&RetRef, pvk_in_lhs, pvk_in_scalar);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxMat33::operator* - 262-265
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxMat33_operator_Star_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxMat33* pvk_lhs, physx.PxVec3* pvk_vec);
        
        public static physx.PxVec3 operator*(physx.PxMat33 lhs, physx.PxVec3* vec) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            physx.PxMat33* pvk_in_lhs = &lhs;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_vec = vec;
            physx_PxVec3_const_physx_PxMat33_operator_Star_physx_PxVec3_(&RetRef, pvk_in_lhs, pvk_in_vec);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxMat33::operator* - 270-275
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxMat33_const_physx_PxMat33_operator_Star_physx_PxMat33_(physx.PxMat33* RetRef, physx.PxMat33* pvk_lhs, physx.PxMat33* pvk_other);
        
        public static physx.PxMat33 operator*(physx.PxMat33 lhs, physx.PxMat33* other) {
            //RET nat: physx.PxMat33, man: physx.PxMat33, stg: Blittable, ret: False
            physx.PxMat33 RetRef;
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            physx.PxMat33* pvk_in_lhs = &lhs;
            //PAR nat: physx::PxMat33*, man: physx.PxMat33*, stg: Value
            physx.PxMat33* pvk_in_other = other;
            physx_PxMat33_const_physx_PxMat33_operator_Star_physx_PxMat33_(&RetRef, pvk_in_lhs, pvk_in_other);
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxMat33::operator+= - 278-284
        //ERRORS OCCURED IN physx::PxMat33::operator+=
        //Unbindable Operator: PlusEqual
        
        //DEBUG: MethodNode physx::PxMat33::operator-= - 287-293
        //ERRORS OCCURED IN physx::PxMat33::operator-=
        //Unbindable Operator: MinusEqual
        
        //DEBUG: MethodNode physx::PxMat33::operator*= - 296-302
        //ERRORS OCCURED IN physx::PxMat33::operator*=
        //Unbindable Operator: StarEqual
        
        //DEBUG: MethodNode physx::PxMat33::operator*= - 305-309
        //ERRORS OCCURED IN physx::PxMat33::operator*=
        //Unbindable Operator: StarEqual
        
        //DEBUG: MethodNode physx::PxMat33::operator() - 312-315
        //ERRORS OCCURED IN physx::PxMat33::operator()
        //Unbindable Operator: Call
        
        //DEBUG: MethodNode physx::PxMat33::operator() - 318-321
        //ERRORS OCCURED IN physx::PxMat33::operator()
        //Unbindable Operator: Call
        
        //DEBUG: MethodNode physx::PxMat33::transform - 326-329
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxMat33_transform_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxMat33* pvk_this, physx.PxVec3* pvk_other);
        
        public physx.PxVec3 transform(physx.PxVec3* other) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_other = other;
            fixed (PxMat33* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxMat33_transform_physx_PxVec3_(&RetRef, pvk_in_this, pvk_in_other);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxMat33::transformTranspose - 332-335
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_const_physx_PxMat33_transformTranspose_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxMat33* pvk_this, physx.PxVec3* pvk_other);
        
        public physx.PxVec3 transformTranspose(physx.PxVec3* other) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_other = other;
            fixed (PxMat33* pvk_in_this = &this){
                physx_PxVec3_const_physx_PxMat33_transformTranspose_physx_PxVec3_(&RetRef, pvk_in_this, pvk_in_other);
            }
            return RetRef;
        }
        
        //DEBUG: MethodNode physx::PxMat33::front - 337-340
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float* float_const_physx_PxMat33_front(physx.PxMat33* pvk_this);
        
        public float* front() {
            //RET nat: float*, man: float*, stg: Value, ret: True
            //PAR nat: physx::PxMat33, man: physx.PxMat33, stg: Blittable
            
            fixed (PxMat33* pvk_in_this = &this){
                return float_const_physx_PxMat33_front(pvk_in_this);
            }
        }
        
        //DEBUG: MethodNode physx::PxMat33::operator[] - 342-345
        //ERRORS OCCURED IN physx::PxMat33::operator[]
        //Unbindable Operator: Subscript
        
        //DEBUG: MethodNode physx::PxMat33::operator[] - 346-349
        //ERRORS OCCURED IN physx::PxMat33::operator[]
        //Unbindable Operator: Subscript
        
        //DEBUG: MethodNode physx::PxMat33::~PxMat33 - 90
        //ERRORS OCCURED IN physx::PxMat33::~PxMat33
        //Implicit Function/Method
        //Destructor
        //DEBUG: ExternalOpNode physx::operator* - 259
        //ERRORS OCCURED IN physx::operator*
        //Signature of physx::operator* - PxMat33 operator*(float, const PxMat33&) forbidden in configuration
    }
    
}
