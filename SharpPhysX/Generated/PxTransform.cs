//Generated by MinBinder.
using System;
using System.Runtime.InteropServices;
using PxBaseFlags = System.UInt32;
using PxActorFlags = System.UInt32;

public partial struct PxTransform { // blittable


    public PxQuat q;
    public PxVec3 p;

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxTransform C_PxTransform_PxTransform(PxVec3 position);
    public unsafe PxTransform(PxVec3 position){
        var _new = C_PxTransform_PxTransform(position);        
        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxTransform C_PxTransform_PxTransform_2(PxQuat orientation);
    public unsafe PxTransform(PxQuat orientation){
        var _new = C_PxTransform_PxTransform_2(orientation);        
        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxTransform C_PxTransform_PxTransform_3(float x,float y,float z,PxQuat aQ);
    public unsafe PxTransform(float x,float y,float z,PxQuat aQ){
        var _new = C_PxTransform_PxTransform_3(x,y,z,aQ);        
        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxTransform C_PxTransform_PxTransform_4(PxVec3 p0,PxQuat q0);
    public unsafe PxTransform(PxVec3 p0,PxQuat q0){
        var _new = C_PxTransform_PxTransform_4(p0,q0);        
        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxTransform C_PxTransform_PxTransform_5(PxMat44 m);
    public unsafe PxTransform(PxMat44 m){
        var _new = C_PxTransform_PxTransform_5(m);        
        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxTransform_OP_EqualEqual(PxTransform cls,PxTransform t);
    public static bool operator==(PxTransform cls,PxTransform t){
        return C_CONST_PxTransform_OP_EqualEqual(cls,t);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxTransform C_CONST_PxTransform_OP_Star(PxTransform cls,PxTransform x);
    public static PxTransform operator*(PxTransform cls,PxTransform x){
        return C_CONST_PxTransform_OP_Star(cls,x);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxTransform C_CONST_PxTransform_getInverse(PxTransform cls);
    public PxTransform getInverse(){
        return C_CONST_PxTransform_getInverse(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxTransform_transform(PxTransform cls,PxVec3 input);
    public PxVec3 transform(PxVec3 input){
        return C_CONST_PxTransform_transform(this,input);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxTransform_transformInv(PxTransform cls,PxVec3 input);
    public PxVec3 transformInv(PxVec3 input){
        return C_CONST_PxTransform_transformInv(this,input);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxTransform_rotate(PxTransform cls,PxVec3 input);
    public PxVec3 rotate(PxVec3 input){
        return C_CONST_PxTransform_rotate(this,input);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxVec3 C_CONST_PxTransform_rotateInv(PxTransform cls,PxVec3 input);
    public PxVec3 rotateInv(PxVec3 input){
        return C_CONST_PxTransform_rotateInv(this,input);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxTransform C_CONST_PxTransform_transform_2(PxTransform cls,PxTransform src);
    public PxTransform transform(PxTransform src){
        return C_CONST_PxTransform_transform_2(this,src);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxTransform_isValid(PxTransform cls);
    public bool isValid(){
        return C_CONST_PxTransform_isValid(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxTransform_isSane(PxTransform cls);
    public bool isSane(){
        return C_CONST_PxTransform_isSane(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxTransform_isFinite(PxTransform cls);
    public bool isFinite(){
        return C_CONST_PxTransform_isFinite(this);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxTransform C_CONST_PxTransform_transformInv_2(PxTransform cls,PxTransform src);
    public PxTransform transformInv(PxTransform src){
        return C_CONST_PxTransform_transformInv_2(this,src);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxPlane C_CONST_PxTransform_transform_3(PxTransform cls,PxPlane plane);
    public PxPlane transform(PxPlane plane){
        return C_CONST_PxTransform_transform_3(this,plane);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxPlane C_CONST_PxTransform_inverseTransform(PxTransform cls,PxPlane plane);
    public PxPlane inverseTransform(PxPlane plane){
        return C_CONST_PxTransform_inverseTransform(this,plane);    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxTransform C_CONST_PxTransform_getNormalized(PxTransform cls);
    public PxTransform getNormalized(){
        return C_CONST_PxTransform_getNormalized(this);    
    }


}
