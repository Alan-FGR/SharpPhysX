// Generated by minBND 5.1.91.1 - Â© github.com/Alan-FGR
using System;
using System.Runtime.InteropServices;
using static minBND_pinvokes;

public static unsafe partial class physx {

    public unsafe partial struct PxMassPropertiesPtr {
        private System.IntPtr nativePtr_;

        public static void Free(physx.PxMassPropertiesPtr ptr){
            Freer_physx_PxMassPropertiesPtr(ptr);
        }
        public void Free(){
            Freer_physx_PxMassPropertiesPtr(this);
        }

        public static physx.PxMassPropertiesPtr New() {
            return Ctor_PxMassPropertiesPtr_();
        }

        public static physx.PxMassPropertiesPtr New(float m, physx.PxMat33* inertiaT, physx.PxVec3* com) {
            float pvk_in_m = m;
            physx.PxMat33* pvk_in_inertiaT = inertiaT;
            physx.PxVec3* pvk_in_com = com;
            return Ctor_PxMassPropertiesPtr_float_PxMat33_PxVec3_(pvk_in_m, pvk_in_inertiaT, pvk_in_com);
        }

        public static physx.PxMassPropertiesPtr New(physx.PxGeometry* geometry) {
            physx.PxGeometry* pvk_in_geometry = geometry;
            return Ctor_PxMassPropertiesPtr_PxGeometry_(pvk_in_geometry);
        }

        public static physx.PxMassPropertiesPtr New(float m, physx.PxMat33 inertiaT, physx.PxVec3 com) {
            return New(m, (physx.PxMat33*)&inertiaT, (physx.PxVec3*)&com);
        }

        public static physx.PxMassPropertiesPtr New(float m, physx.PxMat33.Ref inertiaT, physx.PxVec3.Ref com) {
            return New(m, (physx.PxMat33*)(*((IntPtr*)(&inertiaT))), (physx.PxVec3*)(*((IntPtr*)(&com))));
        }

        public static physx.PxMassPropertiesPtr New<T>(T geometry) where T : unmanaged, physx.PxGeometry.IPxGeometry {
            return New((physx.PxGeometry*)&geometry);
        }

        public static physx.PxMassPropertiesPtr New(physx.PxGeometry.Ref geometry) {
            return New((physx.PxGeometry*)(*((IntPtr*)(&geometry))));
        }

        public physx.PxMat33 inertiaTensor {
            get { physx.PxMat33 GetRetRef; PxMassPropertiesPtr_GET_inertiaTensor(this, &GetRetRef); return GetRetRef; }
            set => PxMassPropertiesPtr_SET_inertiaTensor(this, value);
        }

        public physx.PxVec3 centerOfMass {
            get { physx.PxVec3 GetRetRef; PxMassPropertiesPtr_GET_centerOfMass(this, &GetRetRef); return GetRetRef; }
            set => PxMassPropertiesPtr_SET_centerOfMass(this, value);
        }

        public float mass {
            get => PxMassPropertiesPtr_GET_mass(this);
            set => PxMassPropertiesPtr_SET_mass(this, value);
        }

        public static physx.PxMassPropertiesPtr OpMultiply_New(physx.PxMassPropertiesPtr lhs, float scale) {
            physx.PxMassPropertiesPtr pvk_in_lhs = lhs;
            float pvk_in_scale = scale;
            return PxMassPropertiesPtr_const_PxMassPropertiesPtr_operator_Ptr_Star_floatC(pvk_in_lhs, pvk_in_scale);
        }

        public void translate(physx.PxVec3* t) {
            physx.PxMassPropertiesPtr pvk_in_this = this;
            physx.PxVec3* pvk_in_t = t;
            void_PxMassPropertiesPtr_translatePtr_PxVec3_(pvk_in_this, pvk_in_t);
        }

        public void translate(physx.PxVec3 t) {
            translate((physx.PxVec3*)&t);
        }

        public void translate(physx.PxVec3.Ref t) {
            translate((physx.PxVec3*)(*((IntPtr*)(&t))));
        }

        public static physx.PxVec3 getMassSpaceInertia(physx.PxMat33* inertia, physx.PxQuat* massFrame) {
            physx.PxVec3 RetRef;
            physx.PxMat33* pvk_in_inertia = inertia;
            physx.PxQuat* pvk_in_massFrame = massFrame;
            PxVec3_PxMassPropertiesPtr_getMassSpaceInertiaPtr_PxMat33_PxQuat_(&RetRef, pvk_in_inertia, pvk_in_massFrame);
            return RetRef;
        }

        public static physx.PxMat33 translateInertia(physx.PxMat33* inertia, float mass, physx.PxVec3* t) {
            physx.PxMat33 RetRef;
            physx.PxMat33* pvk_in_inertia = inertia;
            float pvk_in_mass = mass;
            physx.PxVec3* pvk_in_t = t;
            PxMat33_PxMassPropertiesPtr_translateInertiaPtr_PxMat33_float_PxVec3_C_(&RetRef, pvk_in_inertia, pvk_in_mass, pvk_in_t);
            return RetRef;
        }

        public static physx.PxMat33 rotateInertia(physx.PxMat33* inertia, physx.PxQuat* q) {
            physx.PxMat33 RetRef;
            physx.PxMat33* pvk_in_inertia = inertia;
            physx.PxQuat* pvk_in_q = q;
            PxMat33_PxMassPropertiesPtr_rotateInertiaPtr_PxMat33_PxQuat_(&RetRef, pvk_in_inertia, pvk_in_q);
            return RetRef;
        }

        public static physx.PxMat33 scaleInertia(physx.PxMat33* inertia, physx.PxQuat* scaleRotation, physx.PxVec3* scale) {
            physx.PxMat33 RetRef;
            physx.PxMat33* pvk_in_inertia = inertia;
            physx.PxQuat* pvk_in_scaleRotation = scaleRotation;
            physx.PxVec3* pvk_in_scale = scale;
            PxMat33_PxMassPropertiesPtr_scaleInertiaPtr_PxMat33_PxQuat_PxVec3_(&RetRef, pvk_in_inertia, pvk_in_scaleRotation, pvk_in_scale);
            return RetRef;
        }

        public static physx.PxMassPropertiesPtr sum_New(physx.PxMassPropertiesPtr props, physx.PxTransform* transforms, uint count) {
            physx.PxMassPropertiesPtr pvk_in_props = props;
            physx.PxTransform* pvk_in_transforms = transforms;
            uint pvk_in_count = count;
            return PxMassPropertiesPtr_PxMassPropertiesPtr_sumPtr_PxMassPropertiesPtr_PxTransform_uint_C(pvk_in_props, pvk_in_transforms, pvk_in_count);
        }

        public static physx.PxVec3 getMassSpaceInertia(physx.PxMat33 inertia, physx.PxQuat massFrame) {
            return getMassSpaceInertia((physx.PxMat33*)&inertia, (physx.PxQuat*)&massFrame);
        }

        public static physx.PxVec3 getMassSpaceInertia(physx.PxMat33.Ref inertia, physx.PxQuat.Ref massFrame) {
            return getMassSpaceInertia((physx.PxMat33*)(*((IntPtr*)(&inertia))), (physx.PxQuat*)(*((IntPtr*)(&massFrame))));
        }

        public static physx.PxMat33 translateInertia(physx.PxMat33 inertia, float mass, physx.PxVec3 t) {
            return translateInertia((physx.PxMat33*)&inertia, mass, (physx.PxVec3*)&t);
        }

        public static physx.PxMat33 translateInertia(physx.PxMat33.Ref inertia, float mass, physx.PxVec3.Ref t) {
            return translateInertia((physx.PxMat33*)(*((IntPtr*)(&inertia))), mass, (physx.PxVec3*)(*((IntPtr*)(&t))));
        }

        public static physx.PxMat33 rotateInertia(physx.PxMat33 inertia, physx.PxQuat q) {
            return rotateInertia((physx.PxMat33*)&inertia, (physx.PxQuat*)&q);
        }

        public static physx.PxMat33 rotateInertia(physx.PxMat33.Ref inertia, physx.PxQuat.Ref q) {
            return rotateInertia((physx.PxMat33*)(*((IntPtr*)(&inertia))), (physx.PxQuat*)(*((IntPtr*)(&q))));
        }

        public static physx.PxMat33 scaleInertia(physx.PxMat33 inertia, physx.PxQuat scaleRotation, physx.PxVec3 scale) {
            return scaleInertia((physx.PxMat33*)&inertia, (physx.PxQuat*)&scaleRotation, (physx.PxVec3*)&scale);
        }

        public static physx.PxMat33 scaleInertia(physx.PxMat33.Ref inertia, physx.PxQuat.Ref scaleRotation, physx.PxVec3.Ref scale) {
            return scaleInertia((physx.PxMat33*)(*((IntPtr*)(&inertia))), (physx.PxQuat*)(*((IntPtr*)(&scaleRotation))), (physx.PxVec3*)(*((IntPtr*)(&scale))));
        }
    }
}
