// Generated by minBND 5.1.90.51 - Â© github.com/Alan-FGR
using System;
using System.Runtime.InteropServices;
using static minBND_pinvokes;

public static unsafe partial class physx {

    //DBG: FunctionNode physx::PxDefaultCpuDispatcherCreate L91
    //RET nat: PxDefaultCpuDispatcherPtr, man: physx.PxDefaultCpuDispatcherPtr, ret: True, kind: PtrStruct
    //PAR nat: PxU32, man: uint, kind: Value
    public static physx.PxDefaultCpuDispatcherPtr PxDefaultCpuDispatcherCreate(uint numThreads) {
        uint pvk_in_numThreads = numThreads;
        return PxDefaultCpuDispatcherPtr_PxDefaultCpuDispatcherCreatePtr_uint_(pvk_in_numThreads);
    }

    //DBG: FunctionNode physx::PxDefaultCpuDispatcherCreate L91
    //RET nat: PxDefaultCpuDispatcherPtr, man: physx.PxDefaultCpuDispatcherPtr, ret: True, kind: PtrStruct
    //PAR nat: PxU32, man: uint, kind: Value
    //PAR nat: PxU32*, man: uint*, kind: Value
    public static physx.PxDefaultCpuDispatcherPtr PxDefaultCpuDispatcherCreate(uint numThreads, uint* affinityMasks=default(uint*)) {
        uint pvk_in_numThreads = numThreads;
        uint* pvk_in_affinityMasks = affinityMasks;
        return PxDefaultCpuDispatcherPtr_PxDefaultCpuDispatcherCreatePtr_uint_uint_(pvk_in_numThreads, pvk_in_affinityMasks);
    }
    //Subclasses using this: 0

    public unsafe partial struct PxDefaultCpuDispatcherPtr : physx.PxCpuDispatcherPtr.IPxCpuDispatcherPtr {
        private System.IntPtr nativePtr_;

        //DBG: ClassNode PxDefaultCpuDispatcher physx::PxDefaultCpuDispatcher L50-77Bases: PxCpuDispatcherPtr

        //DBG: MethodNode physx::PxDefaultCpuDispatcher::release L60
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxDefaultCpuDispatcherPtr, man: physx.PxDefaultCpuDispatcherPtr, kind: PtrStruct
        public void release() {
            physx.PxDefaultCpuDispatcherPtr pvk_in_this = this;
            void_PxDefaultCpuDispatcherPtr_releasePtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxDefaultCpuDispatcher::setRunProfiled L69
        //RET nat: void, man: void, ret: True, kind: Value
        //PAR nat: PxDefaultCpuDispatcherPtr, man: physx.PxDefaultCpuDispatcherPtr, kind: PtrStruct
        //PAR nat: bool, man: bool, kind: Value
        public void setRunProfiled(bool runProfiled) {
            physx.PxDefaultCpuDispatcherPtr pvk_in_this = this;
            bool pvk_in_runProfiled = runProfiled;
            void_PxDefaultCpuDispatcherPtr_setRunProfiledPtr_bool_(pvk_in_this, pvk_in_runProfiled);
        }

        //DBG: MethodNode physx::PxDefaultCpuDispatcher::getRunProfiled L76
        //RET nat: bool, man: bool, ret: True, kind: Value
        //PAR nat: PxDefaultCpuDispatcherPtr, man: physx.PxDefaultCpuDispatcherPtr, kind: PtrStruct
        public bool getRunProfiled() {
            physx.PxDefaultCpuDispatcherPtr pvk_in_this = this;
            return bool_const_PxDefaultCpuDispatcherPtr_getRunProfiledPtr(pvk_in_this);
        }

        //DBG: MethodNode physx::PxDefaultCpuDispatcher::operator= L50
        //ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxDefaultCpuDispatcher::operator= L50

        //DBG: MethodNode physx::PxDefaultCpuDispatcher::operator= L50
        //ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxDefaultCpuDispatcher::operator= L50

        //DBG: MethodNode physx::PxDefaultCpuDispatcher::~PxDefaultCpuDispatcher L50
        //ERRORS in MethodNode: Skipping Implicit MethodNode physx::PxDefaultCpuDispatcher::~PxDefaultCpuDispatcher L50, Destructor
        public static implicit operator physx.PxCpuDispatcherPtr(PxDefaultCpuDispatcherPtr obj) => *(physx.PxCpuDispatcherPtr*)&obj;
        public static explicit operator PxDefaultCpuDispatcherPtr(physx.PxCpuDispatcherPtr obj) => *(PxDefaultCpuDispatcherPtr*)&obj;

        //PIPING
        public void submitTask(physx.PxBaseTaskPtr task){((physx.PxCpuDispatcherPtr)this).submitTask(task);}
        public uint getWorkerCount(){return((physx.PxCpuDispatcherPtr)this).getWorkerCount();}

        //Operators
    }
}
