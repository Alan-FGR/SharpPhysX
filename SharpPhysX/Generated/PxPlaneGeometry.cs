//Generated by MinBinder.
using System;
using System.Runtime.InteropServices;
using PxBaseFlags = System.UInt32;
using PxActorFlags = System.UInt32;

public static partial class physx{
    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxTransform C_PxTransformFromPlaneEquation(PxPlane plane);
    public static PxTransform PxTransformFromPlaneEquation(PxPlane plane){
        return C_PxTransformFromPlaneEquation(plane);    
    }


    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxPlane C_PxPlaneEquationFromTransform(PxTransform transform);
    public static PxPlane PxPlaneEquationFromTransform(PxTransform transform){
        return C_PxPlaneEquationFromTransform(transform);    
    }


}

public partial struct PxPlaneGeometry : IPxGeometry { // ptr holder

    public PxGeometryType getType() {// base call
        return ((PxGeometry)this).getType();
    }
    

    private IntPtr nativePtr_;
    
    public static unsafe implicit operator PxGeometry(PxPlaneGeometry obj) {// upcast
        return *(PxGeometry*)&obj;
    }
    
    public static unsafe explicit operator PxPlaneGeometry(PxGeometry obj) {// downcast
        return *(PxPlaneGeometry*)&obj;
    }
    
    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxPlaneGeometry_isValid(PxPlaneGeometry cls);
    public bool isValid(){
        return C_CONST_PxPlaneGeometry_isValid(this);    
    }


}
