// Generated by minBND 5.1.78.10 - Â© github.com/Alan-FGR
//Unit PxRigidDynamic
using System;
using System.Runtime.InteropServices;

public static unsafe partial class physx {
    // physx::operator| [static PxRigidDynamicLockFlagsPtr Pipe_New(physx.PxRigidDynamicLockFlagEnum a, physx.PxRigidDynamicLockFlagEnum b)] will be bound as member operator
    
    // physx::operator& [static PxRigidDynamicLockFlagsPtr Amp_New(physx.PxRigidDynamicLockFlagEnum a, physx.PxRigidDynamicLockFlagEnum b)] will be bound as member operator
    
    // physx::operator~ [static PxRigidDynamicLockFlagsPtr Tilde_New(physx.PxRigidDynamicLockFlagEnum a)] will be bound as member operator
    
    public enum PxRigidDynamicLockFlagEnum : int {
        eLOCK_LINEAR_X = 1,   // eLOCK_LINEAR_X = (1 << 0)
        eLOCK_LINEAR_Y = 2,   // eLOCK_LINEAR_Y = (1 << 1)
        eLOCK_LINEAR_Z = 4,   // eLOCK_LINEAR_Z = (1 << 2)
        eLOCK_ANGULAR_X = 8,  // eLOCK_ANGULAR_X = (1 << 3)
        eLOCK_ANGULAR_Y = 16, // eLOCK_ANGULAR_Y = (1 << 4)
        eLOCK_ANGULAR_Z = 32, // eLOCK_ANGULAR_Z = (1 << 5)
    }
    
    public unsafe partial struct PxRigidDynamicPtr : physx.PxRigidBodyPtr.IPxRigidBodyPtr, physx.PxRigidActorPtr.IPxRigidActorPtr, physx.PxActorPtr.IPxActorPtr, physx.PxBasePtr.IPxBasePtr{
        private System.IntPtr nativePtr_;
        
    [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidDynamic_setKinematicTarget_physx_PxTransformPtr_(physx.PxRigidDynamicPtr pvk_this, physx.PxTransformPtr pvk_destination);
        
        public void setKinematicTarget(physx.PxTransformPtr destination) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            physx.PxTransformPtr pvk_in_destination = destination;
            void_physx_PxRigidDynamic_setKinematicTarget_physx_PxTransformPtr_(pvk_in_this, pvk_in_destination);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxRigidDynamic_getKinematicTarget_physx_PxTransformPtr_(physx.PxRigidDynamicPtr pvk_this, physx.PxTransformPtr pvk_target);
        
        public bool getKinematicTarget(physx.PxTransformPtr target) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            physx.PxTransformPtr pvk_in_target = target;
            return bool_const_physx_PxRigidDynamic_getKinematicTarget_physx_PxTransformPtr_(pvk_in_this, pvk_in_target);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_const_physx_PxRigidDynamic_isSleeping(physx.PxRigidDynamicPtr pvk_this);
        
        public bool isSleeping() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return bool_const_physx_PxRigidDynamic_isSleeping(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidDynamic_setSleepThreshold_float_(physx.PxRigidDynamicPtr pvk_this, float pvk_threshold);
        
        public void setSleepThreshold(float threshold) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            float pvk_in_threshold = threshold;
            void_physx_PxRigidDynamic_setSleepThreshold_float_(pvk_in_this, pvk_in_threshold);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxRigidDynamic_getSleepThreshold(physx.PxRigidDynamicPtr pvk_this);
        
        public float getSleepThreshold() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return float_const_physx_PxRigidDynamic_getSleepThreshold(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidDynamic_setStabilizationThreshold_float_(physx.PxRigidDynamicPtr pvk_this, float pvk_threshold);
        
        public void setStabilizationThreshold(float threshold) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            float pvk_in_threshold = threshold;
            void_physx_PxRigidDynamic_setStabilizationThreshold_float_(pvk_in_this, pvk_in_threshold);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxRigidDynamic_getStabilizationThreshold(physx.PxRigidDynamicPtr pvk_this);
        
        public float getStabilizationThreshold() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return float_const_physx_PxRigidDynamic_getStabilizationThreshold(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern PxRigidDynamicLockFlagsPtr PxRigidDynamicLockFlagsPtr_const_physx_PxRigidDynamic_getRigidDynamicLockFlags(physx.PxRigidDynamicPtr pvk_this);
        
        public PxRigidDynamicLockFlagsPtr getRigidDynamicLockFlags_New() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return PxRigidDynamicLockFlagsPtr_const_physx_PxRigidDynamic_getRigidDynamicLockFlags(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidDynamic_setRigidDynamicLockFlag_physx_PxRigidDynamicLockFlagEnum_bool_(physx.PxRigidDynamicPtr pvk_this, physx.PxRigidDynamicLockFlagEnum pvk_flag, bool pvk_value);
        
        public void setRigidDynamicLockFlag(physx.PxRigidDynamicLockFlagEnum flag, bool value) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            physx.PxRigidDynamicLockFlagEnum pvk_in_flag = flag;
            bool pvk_in_value = value;
            void_physx_PxRigidDynamic_setRigidDynamicLockFlag_physx_PxRigidDynamicLockFlagEnum_bool_(pvk_in_this, pvk_in_flag, pvk_in_value);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidDynamic_setRigidDynamicLockFlags_PxRigidDynamicLockFlagsPtr_(physx.PxRigidDynamicPtr pvk_this, PxRigidDynamicLockFlagsPtr pvk_flags);
        
        public void setRigidDynamicLockFlags(PxRigidDynamicLockFlagsPtr flags) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            PxRigidDynamicLockFlagsPtr pvk_in_flags = flags;
            void_physx_PxRigidDynamic_setRigidDynamicLockFlags_PxRigidDynamicLockFlagsPtr_(pvk_in_this, pvk_in_flags);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidDynamic_setWakeCounter_float_(physx.PxRigidDynamicPtr pvk_this, float pvk_wakeCounterValue);
        
        public void setWakeCounter(float wakeCounterValue) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            float pvk_in_wakeCounterValue = wakeCounterValue;
            void_physx_PxRigidDynamic_setWakeCounter_float_(pvk_in_this, pvk_in_wakeCounterValue);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxRigidDynamic_getWakeCounter(physx.PxRigidDynamicPtr pvk_this);
        
        public float getWakeCounter() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return float_const_physx_PxRigidDynamic_getWakeCounter(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidDynamic_wakeUp(physx.PxRigidDynamicPtr pvk_this);
        
        public void wakeUp() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            void_physx_PxRigidDynamic_wakeUp(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidDynamic_putToSleep(physx.PxRigidDynamicPtr pvk_this);
        
        public void putToSleep() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            void_physx_PxRigidDynamic_putToSleep(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidDynamic_setSolverIterationCounts_uint_uint_(physx.PxRigidDynamicPtr pvk_this, uint pvk_minPositionIters, uint pvk_minVelocityIters);
        
        public void setSolverIterationCounts(uint minPositionIters, uint minVelocityIters=1) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            uint pvk_in_minPositionIters = minPositionIters;
            uint pvk_in_minVelocityIters = minVelocityIters;
            void_physx_PxRigidDynamic_setSolverIterationCounts_uint_uint_(pvk_in_this, pvk_in_minPositionIters, pvk_in_minVelocityIters);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidDynamic_setSolverIterationCounts_uint_(physx.PxRigidDynamicPtr pvk_this, uint pvk_minPositionIters);
        
        public void setSolverIterationCounts(uint minPositionIters) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            uint pvk_in_minPositionIters = minPositionIters;
            void_physx_PxRigidDynamic_setSolverIterationCounts_uint_(pvk_in_this, pvk_in_minPositionIters);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_const_physx_PxRigidDynamic_getSolverIterationCounts_uint_uint_(physx.PxRigidDynamicPtr pvk_this, uint* pvk_minPositionIters, uint* pvk_minVelocityIters);
        
        public void getSolverIterationCounts(uint* minPositionIters, uint* minVelocityIters) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            uint* pvk_in_minPositionIters = minPositionIters;
            uint* pvk_in_minVelocityIters = minVelocityIters;
            void_const_physx_PxRigidDynamic_getSolverIterationCounts_uint_uint_(pvk_in_this, pvk_in_minPositionIters, pvk_in_minVelocityIters);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern float float_const_physx_PxRigidDynamic_getContactReportThreshold(physx.PxRigidDynamicPtr pvk_this);
        
        public float getContactReportThreshold() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return float_const_physx_PxRigidDynamic_getContactReportThreshold(pvk_in_this);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidDynamic_setContactReportThreshold_float_(physx.PxRigidDynamicPtr pvk_this, float pvk_threshold);
        
        public void setContactReportThreshold(float threshold) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            float pvk_in_threshold = threshold;
            void_physx_PxRigidDynamic_setContactReportThreshold_float_(pvk_in_this, pvk_in_threshold);
        }
        
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern string string_const_physx_PxRigidDynamic_getConcreteTypeName(physx.PxRigidDynamicPtr pvk_this);
        
        public string getConcreteTypeName() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return string_const_physx_PxRigidDynamic_getConcreteTypeName(pvk_in_this);
        }
        public static implicit operator physx.PxRigidBodyPtr(PxRigidDynamicPtr obj) => *(physx.PxRigidBodyPtr*)&obj;
        public static explicit operator PxRigidDynamicPtr(physx.PxRigidBodyPtr obj) => *(PxRigidDynamicPtr*)&obj;
        public static implicit operator physx.PxRigidActorPtr(PxRigidDynamicPtr obj) => *(physx.PxRigidActorPtr*)&obj;
        public static explicit operator PxRigidDynamicPtr(physx.PxRigidActorPtr obj) => *(PxRigidDynamicPtr*)&obj;
        public static implicit operator physx.PxActorPtr(PxRigidDynamicPtr obj) => *(physx.PxActorPtr*)&obj;
        public static explicit operator PxRigidDynamicPtr(physx.PxActorPtr obj) => *(PxRigidDynamicPtr*)&obj;
        public static implicit operator physx.PxBasePtr(PxRigidDynamicPtr obj) => *(physx.PxBasePtr*)&obj;
        public static explicit operator PxRigidDynamicPtr(physx.PxBasePtr obj) => *(PxRigidDynamicPtr*)&obj;
    
        // PIPING
        public void setCMassLocalPose(physx.PxTransformPtr pose){((physx.PxRigidBodyPtr)this).setCMassLocalPose(pose);}
        public physx.PxTransformPtr getCMassLocalPose_New(){return((physx.PxRigidBodyPtr)this).getCMassLocalPose_New();}
        public void setMass(float mass){((physx.PxRigidBodyPtr)this).setMass(mass);}
        public float getMass(){return((physx.PxRigidBodyPtr)this).getMass();}
        public float getInvMass(){return((physx.PxRigidBodyPtr)this).getInvMass();}
        public void setMassSpaceInertiaTensor(physx.PxVec3Ptr m){((physx.PxRigidBodyPtr)this).setMassSpaceInertiaTensor(m);}
        public physx.PxVec3Ptr getMassSpaceInertiaTensor_New(){return((physx.PxRigidBodyPtr)this).getMassSpaceInertiaTensor_New();}
        public physx.PxVec3Ptr getMassSpaceInvInertiaTensor_New(){return((physx.PxRigidBodyPtr)this).getMassSpaceInvInertiaTensor_New();}
        public void setLinearDamping(float linDamp){((physx.PxRigidBodyPtr)this).setLinearDamping(linDamp);}
        public float getLinearDamping(){return((physx.PxRigidBodyPtr)this).getLinearDamping();}
        public void setAngularDamping(float angDamp){((physx.PxRigidBodyPtr)this).setAngularDamping(angDamp);}
        public float getAngularDamping(){return((physx.PxRigidBodyPtr)this).getAngularDamping();}
        public physx.PxVec3Ptr getLinearVelocity_New(){return((physx.PxRigidBodyPtr)this).getLinearVelocity_New();}
        public void setLinearVelocity(physx.PxVec3Ptr linVel, bool autowake=true){((physx.PxRigidBodyPtr)this).setLinearVelocity(linVel, autowake);}
        public physx.PxVec3Ptr getAngularVelocity_New(){return((physx.PxRigidBodyPtr)this).getAngularVelocity_New();}
        public void setAngularVelocity(physx.PxVec3Ptr angVel, bool autowake=true){((physx.PxRigidBodyPtr)this).setAngularVelocity(angVel, autowake);}
        public void setMaxAngularVelocity(float maxAngVel){((physx.PxRigidBodyPtr)this).setMaxAngularVelocity(maxAngVel);}
        public float getMaxAngularVelocity(){return((physx.PxRigidBodyPtr)this).getMaxAngularVelocity();}
        public void setMaxLinearVelocity(float maxLinVel){((physx.PxRigidBodyPtr)this).setMaxLinearVelocity(maxLinVel);}
        public float getMaxLinearVelocity(){return((physx.PxRigidBodyPtr)this).getMaxLinearVelocity();}
        public void addForce(physx.PxVec3Ptr force, physx.PxForceModeEnum mode, bool autowake=true){((physx.PxRigidBodyPtr)this).addForce(force, mode, autowake);}
        public void addTorque(physx.PxVec3Ptr torque, physx.PxForceModeEnum mode, bool autowake=true){((physx.PxRigidBodyPtr)this).addTorque(torque, mode, autowake);}
        public void clearForce(physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).clearForce(mode);}
        public void clearTorque(physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).clearTorque(mode);}
        public void setForceAndTorque(physx.PxVec3Ptr force, physx.PxVec3Ptr torque, physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).setForceAndTorque(force, torque, mode);}
        public void setRigidBodyFlag(physx.PxRigidBodyFlagEnum flag, bool value){((physx.PxRigidBodyPtr)this).setRigidBodyFlag(flag, value);}
        public void setRigidBodyFlags(PxRigidBodyFlagsPtr inFlags){((physx.PxRigidBodyPtr)this).setRigidBodyFlags(inFlags);}
        public PxRigidBodyFlagsPtr getRigidBodyFlags_New(){return((physx.PxRigidBodyPtr)this).getRigidBodyFlags_New();}
        public void setMinCCDAdvanceCoefficient(float advanceCoefficient){((physx.PxRigidBodyPtr)this).setMinCCDAdvanceCoefficient(advanceCoefficient);}
        public float getMinCCDAdvanceCoefficient(){return((physx.PxRigidBodyPtr)this).getMinCCDAdvanceCoefficient();}
        public void setMaxDepenetrationVelocity(float biasClamp){((physx.PxRigidBodyPtr)this).setMaxDepenetrationVelocity(biasClamp);}
        public float getMaxDepenetrationVelocity(){return((physx.PxRigidBodyPtr)this).getMaxDepenetrationVelocity();}
        public void setMaxContactImpulse(float maxImpulse){((physx.PxRigidBodyPtr)this).setMaxContactImpulse(maxImpulse);}
        public float getMaxContactImpulse(){return((physx.PxRigidBodyPtr)this).getMaxContactImpulse();}
        public uint getInternalIslandNodeIndex(){return((physx.PxRigidBodyPtr)this).getInternalIslandNodeIndex();}
        public void release(){((physx.PxRigidActorPtr)this).release();}
        public physx.PxTransformPtr getGlobalPose_New(){return((physx.PxRigidActorPtr)this).getGlobalPose_New();}
        public void setGlobalPose(physx.PxTransformPtr pose, bool autowake=true){((physx.PxRigidActorPtr)this).setGlobalPose(pose, autowake);}
        public bool attachShape(physx.PxShapePtr shape){return((physx.PxRigidActorPtr)this).attachShape(shape);}
        public void detachShape(physx.PxShapePtr shape, bool wakeOnLostTouch=true){((physx.PxRigidActorPtr)this).detachShape(shape, wakeOnLostTouch);}
        public uint getNbShapes(){return((physx.PxRigidActorPtr)this).getNbShapes();}
        public uint getShapes(physx.PxShapePtr* userBuffer, uint bufferSize, uint startIndex=0){return((physx.PxRigidActorPtr)this).getShapes(userBuffer, bufferSize, startIndex);}
        public uint getNbConstraints(){return((physx.PxRigidActorPtr)this).getNbConstraints();}
        public uint getConstraints(physx.PxConstraintPtr* userBuffer, uint bufferSize, uint startIndex=0){return((physx.PxRigidActorPtr)this).getConstraints(userBuffer, bufferSize, startIndex);}
        public physx.PxActorTypeEnum getType(){return((physx.PxActorPtr)this).getType();}
        public physx.PxScenePtr getScene(){return((physx.PxActorPtr)this).getScene();}
        public void setName(string name){((physx.PxActorPtr)this).setName(name);}
        public string getName(){return((physx.PxActorPtr)this).getName();}
        public physx.PxBounds3Ptr getWorldBounds_New(float inflation=1.01f){return((physx.PxActorPtr)this).getWorldBounds_New(inflation);}
        public void setActorFlag(physx.PxActorFlagEnum flag, bool value){((physx.PxActorPtr)this).setActorFlag(flag, value);}
        public void setActorFlags(PxActorFlagsPtr inFlags){((physx.PxActorPtr)this).setActorFlags(inFlags);}
        public PxActorFlagsPtr getActorFlags_New(){return((physx.PxActorPtr)this).getActorFlags_New();}
        public void setDominanceGroup(byte dominanceGroup){((physx.PxActorPtr)this).setDominanceGroup(dominanceGroup);}
        public byte getDominanceGroup(){return((physx.PxActorPtr)this).getDominanceGroup();}
        public void setOwnerClient(byte inClient){((physx.PxActorPtr)this).setOwnerClient(inClient);}
        public byte getOwnerClient(){return((physx.PxActorPtr)this).getOwnerClient();}
        public physx.PxAggregatePtr getAggregate(){return((physx.PxActorPtr)this).getAggregate();}
        public ushort getConcreteType(){return((physx.PxBasePtr)this).getConcreteType();}
        public void setBaseFlag(physx.PxBaseFlagEnum flag, bool value){((physx.PxBasePtr)this).setBaseFlag(flag, value);}
        public void setBaseFlags(PxBaseFlagsPtr inFlags){((physx.PxBasePtr)this).setBaseFlags(inFlags);}
        public PxBaseFlagsPtr getBaseFlags_New(){return((physx.PxBasePtr)this).getBaseFlags_New();}
        public bool isReleasable(){return((physx.PxBasePtr)this).isReleasable();}
    }
    
}
