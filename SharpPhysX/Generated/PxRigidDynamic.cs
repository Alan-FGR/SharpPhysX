// Generated by minBND 5.1.93.2 - Â© github.com/Alan-FGR
using System;
using System.Runtime.InteropServices;
using static minBND_pinvokes;

public static unsafe partial class physx {

    public static physx.PxRigidDynamicLockFlagsPtr OpPipe_New(physx.PxRigidDynamicLockFlagEnum a, physx.PxRigidDynamicLockFlagEnum b) {
        physx.PxRigidDynamicLockFlagEnum pvk_in_a = a;
        physx.PxRigidDynamicLockFlagEnum pvk_in_b = b;
        return PxRigidDynamicLockFlagsPtr_operator_Ptr_Pipe_PxRigidDynamicLockFlagEnum_PxRigidDynamicLockFlagEnum_(pvk_in_a, pvk_in_b);
    }

    public static physx.PxRigidDynamicLockFlagsPtr OpAnd_New(physx.PxRigidDynamicLockFlagEnum a, physx.PxRigidDynamicLockFlagEnum b) {
        physx.PxRigidDynamicLockFlagEnum pvk_in_a = a;
        physx.PxRigidDynamicLockFlagEnum pvk_in_b = b;
        return PxRigidDynamicLockFlagsPtr_operator_Ptr_Amp_PxRigidDynamicLockFlagEnum_PxRigidDynamicLockFlagEnum_(pvk_in_a, pvk_in_b);
    }

    public static physx.PxRigidDynamicLockFlagsPtr OpTilde_New(physx.PxRigidDynamicLockFlagEnum a) {
        physx.PxRigidDynamicLockFlagEnum pvk_in_a = a;
        return PxRigidDynamicLockFlagsPtr_operator_Ptr_Tilde_PxRigidDynamicLockFlagEnum_(pvk_in_a);
    }

    public enum PxRigidDynamicLockFlagEnum : int {
        eLOCK_LINEAR_X = 1,   // eLOCK_LINEAR_X = (1 << 0)
        eLOCK_LINEAR_Y = 2,   // eLOCK_LINEAR_Y = (1 << 1)
        eLOCK_LINEAR_Z = 4,   // eLOCK_LINEAR_Z = (1 << 2)
        eLOCK_ANGULAR_X = 8,  // eLOCK_ANGULAR_X = (1 << 3)
        eLOCK_ANGULAR_Y = 16, // eLOCK_ANGULAR_Y = (1 << 4)
        eLOCK_ANGULAR_Z = 32, // eLOCK_ANGULAR_Z = (1 << 5)
    }

    public unsafe partial struct PxRigidDynamicPtr : physx.PxRigidBodyPtr.IPxRigidBodyPtr, physx.PxRigidActorPtr.IPxRigidActorPtr, physx.PxActorPtr.IPxActorPtr, physx.PxBasePtr.IPxBasePtr {
        private System.IntPtr nativePtr_;

        public void setKinematicTarget(physx.PxTransform* destination) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            physx.PxTransform* pvk_in_destination = destination;
            void_PxRigidDynamicPtr_setKinematicTargetPtr_PxTransform_(pvk_in_this, pvk_in_destination);
        }

        public bool getKinematicTarget(physx.PxTransform* target) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            physx.PxTransform* pvk_in_target = target;
            return bool_const_PxRigidDynamicPtr_getKinematicTargetPtr_PxTransform_(pvk_in_this, pvk_in_target);
        }

        public bool isSleeping() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return bool_const_PxRigidDynamicPtr_isSleepingPtr(pvk_in_this);
        }

        public void setSleepThreshold(float threshold) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            float pvk_in_threshold = threshold;
            void_PxRigidDynamicPtr_setSleepThresholdPtr_float_(pvk_in_this, pvk_in_threshold);
        }

        public float getSleepThreshold() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return float_const_PxRigidDynamicPtr_getSleepThresholdPtr(pvk_in_this);
        }

        public void setStabilizationThreshold(float threshold) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            float pvk_in_threshold = threshold;
            void_PxRigidDynamicPtr_setStabilizationThresholdPtr_float_(pvk_in_this, pvk_in_threshold);
        }

        public float getStabilizationThreshold() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return float_const_PxRigidDynamicPtr_getStabilizationThresholdPtr(pvk_in_this);
        }

        public physx.PxRigidDynamicLockFlagsPtr getRigidDynamicLockFlags_New() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return PxRigidDynamicLockFlagsPtr_const_PxRigidDynamicPtr_getRigidDynamicLockFlagsPtr(pvk_in_this);
        }

        public void setRigidDynamicLockFlag(physx.PxRigidDynamicLockFlagEnum flag, bool value) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            physx.PxRigidDynamicLockFlagEnum pvk_in_flag = flag;
            bool pvk_in_value = value;
            void_PxRigidDynamicPtr_setRigidDynamicLockFlagPtr_PxRigidDynamicLockFlagEnum_bool_(pvk_in_this, pvk_in_flag, pvk_in_value);
        }

        public void setRigidDynamicLockFlags(physx.PxRigidDynamicLockFlagsPtr flags) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            physx.PxRigidDynamicLockFlagsPtr pvk_in_flags = flags;
            void_PxRigidDynamicPtr_setRigidDynamicLockFlagsPtr_PxRigidDynamicLockFlagsPtr_(pvk_in_this, pvk_in_flags);
        }

        public void setWakeCounter(float wakeCounterValue) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            float pvk_in_wakeCounterValue = wakeCounterValue;
            void_PxRigidDynamicPtr_setWakeCounterPtr_float_(pvk_in_this, pvk_in_wakeCounterValue);
        }

        public float getWakeCounter() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return float_const_PxRigidDynamicPtr_getWakeCounterPtr(pvk_in_this);
        }

        public void wakeUp() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            void_PxRigidDynamicPtr_wakeUpPtr(pvk_in_this);
        }

        public void putToSleep() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            void_PxRigidDynamicPtr_putToSleepPtr(pvk_in_this);
        }

        public void setSolverIterationCounts(uint minPositionIters, uint minVelocityIters=1) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            uint pvk_in_minPositionIters = minPositionIters;
            uint pvk_in_minVelocityIters = minVelocityIters;
            void_PxRigidDynamicPtr_setSolverIterationCountsPtr_uint_uint_(pvk_in_this, pvk_in_minPositionIters, pvk_in_minVelocityIters);
        }

        public void getSolverIterationCounts(uint* minPositionIters, uint* minVelocityIters) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            uint* pvk_in_minPositionIters = minPositionIters;
            uint* pvk_in_minVelocityIters = minVelocityIters;
            void_const_PxRigidDynamicPtr_getSolverIterationCountsPtr_uint_uint_(pvk_in_this, pvk_in_minPositionIters, pvk_in_minVelocityIters);
        }

        public float getContactReportThreshold() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return float_const_PxRigidDynamicPtr_getContactReportThresholdPtr(pvk_in_this);
        }

        public void setContactReportThreshold(float threshold) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            float pvk_in_threshold = threshold;
            void_PxRigidDynamicPtr_setContactReportThresholdPtr_float_(pvk_in_this, pvk_in_threshold);
        }

        public string getConcreteTypeName() {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            return string_const_PxRigidDynamicPtr_getConcreteTypeNamePtr(pvk_in_this);
        }

        public void setKinematicTarget(physx.PxTransform destination) {
            setKinematicTarget((physx.PxTransform*)&destination);
        }

        public void setKinematicTarget(physx.PxTransform.Ref destination) {
            setKinematicTarget((physx.PxTransform*)(*((IntPtr*)(&destination))));
        }

        public bool getKinematicTarget(physx.PxTransform target) {
            return getKinematicTarget((physx.PxTransform*)&target);
        }

        public bool getKinematicTarget(physx.PxTransform.Ref target) {
            return getKinematicTarget((physx.PxTransform*)(*((IntPtr*)(&target))));
        }

        public void setSolverIterationCounts(uint minPositionIters) {
            physx.PxRigidDynamicPtr pvk_in_this = this;
            uint pvk_in_minPositionIters = minPositionIters;
            void_PxRigidDynamicPtr_setSolverIterationCountsPtr_uint_(pvk_in_this, pvk_in_minPositionIters);
        }
        public static implicit operator physx.PxRigidBodyPtr(PxRigidDynamicPtr obj) => *(physx.PxRigidBodyPtr*)&obj;
        public static explicit operator PxRigidDynamicPtr(physx.PxRigidBodyPtr obj) => *(PxRigidDynamicPtr*)&obj;
        public static implicit operator physx.PxRigidActorPtr(PxRigidDynamicPtr obj) => *(physx.PxRigidActorPtr*)&obj;
        public static explicit operator PxRigidDynamicPtr(physx.PxRigidActorPtr obj) => *(PxRigidDynamicPtr*)&obj;
        public static implicit operator physx.PxActorPtr(PxRigidDynamicPtr obj) => *(physx.PxActorPtr*)&obj;
        public static explicit operator PxRigidDynamicPtr(physx.PxActorPtr obj) => *(PxRigidDynamicPtr*)&obj;
        public static implicit operator physx.PxBasePtr(PxRigidDynamicPtr obj) => *(physx.PxBasePtr*)&obj;
        public static explicit operator PxRigidDynamicPtr(physx.PxBasePtr obj) => *(PxRigidDynamicPtr*)&obj;

        public IntPtr userData {
            get => PxActorPtr_GET_userData(this);
            set => PxActorPtr_SET_userData(this, value);
        }

        public void setCMassLocalPose(physx.PxTransform* pose){((physx.PxRigidBodyPtr)this).setCMassLocalPose(pose);}
        public physx.PxTransform getCMassLocalPose(){return((physx.PxRigidBodyPtr)this).getCMassLocalPose();}
        public void setMass(float mass){((physx.PxRigidBodyPtr)this).setMass(mass);}
        public float getMass(){return((physx.PxRigidBodyPtr)this).getMass();}
        public float getInvMass(){return((physx.PxRigidBodyPtr)this).getInvMass();}
        public void setMassSpaceInertiaTensor(physx.PxVec3* m){((physx.PxRigidBodyPtr)this).setMassSpaceInertiaTensor(m);}
        public physx.PxVec3 getMassSpaceInertiaTensor(){return((physx.PxRigidBodyPtr)this).getMassSpaceInertiaTensor();}
        public physx.PxVec3 getMassSpaceInvInertiaTensor(){return((physx.PxRigidBodyPtr)this).getMassSpaceInvInertiaTensor();}
        public void setLinearDamping(float linDamp){((physx.PxRigidBodyPtr)this).setLinearDamping(linDamp);}
        public float getLinearDamping(){return((physx.PxRigidBodyPtr)this).getLinearDamping();}
        public void setAngularDamping(float angDamp){((physx.PxRigidBodyPtr)this).setAngularDamping(angDamp);}
        public float getAngularDamping(){return((physx.PxRigidBodyPtr)this).getAngularDamping();}
        public physx.PxVec3 getLinearVelocity(){return((physx.PxRigidBodyPtr)this).getLinearVelocity();}
        public void setLinearVelocity(physx.PxVec3* linVel, bool autowake=true){((physx.PxRigidBodyPtr)this).setLinearVelocity(linVel, autowake);}
        public physx.PxVec3 getAngularVelocity(){return((physx.PxRigidBodyPtr)this).getAngularVelocity();}
        public void setAngularVelocity(physx.PxVec3* angVel, bool autowake=true){((physx.PxRigidBodyPtr)this).setAngularVelocity(angVel, autowake);}
        public void setMaxAngularVelocity(float maxAngVel){((physx.PxRigidBodyPtr)this).setMaxAngularVelocity(maxAngVel);}
        public float getMaxAngularVelocity(){return((physx.PxRigidBodyPtr)this).getMaxAngularVelocity();}
        public void setMaxLinearVelocity(float maxLinVel){((physx.PxRigidBodyPtr)this).setMaxLinearVelocity(maxLinVel);}
        public float getMaxLinearVelocity(){return((physx.PxRigidBodyPtr)this).getMaxLinearVelocity();}
        public void addForce(physx.PxVec3* force, physx.PxForceModeEnum mode, bool autowake=true){((physx.PxRigidBodyPtr)this).addForce(force, mode, autowake);}
        public void addTorque(physx.PxVec3* torque, physx.PxForceModeEnum mode, bool autowake=true){((physx.PxRigidBodyPtr)this).addTorque(torque, mode, autowake);}
        public void clearForce(physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).clearForce(mode);}
        public void clearTorque(physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).clearTorque(mode);}
        public void setForceAndTorque(physx.PxVec3* force, physx.PxVec3* torque, physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).setForceAndTorque(force, torque, mode);}
        public void setRigidBodyFlag(physx.PxRigidBodyFlagEnum flag, bool value){((physx.PxRigidBodyPtr)this).setRigidBodyFlag(flag, value);}
        public void setRigidBodyFlags(physx.PxRigidBodyFlagsPtr inFlags){((physx.PxRigidBodyPtr)this).setRigidBodyFlags(inFlags);}
        public physx.PxRigidBodyFlagsPtr getRigidBodyFlags_New(){return((physx.PxRigidBodyPtr)this).getRigidBodyFlags_New();}
        public void setMinCCDAdvanceCoefficient(float advanceCoefficient){((physx.PxRigidBodyPtr)this).setMinCCDAdvanceCoefficient(advanceCoefficient);}
        public float getMinCCDAdvanceCoefficient(){return((physx.PxRigidBodyPtr)this).getMinCCDAdvanceCoefficient();}
        public void setMaxDepenetrationVelocity(float biasClamp){((physx.PxRigidBodyPtr)this).setMaxDepenetrationVelocity(biasClamp);}
        public float getMaxDepenetrationVelocity(){return((physx.PxRigidBodyPtr)this).getMaxDepenetrationVelocity();}
        public void setMaxContactImpulse(float maxImpulse){((physx.PxRigidBodyPtr)this).setMaxContactImpulse(maxImpulse);}
        public float getMaxContactImpulse(){return((physx.PxRigidBodyPtr)this).getMaxContactImpulse();}
        public uint getInternalIslandNodeIndex(){return((physx.PxRigidBodyPtr)this).getInternalIslandNodeIndex();}
        public void setCMassLocalPose(physx.PxTransform pose){((physx.PxRigidBodyPtr)this).setCMassLocalPose((physx.PxTransform*)&pose);}
        public void setCMassLocalPose(physx.PxTransform.Ref pose){((physx.PxRigidBodyPtr)this).setCMassLocalPose((physx.PxTransform*)(*((IntPtr*)(&pose))));}
        public void setMassSpaceInertiaTensor(physx.PxVec3 m){((physx.PxRigidBodyPtr)this).setMassSpaceInertiaTensor((physx.PxVec3*)&m);}
        public void setMassSpaceInertiaTensor(physx.PxVec3.Ref m){((physx.PxRigidBodyPtr)this).setMassSpaceInertiaTensor((physx.PxVec3*)(*((IntPtr*)(&m))));}
        public void setLinearVelocity(physx.PxVec3 linVel){((physx.PxRigidBodyPtr)this).setLinearVelocity((physx.PxVec3*)&linVel);}
        public void setLinearVelocity(physx.PxVec3.Ref linVel){((physx.PxRigidBodyPtr)this).setLinearVelocity((physx.PxVec3*)(*((IntPtr*)(&linVel))));}
        public void setLinearVelocity(physx.PxVec3* linVel){((physx.PxRigidBodyPtr)this).setLinearVelocity(linVel);}
        public void setLinearVelocity(physx.PxVec3 linVel, bool autowake=true){((physx.PxRigidBodyPtr)this).setLinearVelocity((physx.PxVec3*)&linVel, autowake);}
        public void setLinearVelocity(physx.PxVec3.Ref linVel, bool autowake=true){((physx.PxRigidBodyPtr)this).setLinearVelocity((physx.PxVec3*)(*((IntPtr*)(&linVel))), autowake);}
        public void setAngularVelocity(physx.PxVec3 angVel){((physx.PxRigidBodyPtr)this).setAngularVelocity((physx.PxVec3*)&angVel);}
        public void setAngularVelocity(physx.PxVec3.Ref angVel){((physx.PxRigidBodyPtr)this).setAngularVelocity((physx.PxVec3*)(*((IntPtr*)(&angVel))));}
        public void setAngularVelocity(physx.PxVec3* angVel){((physx.PxRigidBodyPtr)this).setAngularVelocity(angVel);}
        public void setAngularVelocity(physx.PxVec3 angVel, bool autowake=true){((physx.PxRigidBodyPtr)this).setAngularVelocity((physx.PxVec3*)&angVel, autowake);}
        public void setAngularVelocity(physx.PxVec3.Ref angVel, bool autowake=true){((physx.PxRigidBodyPtr)this).setAngularVelocity((physx.PxVec3*)(*((IntPtr*)(&angVel))), autowake);}
        public void addForce(physx.PxVec3 force){((physx.PxRigidBodyPtr)this).addForce((physx.PxVec3*)&force);}
        public void addForce(physx.PxVec3.Ref force){((physx.PxRigidBodyPtr)this).addForce((physx.PxVec3*)(*((IntPtr*)(&force))));}
        public void addForce(physx.PxVec3* force){((physx.PxRigidBodyPtr)this).addForce(force);}
        public void addForce(physx.PxVec3 force, physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).addForce((physx.PxVec3*)&force, mode);}
        public void addForce(physx.PxVec3.Ref force, physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).addForce((physx.PxVec3*)(*((IntPtr*)(&force))), mode);}
        public void addForce(physx.PxVec3* force, physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).addForce(force, mode);}
        public void addForce(physx.PxVec3 force, physx.PxForceModeEnum mode, bool autowake=true){((physx.PxRigidBodyPtr)this).addForce((physx.PxVec3*)&force, mode, autowake);}
        public void addForce(physx.PxVec3.Ref force, physx.PxForceModeEnum mode, bool autowake=true){((physx.PxRigidBodyPtr)this).addForce((physx.PxVec3*)(*((IntPtr*)(&force))), mode, autowake);}
        public void addTorque(physx.PxVec3 torque){((physx.PxRigidBodyPtr)this).addTorque((physx.PxVec3*)&torque);}
        public void addTorque(physx.PxVec3.Ref torque){((physx.PxRigidBodyPtr)this).addTorque((physx.PxVec3*)(*((IntPtr*)(&torque))));}
        public void addTorque(physx.PxVec3* torque){((physx.PxRigidBodyPtr)this).addTorque(torque);}
        public void addTorque(physx.PxVec3 torque, physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).addTorque((physx.PxVec3*)&torque, mode);}
        public void addTorque(physx.PxVec3.Ref torque, physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).addTorque((physx.PxVec3*)(*((IntPtr*)(&torque))), mode);}
        public void addTorque(physx.PxVec3* torque, physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).addTorque(torque, mode);}
        public void addTorque(physx.PxVec3 torque, physx.PxForceModeEnum mode, bool autowake=true){((physx.PxRigidBodyPtr)this).addTorque((physx.PxVec3*)&torque, mode, autowake);}
        public void addTorque(physx.PxVec3.Ref torque, physx.PxForceModeEnum mode, bool autowake=true){((physx.PxRigidBodyPtr)this).addTorque((physx.PxVec3*)(*((IntPtr*)(&torque))), mode, autowake);}
        public void clearForce(){((physx.PxRigidBodyPtr)this).clearForce();}
        public void clearTorque(){((physx.PxRigidBodyPtr)this).clearTorque();}
        public void setForceAndTorque(physx.PxVec3 force, physx.PxVec3 torque){((physx.PxRigidBodyPtr)this).setForceAndTorque((physx.PxVec3*)&force, (physx.PxVec3*)&torque);}
        public void setForceAndTorque(physx.PxVec3.Ref force, physx.PxVec3.Ref torque){((physx.PxRigidBodyPtr)this).setForceAndTorque((physx.PxVec3*)(*((IntPtr*)(&force))), (physx.PxVec3*)(*((IntPtr*)(&torque))));}
        public void setForceAndTorque(physx.PxVec3* force, physx.PxVec3* torque){((physx.PxRigidBodyPtr)this).setForceAndTorque(force, torque);}
        public void setForceAndTorque(physx.PxVec3 force, physx.PxVec3 torque, physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).setForceAndTorque((physx.PxVec3*)&force, (physx.PxVec3*)&torque, mode);}
        public void setForceAndTorque(physx.PxVec3.Ref force, physx.PxVec3.Ref torque, physx.PxForceModeEnum mode){((physx.PxRigidBodyPtr)this).setForceAndTorque((physx.PxVec3*)(*((IntPtr*)(&force))), (physx.PxVec3*)(*((IntPtr*)(&torque))), mode);}
        public void release(){((physx.PxRigidActorPtr)this).release();}
        public physx.PxTransform getGlobalPose(){return((physx.PxRigidActorPtr)this).getGlobalPose();}
        public void setGlobalPose(physx.PxTransform* pose, bool autowake=true){((physx.PxRigidActorPtr)this).setGlobalPose(pose, autowake);}
        public bool attachShape(physx.PxShapePtr shape){return((physx.PxRigidActorPtr)this).attachShape(shape);}
        public void detachShape(physx.PxShapePtr shape, bool wakeOnLostTouch=true){((physx.PxRigidActorPtr)this).detachShape(shape, wakeOnLostTouch);}
        public uint getNbShapes(){return((physx.PxRigidActorPtr)this).getNbShapes();}
        public uint getShapes(physx.PxShapePtr* userBuffer, uint bufferSize, uint startIndex=0){return((physx.PxRigidActorPtr)this).getShapes(userBuffer, bufferSize, startIndex);}
        public uint getNbConstraints(){return((physx.PxRigidActorPtr)this).getNbConstraints();}
        public uint getConstraints(physx.PxConstraintPtr* userBuffer, uint bufferSize, uint startIndex=0){return((physx.PxRigidActorPtr)this).getConstraints(userBuffer, bufferSize, startIndex);}
        public void setGlobalPose(physx.PxTransform pose){((physx.PxRigidActorPtr)this).setGlobalPose((physx.PxTransform*)&pose);}
        public void setGlobalPose(physx.PxTransform.Ref pose){((physx.PxRigidActorPtr)this).setGlobalPose((physx.PxTransform*)(*((IntPtr*)(&pose))));}
        public void setGlobalPose(physx.PxTransform* pose){((physx.PxRigidActorPtr)this).setGlobalPose(pose);}
        public void setGlobalPose(physx.PxTransform pose, bool autowake=true){((physx.PxRigidActorPtr)this).setGlobalPose((physx.PxTransform*)&pose, autowake);}
        public void setGlobalPose(physx.PxTransform.Ref pose, bool autowake=true){((physx.PxRigidActorPtr)this).setGlobalPose((physx.PxTransform*)(*((IntPtr*)(&pose))), autowake);}
        public void detachShape(physx.PxShapePtr shape){((physx.PxRigidActorPtr)this).detachShape(shape);}
        public uint getShapes(physx.PxShapePtr* userBuffer, uint bufferSize){return((physx.PxRigidActorPtr)this).getShapes(userBuffer, bufferSize);}
        public uint getConstraints(physx.PxConstraintPtr* userBuffer, uint bufferSize){return((physx.PxRigidActorPtr)this).getConstraints(userBuffer, bufferSize);}
        public physx.PxActorTypeEnum getType(){return((physx.PxActorPtr)this).getType();}
        public physx.PxScenePtr getScene(){return((physx.PxActorPtr)this).getScene();}
        public void setName(string name){((physx.PxActorPtr)this).setName(name);}
        public string getName(){return((physx.PxActorPtr)this).getName();}
        public physx.PxBounds3 getWorldBounds(float inflation=1.01f){return((physx.PxActorPtr)this).getWorldBounds(inflation);}
        public void setActorFlag(physx.PxActorFlagEnum flag, bool value){((physx.PxActorPtr)this).setActorFlag(flag, value);}
        public void setActorFlags(physx.PxActorFlagsPtr inFlags){((physx.PxActorPtr)this).setActorFlags(inFlags);}
        public physx.PxActorFlagsPtr getActorFlags_New(){return((physx.PxActorPtr)this).getActorFlags_New();}
        public void setDominanceGroup(byte dominanceGroup){((physx.PxActorPtr)this).setDominanceGroup(dominanceGroup);}
        public byte getDominanceGroup(){return((physx.PxActorPtr)this).getDominanceGroup();}
        public void setOwnerClient(byte inClient){((physx.PxActorPtr)this).setOwnerClient(inClient);}
        public byte getOwnerClient(){return((physx.PxActorPtr)this).getOwnerClient();}
        public physx.PxAggregatePtr getAggregate(){return((physx.PxActorPtr)this).getAggregate();}
        public physx.PxBounds3 getWorldBounds(){return((physx.PxActorPtr)this).getWorldBounds();}
        public ushort getConcreteType(){return((physx.PxBasePtr)this).getConcreteType();}
        public void setBaseFlag(physx.PxBaseFlagEnum flag, bool value){((physx.PxBasePtr)this).setBaseFlag(flag, value);}
        public void setBaseFlags(physx.PxBaseFlagsPtr inFlags){((physx.PxBasePtr)this).setBaseFlags(inFlags);}
        public physx.PxBaseFlagsPtr getBaseFlags_New(){return((physx.PxBasePtr)this).getBaseFlags_New();}
        public bool isReleasable(){return((physx.PxBasePtr)this).isReleasable();}
    }

}
