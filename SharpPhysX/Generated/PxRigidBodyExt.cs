// Generated by minBND 5.1.78.26 - Â© github.com/Alan-FGR
//DEBUG: UnitNode  - 0
//Unit PxRigidBodyExt
using System;
using System.Runtime.InteropServices;

//DEBUG: NamespaceNode physx - 44-456
public static unsafe partial class physx {
    //DEBUG: ClassNode physx::PxRigidBodyExt - 58-453
    public static unsafe partial class PxRigidBodyExt {
    //DEBUG: PtrStructCtorNode physx::PxRigidBodyExt::PxRigidBodyExt - 58
        //ERRORS OCCURED IN physx::PxRigidBodyExt::PxRigidBodyExt
        //Implicit Function/Method
        
        //DEBUG: PtrStructCtorNode physx::PxRigidBodyExt::PxRigidBodyExt - 58
        //ERRORS OCCURED IN physx::PxRigidBodyExt::PxRigidBodyExt
        //Implicit Function/Method
        
        //DEBUG: PtrStructCtorNode physx::PxRigidBodyExt::PxRigidBodyExt - 58
        //ERRORS OCCURED IN physx::PxRigidBodyExt::PxRigidBodyExt
        //Implicit Function/Method
        
        //DEBUG: MethodNode physx::PxRigidBodyExt::operator= - 58
        //ERRORS OCCURED IN physx::PxRigidBodyExt::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxRigidBodyExt::operator= - 58
        //ERRORS OCCURED IN physx::PxRigidBodyExt::operator=
        //Implicit Function/Method
        //Unbindable Operator: Equal
        
        //DEBUG: MethodNode physx::PxRigidBodyExt::~PxRigidBodyExt - 58
        //ERRORS OCCURED IN physx::PxRigidBodyExt::~PxRigidBodyExt
        //Implicit Function/Method
        //Destructor
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::updateMassAndInertia - 94
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_uint_physx_PxVec3_bool_(physx.PxRigidBodyPtr pvk_body, float* pvk_shapeDensities, uint pvk_shapeDensityCount, physx.PxVec3* pvk_massLocalPose, bool pvk_includeNonSimShapes);
        
        public static bool updateMassAndInertia(physx.PxRigidBodyPtr body, float* shapeDensities, uint shapeDensityCount, physx.PxVec3* massLocalPose, bool includeNonSimShapes=false) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: float*, man: float*, stg: Value
            float* pvk_in_shapeDensities = shapeDensities;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_shapeDensityCount = shapeDensityCount;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_massLocalPose = massLocalPose;
            //PAR nat: bool, man: bool, stg: Value
            bool pvk_in_includeNonSimShapes = includeNonSimShapes;
            return bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_uint_physx_PxVec3_bool_(pvk_in_body, pvk_in_shapeDensities, pvk_in_shapeDensityCount, pvk_in_massLocalPose, pvk_in_includeNonSimShapes);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::updateMassAndInertia - 94
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_uint_physx_PxVec3_(physx.PxRigidBodyPtr pvk_body, float* pvk_shapeDensities, uint pvk_shapeDensityCount, physx.PxVec3* pvk_massLocalPose);
        
        public static bool updateMassAndInertia(physx.PxRigidBodyPtr body, float* shapeDensities, uint shapeDensityCount, physx.PxVec3* massLocalPose) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: float*, man: float*, stg: Value
            float* pvk_in_shapeDensities = shapeDensities;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_shapeDensityCount = shapeDensityCount;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_massLocalPose = massLocalPose;
            return bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_uint_physx_PxVec3_(pvk_in_body, pvk_in_shapeDensities, pvk_in_shapeDensityCount, pvk_in_massLocalPose);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::updateMassAndInertia - 94
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_uint_(physx.PxRigidBodyPtr pvk_body, float* pvk_shapeDensities, uint pvk_shapeDensityCount);
        
        public static bool updateMassAndInertia(physx.PxRigidBodyPtr body, float* shapeDensities, uint shapeDensityCount) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: float*, man: float*, stg: Value
            float* pvk_in_shapeDensities = shapeDensities;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_shapeDensityCount = shapeDensityCount;
            return bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_uint_(pvk_in_body, pvk_in_shapeDensities, pvk_in_shapeDensityCount);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::updateMassAndInertia - 110
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_physx_PxVec3_bool_(physx.PxRigidBodyPtr pvk_body, float pvk_density, physx.PxVec3* pvk_massLocalPose, bool pvk_includeNonSimShapes);
        
        public static bool updateMassAndInertia(physx.PxRigidBodyPtr body, float density, physx.PxVec3* massLocalPose, bool includeNonSimShapes=false) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_density = density;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_massLocalPose = massLocalPose;
            //PAR nat: bool, man: bool, stg: Value
            bool pvk_in_includeNonSimShapes = includeNonSimShapes;
            return bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_physx_PxVec3_bool_(pvk_in_body, pvk_in_density, pvk_in_massLocalPose, pvk_in_includeNonSimShapes);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::updateMassAndInertia - 110
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_physx_PxVec3_(physx.PxRigidBodyPtr pvk_body, float pvk_density, physx.PxVec3* pvk_massLocalPose);
        
        public static bool updateMassAndInertia(physx.PxRigidBodyPtr body, float density, physx.PxVec3* massLocalPose) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_density = density;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_massLocalPose = massLocalPose;
            return bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_physx_PxVec3_(pvk_in_body, pvk_in_density, pvk_in_massLocalPose);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::updateMassAndInertia - 110
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_(physx.PxRigidBodyPtr pvk_body, float pvk_density);
        
        public static bool updateMassAndInertia(physx.PxRigidBodyPtr body, float density) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_density = density;
            return bool_physx_PxRigidBodyExt_updateMassAndInertia_physx_PxRigidBodyPtr_float_(pvk_in_body, pvk_in_density);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::setMassAndUpdateInertia - 134
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_uint_physx_PxVec3_bool_(physx.PxRigidBodyPtr pvk_body, float* pvk_shapeMasses, uint pvk_shapeMassCount, physx.PxVec3* pvk_massLocalPose, bool pvk_includeNonSimShapes);
        
        public static bool setMassAndUpdateInertia(physx.PxRigidBodyPtr body, float* shapeMasses, uint shapeMassCount, physx.PxVec3* massLocalPose, bool includeNonSimShapes=false) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: float*, man: float*, stg: Value
            float* pvk_in_shapeMasses = shapeMasses;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_shapeMassCount = shapeMassCount;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_massLocalPose = massLocalPose;
            //PAR nat: bool, man: bool, stg: Value
            bool pvk_in_includeNonSimShapes = includeNonSimShapes;
            return bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_uint_physx_PxVec3_bool_(pvk_in_body, pvk_in_shapeMasses, pvk_in_shapeMassCount, pvk_in_massLocalPose, pvk_in_includeNonSimShapes);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::setMassAndUpdateInertia - 134
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_uint_physx_PxVec3_(physx.PxRigidBodyPtr pvk_body, float* pvk_shapeMasses, uint pvk_shapeMassCount, physx.PxVec3* pvk_massLocalPose);
        
        public static bool setMassAndUpdateInertia(physx.PxRigidBodyPtr body, float* shapeMasses, uint shapeMassCount, physx.PxVec3* massLocalPose) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: float*, man: float*, stg: Value
            float* pvk_in_shapeMasses = shapeMasses;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_shapeMassCount = shapeMassCount;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_massLocalPose = massLocalPose;
            return bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_uint_physx_PxVec3_(pvk_in_body, pvk_in_shapeMasses, pvk_in_shapeMassCount, pvk_in_massLocalPose);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::setMassAndUpdateInertia - 134
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_uint_(physx.PxRigidBodyPtr pvk_body, float* pvk_shapeMasses, uint pvk_shapeMassCount);
        
        public static bool setMassAndUpdateInertia(physx.PxRigidBodyPtr body, float* shapeMasses, uint shapeMassCount) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: float*, man: float*, stg: Value
            float* pvk_in_shapeMasses = shapeMasses;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_shapeMassCount = shapeMassCount;
            return bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_uint_(pvk_in_body, pvk_in_shapeMasses, pvk_in_shapeMassCount);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::setMassAndUpdateInertia - 155
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_physx_PxVec3_bool_(physx.PxRigidBodyPtr pvk_body, float pvk_mass, physx.PxVec3* pvk_massLocalPose, bool pvk_includeNonSimShapes);
        
        public static bool setMassAndUpdateInertia(physx.PxRigidBodyPtr body, float mass, physx.PxVec3* massLocalPose, bool includeNonSimShapes=false) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_mass = mass;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_massLocalPose = massLocalPose;
            //PAR nat: bool, man: bool, stg: Value
            bool pvk_in_includeNonSimShapes = includeNonSimShapes;
            return bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_physx_PxVec3_bool_(pvk_in_body, pvk_in_mass, pvk_in_massLocalPose, pvk_in_includeNonSimShapes);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::setMassAndUpdateInertia - 155
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_physx_PxVec3_(physx.PxRigidBodyPtr pvk_body, float pvk_mass, physx.PxVec3* pvk_massLocalPose);
        
        public static bool setMassAndUpdateInertia(physx.PxRigidBodyPtr body, float mass, physx.PxVec3* massLocalPose) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_mass = mass;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_massLocalPose = massLocalPose;
            return bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_physx_PxVec3_(pvk_in_body, pvk_in_mass, pvk_in_massLocalPose);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::setMassAndUpdateInertia - 155
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_(physx.PxRigidBodyPtr pvk_body, float pvk_mass);
        
        public static bool setMassAndUpdateInertia(physx.PxRigidBodyPtr body, float mass) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_mass = mass;
            return bool_physx_PxRigidBodyExt_setMassAndUpdateInertia_physx_PxRigidBodyPtr_float_(pvk_in_body, pvk_in_mass);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::computeMassPropertiesFromShapes - 167
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern physx.PxMassPropertiesPtr physx_PxMassPropertiesPtr_physx_PxRigidBodyExt_computeMassPropertiesFromShapes_physx_PxShapePtr_uint_(physx.PxShapePtr* pvk_shapes, uint pvk_shapeCount);
        
        public static physx.PxMassPropertiesPtr computeMassPropertiesFromShapes_New(physx.PxShapePtr* shapes, uint shapeCount) {
            //RET nat: physx.PxMassPropertiesPtr, man: physx.PxMassPropertiesPtr, stg: PtrStruct, ret: True
            //PAR nat: PxShapePtr*, man: physx.PxShapePtr*, stg: Value
            physx.PxShapePtr* pvk_in_shapes = shapes;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_shapeCount = shapeCount;
            return physx_PxMassPropertiesPtr_physx_PxRigidBodyExt_computeMassPropertiesFromShapes_physx_PxShapePtr_uint_(pvk_in_shapes, pvk_in_shapeCount);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::addForceAtPos - 196
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_addForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_bool_(physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_force, physx.PxVec3* pvk_pos, physx.PxForceModeEnum pvk_mode, bool pvk_wakeup);
        
        public static void addForceAtPos(physx.PxRigidBodyPtr body, physx.PxVec3* force, physx.PxVec3* pos, physx.PxForceModeEnum mode, bool wakeup=true) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_force = force;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, stg: Value
            physx.PxForceModeEnum pvk_in_mode = mode;
            //PAR nat: bool, man: bool, stg: Value
            bool pvk_in_wakeup = wakeup;
            void_physx_PxRigidBodyExt_addForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_bool_(pvk_in_body, pvk_in_force, pvk_in_pos, pvk_in_mode, pvk_in_wakeup);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::addForceAtPos - 196
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_addForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_(physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_force, physx.PxVec3* pvk_pos, physx.PxForceModeEnum pvk_mode);
        
        public static void addForceAtPos(physx.PxRigidBodyPtr body, physx.PxVec3* force, physx.PxVec3* pos, physx.PxForceModeEnum mode) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_force = force;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, stg: Value
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_physx_PxRigidBodyExt_addForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_(pvk_in_body, pvk_in_force, pvk_in_pos, pvk_in_mode);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::addForceAtPos - 196
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_addForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_(physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_force, physx.PxVec3* pvk_pos);
        
        public static void addForceAtPos(physx.PxRigidBodyPtr body, physx.PxVec3* force, physx.PxVec3* pos) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_force = force;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            void_physx_PxRigidBodyExt_addForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_(pvk_in_body, pvk_in_force, pvk_in_pos);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::addForceAtLocalPos - 224
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_addForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_bool_(physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_force, physx.PxVec3* pvk_pos, physx.PxForceModeEnum pvk_mode, bool pvk_wakeup);
        
        public static void addForceAtLocalPos(physx.PxRigidBodyPtr body, physx.PxVec3* force, physx.PxVec3* pos, physx.PxForceModeEnum mode, bool wakeup=true) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_force = force;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, stg: Value
            physx.PxForceModeEnum pvk_in_mode = mode;
            //PAR nat: bool, man: bool, stg: Value
            bool pvk_in_wakeup = wakeup;
            void_physx_PxRigidBodyExt_addForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_bool_(pvk_in_body, pvk_in_force, pvk_in_pos, pvk_in_mode, pvk_in_wakeup);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::addForceAtLocalPos - 224
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_addForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_(physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_force, physx.PxVec3* pvk_pos, physx.PxForceModeEnum pvk_mode);
        
        public static void addForceAtLocalPos(physx.PxRigidBodyPtr body, physx.PxVec3* force, physx.PxVec3* pos, physx.PxForceModeEnum mode) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_force = force;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, stg: Value
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_physx_PxRigidBodyExt_addForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_(pvk_in_body, pvk_in_force, pvk_in_pos, pvk_in_mode);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::addForceAtLocalPos - 224
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_addForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_(physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_force, physx.PxVec3* pvk_pos);
        
        public static void addForceAtLocalPos(physx.PxRigidBodyPtr body, physx.PxVec3* force, physx.PxVec3* pos) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_force = force;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            void_physx_PxRigidBodyExt_addForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_(pvk_in_body, pvk_in_force, pvk_in_pos);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::addLocalForceAtPos - 252
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_addLocalForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_bool_(physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_force, physx.PxVec3* pvk_pos, physx.PxForceModeEnum pvk_mode, bool pvk_wakeup);
        
        public static void addLocalForceAtPos(physx.PxRigidBodyPtr body, physx.PxVec3* force, physx.PxVec3* pos, physx.PxForceModeEnum mode, bool wakeup=true) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_force = force;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, stg: Value
            physx.PxForceModeEnum pvk_in_mode = mode;
            //PAR nat: bool, man: bool, stg: Value
            bool pvk_in_wakeup = wakeup;
            void_physx_PxRigidBodyExt_addLocalForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_bool_(pvk_in_body, pvk_in_force, pvk_in_pos, pvk_in_mode, pvk_in_wakeup);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::addLocalForceAtPos - 252
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_addLocalForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_(physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_force, physx.PxVec3* pvk_pos, physx.PxForceModeEnum pvk_mode);
        
        public static void addLocalForceAtPos(physx.PxRigidBodyPtr body, physx.PxVec3* force, physx.PxVec3* pos, physx.PxForceModeEnum mode) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_force = force;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, stg: Value
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_physx_PxRigidBodyExt_addLocalForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_(pvk_in_body, pvk_in_force, pvk_in_pos, pvk_in_mode);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::addLocalForceAtPos - 252
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_addLocalForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_(physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_force, physx.PxVec3* pvk_pos);
        
        public static void addLocalForceAtPos(physx.PxRigidBodyPtr body, physx.PxVec3* force, physx.PxVec3* pos) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_force = force;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            void_physx_PxRigidBodyExt_addLocalForceAtPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_(pvk_in_body, pvk_in_force, pvk_in_pos);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::addLocalForceAtLocalPos - 280
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_addLocalForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_bool_(physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_force, physx.PxVec3* pvk_pos, physx.PxForceModeEnum pvk_mode, bool pvk_wakeup);
        
        public static void addLocalForceAtLocalPos(physx.PxRigidBodyPtr body, physx.PxVec3* force, physx.PxVec3* pos, physx.PxForceModeEnum mode, bool wakeup=true) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_force = force;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, stg: Value
            physx.PxForceModeEnum pvk_in_mode = mode;
            //PAR nat: bool, man: bool, stg: Value
            bool pvk_in_wakeup = wakeup;
            void_physx_PxRigidBodyExt_addLocalForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_bool_(pvk_in_body, pvk_in_force, pvk_in_pos, pvk_in_mode, pvk_in_wakeup);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::addLocalForceAtLocalPos - 280
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_addLocalForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_(physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_force, physx.PxVec3* pvk_pos, physx.PxForceModeEnum pvk_mode);
        
        public static void addLocalForceAtLocalPos(physx.PxRigidBodyPtr body, physx.PxVec3* force, physx.PxVec3* pos, physx.PxForceModeEnum mode) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_force = force;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            //PAR nat: physx::PxForceMode::Enum, man: physx.PxForceModeEnum, stg: Value
            physx.PxForceModeEnum pvk_in_mode = mode;
            void_physx_PxRigidBodyExt_addLocalForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxForceModeEnum_(pvk_in_body, pvk_in_force, pvk_in_pos, pvk_in_mode);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::addLocalForceAtLocalPos - 280
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_addLocalForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_(physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_force, physx.PxVec3* pvk_pos);
        
        public static void addLocalForceAtLocalPos(physx.PxRigidBodyPtr body, physx.PxVec3* force, physx.PxVec3* pos) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_force = force;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            void_physx_PxRigidBodyExt_addLocalForceAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_(pvk_in_body, pvk_in_force, pvk_in_pos);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::getVelocityAtPos - 292
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_physx_PxRigidBodyExt_getVelocityAtPos_physx_PxRigidBodyPtr_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_pos);
        
        public static physx.PxVec3 getVelocityAtPos(physx.PxRigidBodyPtr body, physx.PxVec3* pos) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            physx_PxVec3_physx_PxRigidBodyExt_getVelocityAtPos_physx_PxRigidBodyPtr_physx_PxVec3_(&RetRef, pvk_in_body, pvk_in_pos);
            return RetRef;
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::getLocalVelocityAtLocalPos - 304
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_physx_PxRigidBodyExt_getLocalVelocityAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_pos);
        
        public static physx.PxVec3 getLocalVelocityAtLocalPos(physx.PxRigidBodyPtr body, physx.PxVec3* pos) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            physx_PxVec3_physx_PxRigidBodyExt_getLocalVelocityAtLocalPos_physx_PxRigidBodyPtr_physx_PxVec3_(&RetRef, pvk_in_body, pvk_in_pos);
            return RetRef;
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::getVelocityAtOffset - 316
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void physx_PxVec3_physx_PxRigidBodyExt_getVelocityAtOffset_physx_PxRigidBodyPtr_physx_PxVec3_(physx.PxVec3* RetRef, physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_pos);
        
        public static physx.PxVec3 getVelocityAtOffset(physx.PxRigidBodyPtr body, physx.PxVec3* pos) {
            //RET nat: physx.PxVec3, man: physx.PxVec3, stg: Blittable, ret: False
            physx.PxVec3 RetRef;
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_pos = pos;
            physx_PxVec3_physx_PxRigidBodyExt_getVelocityAtOffset_physx_PxRigidBodyPtr_physx_PxVec3_(&RetRef, pvk_in_body, pvk_in_pos);
            return RetRef;
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::linearSweepSingle - 347-354
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_float_C_C(physx.PxRigidBodyPtr pvk_body, physx.PxScenePtr pvk_scene, physx.PxVec3* pvk_unitDir, float pvk_distance, PxHitFlagsPtr pvk_outputFlags, physx.PxSweepHitPtr pvk_closestHit, uint* pvk_shapeIndex, physx.PxQueryFilterDataPtr pvk_filterData, physx.PxQueryFilterCallbackPtr pvk_filterCall, physx.PxQueryCachePtr pvk_cache, float pvk_inflation);
        
        public static bool linearSweepSingle(physx.PxRigidBodyPtr body, physx.PxScenePtr scene, physx.PxVec3* unitDir, float distance, PxHitFlagsPtr outputFlags, physx.PxSweepHitPtr closestHit, uint* shapeIndex, physx.PxQueryFilterDataPtr filterData, physx.PxQueryFilterCallbackPtr filterCall=default(physx.PxQueryFilterCallbackPtr), physx.PxQueryCachePtr cache=default(physx.PxQueryCachePtr), float inflation=0f) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: PxScenePtr, man: physx.PxScenePtr, stg: PtrStruct
            physx.PxScenePtr pvk_in_scene = scene;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_unitDir = unitDir;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_distance = distance;
            //PAR nat: PxHitFlagsPtr, man: PxHitFlagsPtr, stg: PtrStruct
            PxHitFlagsPtr pvk_in_outputFlags = outputFlags;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_closestHit = closestHit;
            //PAR nat: unsigned int*, man: uint*, stg: Value
            uint* pvk_in_shapeIndex = shapeIndex;
            //PAR nat: PxQueryFilterDataPtr, man: physx.PxQueryFilterDataPtr, stg: PtrStruct
            physx.PxQueryFilterDataPtr pvk_in_filterData = filterData;
            //PAR nat: PxQueryFilterCallbackPtr, man: physx.PxQueryFilterCallbackPtr, stg: PtrStruct
            physx.PxQueryFilterCallbackPtr pvk_in_filterCall = filterCall;
            //PAR nat: PxQueryCachePtr, man: physx.PxQueryCachePtr, stg: PtrStruct
            physx.PxQueryCachePtr pvk_in_cache = cache;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_inflation = inflation;
            return bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_float_C_C(pvk_in_body, pvk_in_scene, pvk_in_unitDir, pvk_in_distance, pvk_in_outputFlags, pvk_in_closestHit, pvk_in_shapeIndex, pvk_in_filterData, pvk_in_filterCall, pvk_in_cache, pvk_in_inflation);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::linearSweepSingle - 347-354
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_C_(physx.PxRigidBodyPtr pvk_body, physx.PxScenePtr pvk_scene, physx.PxVec3* pvk_unitDir, float pvk_distance, PxHitFlagsPtr pvk_outputFlags, physx.PxSweepHitPtr pvk_closestHit, uint* pvk_shapeIndex, physx.PxQueryFilterDataPtr pvk_filterData, physx.PxQueryFilterCallbackPtr pvk_filterCall, physx.PxQueryCachePtr pvk_cache);
        
        public static bool linearSweepSingle(physx.PxRigidBodyPtr body, physx.PxScenePtr scene, physx.PxVec3* unitDir, float distance, PxHitFlagsPtr outputFlags, physx.PxSweepHitPtr closestHit, uint* shapeIndex, physx.PxQueryFilterDataPtr filterData, physx.PxQueryFilterCallbackPtr filterCall=default(physx.PxQueryFilterCallbackPtr), physx.PxQueryCachePtr cache=default(physx.PxQueryCachePtr)) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: PxScenePtr, man: physx.PxScenePtr, stg: PtrStruct
            physx.PxScenePtr pvk_in_scene = scene;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_unitDir = unitDir;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_distance = distance;
            //PAR nat: PxHitFlagsPtr, man: PxHitFlagsPtr, stg: PtrStruct
            PxHitFlagsPtr pvk_in_outputFlags = outputFlags;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_closestHit = closestHit;
            //PAR nat: unsigned int*, man: uint*, stg: Value
            uint* pvk_in_shapeIndex = shapeIndex;
            //PAR nat: PxQueryFilterDataPtr, man: physx.PxQueryFilterDataPtr, stg: PtrStruct
            physx.PxQueryFilterDataPtr pvk_in_filterData = filterData;
            //PAR nat: PxQueryFilterCallbackPtr, man: physx.PxQueryFilterCallbackPtr, stg: PtrStruct
            physx.PxQueryFilterCallbackPtr pvk_in_filterCall = filterCall;
            //PAR nat: PxQueryCachePtr, man: physx.PxQueryCachePtr, stg: PtrStruct
            physx.PxQueryCachePtr pvk_in_cache = cache;
            return bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_C_(pvk_in_body, pvk_in_scene, pvk_in_unitDir, pvk_in_distance, pvk_in_outputFlags, pvk_in_closestHit, pvk_in_shapeIndex, pvk_in_filterData, pvk_in_filterCall, pvk_in_cache);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::linearSweepSingle - 347-354
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_C_(physx.PxRigidBodyPtr pvk_body, physx.PxScenePtr pvk_scene, physx.PxVec3* pvk_unitDir, float pvk_distance, PxHitFlagsPtr pvk_outputFlags, physx.PxSweepHitPtr pvk_closestHit, uint* pvk_shapeIndex, physx.PxQueryFilterDataPtr pvk_filterData, physx.PxQueryFilterCallbackPtr pvk_filterCall);
        
        public static bool linearSweepSingle(physx.PxRigidBodyPtr body, physx.PxScenePtr scene, physx.PxVec3* unitDir, float distance, PxHitFlagsPtr outputFlags, physx.PxSweepHitPtr closestHit, uint* shapeIndex, physx.PxQueryFilterDataPtr filterData, physx.PxQueryFilterCallbackPtr filterCall=default(physx.PxQueryFilterCallbackPtr)) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: PxScenePtr, man: physx.PxScenePtr, stg: PtrStruct
            physx.PxScenePtr pvk_in_scene = scene;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_unitDir = unitDir;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_distance = distance;
            //PAR nat: PxHitFlagsPtr, man: PxHitFlagsPtr, stg: PtrStruct
            PxHitFlagsPtr pvk_in_outputFlags = outputFlags;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_closestHit = closestHit;
            //PAR nat: unsigned int*, man: uint*, stg: Value
            uint* pvk_in_shapeIndex = shapeIndex;
            //PAR nat: PxQueryFilterDataPtr, man: physx.PxQueryFilterDataPtr, stg: PtrStruct
            physx.PxQueryFilterDataPtr pvk_in_filterData = filterData;
            //PAR nat: PxQueryFilterCallbackPtr, man: physx.PxQueryFilterCallbackPtr, stg: PtrStruct
            physx.PxQueryFilterCallbackPtr pvk_in_filterCall = filterCall;
            return bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_C_(pvk_in_body, pvk_in_scene, pvk_in_unitDir, pvk_in_distance, pvk_in_outputFlags, pvk_in_closestHit, pvk_in_shapeIndex, pvk_in_filterData, pvk_in_filterCall);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::linearSweepSingle - 347-354
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_physx_PxQueryFilterDataPtr_C_(physx.PxRigidBodyPtr pvk_body, physx.PxScenePtr pvk_scene, physx.PxVec3* pvk_unitDir, float pvk_distance, PxHitFlagsPtr pvk_outputFlags, physx.PxSweepHitPtr pvk_closestHit, uint* pvk_shapeIndex, physx.PxQueryFilterDataPtr pvk_filterData);
        
        public static bool linearSweepSingle(physx.PxRigidBodyPtr body, physx.PxScenePtr scene, physx.PxVec3* unitDir, float distance, PxHitFlagsPtr outputFlags, physx.PxSweepHitPtr closestHit, uint* shapeIndex, physx.PxQueryFilterDataPtr filterData) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: PxScenePtr, man: physx.PxScenePtr, stg: PtrStruct
            physx.PxScenePtr pvk_in_scene = scene;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_unitDir = unitDir;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_distance = distance;
            //PAR nat: PxHitFlagsPtr, man: PxHitFlagsPtr, stg: PtrStruct
            PxHitFlagsPtr pvk_in_outputFlags = outputFlags;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_closestHit = closestHit;
            //PAR nat: unsigned int*, man: uint*, stg: Value
            uint* pvk_in_shapeIndex = shapeIndex;
            //PAR nat: PxQueryFilterDataPtr, man: physx.PxQueryFilterDataPtr, stg: PtrStruct
            physx.PxQueryFilterDataPtr pvk_in_filterData = filterData;
            return bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_physx_PxQueryFilterDataPtr_C_(pvk_in_body, pvk_in_scene, pvk_in_unitDir, pvk_in_distance, pvk_in_outputFlags, pvk_in_closestHit, pvk_in_shapeIndex, pvk_in_filterData);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::linearSweepSingle - 347-354
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern bool bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_C_(physx.PxRigidBodyPtr pvk_body, physx.PxScenePtr pvk_scene, physx.PxVec3* pvk_unitDir, float pvk_distance, PxHitFlagsPtr pvk_outputFlags, physx.PxSweepHitPtr pvk_closestHit, uint* pvk_shapeIndex);
        
        public static bool linearSweepSingle(physx.PxRigidBodyPtr body, physx.PxScenePtr scene, physx.PxVec3* unitDir, float distance, PxHitFlagsPtr outputFlags, physx.PxSweepHitPtr closestHit, uint* shapeIndex) {
            //RET nat: bool, man: bool, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: PxScenePtr, man: physx.PxScenePtr, stg: PtrStruct
            physx.PxScenePtr pvk_in_scene = scene;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_unitDir = unitDir;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_distance = distance;
            //PAR nat: PxHitFlagsPtr, man: PxHitFlagsPtr, stg: PtrStruct
            PxHitFlagsPtr pvk_in_outputFlags = outputFlags;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_closestHit = closestHit;
            //PAR nat: unsigned int*, man: uint*, stg: Value
            uint* pvk_in_shapeIndex = shapeIndex;
            return bool_physx_PxRigidBodyExt_linearSweepSingle_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_C_(pvk_in_body, pvk_in_scene, pvk_in_unitDir, pvk_in_distance, pvk_in_outputFlags, pvk_in_closestHit, pvk_in_shapeIndex);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::linearSweepMultiple - 388-395
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_float_C_C(physx.PxRigidBodyPtr pvk_body, physx.PxScenePtr pvk_scene, physx.PxVec3* pvk_unitDir, float pvk_distance, PxHitFlagsPtr pvk_outputFlags, physx.PxSweepHitPtr pvk_touchHitBuffer, uint* pvk_touchHitShapeIndices, uint pvk_touchHitBufferSize, physx.PxSweepHitPtr pvk_block, int* pvk_blockingShapeIndex, bool* pvk_overflow, physx.PxQueryFilterDataPtr pvk_filterData, physx.PxQueryFilterCallbackPtr pvk_filterCall, physx.PxQueryCachePtr pvk_cache, float pvk_inflation);
        
        public static uint linearSweepMultiple(physx.PxRigidBodyPtr body, physx.PxScenePtr scene, physx.PxVec3* unitDir, float distance, PxHitFlagsPtr outputFlags, physx.PxSweepHitPtr touchHitBuffer, uint* touchHitShapeIndices, uint touchHitBufferSize, physx.PxSweepHitPtr block, int* blockingShapeIndex, bool* overflow, physx.PxQueryFilterDataPtr filterData, physx.PxQueryFilterCallbackPtr filterCall=default(physx.PxQueryFilterCallbackPtr), physx.PxQueryCachePtr cache=default(physx.PxQueryCachePtr), float inflation=0f) {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: PxScenePtr, man: physx.PxScenePtr, stg: PtrStruct
            physx.PxScenePtr pvk_in_scene = scene;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_unitDir = unitDir;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_distance = distance;
            //PAR nat: PxHitFlagsPtr, man: PxHitFlagsPtr, stg: PtrStruct
            PxHitFlagsPtr pvk_in_outputFlags = outputFlags;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_touchHitBuffer = touchHitBuffer;
            //PAR nat: unsigned int*, man: uint*, stg: Value
            uint* pvk_in_touchHitShapeIndices = touchHitShapeIndices;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_touchHitBufferSize = touchHitBufferSize;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_block = block;
            //PAR nat: int*, man: int*, stg: Value
            int* pvk_in_blockingShapeIndex = blockingShapeIndex;
            //PAR nat: bool*, man: bool*, stg: Value
            bool* pvk_in_overflow = overflow;
            //PAR nat: PxQueryFilterDataPtr, man: physx.PxQueryFilterDataPtr, stg: PtrStruct
            physx.PxQueryFilterDataPtr pvk_in_filterData = filterData;
            //PAR nat: PxQueryFilterCallbackPtr, man: physx.PxQueryFilterCallbackPtr, stg: PtrStruct
            physx.PxQueryFilterCallbackPtr pvk_in_filterCall = filterCall;
            //PAR nat: PxQueryCachePtr, man: physx.PxQueryCachePtr, stg: PtrStruct
            physx.PxQueryCachePtr pvk_in_cache = cache;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_inflation = inflation;
            return uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_float_C_C(pvk_in_body, pvk_in_scene, pvk_in_unitDir, pvk_in_distance, pvk_in_outputFlags, pvk_in_touchHitBuffer, pvk_in_touchHitShapeIndices, pvk_in_touchHitBufferSize, pvk_in_block, pvk_in_blockingShapeIndex, pvk_in_overflow, pvk_in_filterData, pvk_in_filterCall, pvk_in_cache, pvk_in_inflation);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::linearSweepMultiple - 388-395
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_C_(physx.PxRigidBodyPtr pvk_body, physx.PxScenePtr pvk_scene, physx.PxVec3* pvk_unitDir, float pvk_distance, PxHitFlagsPtr pvk_outputFlags, physx.PxSweepHitPtr pvk_touchHitBuffer, uint* pvk_touchHitShapeIndices, uint pvk_touchHitBufferSize, physx.PxSweepHitPtr pvk_block, int* pvk_blockingShapeIndex, bool* pvk_overflow, physx.PxQueryFilterDataPtr pvk_filterData, physx.PxQueryFilterCallbackPtr pvk_filterCall, physx.PxQueryCachePtr pvk_cache);
        
        public static uint linearSweepMultiple(physx.PxRigidBodyPtr body, physx.PxScenePtr scene, physx.PxVec3* unitDir, float distance, PxHitFlagsPtr outputFlags, physx.PxSweepHitPtr touchHitBuffer, uint* touchHitShapeIndices, uint touchHitBufferSize, physx.PxSweepHitPtr block, int* blockingShapeIndex, bool* overflow, physx.PxQueryFilterDataPtr filterData, physx.PxQueryFilterCallbackPtr filterCall=default(physx.PxQueryFilterCallbackPtr), physx.PxQueryCachePtr cache=default(physx.PxQueryCachePtr)) {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: PxScenePtr, man: physx.PxScenePtr, stg: PtrStruct
            physx.PxScenePtr pvk_in_scene = scene;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_unitDir = unitDir;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_distance = distance;
            //PAR nat: PxHitFlagsPtr, man: PxHitFlagsPtr, stg: PtrStruct
            PxHitFlagsPtr pvk_in_outputFlags = outputFlags;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_touchHitBuffer = touchHitBuffer;
            //PAR nat: unsigned int*, man: uint*, stg: Value
            uint* pvk_in_touchHitShapeIndices = touchHitShapeIndices;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_touchHitBufferSize = touchHitBufferSize;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_block = block;
            //PAR nat: int*, man: int*, stg: Value
            int* pvk_in_blockingShapeIndex = blockingShapeIndex;
            //PAR nat: bool*, man: bool*, stg: Value
            bool* pvk_in_overflow = overflow;
            //PAR nat: PxQueryFilterDataPtr, man: physx.PxQueryFilterDataPtr, stg: PtrStruct
            physx.PxQueryFilterDataPtr pvk_in_filterData = filterData;
            //PAR nat: PxQueryFilterCallbackPtr, man: physx.PxQueryFilterCallbackPtr, stg: PtrStruct
            physx.PxQueryFilterCallbackPtr pvk_in_filterCall = filterCall;
            //PAR nat: PxQueryCachePtr, man: physx.PxQueryCachePtr, stg: PtrStruct
            physx.PxQueryCachePtr pvk_in_cache = cache;
            return uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_physx_PxQueryCachePtr_C_(pvk_in_body, pvk_in_scene, pvk_in_unitDir, pvk_in_distance, pvk_in_outputFlags, pvk_in_touchHitBuffer, pvk_in_touchHitShapeIndices, pvk_in_touchHitBufferSize, pvk_in_block, pvk_in_blockingShapeIndex, pvk_in_overflow, pvk_in_filterData, pvk_in_filterCall, pvk_in_cache);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::linearSweepMultiple - 388-395
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_C_(physx.PxRigidBodyPtr pvk_body, physx.PxScenePtr pvk_scene, physx.PxVec3* pvk_unitDir, float pvk_distance, PxHitFlagsPtr pvk_outputFlags, physx.PxSweepHitPtr pvk_touchHitBuffer, uint* pvk_touchHitShapeIndices, uint pvk_touchHitBufferSize, physx.PxSweepHitPtr pvk_block, int* pvk_blockingShapeIndex, bool* pvk_overflow, physx.PxQueryFilterDataPtr pvk_filterData, physx.PxQueryFilterCallbackPtr pvk_filterCall);
        
        public static uint linearSweepMultiple(physx.PxRigidBodyPtr body, physx.PxScenePtr scene, physx.PxVec3* unitDir, float distance, PxHitFlagsPtr outputFlags, physx.PxSweepHitPtr touchHitBuffer, uint* touchHitShapeIndices, uint touchHitBufferSize, physx.PxSweepHitPtr block, int* blockingShapeIndex, bool* overflow, physx.PxQueryFilterDataPtr filterData, physx.PxQueryFilterCallbackPtr filterCall=default(physx.PxQueryFilterCallbackPtr)) {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: PxScenePtr, man: physx.PxScenePtr, stg: PtrStruct
            physx.PxScenePtr pvk_in_scene = scene;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_unitDir = unitDir;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_distance = distance;
            //PAR nat: PxHitFlagsPtr, man: PxHitFlagsPtr, stg: PtrStruct
            PxHitFlagsPtr pvk_in_outputFlags = outputFlags;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_touchHitBuffer = touchHitBuffer;
            //PAR nat: unsigned int*, man: uint*, stg: Value
            uint* pvk_in_touchHitShapeIndices = touchHitShapeIndices;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_touchHitBufferSize = touchHitBufferSize;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_block = block;
            //PAR nat: int*, man: int*, stg: Value
            int* pvk_in_blockingShapeIndex = blockingShapeIndex;
            //PAR nat: bool*, man: bool*, stg: Value
            bool* pvk_in_overflow = overflow;
            //PAR nat: PxQueryFilterDataPtr, man: physx.PxQueryFilterDataPtr, stg: PtrStruct
            physx.PxQueryFilterDataPtr pvk_in_filterData = filterData;
            //PAR nat: PxQueryFilterCallbackPtr, man: physx.PxQueryFilterCallbackPtr, stg: PtrStruct
            physx.PxQueryFilterCallbackPtr pvk_in_filterCall = filterCall;
            return uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_physx_PxQueryFilterDataPtr_physx_PxQueryFilterCallbackPtr_C_(pvk_in_body, pvk_in_scene, pvk_in_unitDir, pvk_in_distance, pvk_in_outputFlags, pvk_in_touchHitBuffer, pvk_in_touchHitShapeIndices, pvk_in_touchHitBufferSize, pvk_in_block, pvk_in_blockingShapeIndex, pvk_in_overflow, pvk_in_filterData, pvk_in_filterCall);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::linearSweepMultiple - 388-395
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_physx_PxQueryFilterDataPtr_C_(physx.PxRigidBodyPtr pvk_body, physx.PxScenePtr pvk_scene, physx.PxVec3* pvk_unitDir, float pvk_distance, PxHitFlagsPtr pvk_outputFlags, physx.PxSweepHitPtr pvk_touchHitBuffer, uint* pvk_touchHitShapeIndices, uint pvk_touchHitBufferSize, physx.PxSweepHitPtr pvk_block, int* pvk_blockingShapeIndex, bool* pvk_overflow, physx.PxQueryFilterDataPtr pvk_filterData);
        
        public static uint linearSweepMultiple(physx.PxRigidBodyPtr body, physx.PxScenePtr scene, physx.PxVec3* unitDir, float distance, PxHitFlagsPtr outputFlags, physx.PxSweepHitPtr touchHitBuffer, uint* touchHitShapeIndices, uint touchHitBufferSize, physx.PxSweepHitPtr block, int* blockingShapeIndex, bool* overflow, physx.PxQueryFilterDataPtr filterData) {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: PxScenePtr, man: physx.PxScenePtr, stg: PtrStruct
            physx.PxScenePtr pvk_in_scene = scene;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_unitDir = unitDir;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_distance = distance;
            //PAR nat: PxHitFlagsPtr, man: PxHitFlagsPtr, stg: PtrStruct
            PxHitFlagsPtr pvk_in_outputFlags = outputFlags;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_touchHitBuffer = touchHitBuffer;
            //PAR nat: unsigned int*, man: uint*, stg: Value
            uint* pvk_in_touchHitShapeIndices = touchHitShapeIndices;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_touchHitBufferSize = touchHitBufferSize;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_block = block;
            //PAR nat: int*, man: int*, stg: Value
            int* pvk_in_blockingShapeIndex = blockingShapeIndex;
            //PAR nat: bool*, man: bool*, stg: Value
            bool* pvk_in_overflow = overflow;
            //PAR nat: PxQueryFilterDataPtr, man: physx.PxQueryFilterDataPtr, stg: PtrStruct
            physx.PxQueryFilterDataPtr pvk_in_filterData = filterData;
            return uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_physx_PxQueryFilterDataPtr_C_(pvk_in_body, pvk_in_scene, pvk_in_unitDir, pvk_in_distance, pvk_in_outputFlags, pvk_in_touchHitBuffer, pvk_in_touchHitShapeIndices, pvk_in_touchHitBufferSize, pvk_in_block, pvk_in_blockingShapeIndex, pvk_in_overflow, pvk_in_filterData);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::linearSweepMultiple - 388-395
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern uint uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_C_(physx.PxRigidBodyPtr pvk_body, physx.PxScenePtr pvk_scene, physx.PxVec3* pvk_unitDir, float pvk_distance, PxHitFlagsPtr pvk_outputFlags, physx.PxSweepHitPtr pvk_touchHitBuffer, uint* pvk_touchHitShapeIndices, uint pvk_touchHitBufferSize, physx.PxSweepHitPtr pvk_block, int* pvk_blockingShapeIndex, bool* pvk_overflow);
        
        public static uint linearSweepMultiple(physx.PxRigidBodyPtr body, physx.PxScenePtr scene, physx.PxVec3* unitDir, float distance, PxHitFlagsPtr outputFlags, physx.PxSweepHitPtr touchHitBuffer, uint* touchHitShapeIndices, uint touchHitBufferSize, physx.PxSweepHitPtr block, int* blockingShapeIndex, bool* overflow) {
            //RET nat: uint, man: uint, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: PxScenePtr, man: physx.PxScenePtr, stg: PtrStruct
            physx.PxScenePtr pvk_in_scene = scene;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_unitDir = unitDir;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_distance = distance;
            //PAR nat: PxHitFlagsPtr, man: PxHitFlagsPtr, stg: PtrStruct
            PxHitFlagsPtr pvk_in_outputFlags = outputFlags;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_touchHitBuffer = touchHitBuffer;
            //PAR nat: unsigned int*, man: uint*, stg: Value
            uint* pvk_in_touchHitShapeIndices = touchHitShapeIndices;
            //PAR nat: unsigned int, man: uint, stg: Value
            uint pvk_in_touchHitBufferSize = touchHitBufferSize;
            //PAR nat: PxSweepHitPtr, man: physx.PxSweepHitPtr, stg: PtrStruct
            physx.PxSweepHitPtr pvk_in_block = block;
            //PAR nat: int*, man: int*, stg: Value
            int* pvk_in_blockingShapeIndex = blockingShapeIndex;
            //PAR nat: bool*, man: bool*, stg: Value
            bool* pvk_in_overflow = overflow;
            return uint_physx_PxRigidBodyExt_linearSweepMultiple_physx_PxRigidBodyPtr_physx_PxScenePtr_physx_PxVec3_float_PxHitFlagsPtr_physx_PxSweepHitPtr_uint_uint_physx_PxSweepHitPtr_int_bool_C_(pvk_in_body, pvk_in_scene, pvk_in_unitDir, pvk_in_distance, pvk_in_outputFlags, pvk_in_touchHitBuffer, pvk_in_touchHitShapeIndices, pvk_in_touchHitBufferSize, pvk_in_block, pvk_in_blockingShapeIndex, pvk_in_overflow);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::computeVelocityDeltaFromImpulse - 413
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_computeVelocityDeltaFromImpulse_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxVec3_physx_PxVec3_(physx.PxRigidBodyPtr pvk_body, physx.PxVec3* pvk_impulsiveForce, physx.PxVec3* pvk_impulsiveTorque, physx.PxVec3* pvk_deltaLinearVelocity, physx.PxVec3* pvk_deltaAngularVelocity);
        
        public static void computeVelocityDeltaFromImpulse(physx.PxRigidBodyPtr body, physx.PxVec3* impulsiveForce, physx.PxVec3* impulsiveTorque, physx.PxVec3* deltaLinearVelocity, physx.PxVec3* deltaAngularVelocity) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_impulsiveForce = impulsiveForce;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_impulsiveTorque = impulsiveTorque;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_deltaLinearVelocity = deltaLinearVelocity;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_deltaAngularVelocity = deltaAngularVelocity;
            void_physx_PxRigidBodyExt_computeVelocityDeltaFromImpulse_physx_PxRigidBodyPtr_physx_PxVec3_physx_PxVec3_physx_PxVec3_physx_PxVec3_(pvk_in_body, pvk_in_impulsiveForce, pvk_in_impulsiveTorque, pvk_in_deltaLinearVelocity, pvk_in_deltaAngularVelocity);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::computeVelocityDeltaFromImpulse - 432-433
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_computeVelocityDeltaFromImpulse_physx_PxRigidBodyPtr_physx_PxTransform_physx_PxVec3_physx_PxVec3_float_float_physx_PxVec3_physx_PxVec3_CC_(physx.PxRigidBodyPtr pvk_body, physx.PxTransform* pvk_globalPose, physx.PxVec3* pvk_point, physx.PxVec3* pvk_impulse, float pvk_invMassScale, float pvk_invInertiaScale, physx.PxVec3* pvk_deltaLinearVelocity, physx.PxVec3* pvk_deltaAngularVelocity);
        
        public static void computeVelocityDeltaFromImpulse(physx.PxRigidBodyPtr body, physx.PxTransform* globalPose, physx.PxVec3* point, physx.PxVec3* impulse, float invMassScale, float invInertiaScale, physx.PxVec3* deltaLinearVelocity, physx.PxVec3* deltaAngularVelocity) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxTransform*, man: physx.PxTransform*, stg: Value
            physx.PxTransform* pvk_in_globalPose = globalPose;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_point = point;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_impulse = impulse;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_invMassScale = invMassScale;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_invInertiaScale = invInertiaScale;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_deltaLinearVelocity = deltaLinearVelocity;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_deltaAngularVelocity = deltaAngularVelocity;
            void_physx_PxRigidBodyExt_computeVelocityDeltaFromImpulse_physx_PxRigidBodyPtr_physx_PxTransform_physx_PxVec3_physx_PxVec3_float_float_physx_PxVec3_physx_PxVec3_CC_(pvk_in_body, pvk_in_globalPose, pvk_in_point, pvk_in_impulse, pvk_in_invMassScale, pvk_in_invInertiaScale, pvk_in_deltaLinearVelocity, pvk_in_deltaAngularVelocity);
        }
        
        //DEBUG: FunctionNode physx::PxRigidBodyExt::computeLinearAngularImpulse - 449-450
        [DllImport(SharpPhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        static extern void void_physx_PxRigidBodyExt_computeLinearAngularImpulse_physx_PxRigidBodyPtr_physx_PxTransform_physx_PxVec3_physx_PxVec3_float_float_physx_PxVec3_physx_PxVec3_CC_(physx.PxRigidBodyPtr pvk_body, physx.PxTransform* pvk_globalPose, physx.PxVec3* pvk_point, physx.PxVec3* pvk_impulse, float pvk_invMassScale, float pvk_invInertiaScale, physx.PxVec3* pvk_linearImpulse, physx.PxVec3* pvk_angularImpulse);
        
        public static void computeLinearAngularImpulse(physx.PxRigidBodyPtr body, physx.PxTransform* globalPose, physx.PxVec3* point, physx.PxVec3* impulse, float invMassScale, float invInertiaScale, physx.PxVec3* linearImpulse, physx.PxVec3* angularImpulse) {
            //RET nat: void, man: void, stg: Value, ret: True
            //PAR nat: PxRigidBodyPtr, man: physx.PxRigidBodyPtr, stg: PtrStruct
            physx.PxRigidBodyPtr pvk_in_body = body;
            //PAR nat: physx::PxTransform*, man: physx.PxTransform*, stg: Value
            physx.PxTransform* pvk_in_globalPose = globalPose;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_point = point;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_impulse = impulse;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_invMassScale = invMassScale;
            //PAR nat: float, man: float, stg: Value
            float pvk_in_invInertiaScale = invInertiaScale;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_linearImpulse = linearImpulse;
            //PAR nat: physx::PxVec3*, man: physx.PxVec3*, stg: Value
            physx.PxVec3* pvk_in_angularImpulse = angularImpulse;
            void_physx_PxRigidBodyExt_computeLinearAngularImpulse_physx_PxRigidBodyPtr_physx_PxTransform_physx_PxVec3_physx_PxVec3_float_float_physx_PxVec3_physx_PxVec3_CC_(pvk_in_body, pvk_in_globalPose, pvk_in_point, pvk_in_impulse, pvk_in_invMassScale, pvk_in_invInertiaScale, pvk_in_linearImpulse, pvk_in_angularImpulse);
        }
    }
    
}
