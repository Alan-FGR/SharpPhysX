//Generated by MinBinder.
using System;
using System.Runtime.InteropServices;
using PxBaseFlags = System.UInt32;
using PxActorFlags = System.UInt32;

[Flags]
public enum PxMeshGeometryFlag : int {
 eDOUBLE_SIDED = (1<<1),

}

public static partial class physx{
    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxFlags_PxMeshGeometryFlag_byte C_OP_Pipe(PxMeshGeometryFlag a,PxMeshGeometryFlag b);
    public static PxFlags_PxMeshGeometryFlag_byte Pipe(PxMeshGeometryFlag a,PxMeshGeometryFlag b){
        return C_OP_Pipe(a,b);    
    }


    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxFlags_PxMeshGeometryFlag_byte C_OP_Amp(PxMeshGeometryFlag a,PxMeshGeometryFlag b);
    public static PxFlags_PxMeshGeometryFlag_byte Amp(PxMeshGeometryFlag a,PxMeshGeometryFlag b){
        return C_OP_Amp(a,b);    
    }


    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxFlags_PxMeshGeometryFlag_byte C_OP_Tilde(PxMeshGeometryFlag a);
    public static PxFlags_PxMeshGeometryFlag_byte Tilde(PxMeshGeometryFlag a){
        return C_OP_Tilde(a);    
    }


}

public partial struct PxTriangleMeshGeometry : IPxGeometry { // ptr holder

    public PxGeometryType getType() {// base call
        return ((PxGeometry)this).getType();
    }
    

    private IntPtr nativePtr_;
    
    public static unsafe implicit operator PxGeometry(PxTriangleMeshGeometry obj) {// upcast
        return *(PxGeometry*)&obj;
    }
    
    public static unsafe explicit operator PxTriangleMeshGeometry(PxGeometry obj) {// downcast
        return *(PxTriangleMeshGeometry*)&obj;
    }
    
    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern PxTriangleMeshGeometry C_PxTriangleMeshGeometry_PxTriangleMeshGeometry(PxTriangleMesh mesh,PxMeshScale scaling,PxMeshGeometryFlags flags);
    public unsafe PxTriangleMeshGeometry(PxTriangleMesh mesh,PxMeshScale scaling,PxMeshGeometryFlags flags){
        var _new = C_PxTriangleMeshGeometry_PxTriangleMeshGeometry(mesh,scaling,flags);        
        fixed (void* ptr = &this)
          Buffer.MemoryCopy(&_new, ptr, Marshal.SizeOf(this), Marshal.SizeOf(this));    
    }

    [DllImport(PhysX.Lib, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
    static extern bool C_CONST_PxTriangleMeshGeometry_isValid(PxTriangleMeshGeometry cls);
    public bool isValid(){
        return C_CONST_PxTriangleMeshGeometry_isValid(this);    
    }


}
